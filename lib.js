/**
 * @date 2018-03-15T11:09:57.111Z
*/
(function (root) {
    'use strict';

    function getExports($wnd) {

        var $doc = $wnd.document;
        var $gwt = {};
        var navigator = {
            userAgent: 'webkit'
        };

        function noop(){}

        var __gwtModuleFunction = noop;
        __gwtModuleFunction.__moduleStartupDone = noop;
        var $sendStats = noop;
        var $moduleName, $moduleBase;

        // Start GWT code 

var $intern_0 = 2147483647, $intern_1 = {3:1, 18:1}, $intern_2 = {3:1, 9:1, 20:1, 18:1}, $intern_3 = {3:1, 6:1, 4:1, 5:1, 346:1}, $intern_4 = {3:1, 4:1}, $intern_5 = 65535, $intern_6 = {3:1, 6:1, 11:1, 4:1, 8:1, 5:1, 10:1}, $intern_7 = {3:1, 6:1, 4:1, 8:1, 5:1}, $intern_8 = 10000, $intern_9 = 4194303, $intern_10 = 1048575, $intern_11 = 524288, $intern_12 = 4194304, $intern_13 = 17592186044416, $intern_14 = -9223372036854775808, $intern_15 = {3:1, 4:1, 5:1}, $intern_16 = 1000000000, $intern_17 = {277:1, 3:1, 4:1, 5:1}, $intern_18 = {30:1}, $intern_19 = {75:1, 3:1, 4:1, 5:1}, $intern_20 = {46:1, 3:1, 9:1, 18:1}, $intern_21 = {3:1}, $intern_22 = {35:1}, $intern_23 = {3:1, 9:1, 39:1, 20:1, 18:1}, $intern_24 = {3:1, 6:1, 4:1, 5:1}, $intern_25 = {281:1, 3:1, 6:1, 4:1, 5:1}, $intern_26 = {49:1, 3:1, 6:1, 4:1, 5:1}, $intern_27 = {35:1, 123:1}, $intern_28 = {181:1, 3:1, 4:1}, $intern_29 = {287:1, 3:1, 6:1, 4:1, 5:1}, $intern_30 = {66:1, 128:1, 3:1}, $intern_31 = 99999999, $intern_32 = 100000000, $intern_33 = {3:1, 9:1, 82:1, 20:1, 18:1}, $intern_34 = -2147483648, $intern_35 = 0.3010299956639812, $intern_36 = 4294967296, $intern_37 = 1073741824, $intern_38 = {24:1}, $intern_39 = {84:1}, $intern_40 = {3:1, 4:1, 13:1, 33:1}, $intern_41 = {3:1, 50:1, 77:1, 97:1};
var _, initFnList_0, prototypesByTypeId_0 = {}, permutationId = -1;
function typeMarkerFn(){
}

function portableObjCreate(obj){
  function F(){
  }

  ;
  F.prototype = obj || {};
  return new F;
}

function modernizeBrowser(){
  !Array.isArray && (Array.isArray = function(vArg){
    return Object.prototype.toString.call(vArg) === '[object Array]';
  }
  );
}

function maybeGetClassLiteralFromPlaceHolder_0(entry){
  return entry instanceof Array?entry[0]:null;
}

function emptyMethod(){
}

function defineClass(typeId, superTypeId, castableTypeMap){
  var prototypesByTypeId = prototypesByTypeId_0;
  var createSubclassPrototype = createSubclassPrototype_0;
  var maybeGetClassLiteralFromPlaceHolder = maybeGetClassLiteralFromPlaceHolder_0;
  var prototype_0 = prototypesByTypeId[typeId];
  var clazz = maybeGetClassLiteralFromPlaceHolder(prototype_0);
  if (prototype_0 && !clazz) {
    _ = prototype_0;
  }
   else {
    _ = prototypesByTypeId[typeId] = !superTypeId?{}:createSubclassPrototype(superTypeId);
    _.castableTypeMap$ = castableTypeMap;
    _.constructor = _;
    !superTypeId && (_.typeMarker$ = typeMarkerFn);
  }
  for (var i_0 = 3; i_0 < arguments.length; ++i_0) {
    arguments[i_0].prototype = _;
  }
  clazz && (_.___clazz$ = clazz);
}

function createSubclassPrototype_0(superTypeId){
  var prototypesByTypeId = prototypesByTypeId_0;
  return portableObjCreate(prototypesByTypeId[superTypeId]);
}

function setGwtProperty(propertyName, propertyValue){
  typeof window === 'object' && typeof window['$gwt'] === 'object' && (window['$gwt'][propertyName] = propertyValue);
}

function registerEntry(){
  return entry_0;
}

function gwtOnLoad_0(errFn, modName, modBase, softPermutationId){
  ensureModuleInit();
  var initFnList = initFnList_0;
  $moduleName = modName;
  $moduleBase = modBase;
  permutationId = softPermutationId;
  function initializeModules(){
    for (var i_0 = 0; i_0 < initFnList.length; i_0++) {
      initFnList[i_0]();
    }
  }

  if (errFn) {
    try {
      $entry(initializeModules)();
    }
     catch (e) {
      errFn(modName, e);
    }
  }
   else {
    $entry(initializeModules)();
  }
}

function ensureModuleInit(){
  initFnList_0 == null && (initFnList_0 = []);
}

function addInitFunctions(){
  ensureModuleInit();
  var initFnList = initFnList_0;
  for (var i_0 = 0; i_0 < arguments.length; i_0++) {
    initFnList.push(arguments[i_0]);
  }
}

function $toString(this$static){
  return $getName_1(getClass__Ljava_lang_Class___devirtual$(this$static)) + '@' + toUnsignedRadixString(hashCode__I__devirtual$(this$static), 16);
}

function Object_0(){
}

function equals_Ljava_lang_Object__Z__devirtual$(this$static, other){
  return isJavaString(this$static)?$equals_7(this$static, other):hasJavaObjectVirtualDispatch(this$static)?this$static.equals$(other):isJavaArray(this$static)?this$static === other:this$static === other;
}

function getClass__Ljava_lang_Class___devirtual$(this$static){
  return isJavaString(this$static)?Ljava_lang_String_2_classLit:hasJavaObjectVirtualDispatch(this$static)?this$static.___clazz$:isJavaArray(this$static)?this$static.___clazz$:Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}

function hashCode__I__devirtual$(this$static){
  return isJavaString(this$static)?getHashCode_0(this$static):hasJavaObjectVirtualDispatch(this$static)?this$static.hashCode$():isJavaArray(this$static)?getHashCode(this$static):getHashCode(this$static);
}

function toString__Ljava_lang_String___devirtual$(this$static){
  return isJavaString(this$static)?this$static:hasJavaObjectVirtualDispatch(this$static)?this$static.toString$():isJavaArray(this$static)?$toString(this$static):this$static.toString?this$static.toString():'[JavaScriptObject]';
}

defineClass(1, null, {}, Object_0);
_.equals$ = function equals(other){
  return this === other;
}
;
_.getClass$ = function getClass_0(){
  return this.___clazz$;
}
;
_.hashCode$ = function hashCode_0(){
  return getHashCode(this);
}
;
_.toString$ = function toString_0(){
  return $toString(this);
}
;
_.toString = function(){
  return this.toString$();
}
;
stringCastMap = {3:1, 614:1, 50:1, 2:1};
modernizeBrowser();
function canCast(src_0, dstId){
  return isJavaString(src_0) && !!stringCastMap[dstId] || src_0.castableTypeMap$ && !!src_0.castableTypeMap$[dstId];
}

function charToString(x_0){
  return String.fromCharCode(x_0);
}

function dynamicCast(src_0, dstId){
  if (src_0 != null && !canCast(src_0, dstId)) {
    throw new ClassCastException;
  }
  return src_0;
}

function dynamicCastJso(src_0){
  if (src_0 != null && !(!isJavaString(src_0) && !hasTypeMarker(src_0))) {
    throw new ClassCastException;
  }
  return src_0;
}

function dynamicCastToString(src_0){
  if (src_0 != null && !isJavaString(src_0)) {
    throw new ClassCastException;
  }
  return src_0;
}

function hasJavaObjectVirtualDispatch(src_0){
  return !instanceofArray(src_0) && hasTypeMarker(src_0);
}

function instanceOf(src_0, dstId){
  return src_0 != null && canCast(src_0, dstId);
}

function instanceOfJso(src_0){
  return src_0 != null && !isJavaString(src_0) && !hasTypeMarker(src_0);
}

function instanceofArray(src_0){
  return Array.isArray(src_0);
}

function isJavaArray(src_0){
  return instanceofArray(src_0) && hasTypeMarker(src_0);
}

function isJavaString(src_0){
  return typeof src_0 === 'string';
}

function maskUndefined(src_0){
  return src_0 == null?null:src_0;
}

function round_int(x_0){
  return ~~Math.max(Math.min(x_0, $intern_0), -2147483648);
}

function throwClassCastExceptionUnlessNull(o){
  if (o != null) {
    throw new ClassCastException;
  }
  return null;
}

var stringCastMap;
function $ensureNamesAreInitialized(this$static){
  if (this$static.typeName != null) {
    return;
  }
  initializeNames(this$static);
}

function $getName_1(this$static){
  $ensureNamesAreInitialized(this$static);
  return this$static.typeName;
}

function Class(){
  ++nextSequentialId;
  this.typeName = null;
  this.simpleName = null;
  this.packageName = null;
  this.compoundName = null;
  this.canonicalName = null;
  this.typeId = null;
  this.arrayLiterals = null;
}

function createClassObject(packageName, compoundClassName){
  var clazz;
  clazz = new Class;
  clazz.packageName = packageName;
  clazz.compoundName = compoundClassName;
  return clazz;
}

function createForClass(packageName, compoundClassName, typeId, superclass){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  maybeSetClassLiteral(typeId, clazz);
  clazz.superclass = superclass;
  return clazz;
}

function createForEnum(packageName, compoundClassName, typeId, superclass, enumConstantsFunc){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  maybeSetClassLiteral(typeId, clazz);
  clazz.modifiers = enumConstantsFunc?8:0;
  clazz.superclass = superclass;
  return clazz;
}

function createForInterface(packageName, compoundClassName){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  clazz.modifiers = 2;
  return clazz;
}

function createForPrimitive(className, primitiveTypeId){
  var clazz;
  clazz = createClassObject('', className);
  clazz.typeId = primitiveTypeId;
  clazz.modifiers = 1;
  return clazz;
}

function getClassLiteralForArray_0(leafClass, dimensions){
  var arrayLiterals = leafClass.arrayLiterals = leafClass.arrayLiterals || [];
  return arrayLiterals[dimensions] || (arrayLiterals[dimensions] = leafClass.createClassLiteralForArray(dimensions));
}

function getPrototypeForClass(clazz){
  if (clazz.isPrimitive()) {
    return null;
  }
  var typeId = clazz.typeId;
  var prototype_0 = prototypesByTypeId_0[typeId];
  return prototype_0;
}

function initializeNames(clazz){
  if (clazz.isArray_0()) {
    var componentType = clazz.componentType;
    componentType.isPrimitive()?(clazz.typeName = '[' + componentType.typeId):!componentType.isArray_0()?(clazz.typeName = '[L' + componentType.getName_0() + ';'):(clazz.typeName = '[' + componentType.getName_0());
    clazz.canonicalName = componentType.getCanonicalName() + '[]';
    clazz.simpleName = componentType.getSimpleName() + '[]';
    return;
  }
  var packageName = clazz.packageName;
  var compoundName = clazz.compoundName;
  compoundName = compoundName.split('/');
  clazz.typeName = join_0('.', [packageName, join_0('$', compoundName)]);
  clazz.canonicalName = join_0('.', [packageName, join_0('.', compoundName)]);
  clazz.simpleName = compoundName[compoundName.length - 1];
}

function join_0(separator, strings){
  var i_0 = 0;
  while (!strings[i_0] || strings[i_0] == '') {
    i_0++;
  }
  var result = strings[i_0++];
  for (; i_0 < strings.length; i_0++) {
    if (!strings[i_0] || strings[i_0] == '') {
      continue;
    }
    result += separator + strings[i_0];
  }
  return result;
}

function maybeSetClassLiteral(typeId, clazz){
  var proto;
  if (!typeId) {
    return;
  }
  clazz.typeId = typeId;
  var prototype_0 = getPrototypeForClass(clazz);
  if (!prototype_0) {
    prototypesByTypeId_0[typeId] = [clazz];
    return;
  }
  prototype_0.___clazz$ = clazz;
}

defineClass(162, 1, {162:1}, Class);
_.createClassLiteralForArray = function createClassLiteralForArray(dimensions){
  var clazz;
  clazz = new Class;
  clazz.modifiers = 4;
  clazz.superclass = Ljava_lang_Object_2_classLit;
  dimensions > 1?(clazz.componentType = getClassLiteralForArray_0(this, dimensions - 1)):(clazz.componentType = this);
  return clazz;
}
;
_.getCanonicalName = function getCanonicalName(){
  $ensureNamesAreInitialized(this);
  return this.canonicalName;
}
;
_.getName_0 = function getName_11(){
  return $getName_1(this);
}
;
_.getSimpleName = function getSimpleName(){
  $ensureNamesAreInitialized(this);
  return this.simpleName;
}
;
_.isArray_0 = function isArray(){
  return (this.modifiers & 4) != 0;
}
;
_.isPrimitive = function isPrimitive_0(){
  return (this.modifiers & 1) != 0;
}
;
_.toString$ = function toString_27(){
  return ((this.modifiers & 2) != 0?'interface ':(this.modifiers & 1) != 0?'':'class ') + ($ensureNamesAreInitialized(this) , this.typeName);
}
;
_.modifiers = 0;
var nextSequentialId = 1;
var Ljava_lang_Object_2_classLit = createForClass('java.lang', 'Object', 1, null), Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptObject$', 0, Ljava_lang_Object_2_classLit), Ljava_lang_Class_2_classLit = createForClass('java.lang', 'Class', 162, Ljava_lang_Object_2_classLit);
function $fillInStackTrace(this$static){
  this$static.stackTrace = null;
  captureStackTrace(this$static, this$static.detailMessage);
  return this$static;
}

function $printStackTrace(this$static){
  var element$array, element$index, element$max, t, stackTrace;
  for (t = this$static; t; t = t.getCause()) {
    for (element$array = (t.stackTrace == null && (t.stackTrace = ($clinit_StackTraceCreator() , stackTrace = collector.getStackTrace(t) , dropInternalFrames(stackTrace))) , t.stackTrace) , element$index = 0 , element$max = element$array.length; element$index < element$max; ++element$index)
    ;
  }
}

defineClass(18, 1, $intern_1);
_.getCause = function getCause(){
  return this.cause;
}
;
_.getLocalizedMessage = function getLocalizedMessage(){
  return this.getMessage_0();
}
;
_.getMessage_0 = function getMessage(){
  return this.detailMessage;
}
;
_.printStackTrace = function printStackTrace(){
  $printStackTrace(this);
}
;
_.toString$ = function toString_1(){
  var className, msg;
  return className = $getName_1(this.___clazz$) , msg = this.getMessage_0() , msg != null?className + ': ' + msg:className;
}
;
var Ljava_lang_Throwable_2_classLit = createForClass('java.lang', 'Throwable', 18, Ljava_lang_Object_2_classLit);
function Exception(){
  $fillInStackTrace(this);
}

defineClass(9, 18, {3:1, 9:1, 18:1});
var Ljava_lang_Exception_2_classLit = createForClass('java.lang', 'Exception', 9, Ljava_lang_Throwable_2_classLit);
function RuntimeException(){
  Exception.call(this);
}

function RuntimeException_0(message){
  this.detailMessage = message;
  $fillInStackTrace(this);
}

defineClass(20, 9, $intern_2, RuntimeException_0);
var Ljava_lang_RuntimeException_2_classLit = createForClass('java.lang', 'RuntimeException', 20, Ljava_lang_Exception_2_classLit);
defineClass(364, 20, $intern_2);
var Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit = createForClass('com.google.gwt.core.client.impl', 'JavaScriptExceptionBase', 364, Ljava_lang_RuntimeException_2_classLit);
function $clinit_JavaScriptException(){
  $clinit_JavaScriptException = emptyMethod;
  NOT_SET = new Object_0;
}

function $ensureInit(this$static){
  var exception;
  if (this$static.message_0 == null) {
    exception = maskUndefined(this$static.e) === maskUndefined(NOT_SET)?null:this$static.e;
    this$static.name_0 = exception == null?'null':instanceOfJso(exception)?getExceptionName0(dynamicCastJso(exception)):isJavaString(exception)?'String':$getName_1(getClass__Ljava_lang_Class___devirtual$(exception));
    this$static.description = this$static.description + ': ' + (instanceOfJso(exception)?getExceptionDescription0(dynamicCastJso(exception)):exception + '');
    this$static.message_0 = '(' + this$static.name_0 + ') ' + this$static.description;
  }
}

function JavaScriptException(e){
  $clinit_JavaScriptException();
  this.cause = null;
  this.detailMessage = null;
  this.description = '';
  this.e = e;
  this.description = '';
}

function getExceptionDescription0(e){
  return e == null?null:e.message;
}

function getExceptionName0(e){
  return e == null?null:e.name;
}

defineClass(117, 364, {117:1, 3:1, 9:1, 20:1, 18:1}, JavaScriptException);
_.getMessage_0 = function getMessage_0(){
  $ensureInit(this);
  return this.message_0;
}
;
_.getThrown = function getThrown(){
  return maskUndefined(this.e) === maskUndefined(NOT_SET)?null:this.e;
}
;
var NOT_SET;
var Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptException', 117, Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit);
function $setDate(this$static, dayOfMonth){
  this$static.setDate(dayOfMonth);
  return this$static.getTime();
}

function $setFullYear(this$static, year){
  this$static.setFullYear(year);
  return this$static.getTime();
}

function $setHours(this$static, hours){
  this$static.setHours(hours);
  return this$static.getTime();
}

function $setMinutes(this$static, minutes){
  this$static.setMinutes(minutes);
  return this$static.getTime();
}

function $setMonth(this$static, month){
  this$static.setMonth(month);
  return this$static.getTime();
}

function $setSeconds(this$static, seconds){
  this$static.setSeconds(seconds);
  return this$static.getTime();
}

function $setTime(this$static, milliseconds){
  this$static.setTime(milliseconds);
  return this$static.getTime();
}

function create(milliseconds){
  return new Date(milliseconds);
}

function create_0(year, month, dayOfMonth, hours, minutes, seconds, millis){
  return new Date(year, month, dayOfMonth, hours, minutes, seconds, millis);
}

function now_1(){
  if (Date.now) {
    return Date.now();
  }
  return (new Date).getTime();
}

defineClass(644, 1, {});
var Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('com.google.gwt.core.client', 'Scheduler', 644, Ljava_lang_Object_2_classLit);
function apply_0(jsFunction, thisObj, args){
  return jsFunction.apply(thisObj, args);
  var __0;
}

function enter(){
  var now_0;
  if (entryDepth != 0) {
    now_0 = now_1();
    if (now_0 - watchdogEntryDepthLastScheduled > 2000) {
      watchdogEntryDepthLastScheduled = now_0;
      watchdogEntryDepthTimerId = $wnd.setTimeout(watchdogEntryDepthRun, 10);
    }
  }
  if (entryDepth++ == 0) {
    $flushEntryCommands(($clinit_SchedulerImpl() , INSTANCE));
    return true;
  }
  return false;
}

function entry_0(jsFunction){
  return function(){
    return entry0(jsFunction, this, arguments);
    var __0;
  }
  ;
}

function entry0(jsFunction, thisObj, args){
  var initialEntry;
  initialEntry = enter();
  try {
    return apply_0(jsFunction, thisObj, args);
  }
   finally {
    exit(initialEntry);
  }
}

function exit(initialEntry){
  initialEntry && $flushFinallyCommands(($clinit_SchedulerImpl() , INSTANCE));
  --entryDepth;
  if (initialEntry) {
    if (watchdogEntryDepthTimerId != -1) {
      watchdogEntryDepthCancel(watchdogEntryDepthTimerId);
      watchdogEntryDepthTimerId = -1;
    }
  }
}

function getHashCode(o){
  return o.$H || (o.$H = ++sNextHashId);
}

function reportToBrowser(e){
  $wnd.setTimeout(function(){
    throw e;
  }
  , 0);
}

function watchdogEntryDepthCancel(timerId){
  $wnd.clearTimeout(timerId);
}

function watchdogEntryDepthRun(){
  entryDepth != 0 && (entryDepth = 0);
  watchdogEntryDepthTimerId = -1;
}

var entryDepth = 0, sNextHashId = 0, watchdogEntryDepthLastScheduled = 0, watchdogEntryDepthTimerId = -1;
function $clinit_SchedulerImpl(){
  $clinit_SchedulerImpl = emptyMethod;
  INSTANCE = new SchedulerImpl;
}

function $flushEntryCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.entryCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.entryCommands;
      this$static.entryCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.entryCommands);
    this$static.entryCommands = rescheduled;
  }
}

function $flushFinallyCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.finallyCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.finallyCommands;
      this$static.finallyCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.finallyCommands);
    this$static.finallyCommands = rescheduled;
  }
}

function SchedulerImpl(){
}

function push_0(queue, task){
  !queue && (queue = []);
  queue[queue.length] = task;
  return queue;
}

function runScheduledTasks(tasks, rescheduled){
  var e, i_0, j, t;
  for (i_0 = 0 , j = tasks.length; i_0 < j; i_0++) {
    t = tasks[i_0];
    try {
      t[1]?t[0].nullMethod() && (rescheduled = push_0(rescheduled, t)):t[0].nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 18)) {
        e = $e0;
        reportToBrowser(instanceOf(e, 117)?dynamicCast(e, 117).getThrown():e);
      }
       else 
        throw unwrap($e0);
    }
  }
  return rescheduled;
}

defineClass(387, 644, {}, SchedulerImpl);
var INSTANCE;
var Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl', 387, Lcom_google_gwt_core_client_Scheduler_2_classLit);
function $clinit_StackTraceCreator(){
  $clinit_StackTraceCreator = emptyMethod;
  var c, enforceLegacy;
  enforceLegacy = !(!!Error.stackTraceLimit || 'stack' in new Error);
  c = new StackTraceCreator$CollectorModernNoSourceMap;
  collector = enforceLegacy?new StackTraceCreator$CollectorLegacy:c;
}

function captureStackTrace(throwable, reference){
  $clinit_StackTraceCreator();
  collector.collect(throwable, reference);
}

function dropInternalFrames(stackTrace){
  var dropFrameUntilFnName, i_0, numberOfFrameToSearch;
  dropFrameUntilFnName = 'captureStackTrace';
  numberOfFrameToSearch = min_0(stackTrace.length);
  for (i_0 = 0; i_0 < numberOfFrameToSearch; i_0++) {
    if ($equals_7(stackTrace[i_0].methodName, dropFrameUntilFnName)) {
      return dynamicCast((stackTrace.length >= i_0 + 1 && stackTrace.splice(0, i_0 + 1) , stackTrace), 346);
    }
  }
  return stackTrace;
}

function extractFunctionName(fnName){
  var fnRE = /function(?:\s+([\w$]+))?\s*\(/;
  var match_0 = fnRE.exec(fnName);
  return match_0 && match_0[1] || 'anonymous';
}

function parseInt_0(number){
  $clinit_StackTraceCreator();
  return parseInt(number) || -1;
}

var collector;
defineClass(655, 1, {});
var Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/Collector', 655, Ljava_lang_Object_2_classLit);
function StackTraceCreator$CollectorLegacy(){
}

defineClass(365, 655, {}, StackTraceCreator$CollectorLegacy);
_.collect = function collect(t, thrownIgnored){
  var seen = {}, name_1;
  t.fnStack = [];
  var callee = arguments.callee.caller;
  while (callee) {
    var name_0 = ($clinit_StackTraceCreator() , callee.name || (callee.name = extractFunctionName(callee.toString())));
    t.fnStack.push(name_0);
    var keyName = ':' + name_0;
    var withThisName = seen[keyName];
    if (withThisName) {
      var i_0, j;
      for (i_0 = 0 , j = withThisName.length; i_0 < j; i_0++) {
        if (withThisName[i_0] === callee) {
          return;
        }
      }
    }
    (withThisName || (seen[keyName] = [])).push(callee);
    callee = callee.caller;
  }
}
;
_.getStackTrace = function getStackTrace(t){
  var i_0, length_0, stack_0, stackTrace;
  stack_0 = ($clinit_StackTraceCreator() , t && t.fnStack && t.fnStack instanceof Array?t.fnStack:[]);
  length_0 = stack_0.length;
  stackTrace = initDim(Ljava_lang_StackTraceElement_2_classLit, $intern_3, 102, length_0, 0, 1);
  for (i_0 = 0; i_0 < length_0; i_0++) {
    stackTrace[i_0] = new StackTraceElement(stack_0[i_0], null, -1);
  }
  return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorLegacy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorLegacy', 365, Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
function $clinit_StackTraceCreator$CollectorModern(){
  $clinit_StackTraceCreator$CollectorModern = emptyMethod;
  Error.stackTraceLimit = 64;
}

function $parse(this$static, stString){
  var closeParen, col, endFileUrlIndex, fileName, index_0, lastColonIndex, line, location_0, toReturn;
  if (!stString.length) {
    return this$static.createSte('Unknown', 'anonymous', -1, -1);
  }
  toReturn = $trim(stString);
  $equals_7(toReturn.substr(0, 3), 'at ') && (toReturn = __substr(toReturn, 3, toReturn.length - 3));
  toReturn = toReturn.replace(/\[.*?\]/g, '');
  index_0 = toReturn.indexOf('(');
  if (index_0 == -1) {
    index_0 = toReturn.indexOf('@');
    if (index_0 == -1) {
      location_0 = toReturn;
      toReturn = '';
    }
     else {
      location_0 = $trim(__substr(toReturn, index_0 + 1, toReturn.length - (index_0 + 1)));
      toReturn = $trim(toReturn.substr(0, index_0));
    }
  }
   else {
    closeParen = toReturn.indexOf(')', index_0);
    location_0 = toReturn.substr(index_0 + 1, closeParen - (index_0 + 1));
    toReturn = $trim(toReturn.substr(0, index_0));
  }
  index_0 = $indexOf(toReturn, fromCodePoint(46));
  index_0 != -1 && (toReturn = __substr(toReturn, index_0 + 1, toReturn.length - (index_0 + 1)));
  (!toReturn.length || $equals_7(toReturn, 'Anonymous function')) && (toReturn = 'anonymous');
  lastColonIndex = $lastIndexOf(location_0, fromCodePoint(58));
  endFileUrlIndex = $lastIndexOf_0(location_0, fromCodePoint(58), lastColonIndex - 1);
  line = -1;
  col = -1;
  fileName = 'Unknown';
  if (lastColonIndex != -1 && endFileUrlIndex != -1) {
    fileName = location_0.substr(0, endFileUrlIndex);
    line = parseInt_0(location_0.substr(endFileUrlIndex + 1, lastColonIndex - (endFileUrlIndex + 1)));
    col = parseInt_0(__substr(location_0, lastColonIndex + 1, location_0.length - (lastColonIndex + 1)));
  }
  return this$static.createSte(fileName, toReturn, line, col);
}

defineClass(656, 655, {});
_.collect = function collect_0(t, jsThrown){
  function fixIE(e){
    if (!('stack' in e)) {
      try {
        throw e;
      }
       catch (ignored) {
      }
    }
    return e;
  }

  var backingJsError;
  typeof jsThrown == 'string'?(backingJsError = fixIE(new Error(jsThrown))):jsThrown instanceof Object && 'stack' in jsThrown?(backingJsError = jsThrown):(backingJsError = fixIE(new Error));
  t.__gwt$backingJsError = backingJsError;
}
;
_.createSte = function createSte(fileName, method, line, col){
  return new StackTraceElement(method, fileName + '@' + col, line < 0?-1:line);
}
;
_.getStackTrace = function getStackTrace_0(t){
  var addIndex, i_0, length_0, stack_0, stackTrace, ste, e;
  stack_0 = ($clinit_StackTraceCreator() , e = t.__gwt$backingJsError , e && e.stack?e.stack.split('\n'):[]);
  stackTrace = initDim(Ljava_lang_StackTraceElement_2_classLit, $intern_3, 102, 0, 0, 1);
  addIndex = 0;
  length_0 = stack_0.length;
  if (length_0 == 0) {
    return stackTrace;
  }
  ste = $parse(this, stack_0[0]);
  $equals_7(ste.methodName, 'anonymous') || (stackTrace[addIndex++] = ste);
  for (i_0 = 1; i_0 < length_0; i_0++) {
    stackTrace[addIndex++] = $parse(this, stack_0[i_0]);
  }
  return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModern', 656, Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
function StackTraceCreator$CollectorModernNoSourceMap(){
  $clinit_StackTraceCreator$CollectorModern();
}

defineClass(366, 656, {}, StackTraceCreator$CollectorModernNoSourceMap);
_.createSte = function createSte_0(fileName, method, line, col){
  return new StackTraceElement(method, fileName, -1);
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModernNoSourceMap_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModernNoSourceMap', 366, Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit);
function checkArrayType(expression, errorMessage){
  if (!expression) {
    throw new ArrayStoreException_0('' + errorMessage);
  }
}

function checkCriticalArgument(expression, errorMessage){
  if (!expression) {
    throw new IllegalArgumentException_0('' + errorMessage);
  }
}

function checkCriticalElement(expression){
  if (!expression) {
    throw new NoSuchElementException;
  }
}

function checkCriticalPositionIndexes(start_0, end, size_0){
  if (start_0 < 0) {
    throw new IndexOutOfBoundsException_0('fromIndex: ' + start_0 + ' < 0');
  }
  if (end > size_0) {
    throw new IndexOutOfBoundsException_0('toIndex: ' + end + ' > size ' + size_0);
  }
  if (start_0 > end) {
    throw new IllegalArgumentException_0('fromIndex: ' + start_0 + ' > toIndex: ' + end);
  }
}

function checkElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw new IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0);
  }
}

function checkNotNull(reference){
  if (reference == null) {
    throw new NullPointerException;
  }
  return reference;
}

function checkNotNull_0(reference, errorMessage){
  if (reference == null) {
    throw new NullPointerException_0('' + errorMessage);
  }
}

function checkPositionIndex(index_0, size_0){
  if (index_0 < 0 || index_0 > size_0) {
    throw new IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0);
  }
}

function checkState(expression){
  if (!expression) {
    throw new IllegalStateException;
  }
}

function $getDefaultNative(){
  return ['USD', 'US$', 2, 'US$', '$'];
}

function $clinit_DateTimeFormat(){
  $clinit_DateTimeFormat = emptyMethod;
  new HashMap;
}

function $addPart(this$static, buf, count){
  var oldLength;
  if (buf.string.length > 0) {
    $add_3(this$static.patternParts, new DateTimeFormat$PatternPart(buf.string, count));
    oldLength = buf.string.length;
    0 < oldLength?(buf.string = $substring_0(buf.string, 0, 0)):0 > oldLength && (buf.string += valueOf_1(initDim(C_classLit, $intern_4, 0, -oldLength, 7, 1)));
  }
}

function $format(this$static, date, timeZone){
  var ch_0, diff, i_0, j, keepDate, keepTime, n, toAppendTo, trailQuote;
  !timeZone && (timeZone = createTimeZone(date.jsdate.getTimezoneOffset()));
  diff = (date.jsdate.getTimezoneOffset() - timeZone.standardOffset) * 60000;
  keepDate = new Date_1(add_0(fromDouble(date.jsdate.getTime()), fromInt(diff)));
  keepTime = keepDate;
  if (keepDate.jsdate.getTimezoneOffset() != date.jsdate.getTimezoneOffset()) {
    diff > 0?(diff -= 86400000):(diff += 86400000);
    keepTime = new Date_1(add_0(fromDouble(date.jsdate.getTime()), fromInt(diff)));
  }
  toAppendTo = new StringBuilder_0;
  n = this$static.pattern.length;
  for (i_0 = 0; i_0 < n;) {
    ch_0 = $charAt_0(this$static.pattern, i_0);
    if (ch_0 >= 97 && ch_0 <= 122 || ch_0 >= 65 && ch_0 <= 90) {
      for (j = i_0 + 1; j < n && $charAt_0(this$static.pattern, j) == ch_0; ++j)
      ;
      $subFormat(toAppendTo, ch_0, j - i_0, keepDate, keepTime, timeZone);
      i_0 = j;
    }
     else if (ch_0 == 39) {
      ++i_0;
      if (i_0 < n && $charAt_0(this$static.pattern, i_0) == 39) {
        toAppendTo.string += "'";
        ++i_0;
        continue;
      }
      trailQuote = false;
      while (!trailQuote) {
        j = i_0;
        while (j < n && $charAt_0(this$static.pattern, j) != 39) {
          ++j;
        }
        if (j >= n) {
          throw new IllegalArgumentException_0("Missing trailing '");
        }
        j + 1 < n && $charAt_0(this$static.pattern, j + 1) == 39?++j:(trailQuote = true);
        $append_4(toAppendTo, $substring_0(this$static.pattern, i_0, j));
        i_0 = j + 1;
      }
    }
     else {
      toAppendTo.string += charToString(ch_0);
      ++i_0;
    }
  }
  return toAppendTo.string;
}

function $formatFractionalSeconds(buf, count, date){
  var time, value_0;
  time = fromDouble(date.jsdate.getTime());
  if (lt(time, {l:0, m:0, h:0})) {
    value_0 = 1000 - toInt(mod(neg(time), {l:1000, m:0, h:0}));
    value_0 == 1000 && (value_0 = 0);
  }
   else {
    value_0 = toInt(mod(time, {l:1000, m:0, h:0}));
  }
  if (count == 1) {
    value_0 = ~~((value_0 + 50) / 100) < 9?~~((value_0 + 50) / 100):9;
    $append_3(buf, 48 + value_0 & $intern_5);
  }
   else if (count == 2) {
    value_0 = ~~((value_0 + 5) / 10) < 99?~~((value_0 + 5) / 10):99;
    $zeroPaddingNumber(buf, value_0, 2);
  }
   else {
    $zeroPaddingNumber(buf, value_0, 3);
    count > 3 && $zeroPaddingNumber(buf, 0, count - 3);
  }
}

function $formatMonth(buf, count, date){
  var value_0;
  value_0 = date.jsdate.getMonth();
  switch (count) {
    case 5:
      $append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])[value_0]);
      break;
    case 4:
      $append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])[value_0]);
      break;
    case 3:
      $append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])[value_0]);
      break;
    default:$zeroPaddingNumber(buf, value_0 + 1, count);
  }
}

function $formatYear(buf, count, date){
  var value_0;
  value_0 = date.jsdate.getFullYear() - 1900 + 1900;
  value_0 < 0 && (value_0 = -value_0);
  switch (count) {
    case 1:
      buf.string += value_0;
      break;
    case 2:
      $zeroPaddingNumber(buf, value_0 % 100, 2);
      break;
    default:$zeroPaddingNumber(buf, value_0, count);
  }
}

function $getNextCharCountInPattern(pattern, start_0){
  var ch_0, next;
  ch_0 = pattern.charCodeAt(start_0);
  next = start_0 + 1;
  while (next < pattern.length && pattern.charCodeAt(next) == ch_0) {
    ++next;
  }
  return next - start_0;
}

function $identifyAbutStart(this$static){
  var abut, i_0, len;
  abut = false;
  len = this$static.patternParts.array.length;
  for (i_0 = 0; i_0 < len; i_0++) {
    if ($isNumeric(dynamicCast($get_13(this$static.patternParts, i_0), 176))) {
      if (!abut && i_0 + 1 < len && $isNumeric(dynamicCast($get_13(this$static.patternParts, i_0 + 1), 176))) {
        abut = true;
        dynamicCast($get_13(this$static.patternParts, i_0), 176).abutStart = true;
      }
    }
     else {
      abut = false;
    }
  }
}

function $isNumeric(part){
  var i_0;
  if (part.count <= 0) {
    return false;
  }
  i_0 = $indexOf('MLydhHmsSDkK', fromCodePoint(part.text_0.charCodeAt(0)));
  return i_0 > 1 || i_0 >= 0 && part.count < 3;
}

function $parsePattern(this$static, pattern){
  var buf, ch_0, count, i_0, inQuote;
  buf = new StringBuilder_0;
  inQuote = false;
  for (i_0 = 0; i_0 < pattern.length; i_0++) {
    ch_0 = pattern.charCodeAt(i_0);
    if (ch_0 == 32) {
      $addPart(this$static, buf, 0);
      buf.string += ' ';
      $addPart(this$static, buf, 0);
      while (i_0 + 1 < pattern.length && pattern.charCodeAt(i_0 + 1) == 32) {
        ++i_0;
      }
      continue;
    }
    if (inQuote) {
      if (ch_0 == 39) {
        if (i_0 + 1 < pattern.length && pattern.charCodeAt(i_0 + 1) == 39) {
          buf.string += "'";
          ++i_0;
        }
         else {
          inQuote = false;
        }
      }
       else {
        buf.string += charToString(ch_0);
      }
      continue;
    }
    if ($indexOf('GyMLdkHmsSEcDahKzZv', fromCodePoint(ch_0)) > 0) {
      $addPart(this$static, buf, 0);
      buf.string += charToString(ch_0);
      count = $getNextCharCountInPattern(pattern, i_0);
      $addPart(this$static, buf, count);
      i_0 += count - 1;
      continue;
    }
    if (ch_0 == 39) {
      if (i_0 + 1 < pattern.length && pattern.charCodeAt(i_0 + 1) == 39) {
        buf.string += "'";
        ++i_0;
      }
       else {
        inQuote = true;
      }
    }
     else {
      buf.string += charToString(ch_0);
    }
  }
  $addPart(this$static, buf, 0);
  $identifyAbutStart(this$static);
}

function $subFormat(buf, ch_0, count, adjustedDate, adjustedTime, timezone){
  var value_0, value_1, value_2, value_3, value_4, value_5, value_6, value_7, value_8, value_9, value_10, value_11;
  switch (ch_0) {
    case 71:
      value_0 = adjustedDate.jsdate.getFullYear() - 1900 >= -1900?1:0;
      count >= 4?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Before Christ', 'Anno Domini'])[value_0]):$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['BC', 'AD'])[value_0]);
      break;
    case 121:
      $formatYear(buf, count, adjustedDate);
      break;
    case 77:
      $formatMonth(buf, count, adjustedDate);
      break;
    case 107:
      value_1 = adjustedTime.jsdate.getHours();
      value_1 == 0?$zeroPaddingNumber(buf, 24, count):$zeroPaddingNumber(buf, value_1, count);
      break;
    case 83:
      $formatFractionalSeconds(buf, count, adjustedTime);
      break;
    case 69:
      value_2 = adjustedDate.jsdate.getDay();
      count == 5?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['S', 'M', 'T', 'W', 'T', 'F', 'S'])[value_2]):count == 4?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])[value_2]):$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'])[value_2]);
      break;
    case 97:
      adjustedTime.jsdate.getHours() >= 12 && adjustedTime.jsdate.getHours() < 24?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['AM', 'PM'])[1]):$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['AM', 'PM'])[0]);
      break;
    case 104:
      value_3 = adjustedTime.jsdate.getHours() % 12;
      value_3 == 0?$zeroPaddingNumber(buf, 12, count):$zeroPaddingNumber(buf, value_3, count);
      break;
    case 75:
      value_4 = adjustedTime.jsdate.getHours() % 12;
      $zeroPaddingNumber(buf, value_4, count);
      break;
    case 72:
      value_5 = adjustedTime.jsdate.getHours();
      $zeroPaddingNumber(buf, value_5, count);
      break;
    case 99:
      value_6 = adjustedDate.jsdate.getDay();
      count == 5?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['S', 'M', 'T', 'W', 'T', 'F', 'S'])[value_6]):count == 4?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])[value_6]):count == 3?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'])[value_6]):$zeroPaddingNumber(buf, value_6, 1);
      break;
    case 76:
      value_7 = adjustedDate.jsdate.getMonth();
      count == 5?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])[value_7]):count == 4?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])[value_7]):count == 3?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])[value_7]):$zeroPaddingNumber(buf, value_7 + 1, count);
      break;
    case 81:
      value_8 = ~~(adjustedDate.jsdate.getMonth() / 3);
      count < 4?$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Q1', 'Q2', 'Q3', 'Q4'])[value_8]):$append_4(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'])[value_8]);
      break;
    case 100:
      value_9 = adjustedDate.jsdate.getDate();
      $zeroPaddingNumber(buf, value_9, count);
      break;
    case 109:
      value_10 = adjustedTime.jsdate.getMinutes();
      $zeroPaddingNumber(buf, value_10, count);
      break;
    case 115:
      value_11 = adjustedTime.jsdate.getSeconds();
      $zeroPaddingNumber(buf, value_11, count);
      break;
    case 122:
      count < 4?$append_4(buf, timezone.tzNames[0]):$append_4(buf, timezone.tzNames[1]);
      break;
    case 118:
      $append_4(buf, timezone.timezoneID);
      break;
    case 90:
      count < 3?$append_4(buf, $getRFCTimeZoneString(timezone)):count == 3?$append_4(buf, $getISOTimeZoneString(timezone)):$append_4(buf, composeGMTString(timezone.standardOffset));
      break;
    default:return false;
  }
  return true;
}

function $zeroPaddingNumber(buf, value_0, minWidth){
  var b, i_0;
  b = 10;
  for (i_0 = 0; i_0 < minWidth - 1; i_0++) {
    value_0 < b && (buf.string += '0' , buf);
    b *= 10;
  }
  buf.string += value_0;
}

defineClass(541, 1, {});
var Lcom_google_gwt_i18n_shared_DateTimeFormat_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DateTimeFormat', 541, Ljava_lang_Object_2_classLit);
function $clinit_DateTimeFormat_0(){
  $clinit_DateTimeFormat_0 = emptyMethod;
  $clinit_DateTimeFormat();
  cache_0 = new HashMap;
}

function DateTimeFormat(pattern){
  $clinit_DateTimeFormat();
  this.patternParts = new ArrayList;
  this.pattern = pattern;
  $parsePattern(this, pattern);
}

function getFormat(predef){
  $clinit_DateTimeFormat_0();
  var dtfi, pattern, pattern0;
  if (usesFixedEnglishStrings(predef)) {
    switch (predef.ordinal) {
      case 1:
        pattern0 = 'EEE, d MMM yyyy HH:mm:ss Z';
        break;
      case 0:
        pattern0 = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZ";
        break;
      default:throw new IllegalStateException_0('Unexpected predef type ' + predef);
    }
    return getFormat_0(pattern0, new DateTimeFormatInfoImpl_en);
  }
  dtfi = $getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_0));
  switch (predef.ordinal) {
    case 2:
      pattern = dtfi.dateFormatFull();
      break;
    case 3:
      pattern = dtfi.dateFormatLong();
      break;
    case 4:
      pattern = dtfi.dateFormatMedium();
      break;
    case 5:
      pattern = dtfi.dateFormatShort();
      break;
    case 10:
      pattern = dtfi.dateTimeFull(dtfi.timeFormatFull(), dtfi.dateFormatFull());
      break;
    case 11:
      pattern = dtfi.dateTimeLong(dtfi.timeFormatLong(), dtfi.dateFormatLong());
      break;
    case 12:
      pattern = dtfi.dateTimeMedium(dtfi.timeFormatMedium(), dtfi.dateFormatMedium());
      break;
    case 13:
      pattern = dtfi.dateTimeShort(dtfi.timeFormatShort(), dtfi.dateFormatShort());
      break;
    case 14:
      pattern = 'd';
      break;
    case 17:
      pattern = 'HH:mm';
      break;
    case 18:
      pattern = 'HH:mm:ss';
      break;
    case 15:
      pattern = 'h:mm a';
      break;
    case 16:
      pattern = 'h:mm:ss a';
      break;
    case 19:
      pattern = 'mm:ss';
      break;
    case 20:
      pattern = 'LLLL';
      break;
    case 21:
      pattern = 'LLL';
      break;
    case 22:
      pattern = 'MMM d';
      break;
    case 23:
      pattern = 'MMMM d';
      break;
    case 24:
      pattern = dtfi.formatMonthNumDay();
      break;
    case 25:
      pattern = dtfi.formatMonthFullWeekdayDay();
      break;
    case 6:
      pattern = dtfi.timeFormatFull();
      break;
    case 7:
      pattern = dtfi.timeFormatLong();
      break;
    case 8:
      pattern = dtfi.timeFormatMedium();
      break;
    case 9:
      pattern = dtfi.timeFormatShort();
      break;
    case 26:
      pattern = 'y';
      break;
    case 27:
      pattern = dtfi.formatYearMonthFull();
      break;
    case 28:
      pattern = dtfi.formatYearMonthAbbrev();
      break;
    case 29:
      pattern = dtfi.formatYearMonthAbbrevDay();
      break;
    case 30:
      pattern = dtfi.formatYearMonthFullDay();
      break;
    case 31:
      pattern = dtfi.formatYearMonthNum();
      break;
    case 32:
      pattern = dtfi.formatYearMonthNumDay();
      break;
    case 33:
      pattern = dtfi.formatYearMonthWeekdayDay();
      break;
    case 34:
      pattern = dtfi.formatYearQuarterFull();
      break;
    case 35:
      pattern = dtfi.formatYearQuarterShort();
      break;
    default:throw new IllegalArgumentException_0('Unexpected predefined format ' + predef);
  }
  return getFormat_0(pattern, dtfi);
}

function getFormat_0(pattern, dtfi){
  var defaultDtfi, dtf;
  defaultDtfi = $getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_0));
  dtf = null;
  dtfi == defaultDtfi && (dtf = dynamicCast($getStringValue(cache_0, pattern), 253));
  if (!dtf) {
    dtf = new DateTimeFormat(pattern);
    dtfi == defaultDtfi && $putStringValue(cache_0, pattern, dtf);
  }
  return dtf;
}

function usesFixedEnglishStrings(predef){
  switch (predef.ordinal) {
    case 0:
    case 1:
      return true;
    default:return false;
  }
}

defineClass(253, 541, {253:1}, DateTimeFormat);
var cache_0;
var Lcom_google_gwt_i18n_client_DateTimeFormat_2_classLit = createForClass('com.google.gwt.i18n.client', 'DateTimeFormat', 253, Lcom_google_gwt_i18n_shared_DateTimeFormat_2_classLit);
function $compareTo(this$static, other){
  return this$static.ordinal - other.ordinal;
}

function Enum(name_0, ordinal){
  this.name_0 = name_0;
  this.ordinal = ordinal;
}

defineClass(77, 1, {3:1, 50:1, 77:1});
_.compareTo = function compareTo(other){
  return $compareTo(this, dynamicCast(other, 77));
}
;
_.equals$ = function equals_0(other){
  return this === other;
}
;
_.hashCode$ = function hashCode_1(){
  return getHashCode(this);
}
;
_.toString$ = function toString_2(){
  return this.name_0 != null?this.name_0:'' + this.ordinal;
}
;
_.ordinal = 0;
var Ljava_lang_Enum_2_classLit = createForClass('java.lang', 'Enum', 77, Ljava_lang_Object_2_classLit);
function $clinit_DateTimeFormat$PredefinedFormat(){
  $clinit_DateTimeFormat$PredefinedFormat = emptyMethod;
  ISO_8601 = new DateTimeFormat$PredefinedFormat('ISO_8601', 0);
  RFC_2822 = new DateTimeFormat$PredefinedFormat('RFC_2822', 1);
  DATE_FULL = new DateTimeFormat$PredefinedFormat('DATE_FULL', 2);
  DATE_LONG = new DateTimeFormat$PredefinedFormat('DATE_LONG', 3);
  DATE_MEDIUM = new DateTimeFormat$PredefinedFormat('DATE_MEDIUM', 4);
  DATE_SHORT = new DateTimeFormat$PredefinedFormat('DATE_SHORT', 5);
  TIME_FULL = new DateTimeFormat$PredefinedFormat('TIME_FULL', 6);
  TIME_LONG = new DateTimeFormat$PredefinedFormat('TIME_LONG', 7);
  TIME_MEDIUM = new DateTimeFormat$PredefinedFormat('TIME_MEDIUM', 8);
  TIME_SHORT = new DateTimeFormat$PredefinedFormat('TIME_SHORT', 9);
  DATE_TIME_FULL = new DateTimeFormat$PredefinedFormat('DATE_TIME_FULL', 10);
  DATE_TIME_LONG = new DateTimeFormat$PredefinedFormat('DATE_TIME_LONG', 11);
  DATE_TIME_MEDIUM = new DateTimeFormat$PredefinedFormat('DATE_TIME_MEDIUM', 12);
  DATE_TIME_SHORT = new DateTimeFormat$PredefinedFormat('DATE_TIME_SHORT', 13);
  DAY = new DateTimeFormat$PredefinedFormat('DAY', 14);
  HOUR_MINUTE = new DateTimeFormat$PredefinedFormat('HOUR_MINUTE', 15);
  HOUR_MINUTE_SECOND = new DateTimeFormat$PredefinedFormat('HOUR_MINUTE_SECOND', 16);
  HOUR24_MINUTE = new DateTimeFormat$PredefinedFormat('HOUR24_MINUTE', 17);
  HOUR24_MINUTE_SECOND = new DateTimeFormat$PredefinedFormat('HOUR24_MINUTE_SECOND', 18);
  MINUTE_SECOND = new DateTimeFormat$PredefinedFormat('MINUTE_SECOND', 19);
  MONTH = new DateTimeFormat$PredefinedFormat('MONTH', 20);
  MONTH_ABBR = new DateTimeFormat$PredefinedFormat('MONTH_ABBR', 21);
  MONTH_ABBR_DAY = new DateTimeFormat$PredefinedFormat('MONTH_ABBR_DAY', 22);
  MONTH_DAY = new DateTimeFormat$PredefinedFormat('MONTH_DAY', 23);
  MONTH_NUM_DAY = new DateTimeFormat$PredefinedFormat('MONTH_NUM_DAY', 24);
  MONTH_WEEKDAY_DAY = new DateTimeFormat$PredefinedFormat('MONTH_WEEKDAY_DAY', 25);
  YEAR = new DateTimeFormat$PredefinedFormat('YEAR', 26);
  YEAR_MONTH = new DateTimeFormat$PredefinedFormat('YEAR_MONTH', 27);
  YEAR_MONTH_ABBR = new DateTimeFormat$PredefinedFormat('YEAR_MONTH_ABBR', 28);
  YEAR_MONTH_ABBR_DAY = new DateTimeFormat$PredefinedFormat('YEAR_MONTH_ABBR_DAY', 29);
  YEAR_MONTH_DAY = new DateTimeFormat$PredefinedFormat('YEAR_MONTH_DAY', 30);
  YEAR_MONTH_NUM = new DateTimeFormat$PredefinedFormat('YEAR_MONTH_NUM', 31);
  YEAR_MONTH_NUM_DAY = new DateTimeFormat$PredefinedFormat('YEAR_MONTH_NUM_DAY', 32);
  YEAR_MONTH_WEEKDAY_DAY = new DateTimeFormat$PredefinedFormat('YEAR_MONTH_WEEKDAY_DAY', 33);
  YEAR_QUARTER = new DateTimeFormat$PredefinedFormat('YEAR_QUARTER', 34);
  YEAR_QUARTER_ABBR = new DateTimeFormat$PredefinedFormat('YEAR_QUARTER_ABBR', 35);
}

function DateTimeFormat$PredefinedFormat(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_0(){
  $clinit_DateTimeFormat$PredefinedFormat();
  return initValues(getClassLiteralForArray(Lcom_google_gwt_i18n_client_DateTimeFormat$PredefinedFormat_2_classLit, 1), $intern_7, 29, 0, [ISO_8601, RFC_2822, DATE_FULL, DATE_LONG, DATE_MEDIUM, DATE_SHORT, TIME_FULL, TIME_LONG, TIME_MEDIUM, TIME_SHORT, DATE_TIME_FULL, DATE_TIME_LONG, DATE_TIME_MEDIUM, DATE_TIME_SHORT, DAY, HOUR_MINUTE, HOUR_MINUTE_SECOND, HOUR24_MINUTE, HOUR24_MINUTE_SECOND, MINUTE_SECOND, MONTH, MONTH_ABBR, MONTH_ABBR_DAY, MONTH_DAY, MONTH_NUM_DAY, MONTH_WEEKDAY_DAY, YEAR, YEAR_MONTH, YEAR_MONTH_ABBR, YEAR_MONTH_ABBR_DAY, YEAR_MONTH_DAY, YEAR_MONTH_NUM, YEAR_MONTH_NUM_DAY, YEAR_MONTH_WEEKDAY_DAY, YEAR_QUARTER, YEAR_QUARTER_ABBR]);
}

defineClass(29, 77, {29:1, 3:1, 50:1, 77:1}, DateTimeFormat$PredefinedFormat);
var DATE_FULL, DATE_LONG, DATE_MEDIUM, DATE_SHORT, DATE_TIME_FULL, DATE_TIME_LONG, DATE_TIME_MEDIUM, DATE_TIME_SHORT, DAY, HOUR24_MINUTE, HOUR24_MINUTE_SECOND, HOUR_MINUTE, HOUR_MINUTE_SECOND, ISO_8601, MINUTE_SECOND, MONTH, MONTH_ABBR, MONTH_ABBR_DAY, MONTH_DAY, MONTH_NUM_DAY, MONTH_WEEKDAY_DAY, RFC_2822, TIME_FULL, TIME_LONG, TIME_MEDIUM, TIME_SHORT, YEAR, YEAR_MONTH, YEAR_MONTH_ABBR, YEAR_MONTH_ABBR_DAY, YEAR_MONTH_DAY, YEAR_MONTH_NUM, YEAR_MONTH_NUM_DAY, YEAR_MONTH_WEEKDAY_DAY, YEAR_QUARTER, YEAR_QUARTER_ABBR;
var Lcom_google_gwt_i18n_client_DateTimeFormat$PredefinedFormat_2_classLit = createForEnum('com.google.gwt.i18n.client', 'DateTimeFormat/PredefinedFormat', 29, Ljava_lang_Enum_2_classLit, values_0);
defineClass(681, 1, {});
_.dateFormatFull = function dateFormatFull(){
  return 'y MMMM d, EEEE';
}
;
_.dateFormatLong = function dateFormatLong(){
  return 'y MMMM d';
}
;
_.dateFormatMedium = function dateFormatMedium(){
  return 'y MMM d';
}
;
_.dateFormatShort = function dateFormatShort(){
  return 'y-MM-dd';
}
;
_.dateTimeFull = function dateTimeFull(timePattern, datePattern){
  return datePattern + ' ' + timePattern;
}
;
_.dateTimeLong = function dateTimeLong(timePattern, datePattern){
  return datePattern + ' ' + timePattern;
}
;
_.dateTimeMedium = function dateTimeMedium(timePattern, datePattern){
  return datePattern + ' ' + timePattern;
}
;
_.dateTimeShort = function dateTimeShort(timePattern, datePattern){
  return datePattern + ' ' + timePattern;
}
;
_.formatMonthFullWeekdayDay = function formatMonthFullWeekdayDay(){
  return 'MMMM d, EEEE';
}
;
_.formatMonthNumDay = function formatMonthNumDay(){
  return 'MM-dd';
}
;
_.formatYearMonthAbbrev = function formatYearMonthAbbrev(){
  return 'y MMM';
}
;
_.formatYearMonthAbbrevDay = function formatYearMonthAbbrevDay(){
  return 'y MMM d';
}
;
_.formatYearMonthFull = function formatYearMonthFull(){
  return 'y MMMM';
}
;
_.formatYearMonthFullDay = function formatYearMonthFullDay(){
  return 'y MMMM d';
}
;
_.formatYearMonthNum = function formatYearMonthNum(){
  return 'y-MM';
}
;
_.formatYearMonthNumDay = function formatYearMonthNumDay(){
  return 'y-MM-dd';
}
;
_.formatYearMonthWeekdayDay = function formatYearMonthWeekdayDay(){
  return 'y MMM d, EEE';
}
;
_.formatYearQuarterFull = function formatYearQuarterFull(){
  return 'y QQQQ';
}
;
_.formatYearQuarterShort = function formatYearQuarterShort(){
  return 'y Q';
}
;
_.timeFormatFull = function timeFormatFull(){
  return 'HH:mm:ss zzzz';
}
;
_.timeFormatLong = function timeFormatLong(){
  return 'HH:mm:ss z';
}
;
_.timeFormatMedium = function timeFormatMedium(){
  return 'HH:mm:ss';
}
;
_.timeFormatShort = function timeFormatShort(){
  return 'HH:mm';
}
;
var Lcom_google_gwt_i18n_shared_DefaultDateTimeFormatInfo_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DefaultDateTimeFormatInfo', 681, Ljava_lang_Object_2_classLit);
defineClass(682, 681, {});
var Lcom_google_gwt_i18n_client_DefaultDateTimeFormatInfo_2_classLit = createForClass('com.google.gwt.i18n.client', 'DefaultDateTimeFormatInfo', 682, Lcom_google_gwt_i18n_shared_DefaultDateTimeFormatInfo_2_classLit);
function $clinit_LocaleInfo(){
  $clinit_LocaleInfo = emptyMethod;
  instance_0 = new LocaleInfo;
}

function $getDateTimeFormatInfo(this$static){
  !this$static.dateTimeFormatInfo && (this$static.dateTimeFormatInfo = new DateTimeFormatInfoImpl);
  return this$static.dateTimeFormatInfo;
}

function $getNumberConstants(this$static){
  !this$static.numberConstants && (this$static.numberConstants = new NumberConstantsImpl_);
  return this$static.numberConstants;
}

function LocaleInfo(){
}

defineClass(561, 1, {}, LocaleInfo);
var instance_0;
var Lcom_google_gwt_i18n_client_LocaleInfo_2_classLit = createForClass('com.google.gwt.i18n.client', 'LocaleInfo', 561, Ljava_lang_Object_2_classLit);
function $clinit_NumberFormat(){
  $clinit_NumberFormat = emptyMethod;
  $getNumberConstants(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_0));
}

function $addExponent(this$static, digits){
  var exponentDigits, i_0;
  digits.string += 'E';
  if (this$static.exponent < 0) {
    this$static.exponent = -this$static.exponent;
    digits.string += '-';
  }
  exponentDigits = '' + this$static.exponent;
  for (i_0 = exponentDigits.length; i_0 < this$static.minExponentDigits; ++i_0) {
    digits.string += '0';
  }
  digits.string += exponentDigits;
}

function $addZeroAndDecimal(this$static, digits){
  if (this$static.digitsLength == 0) {
    digits.string = $substring_0(digits.string, 0, 0) + '0' + $substring(digits.string, 0);
    ++this$static.decimalPosition;
    ++this$static.digitsLength;
  }
  if (this$static.decimalPosition < this$static.digitsLength || this$static.decimalSeparatorAlwaysShown) {
    $insert(digits, this$static.decimalPosition, '.');
    ++this$static.digitsLength;
  }
}

function $adjustFractionDigits(this$static, digits){
  var requiredDigits, toRemove;
  requiredDigits = this$static.decimalPosition + this$static.minimumFractionDigits;
  if (this$static.digitsLength < requiredDigits) {
    while (this$static.digitsLength < requiredDigits) {
      digits.string += '0';
      ++this$static.digitsLength;
    }
  }
   else {
    toRemove = this$static.decimalPosition + this$static.maximumFractionDigits;
    toRemove > this$static.digitsLength && (toRemove = this$static.digitsLength);
    while (toRemove > requiredDigits && $charAt_0(digits.string, toRemove - 1) == 48) {
      --toRemove;
    }
    if (toRemove < this$static.digitsLength) {
      $delete_0(digits, toRemove, this$static.digitsLength);
      this$static.digitsLength = toRemove;
    }
  }
}

function $computeExponent(this$static, digits){
  var remainder, strip;
  strip = 0;
  while (strip < this$static.digitsLength - 1 && $charAt_0(digits.string, strip) == 48) {
    ++strip;
  }
  if (strip > 0) {
    digits.string = $substring_0(digits.string, 0, 0) + '' + $substring(digits.string, strip);
    this$static.digitsLength -= strip;
    this$static.exponent -= strip;
  }
  if (this$static.maximumIntegerDigits > this$static.minimumIntegerDigits && this$static.maximumIntegerDigits > 0) {
    this$static.exponent += this$static.decimalPosition - 1;
    remainder = this$static.exponent % this$static.maximumIntegerDigits;
    remainder < 0 && (remainder += this$static.maximumIntegerDigits);
    this$static.decimalPosition = remainder + 1;
    this$static.exponent -= remainder;
  }
   else {
    this$static.exponent += this$static.decimalPosition - this$static.minimumIntegerDigits;
    this$static.decimalPosition = this$static.minimumIntegerDigits;
  }
  if (this$static.digitsLength == 1 && digits.string.charCodeAt(0) == 48) {
    this$static.exponent = 0;
    this$static.decimalPosition = this$static.minimumIntegerDigits;
  }
}

function $format_0(this$static, number){
  var buf, isNegative, preRound, scale, useExponent, currentGroupingSize;
  if (isNaN(number)) {
    return 'NaN';
  }
  isNegative = number < 0 || number == 0 && 1 / number < 0;
  isNegative && (number = -number);
  buf = new StringBuilder;
  if (isInfinite(number)) {
    $append_4(buf, isNegative?this$static.negativePrefix:this$static.positivePrefix);
    buf.string += '\u221E';
    $append_4(buf, isNegative?this$static.negativeSuffix:this$static.positiveSuffix);
    return buf.string;
  }
  number *= this$static.multiplier;
  scale = toScaledString(buf, number);
  preRound = buf.string.length + scale + this$static.maximumFractionDigits + 3;
  if (preRound > 0 && preRound < buf.string.length && $charAt_0(buf.string, preRound) == 57) {
    $propagateCarry(this$static, buf, preRound - 1);
    scale += buf.string.length - preRound;
    $delete_0(buf, preRound, buf.string.length);
  }
  this$static.exponent = 0;
  this$static.digitsLength = buf.string.length;
  this$static.decimalPosition = this$static.digitsLength + scale;
  useExponent = this$static.useExponentialNotation;
  currentGroupingSize = this$static.groupingSize;
  this$static.decimalPosition > 1024 && (useExponent = true);
  useExponent && $computeExponent(this$static, buf);
  $processLeadingZeros(this$static, buf);
  $roundValue(this$static, buf);
  $insertGroupingSeparators(this$static, buf, currentGroupingSize);
  $adjustFractionDigits(this$static, buf);
  $addZeroAndDecimal(this$static, buf);
  useExponent && $addExponent(this$static, buf);
  $insert(buf, 0, isNegative?this$static.negativePrefix:this$static.positivePrefix);
  $append_4(buf, isNegative?this$static.negativeSuffix:this$static.positiveSuffix);
  return buf.string;
}

function $insertGroupingSeparators(this$static, digits, g){
  var i_0;
  if (g > 0) {
    for (i_0 = g; i_0 < this$static.decimalPosition; i_0 += g + 1) {
      $insert(digits, this$static.decimalPosition - i_0, ',');
      ++this$static.decimalPosition;
      ++this$static.digitsLength;
    }
  }
}

function $parseAffix(this$static, pattern, start_0, affix, inNegativePattern){
  var ch_0, inQuote, len, pos;
  $delete_0(affix, 0, affix.string.length);
  inQuote = false;
  len = pattern.length;
  for (pos = start_0; pos < len; ++pos) {
    ch_0 = pattern.charCodeAt(pos);
    if (ch_0 == 39) {
      if (pos + 1 < len && pattern.charCodeAt(pos + 1) == 39) {
        ++pos;
        affix.string += "'";
      }
       else {
        inQuote = !inQuote;
      }
      continue;
    }
    if (inQuote) {
      affix.string += charToString(ch_0);
    }
     else {
      switch (ch_0) {
        case 35:
        case 48:
        case 44:
        case 46:
        case 59:
          return pos - start_0;
        case 164:
          this$static.isCurrencyFormat = true;
          if (pos + 1 < len && pattern.charCodeAt(pos + 1) == 164) {
            ++pos;
            if (pos < len - 2 && pattern.charCodeAt(pos + 1) == 164 && pattern.charCodeAt(pos + 2) == 164) {
              pos += 2;
              $append_4(affix, $getSimpleCurrencySymbol(this$static.currencyData));
            }
             else {
              $append_4(affix, this$static.currencyData[0]);
            }
          }
           else {
            $append_4(affix, this$static.currencyData[1]);
          }

          break;
        case 37:
          if (!inNegativePattern) {
            if (this$static.multiplier != 1) {
              throw new IllegalArgumentException_0('Too many percent/per mille characters in pattern "' + pattern + '"');
            }
            this$static.multiplier = 100;
          }

          affix.string += '%';
          break;
        case 8240:
          if (!inNegativePattern) {
            if (this$static.multiplier != 1) {
              throw new IllegalArgumentException_0('Too many percent/per mille characters in pattern "' + pattern + '"');
            }
            this$static.multiplier = 1000;
          }

          affix.string += '\u2030';
          break;
        case 45:
          affix.string += '-';
          break;
        default:affix.string += charToString(ch_0);
      }
    }
  }
  return len - start_0;
}

function $parsePattern_0(this$static, pattern){
  var affix, pos;
  pos = 0;
  affix = new StringBuilder;
  pos += $parseAffix(this$static, pattern, 0, affix, false);
  this$static.positivePrefix = affix.string;
  pos += $parseTrunk(this$static, pattern, pos, false);
  pos += $parseAffix(this$static, pattern, pos, affix, false);
  this$static.positiveSuffix = affix.string;
  if (pos < pattern.length && pattern.charCodeAt(pos) == 59) {
    ++pos;
    pos += $parseAffix(this$static, pattern, pos, affix, true);
    this$static.negativePrefix = affix.string;
    pos += $parseTrunk(this$static, pattern, pos, true);
    pos += $parseAffix(this$static, pattern, pos, affix, true);
    this$static.negativeSuffix = affix.string;
  }
   else {
    this$static.negativePrefix = '-' + this$static.positivePrefix;
    this$static.negativeSuffix = this$static.positiveSuffix;
  }
}

function $parseTrunk(this$static, pattern, start_0, ignorePattern){
  var ch_0, decimalPos, digitLeftCount, digitRightCount, effectiveDecimalPos, groupingCount, len, loop, n, pos, totalDigits, zeroDigitCount;
  decimalPos = -1;
  digitLeftCount = 0;
  zeroDigitCount = 0;
  digitRightCount = 0;
  groupingCount = -1;
  len = pattern.length;
  pos = start_0;
  loop = true;
  for (; pos < len && loop; ++pos) {
    ch_0 = pattern.charCodeAt(pos);
    switch (ch_0) {
      case 35:
        zeroDigitCount > 0?++digitRightCount:++digitLeftCount;
        groupingCount >= 0 && decimalPos < 0 && ++groupingCount;
        break;
      case 48:
        if (digitRightCount > 0) {
          throw new IllegalArgumentException_0("Unexpected '0' in pattern \"" + pattern + '"');
        }

        ++zeroDigitCount;
        groupingCount >= 0 && decimalPos < 0 && ++groupingCount;
        break;
      case 44:
        groupingCount = 0;
        break;
      case 46:
        if (decimalPos >= 0) {
          throw new IllegalArgumentException_0('Multiple decimal separators in pattern "' + pattern + '"');
        }

        decimalPos = digitLeftCount + zeroDigitCount + digitRightCount;
        break;
      case 69:
        if (!ignorePattern) {
          if (this$static.useExponentialNotation) {
            throw new IllegalArgumentException_0('Multiple exponential symbols in pattern "' + pattern + '"');
          }
          this$static.useExponentialNotation = true;
          this$static.minExponentDigits = 0;
        }

        while (pos + 1 < len && pattern.charCodeAt(pos + 1) == 48) {
          ++pos;
          ignorePattern || ++this$static.minExponentDigits;
        }

        if (!ignorePattern && digitLeftCount + zeroDigitCount < 1 || this$static.minExponentDigits < 1) {
          throw new IllegalArgumentException_0('Malformed exponential pattern "' + pattern + '"');
        }

        loop = false;
        break;
      default:--pos;
        loop = false;
    }
  }
  if (zeroDigitCount == 0 && digitLeftCount > 0 && decimalPos >= 0) {
    n = decimalPos;
    decimalPos == 0 && ++n;
    digitRightCount = digitLeftCount - n;
    digitLeftCount = n - 1;
    zeroDigitCount = 1;
  }
  if (decimalPos < 0 && digitRightCount > 0 || decimalPos >= 0 && (decimalPos < digitLeftCount || decimalPos > digitLeftCount + zeroDigitCount) || groupingCount == 0) {
    throw new IllegalArgumentException_0('Malformed pattern "' + pattern + '"');
  }
  if (ignorePattern) {
    return pos - start_0;
  }
  totalDigits = digitLeftCount + zeroDigitCount + digitRightCount;
  this$static.maximumFractionDigits = decimalPos >= 0?totalDigits - decimalPos:0;
  if (decimalPos >= 0) {
    this$static.minimumFractionDigits = digitLeftCount + zeroDigitCount - decimalPos;
    this$static.minimumFractionDigits < 0 && (this$static.minimumFractionDigits = 0);
  }
  effectiveDecimalPos = decimalPos >= 0?decimalPos:totalDigits;
  this$static.minimumIntegerDigits = effectiveDecimalPos - digitLeftCount;
  if (this$static.useExponentialNotation) {
    this$static.maximumIntegerDigits = digitLeftCount + this$static.minimumIntegerDigits;
    this$static.maximumFractionDigits == 0 && this$static.minimumIntegerDigits == 0 && (this$static.minimumIntegerDigits = 1);
  }
  this$static.groupingSize = groupingCount > 0?groupingCount:0;
  this$static.decimalSeparatorAlwaysShown = decimalPos == 0 || decimalPos == totalDigits;
  return pos - start_0;
}

function $processLeadingZeros(this$static, digits){
  var i_0, prefix, strip;
  if (this$static.decimalPosition > this$static.digitsLength) {
    while (this$static.digitsLength < this$static.decimalPosition) {
      digits.string += '0';
      ++this$static.digitsLength;
    }
  }
  if (!this$static.useExponentialNotation) {
    if (this$static.decimalPosition < this$static.minimumIntegerDigits) {
      prefix = new StringBuilder;
      while (this$static.decimalPosition < this$static.minimumIntegerDigits) {
        prefix.string += '0';
        ++this$static.decimalPosition;
        ++this$static.digitsLength;
      }
      $insert(digits, 0, prefix.toString$());
    }
     else if (this$static.decimalPosition > this$static.minimumIntegerDigits) {
      strip = this$static.decimalPosition - this$static.minimumIntegerDigits;
      for (i_0 = 0; i_0 < strip; ++i_0) {
        if ($charAt_0(digits.string, i_0) != 48) {
          strip = i_0;
          break;
        }
      }
      if (strip > 0) {
        digits.string = $substring_0(digits.string, 0, 0) + '' + $substring(digits.string, strip);
        this$static.digitsLength -= strip;
        this$static.decimalPosition -= strip;
      }
    }
  }
}

function $propagateCarry(this$static, digits, i_0){
  var carry, digit;
  carry = true;
  while (carry && i_0 >= 0) {
    digit = $charAt_0(digits.string, i_0);
    if (digit == 57) {
      $setCharAt(digits, i_0--, 48);
    }
     else {
      $setCharAt(digits, i_0, digit + 1 & $intern_5);
      carry = false;
    }
  }
  if (carry) {
    digits.string = $substring_0(digits.string, 0, 0) + '1' + $substring(digits.string, 0);
    ++this$static.decimalPosition;
    ++this$static.digitsLength;
  }
}

function $roundValue(this$static, digits){
  var i_0;
  if (this$static.digitsLength > this$static.decimalPosition + this$static.maximumFractionDigits && $charAt(digits, this$static.decimalPosition + this$static.maximumFractionDigits) >= 53) {
    i_0 = this$static.decimalPosition + this$static.maximumFractionDigits - 1;
    $propagateCarry(this$static, digits, i_0);
  }
}

function NumberFormat(pattern, cdata, userSuppliedPattern){
  if (!cdata) {
    throw new IllegalArgumentException_0('Unknown currency code');
  }
  this.pattern = pattern;
  this.currencyData = cdata;
  $parsePattern_0(this, this.pattern);
  if (!userSuppliedPattern && this.isCurrencyFormat) {
    this.minimumFractionDigits = this.currencyData[2] & 7;
    this.maximumFractionDigits = this.minimumFractionDigits;
  }
}

function NumberFormat_0(pattern, cdata){
  $clinit_NumberFormat();
  NumberFormat.call(this, pattern, cdata, true);
}

function toScaledString(buf, val){
  var dot, expDigits, expIdx, scale, startLen;
  startLen = buf.string.length;
  $append_4(buf, val.toPrecision(20));
  scale = 0;
  expIdx = $indexOf_0(buf.string, 'e', startLen);
  expIdx < 0 && (expIdx = $indexOf_0(buf.string, 'E', startLen));
  if (expIdx >= 0) {
    expDigits = expIdx + 1;
    expDigits < buf.string.length && $charAt_0(buf.string, expDigits) == 43 && ++expDigits;
    expDigits < buf.string.length && (scale = __parseAndValidateInt($substring(buf.string, expDigits)));
    $delete_0(buf, expIdx, buf.string.length);
  }
  dot = $indexOf_0(buf.string, '.', startLen);
  if (dot >= 0) {
    buf.string = $substring_0(buf.string, 0, dot) + '' + $substring(buf.string, dot + 1);
    scale -= buf.string.length - dot;
  }
  return scale;
}

defineClass(178, 1, {}, NumberFormat_0);
_.decimalPosition = 0;
_.decimalSeparatorAlwaysShown = false;
_.digitsLength = 0;
_.exponent = 0;
_.groupingSize = 3;
_.isCurrencyFormat = false;
_.maximumFractionDigits = 3;
_.maximumIntegerDigits = 40;
_.minExponentDigits = 0;
_.minimumFractionDigits = 0;
_.minimumIntegerDigits = 1;
_.multiplier = 1;
_.negativePrefix = '-';
_.negativeSuffix = '';
_.positivePrefix = '';
_.positiveSuffix = '';
_.useExponentialNotation = false;
var Lcom_google_gwt_i18n_client_NumberFormat_2_classLit = createForClass('com.google.gwt.i18n.client', 'NumberFormat', 178, Ljava_lang_Object_2_classLit);
function $getISOTimeZoneString(this$static){
  var data_0, offset;
  offset = -this$static.standardOffset;
  data_0 = initValues(getClassLiteralForArray(C_classLit, 1), $intern_4, 0, 7, [43, 48, 48, 58, 48, 48]);
  if (offset < 0) {
    data_0[0] = 45;
    offset = -offset;
  }
  data_0[1] = data_0[1] + ~~(~~(offset / 60) / 10) & $intern_5;
  data_0[2] = data_0[2] + ~~(offset / 60) % 10 & $intern_5;
  data_0[4] = data_0[4] + ~~(offset % 60 / 10) & $intern_5;
  data_0[5] = data_0[5] + offset % 10 & $intern_5;
  return __valueOf(data_0, 0, data_0.length);
}

function $getRFCTimeZoneString(this$static){
  var data_0, offset;
  offset = -this$static.standardOffset;
  data_0 = initValues(getClassLiteralForArray(C_classLit, 1), $intern_4, 0, 7, [43, 48, 48, 48, 48]);
  if (offset < 0) {
    data_0[0] = 45;
    offset = -offset;
  }
  data_0[1] = data_0[1] + ~~(~~(offset / 60) / 10) & $intern_5;
  data_0[2] = data_0[2] + ~~(offset / 60) % 10 & $intern_5;
  data_0[3] = data_0[3] + ~~(offset % 60 / 10) & $intern_5;
  data_0[4] = data_0[4] + offset % 10 & $intern_5;
  return __valueOf(data_0, 0, data_0.length);
}

function TimeZone(){
}

function composeGMTString(offset){
  var data_0;
  data_0 = initValues(getClassLiteralForArray(C_classLit, 1), $intern_4, 0, 7, [71, 77, 84, 45, 48, 48, 58, 48, 48]);
  if (offset <= 0) {
    data_0[3] = 43;
    offset = -offset;
  }
  data_0[4] = data_0[4] + ~~(~~(offset / 60) / 10) & $intern_5;
  data_0[5] = data_0[5] + ~~(offset / 60) % 10 & $intern_5;
  data_0[7] = data_0[7] + ~~(offset % 60 / 10) & $intern_5;
  data_0[8] = data_0[8] + offset % 10 & $intern_5;
  return __valueOf(data_0, 0, data_0.length);
}

function composePOSIXTimeZoneID(offset){
  var str;
  if (offset == 0) {
    return 'Etc/GMT';
  }
  if (offset < 0) {
    offset = -offset;
    str = 'Etc/GMT-';
  }
   else {
    str = 'Etc/GMT+';
  }
  return str + offsetDisplay(offset);
}

function composeUTCString(offset){
  var str;
  if (offset == 0) {
    return 'UTC';
  }
  if (offset < 0) {
    offset = -offset;
    str = 'UTC+';
  }
   else {
    str = 'UTC-';
  }
  return str + offsetDisplay(offset);
}

function createTimeZone(timeZoneOffsetInMinutes){
  var tz;
  tz = new TimeZone;
  tz.standardOffset = timeZoneOffsetInMinutes;
  tz.timezoneID = composePOSIXTimeZoneID(timeZoneOffsetInMinutes);
  tz.tzNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 2, 4, 1);
  tz.tzNames[0] = composeUTCString(timeZoneOffsetInMinutes);
  tz.tzNames[1] = composeUTCString(timeZoneOffsetInMinutes);
  return tz;
}

function offsetDisplay(offset){
  var hour, mins;
  hour = ~~(offset / 60);
  mins = offset % 60;
  if (mins == 0) {
    return '' + hour;
  }
  return '' + hour + ':' + ('' + mins);
}

defineClass(571, 1, {}, TimeZone);
_.standardOffset = 0;
var Lcom_google_gwt_i18n_client_TimeZone_2_classLit = createForClass('com.google.gwt.i18n.client', 'TimeZone', 571, Ljava_lang_Object_2_classLit);
function NumberConstantsImpl_(){
}

defineClass(573, 1, {}, NumberConstantsImpl_);
var Lcom_google_gwt_i18n_client_constants_NumberConstantsImpl_1_2_classLit = createForClass('com.google.gwt.i18n.client.constants', 'NumberConstantsImpl_', 573, Ljava_lang_Object_2_classLit);
function $getSimpleCurrencySymbol(this$static){
  return this$static[4] || this$static[1];
}

function DateTimeFormatInfoImpl(){
}

defineClass(556, 682, {}, DateTimeFormatInfoImpl);
var Lcom_google_gwt_i18n_client_impl_cldr_DateTimeFormatInfoImpl_2_classLit = createForClass('com.google.gwt.i18n.client.impl.cldr', 'DateTimeFormatInfoImpl', 556, Lcom_google_gwt_i18n_client_DefaultDateTimeFormatInfo_2_classLit);
function DateTimeFormatInfoImpl_en(){
}

defineClass(557, 556, {}, DateTimeFormatInfoImpl_en);
_.dateFormatFull = function dateFormatFull_0(){
  return 'EEEE, MMMM d, y';
}
;
_.dateFormatLong = function dateFormatLong_0(){
  return 'MMMM d, y';
}
;
_.dateFormatMedium = function dateFormatMedium_0(){
  return 'MMM d, y';
}
;
_.dateFormatShort = function dateFormatShort_0(){
  return 'M/d/yy';
}
;
_.dateTimeFull = function dateTimeFull_0(timePattern, datePattern){
  return datePattern + " 'at' " + timePattern;
}
;
_.dateTimeLong = function dateTimeLong_0(timePattern, datePattern){
  return datePattern + " 'at' " + timePattern;
}
;
_.dateTimeMedium = function dateTimeMedium_0(timePattern, datePattern){
  return datePattern + ', ' + timePattern;
}
;
_.dateTimeShort = function dateTimeShort_0(timePattern, datePattern){
  return datePattern + ', ' + timePattern;
}
;
_.formatMonthFullWeekdayDay = function formatMonthFullWeekdayDay_0(){
  return 'EEEE, MMMM d';
}
;
_.formatMonthNumDay = function formatMonthNumDay_0(){
  return 'M/d';
}
;
_.formatYearMonthAbbrev = function formatYearMonthAbbrev_0(){
  return 'MMM y';
}
;
_.formatYearMonthAbbrevDay = function formatYearMonthAbbrevDay_0(){
  return 'MMM d, y';
}
;
_.formatYearMonthFull = function formatYearMonthFull_0(){
  return 'MMMM y';
}
;
_.formatYearMonthFullDay = function formatYearMonthFullDay_0(){
  return 'MMMM d, y';
}
;
_.formatYearMonthNum = function formatYearMonthNum_0(){
  return 'M/y';
}
;
_.formatYearMonthNumDay = function formatYearMonthNumDay_0(){
  return 'M/d/y';
}
;
_.formatYearMonthWeekdayDay = function formatYearMonthWeekdayDay_0(){
  return 'EEE, MMM d, y';
}
;
_.formatYearQuarterFull = function formatYearQuarterFull_0(){
  return 'QQQQ y';
}
;
_.formatYearQuarterShort = function formatYearQuarterShort_0(){
  return 'Q y';
}
;
_.timeFormatFull = function timeFormatFull_0(){
  return 'h:mm:ss a zzzz';
}
;
_.timeFormatLong = function timeFormatLong_0(){
  return 'h:mm:ss a z';
}
;
_.timeFormatMedium = function timeFormatMedium_0(){
  return 'h:mm:ss a';
}
;
_.timeFormatShort = function timeFormatShort_0(){
  return 'h:mm a';
}
;
var Lcom_google_gwt_i18n_client_impl_cldr_DateTimeFormatInfoImpl_1en_2_classLit = createForClass('com.google.gwt.i18n.client.impl.cldr', 'DateTimeFormatInfoImpl_en', 557, Lcom_google_gwt_i18n_client_impl_cldr_DateTimeFormatInfoImpl_2_classLit);
function DateTimeFormat$PatternPart(txt, cnt){
  this.text_0 = txt;
  this.count = cnt;
  this.abutStart = false;
}

defineClass(176, 1, {176:1}, DateTimeFormat$PatternPart);
_.abutStart = false;
_.count = 0;
var Lcom_google_gwt_i18n_shared_DateTimeFormat$PatternPart_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DateTimeFormat/PatternPart', 176, Ljava_lang_Object_2_classLit);
function cloneSubrange(array, toIndex){
  var result;
  result = array.slice(0, toIndex);
  initValues(getClass__Ljava_lang_Class___devirtual$(array), array.castableTypeMap$, array.__elementTypeId$, array.__elementTypeCategory$, result);
  return result;
}

function createFrom(array, length_0){
  var result;
  result = initializeArrayElementsWithDefaults(0, length_0);
  initValues(getClass__Ljava_lang_Class___devirtual$(array), array.castableTypeMap$, array.__elementTypeId$, array.__elementTypeCategory$, result);
  return result;
}

function getClassLiteralForArray(clazz, dimensions){
  return getClassLiteralForArray_0(clazz, dimensions);
}

function initDim(leafClassLiteral, castableTypeMap, elementTypeId, length_0, elementTypeCategory, dimensions){
  var result;
  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);
  initValues(getClassLiteralForArray(leafClassLiteral, dimensions), castableTypeMap, elementTypeId, elementTypeCategory, result);
  return result;
}

function initValues(arrayClass, castableTypeMap, elementTypeId, elementTypeCategory, array){
  array.___clazz$ = arrayClass;
  array.castableTypeMap$ = castableTypeMap;
  array.typeMarker$ = typeMarkerFn;
  array.__elementTypeId$ = elementTypeId;
  array.__elementTypeCategory$ = elementTypeCategory;
  return array;
}

function initializeArrayElementsWithDefaults(elementTypeCategory, length_0){
  var array = new Array(length_0);
  var initValue;
  switch (elementTypeCategory) {
    case 6:
      initValue = {l:0, m:0, h:0};
      break;
    case 7:
      initValue = 0;
      break;
    case 8:
      initValue = false;
      break;
    default:return array;
  }
  for (var i_0 = 0; i_0 < length_0; ++i_0) {
    array[i_0] = initValue;
  }
  return array;
}

function nativeArraySplice(src_0, srcOfs, dest, destOfs, len, overwrite){
  if (src_0 === dest) {
    src_0 = src_0.slice(srcOfs, srcOfs + len);
    srcOfs = 0;
  }
  for (var batchStart = srcOfs, end = srcOfs + len; batchStart < end;) {
    var batchEnd = Math.min(batchStart + $intern_8, end);
    len = batchEnd - batchStart;
    Array.prototype.splice.apply(dest, [destOfs, overwrite?len:0].concat(src_0.slice(batchStart, batchEnd)));
    batchStart = batchEnd;
    destOfs += len;
  }
}

function setCheck(array, index_0, value_0){
  var elementTypeId;
  if (value_0 != null) {
    switch (array.__elementTypeCategory$) {
      case 4:
        if (!isJavaString(value_0)) {
          throw new ArrayStoreException;
        }

        break;
      case 0:
        {
          elementTypeId = array.__elementTypeId$;
          if (!canCast(value_0, elementTypeId)) {
            throw new ArrayStoreException;
          }
          break;
        }

      case 2:
        if (!(!isJavaString(value_0) && !hasTypeMarker(value_0))) {
          throw new ArrayStoreException;
        }

        break;
      case 1:
        {
          elementTypeId = array.__elementTypeId$;
          if (!(!isJavaString(value_0) && !hasTypeMarker(value_0)) && !canCast(value_0, elementTypeId)) {
            throw new ArrayStoreException;
          }
          break;
        }

    }
  }
  return array[index_0] = value_0;
}

function cacheJavaScriptException(e, jse){
  if (e && typeof e == 'object') {
    try {
      e.__gwt$exception = jse;
    }
     catch (ignored) {
    }
  }
}

function unwrap(e){
  var jse;
  if (instanceOf(e, 117)) {
    jse = dynamicCast(e, 117);
    if (maskUndefined(jse.e) !== maskUndefined(($clinit_JavaScriptException() , NOT_SET))) {
      return maskUndefined(jse.e) === maskUndefined(NOT_SET)?null:jse.e;
    }
  }
  return e;
}

function wrap(e){
  var jse;
  if (instanceOf(e, 18)) {
    return e;
  }
  jse = e && e.__gwt$exception;
  if (!jse) {
    jse = new JavaScriptException(e);
    captureStackTrace(jse, e);
    cacheJavaScriptException(e, jse);
  }
  return jse;
}

function create_1(value_0){
  var a0, a1, a2;
  a0 = value_0 & $intern_9;
  a1 = value_0 >> 22 & $intern_9;
  a2 = value_0 < 0?$intern_10:0;
  return create0(a0, a1, a2);
}

function create_2(a){
  return create0(a.l, a.m, a.h);
}

function create0(l, m, h){
  return {l:l, m:m, h:h};
}

function divMod(a, b, computeRemainder){
  var aIsCopy, aIsMinValue, aIsNegative, bpower, c, negative;
  if (b.l == 0 && b.m == 0 && b.h == 0) {
    throw new ArithmeticException('divide by zero');
  }
  if (a.l == 0 && a.m == 0 && a.h == 0) {
    computeRemainder && (remainder_0 = create0(0, 0, 0));
    return create0(0, 0, 0);
  }
  if (b.h == $intern_11 && b.m == 0 && b.l == 0) {
    return divModByMinValue(a, computeRemainder);
  }
  negative = false;
  if (b.h >> 19 != 0) {
    b = neg(b);
    negative = true;
  }
  bpower = powerOfTwo(b);
  aIsNegative = false;
  aIsMinValue = false;
  aIsCopy = false;
  if (a.h == $intern_11 && a.m == 0 && a.l == 0) {
    aIsMinValue = true;
    aIsNegative = true;
    if (bpower == -1) {
      a = create_2(($clinit_LongLib$Const() , MAX_VALUE));
      aIsCopy = true;
      negative = !negative;
    }
     else {
      c = shr(a, bpower);
      negative && negate(c);
      computeRemainder && (remainder_0 = create0(0, 0, 0));
      return c;
    }
  }
   else if (a.h >> 19 != 0) {
    aIsNegative = true;
    a = neg(a);
    aIsCopy = true;
    negative = !negative;
  }
  if (bpower != -1) {
    return divModByShift(a, bpower, negative, aIsNegative, computeRemainder);
  }
  if (!gte_0(a, b)) {
    computeRemainder && (aIsNegative?(remainder_0 = neg(a)):(remainder_0 = create0(a.l, a.m, a.h)));
    return create0(0, 0, 0);
  }
  return divModHelper(aIsCopy?a:create0(a.l, a.m, a.h), b, negative, aIsNegative, aIsMinValue, computeRemainder);
}

function divModByMinValue(a, computeRemainder){
  if (a.h == $intern_11 && a.m == 0 && a.l == 0) {
    computeRemainder && (remainder_0 = create0(0, 0, 0));
    return create_2(($clinit_LongLib$Const() , ONE));
  }
  computeRemainder && (remainder_0 = create0(a.l, a.m, a.h));
  return create0(0, 0, 0);
}

function divModByShift(a, bpower, negative, aIsNegative, computeRemainder){
  var c;
  c = shr(a, bpower);
  negative && negate(c);
  if (computeRemainder) {
    a = maskRight(a, bpower);
    aIsNegative?(remainder_0 = neg(a)):(remainder_0 = create0(a.l, a.m, a.h));
  }
  return c;
}

function divModHelper(a, b, negative, aIsNegative, aIsMinValue, computeRemainder){
  var bshift, gte, quotient, shift_0, a1, a2, a0;
  shift_0 = numberOfLeadingZeros(b) - numberOfLeadingZeros(a);
  bshift = shl(b, shift_0);
  quotient = create0(0, 0, 0);
  while (shift_0 >= 0) {
    gte = trialSubtract(a, bshift);
    if (gte) {
      shift_0 < 22?(quotient.l |= 1 << shift_0 , undefined):shift_0 < 44?(quotient.m |= 1 << shift_0 - 22 , undefined):(quotient.h |= 1 << shift_0 - 44 , undefined);
      if (a.l == 0 && a.m == 0 && a.h == 0) {
        break;
      }
    }
    a1 = bshift.m;
    a2 = bshift.h;
    a0 = bshift.l;
    setH(bshift, a2 >>> 1);
    bshift.m = a1 >>> 1 | (a2 & 1) << 21;
    bshift.l = a0 >>> 1 | (a1 & 1) << 21;
    --shift_0;
  }
  negative && negate(quotient);
  if (computeRemainder) {
    if (aIsNegative) {
      remainder_0 = neg(a);
      aIsMinValue && (remainder_0 = sub_0(remainder_0, ($clinit_LongLib$Const() , ONE)));
    }
     else {
      remainder_0 = create0(a.l, a.m, a.h);
    }
  }
  return quotient;
}

function maskRight(a, bits){
  var b0, b1, b2;
  if (bits <= 22) {
    b0 = a.l & (1 << bits) - 1;
    b1 = b2 = 0;
  }
   else if (bits <= 44) {
    b0 = a.l;
    b1 = a.m & (1 << bits - 22) - 1;
    b2 = 0;
  }
   else {
    b0 = a.l;
    b1 = a.m;
    b2 = a.h & (1 << bits - 44) - 1;
  }
  return create0(b0, b1, b2);
}

function negate(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & $intern_9;
  neg1 = ~a.m + (neg0 == 0?1:0) & $intern_9;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_10;
  setL(a, neg0);
  setM(a, neg1);
  setH(a, neg2);
}

function numberOfLeadingZeros(a){
  var b1, b2;
  b2 = numberOfLeadingZeros_0(a.h);
  if (b2 == 32) {
    b1 = numberOfLeadingZeros_0(a.m);
    return b1 == 32?numberOfLeadingZeros_0(a.l) + 32:b1 + 20 - 10;
  }
   else {
    return b2 - 12;
  }
}

function powerOfTwo(a){
  var h, l, m;
  l = a.l;
  if ((l & l - 1) != 0) {
    return -1;
  }
  m = a.m;
  if ((m & m - 1) != 0) {
    return -1;
  }
  h = a.h;
  if ((h & h - 1) != 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l == 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l != 0) {
    return numberOfTrailingZeros(l);
  }
  if (h == 0 && m != 0 && l == 0) {
    return numberOfTrailingZeros(m) + 22;
  }
  if (h != 0 && m == 0 && l == 0) {
    return numberOfTrailingZeros(h) + 44;
  }
  return -1;
}

function setH(a, x_0){
  a.h = x_0;
}

function setL(a, x_0){
  a.l = x_0;
}

function setM(a, x_0){
  a.m = x_0;
}

function toDoubleHelper(a){
  return a.l + a.m * $intern_12 + a.h * $intern_13;
}

function trialSubtract(a, b){
  var sum0, sum1, sum2;
  sum2 = a.h - b.h;
  if (sum2 < 0) {
    return false;
  }
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (sum0 >> 22);
  sum2 += sum1 >> 22;
  if (sum2 < 0) {
    return false;
  }
  setL(a, sum0 & $intern_9);
  setM(a, sum1 & $intern_9);
  setH(a, sum2 & $intern_10);
  return true;
}

var remainder_0;
function add_0(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l + b.l;
  sum1 = a.m + b.m + (sum0 >> 22);
  sum2 = a.h + b.h + (sum1 >> 22);
  return {l:sum0 & $intern_9, m:sum1 & $intern_9, h:sum2 & $intern_10};
}

function and(a, b){
  return {l:a.l & b.l, m:a.m & b.m, h:a.h & b.h};
}

function div(a, b){
  return divMod(a, b, false);
}

function eq(a, b){
  return a.l == b.l && a.m == b.m && a.h == b.h;
}

function fromDouble(value_0){
  var a0, a1, a2, negative, result;
  if (isNaN(value_0)) {
    return $clinit_LongLib$Const() , ZERO;
  }
  if (value_0 < $intern_14) {
    return $clinit_LongLib$Const() , MIN_VALUE;
  }
  if (value_0 >= 9223372036854775807) {
    return $clinit_LongLib$Const() , MAX_VALUE;
  }
  negative = false;
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  a2 = 0;
  if (value_0 >= $intern_13) {
    a2 = round_int(value_0 / $intern_13);
    value_0 -= a2 * $intern_13;
  }
  a1 = 0;
  if (value_0 >= $intern_12) {
    a1 = round_int(value_0 / $intern_12);
    value_0 -= a1 * $intern_12;
  }
  a0 = round_int(value_0);
  result = create0(a0, a1, a2);
  negative && negate(result);
  return result;
}

function fromInt(value_0){
  var rebase, result;
  if (value_0 > -129 && value_0 < 128) {
    rebase = value_0 + 128;
    boxedValues == null && (boxedValues = initDim(Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit, $intern_15, 715, 256, 0, 1));
    result = boxedValues[rebase];
    !result && (result = boxedValues[rebase] = create_1(value_0));
    return result;
  }
  return create_1(value_0);
}

function gt(a, b){
  var signa, signb;
  signa = a.h >> 19;
  signb = b.h >> 19;
  return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l > b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l <= b.l);
}

function gte_0(a, b){
  var signa, signb;
  signa = a.h >> 19;
  signb = b.h >> 19;
  return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l >= b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l < b.l);
}

function lt(a, b){
  return !gte_0(a, b);
}

function lte(a, b){
  return !gt(a, b);
}

function mod(a, b){
  divMod(a, b, true);
  return remainder_0;
}

function mul(a, b){
  var a0, a1, a2, a3, a4, b0, b1, b2, b3, b4, c0, c00, c01, c1, c10, c11, c12, c13, c2, c22, c23, c24, p0, p1, p2, p3, p4;
  a0 = a.l & 8191;
  a1 = a.l >> 13 | (a.m & 15) << 9;
  a2 = a.m >> 4 & 8191;
  a3 = a.m >> 17 | (a.h & 255) << 5;
  a4 = (a.h & 1048320) >> 8;
  b0 = b.l & 8191;
  b1 = b.l >> 13 | (b.m & 15) << 9;
  b2 = b.m >> 4 & 8191;
  b3 = b.m >> 17 | (b.h & 255) << 5;
  b4 = (b.h & 1048320) >> 8;
  p0 = a0 * b0;
  p1 = a1 * b0;
  p2 = a2 * b0;
  p3 = a3 * b0;
  p4 = a4 * b0;
  if (b1 != 0) {
    p1 += a0 * b1;
    p2 += a1 * b1;
    p3 += a2 * b1;
    p4 += a3 * b1;
  }
  if (b2 != 0) {
    p2 += a0 * b2;
    p3 += a1 * b2;
    p4 += a2 * b2;
  }
  if (b3 != 0) {
    p3 += a0 * b3;
    p4 += a1 * b3;
  }
  b4 != 0 && (p4 += a0 * b4);
  c00 = p0 & $intern_9;
  c01 = (p1 & 511) << 13;
  c0 = c00 + c01;
  c10 = p0 >> 22;
  c11 = p1 >> 9;
  c12 = (p2 & 262143) << 4;
  c13 = (p3 & 31) << 17;
  c1 = c10 + c11 + c12 + c13;
  c22 = p2 >> 18;
  c23 = p3 >> 5;
  c24 = (p4 & 4095) << 8;
  c2 = c22 + c23 + c24;
  c1 += c0 >> 22;
  c0 &= $intern_9;
  c2 += c1 >> 22;
  c1 &= $intern_9;
  c2 &= $intern_10;
  return create0(c0, c1, c2);
}

function neg(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & $intern_9;
  neg1 = ~a.m + (neg0 == 0?1:0) & $intern_9;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_10;
  return create0(neg0, neg1, neg2);
}

function neq(a, b){
  return a.l != b.l || a.m != b.m || a.h != b.h;
}

function or(a, b){
  return {l:a.l | b.l, m:a.m | b.m, h:a.h | b.h};
}

function shl(a, n){
  var res0, res1, res2;
  n &= 63;
  if (n < 22) {
    res0 = a.l << n;
    res1 = a.m << n | a.l >> 22 - n;
    res2 = a.h << n | a.m >> 22 - n;
  }
   else if (n < 44) {
    res0 = 0;
    res1 = a.l << n - 22;
    res2 = a.m << n - 22 | a.l >> 44 - n;
  }
   else {
    res0 = 0;
    res1 = 0;
    res2 = a.l << n - 44;
  }
  return {l:res0 & $intern_9, m:res1 & $intern_9, h:res2 & $intern_10};
}

function shr(a, n){
  var a2, negative, res0, res1, res2;
  n &= 63;
  a2 = a.h;
  negative = (a2 & $intern_11) != 0;
  negative && (a2 |= -1048576);
  if (n < 22) {
    res2 = a2 >> n;
    res1 = a.m >> n | a2 << 22 - n;
    res0 = a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = negative?$intern_10:0;
    res1 = a2 >> n - 22;
    res0 = a.m >> n - 22 | a2 << 44 - n;
  }
   else {
    res2 = negative?$intern_10:0;
    res1 = negative?$intern_9:0;
    res0 = a2 >> n - 44;
  }
  return {l:res0 & $intern_9, m:res1 & $intern_9, h:res2 & $intern_10};
}

function shru(a, n){
  var a2, res0, res1, res2;
  n &= 63;
  a2 = a.h & $intern_10;
  if (n < 22) {
    res2 = a2 >>> n;
    res1 = a.m >> n | a2 << 22 - n;
    res0 = a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = 0;
    res1 = a2 >>> n - 22;
    res0 = a.m >> n - 22 | a.h << 44 - n;
  }
   else {
    res2 = 0;
    res1 = 0;
    res0 = a2 >>> n - 44;
  }
  return {l:res0 & $intern_9, m:res1 & $intern_9, h:res2 & $intern_10};
}

function sub_0(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (sum0 >> 22);
  sum2 = a.h - b.h + (sum1 >> 22);
  return {l:sum0 & $intern_9, m:sum1 & $intern_9, h:sum2 & $intern_10};
}

function toDouble(a){
  if (eq(a, ($clinit_LongLib$Const() , MIN_VALUE))) {
    return $intern_14;
  }
  if (!gte_0(a, ZERO)) {
    return -toDoubleHelper(neg(a));
  }
  return a.l + a.m * $intern_12 + a.h * $intern_13;
}

function toInt(a){
  return a.l | a.m << 22;
}

function toString_3(a){
  var digits, rem, res, tenPowerLong, zeroesNeeded;
  if (a.l == 0 && a.m == 0 && a.h == 0) {
    return '0';
  }
  if (a.h == $intern_11 && a.m == 0 && a.l == 0) {
    return '-9223372036854775808';
  }
  if (a.h >> 19 != 0) {
    return '-' + toString_3(neg(a));
  }
  rem = a;
  res = '';
  while (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
    tenPowerLong = fromInt($intern_16);
    rem = divMod(rem, tenPowerLong, true);
    digits = '' + toInt(remainder_0);
    if (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
      zeroesNeeded = 9 - digits.length;
      for (; zeroesNeeded > 0; zeroesNeeded--) {
        digits = '0' + digits;
      }
    }
    res = digits + res;
  }
  return res;
}

function xor(a, b){
  return {l:a.l ^ b.l, m:a.m ^ b.m, h:a.h ^ b.h};
}

var boxedValues;
function $clinit_LongLib$Const(){
  $clinit_LongLib$Const = emptyMethod;
  MAX_VALUE = create0($intern_9, $intern_9, 524287);
  MIN_VALUE = create0(0, 0, $intern_11);
  ONE = fromInt(1);
  fromInt(2);
  ZERO = fromInt(0);
}

var MAX_VALUE, MIN_VALUE, ONE, ZERO;
function hasTypeMarker(o){
  return o.typeMarker$ === typeMarkerFn;
}

function init(){
  $wnd.setTimeout($entry(assertCompileTimeUserAgent));
  $onModuleLoad();
  new CodPricingEngineStartHandler_ExporterImpl;
  $clinit_ExporterUtil();
  $export_36();
}

function $onModuleLoad(){
  var allowedModes, currentMode, i_0;
  currentMode = $doc.compatMode;
  allowedModes = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['CSS1Compat']);
  for (i_0 = 0; i_0 < allowedModes.length; i_0++) {
    if ($equals_7(allowedModes[i_0], currentMode)) {
      return;
    }
  }
  allowedModes.length == 1 && $equals_7('CSS1Compat', allowedModes[0]) && $equals_7('BackCompat', currentMode)?"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\"document.compatMode\" value=\"" + currentMode + '"/&gt;':"Your *.gwt.xml module configuration prohibits the use of the current document rendering mode (document.compatMode=' " + currentMode + "').<br>Modify your application's host HTML page doctype, or update your custom " + "'document.compatMode' configuration property settings.";
}

function assertCompileTimeUserAgent(){
  var runtimeValue;
  runtimeValue = $getRuntimeValue();
  if (!$equals_7('safari', runtimeValue)) {
    throw new UserAgentAsserter$UserAgentAssertionError(runtimeValue);
  }
}

function Error_0(message, cause){
  this.cause = cause;
  this.detailMessage = message;
  $fillInStackTrace(this);
}

defineClass(212, 18, $intern_1);
var Ljava_lang_Error_2_classLit = createForClass('java.lang', 'Error', 212, Ljava_lang_Throwable_2_classLit);
defineClass(57, 212, $intern_1);
var Ljava_lang_AssertionError_2_classLit = createForClass('java.lang', 'AssertionError', 57, Ljava_lang_Error_2_classLit);
function UserAgentAsserter$UserAgentAssertionError(runtimeValue){
  Error_0.call(this, '' + ('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (safari) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.'), instanceOf('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (safari) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.', 18)?dynamicCast('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (safari) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.', 18):null);
}

defineClass(363, 57, $intern_1, UserAgentAsserter$UserAgentAssertionError);
var Lcom_google_gwt_useragent_client_UserAgentAsserter$UserAgentAssertionError_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentAsserter/UserAgentAssertionError', 363, Ljava_lang_AssertionError_2_classLit);
function $getRuntimeValue(){
  var ua = navigator.userAgent.toLowerCase();
  var docMode = $doc.documentMode;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 10 && docMode < 11;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 9 && docMode < 11;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 8 && docMode < 11;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1 || docMode >= 11;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}

function $addItem(speDoc, speItemInput){
  var accessTimestamp, accessTimestampStr, allAttribNames, attribName, attribName$index, attribName$max, attribValues, exchRateDate, exchRateDateStr, exchRateTypeStr, prcProduct, pricingProductUnits, pricingUnit, pricingUnit$iterator, speItem, timestampNameValue, timestampNameValue$iterator, item_0;
  try {
    prcProduct = new PricingProduct(speItemInput.productId, speItemInput.productId, speItemInput.baseUnit);
    pricingProductUnits = (!speItemInput.pricingProductUnits && (speItemInput.pricingProductUnits = new ArrayList) , speItemInput.pricingProductUnits);
    for (pricingUnit$iterator = new AbstractList$IteratorImpl(pricingProductUnits); pricingUnit$iterator.i < pricingUnit$iterator.this$01.size_1();) {
      pricingUnit = (checkCriticalElement(pricingUnit$iterator.i < pricingUnit$iterator.this$01.size_1()) , dynamicCast(pricingUnit$iterator.this$01.get_5(pricingUnit$iterator.last = pricingUnit$iterator.i++), 186));
      $addAlternativeUnitToFractionMapping(prcProduct, pricingUnit.alternativeUnitName, pricingUnit.numerator, pricingUnit.denominator, pricingUnit.exponent);
    }
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      return null;
    }
     else 
      throw unwrap($e0);
  }
  speItem = (item_0 = new Item(speDoc, prcProduct) , $putStringValue(speDoc.items, (item_0.id_0 == null && (item_0.id_0 = uuid_0()) , item_0.id_0), item_0) , item_0);
  $setRelevantPricing(speItem);
  $setExternalId(speItem, speItemInput.externalId);
  $setId_0(speItem, speItemInput.itemId);
  try {
    exchRateTypeStr = speItemInput.exchRateType;
    (exchRateTypeStr == null || $equalsIgnoreCase(exchRateTypeStr, '')) && (exchRateTypeStr = 'M');
    exchRateDateStr = speItemInput.exchRateDate;
    exchRateDateStr == null || $equalsIgnoreCase(exchRateDateStr, '')?(exchRateDate = today()):(exchRateDate = parseYYYYMMDD(exchRateDateStr));
    $setExchangeRate_1(speItem, exchRateTypeStr, exchRateDate, ($clinit_ConversionConstants() , C_ZERO));
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 9)) {
      return null;
    }
     else 
      throw unwrap($e1);
  }
  try {
    $setProductQuantity_0(speItem, speItemInput.quantityStr, speItemInput.quantityUnit);
  }
   catch ($e2) {
    $e2 = wrap($e2);
    if (instanceOf($e2, 9)) {
      return null;
    }
     else 
      throw unwrap($e2);
  }
  allAttribNames = $getAllAttributes(speItemInput);
  for (attribName$index = 0 , attribName$max = allAttribNames.length; attribName$index < attribName$max; ++attribName$index) {
    attribName = allAttribNames[attribName$index];
    attribValues = $getAttributeValues(speItemInput, attribName);
    $setAttributeBinding_0(speItem, attribName, attribValues);
  }
  for (timestampNameValue$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(speItemInput.accessTimeStamps)).this$01); $hasNext(timestampNameValue$iterator);) {
    timestampNameValue = (checkStructuralChange(timestampNameValue$iterator.this$01, timestampNameValue$iterator) , checkCriticalElement($hasNext(timestampNameValue$iterator)) , timestampNameValue$iterator.last = timestampNameValue$iterator.current , dynamicCast(timestampNameValue$iterator.current.next(), 25));
    accessTimestampStr = dynamicCastToString(timestampNameValue.getValue_1());
    accessTimestamp = parseyyyyMMddHHmmss(accessTimestampStr);
    $setConditionAccessTimestamp(speItem, dynamicCastToString(timestampNameValue.getKey()), accessTimestamp);
  }
  !!speItemInput.manualCondns && $addItemManualConditions(speItem, speItemInput.manualCondns);
  return speItem.id_0 == null && (speItem.id_0 = uuid_0()) , speItem.id_0;
}

function $addItemManualConditions(speItem, manualCondns){
  var e, prcItem, prcManualCondn, prcManualCondn$iterator;
  for (prcManualCondn$iterator = new AbstractList$IteratorImpl(manualCondns); prcManualCondn$iterator.i < prcManualCondn$iterator.this$01.size_1();) {
    prcManualCondn = (checkCriticalElement(prcManualCondn$iterator.i < prcManualCondn$iterator.this$01.size_1()) , dynamicCast(prcManualCondn$iterator.this$01.get_5(prcManualCondn$iterator.last = prcManualCondn$iterator.i++), 185));
    try {
      prcItem = ($updatePricingItem_1(speItem.pricingItemConnector) , speItem.pricingItem);
      $addPricingCondition_2(prcItem, prcManualCondn.condTypeName, prcManualCondn.condRate, prcManualCondn.unitName, prcManualCondn.prUnitValue, prcManualCondn.prUnitName);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 34)) {
        e = $e0;
        $fireSetStatusMessage_0(prcItem, new ErrorStatusEvent(e.args, e.messageNumber, '', ''));
        $printStackTrace(e);
      }
       else if (instanceOf($e0, 17)) {
        e = $e0;
        $fireSetStatusMessage_0(prcItem, new ErrorStatusEvent(e.args, e.messageNumber, '', ''));
        $printStackTrace(e);
      }
       else 
        throw unwrap($e0);
    }
  }
}

function $addItems(this$static, speDoc, speItemsInput){
  var addedItems, itemId, speItemInput, speItemInput$iterator;
  addedItems = new ArrayList;
  for (speItemInput$iterator = new AbstractList$IteratorImpl(speItemsInput); speItemInput$iterator.i < speItemInput$iterator.this$01.size_1();) {
    speItemInput = (checkCriticalElement(speItemInput$iterator.i < speItemInput$iterator.this$01.size_1()) , dynamicCast(speItemInput$iterator.this$01.get_5(speItemInput$iterator.last = speItemInput$iterator.i++), 138));
    itemId = $addItem(speDoc, speItemInput);
    itemId != null && (setCheck(addedItems.array, addedItems.array.length, itemId) , true);
  }
  return addedItems;
}

function $createDocument(docInput){
  var conversionEngine, documentCurrencyUnit, documentId, locCurrency, speDoc;
  try {
    conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    documentCurrencyUnit = $getCurrencyUnit(conversionEngine, docInput.docCurrency);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      return null;
    }
     else 
      throw unwrap($e0);
  }
  speDoc = new Document_0(($getDocumentEngine(factory_4) , docInput.application), documentCurrencyUnit);
  documentId = (speDoc.id_0 == null && (speDoc.id_0 = uuid_0()) , speDoc.id_0);
  try {
    $addPricingProcedure_0(speDoc, docInput.pricingProcedureName);
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 9)) {
      return null;
    }
     else 
      throw unwrap($e1);
  }
  try {
    locCurrency = docInput.locCurrency;
    locCurrency == null && null.nullMethod() && docInput.docCurrency;
    $setLocalCurrency_0(speDoc, docInput.locCurrency);
  }
   catch ($e2) {
    $e2 = wrap($e2);
    if (instanceOf($e2, 9)) {
      return null;
    }
     else 
      throw unwrap($e2);
  }
  speDoc.id_0 = documentId;
  return speDoc;
}

function $getDocumentResult(speDoc, itemResltrequired){
  var docReslt;
  if (speDoc) {
    docReslt = $prepareDocResult(speDoc, itemResltrequired);
    return docReslt;
  }
  return null;
}

function $prepareDocResult(speDoc, itemResltrequired){
  var docResult, i_0, itemReslt, items, netValue;
  docResult = new CodPricingDocumentOutput;
  netValue = ($updatePricingDocument(speDoc.pricingDocumentConnector) , speDoc.pricingDocument?$getNetValue_1(speDoc.pricingDocument):$getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , $clinit_Document() , ZERO_1), speDoc.documentCurrency));
  $setNetValue(docResult, netValue.m_value);
  $setNetValueCurrency(docResult, netValue.m_unit.getUnitName_0());
  $setNetValueLocale(docResult, $getValueAsString_0(netValue));
  $setPricingConditions(docResult, $getPricingConditions(speDoc));
  if (itemResltrequired) {
    new ArrayList;
    items = $getItems(speDoc);
    for (i_0 = 0; i_0 < items.length; i_0++) {
      itemReslt = $prepareItemResult(items[i_0]);
      !docResult.items && (docResult.items = new ArrayList);
      $add_3(docResult.items, itemReslt);
    }
  }
  return docResult;
}

function $prepareItemResult(speItem){
  var currLine, currProtocolLine, itemMessage, itemProtocol, itemResult, msgVars, protocolLineMessage, resultMessages;
  itemResult = new CodPricingItemOutput;
  resultMessages = new ArrayList;
  itemProtocol = speItem.protocol;
  currLine = itemProtocol._firstLine;
  while (currLine) {
    currProtocolLine = currLine._line;
    protocolLineMessage = currProtocolLine._message;
    if (protocolLineMessage) {
      msgVars = protocolLineMessage._upToFourVariables;
      itemMessage = new CodPricingItemMessage_1(protocolLineMessage._area, '' + protocolLineMessage._number, protocolLineMessage._defaultMessage, msgVars);
      setCheck(resultMessages.array, resultMessages.array.length, itemMessage);
    }
    currLine = $getNextLine(currLine);
  }
  $setId(itemResult, (speItem.id_0 == null && (speItem.id_0 = uuid_0()) , speItem.id_0));
  $setItemId(itemResult, speItem.product.conversionProduct.m_ID);
  $setNetValue_0(itemResult, $getNetValue(speItem).m_value);
  $setNetValueCurrency_0(itemResult, $getNetValue(speItem).m_unit.getUnitName_0());
  $setNetValueLocale_0(itemResult, $getValueAsString_0($getNetValue(speItem)));
  $setNetPrice(itemResult, $getNetPrice(($updatePricingItem_1(speItem.pricingItemConnector) , speItem.pricingItem).accumulator).m_value);
  $setNetPriceLocale(itemResult, $getValueAsString_0($getNetPrice(($updatePricingItem_1(speItem.pricingItemConnector) , speItem.pricingItem).accumulator)));
  $setPricingConditions_0(itemResult, $getPricingConditions_0(speItem));
  $setResultMessages(itemResult, dynamicCast($toArray_1(resultMessages, initDim(Lcom_sap_cod_pricing_engine_calc_CodPricingItemMessage_2_classLit, $intern_17, 87, 0, 0, 1)), 277));
  return itemResult;
}

function CodPriceCalculationManager(){
}

defineClass(217, 1, {217:1, 32:1}, CodPriceCalculationManager);
_.addItem_0 = function addItem(speDoc, speItemInput){
  return $addItem(speDoc, speItemInput);
}
;
_.addItems_0 = function addItems(speDoc, speItemsInput){
  return $addItems(this, speDoc, speItemsInput);
}
;
_.calculate_0 = function calculate(calcDocInput){
  var allAttribNames, attribName, attribName$index, attribName$max, custEngine, i_0, item2, prcDocOut, prcItemOut, prcItems;
  custEngine = $getCustomizingEngine(factory_0, 'A');
  custEngine.getAllApplications();
  custEngine.getApplicationField('V', 'CND_BUYER_GUID');
  prcItems = $getitemArray(calcDocInput);
  for (i_0 = 0; i_0 < prcItems.length; i_0++) {
    item2 = prcItems[i_0];
    allAttribNames = $getAllAttributes(item2);
    for (attribName$index = 0 , attribName$max = allAttribNames.length; attribName$index < attribName$max; ++attribName$index) {
      attribName = allAttribNames[attribName$index];
      $getAttributeValues(item2, attribName);
    }
  }
  prcDocOut = new CodPricingDocumentOutput;
  prcItemOut = new CodPricingItemOutput;
  $setNetValue_0(prcItemOut, new BigDecimal_4('110.22'));
  prcItemOut.netValueCurrency = 'USD';
  !prcDocOut.items && (prcDocOut.items = new ArrayList);
  $add_3(prcDocOut.items, prcItemOut);
  $setNetValue(prcDocOut, new BigDecimal_4('110.22'));
  prcDocOut.netValueCurrency = 'USD';
  return prcDocOut;
}
;
_.calculatePrice_0 = function calculatePrice(priceCalcInput){
  var calcResult, docId, itemsInput, pricingResult, speDoc;
  pricingResult = new HashMap;
  if (priceCalcInput) {
    speDoc = $createDocument(priceCalcInput);
    if (speDoc) {
      $setAlwaysPerformGroupConditionProcessing(speDoc);
      itemsInput = (!priceCalcInput.items && (priceCalcInput.items = new ArrayList) , priceCalcInput.items);
      if (!!itemsInput && itemsInput.array.length != 0) {
        $addItems(this, speDoc, itemsInput);
        docId = priceCalcInput.id_0;
        calcResult = $getDocumentResult(speDoc, true);
        docId == null?$put_1(pricingResult.hashCodeMap, null, calcResult):pricingResult.stringMap.put_1(docId, calcResult);
      }
    }
  }
  return pricingResult;
}
;
_.getDocumentResult_0 = function getDocumentResult(speDoc, itemResltrequired){
  return $getDocumentResult(speDoc, itemResltrequired);
}
;
var Lcom_sap_cod_pricing_engine_api_CodPriceCalculationManager_2_classLit = createForClass('com.sap.cod.pricing.engine.api', 'CodPriceCalculationManager', 217, Ljava_lang_Object_2_classLit);
function $export(this$static){
  if (!exported) {
    exported = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_api_CodPriceCalculationManager_2_classLit, this$static);
    new CodPricingItemInput_ExporterImpl;
    new CodPricingDocumentOutput_ExporterImpl;
    new CodPricingDocumentInput_ExporterImpl;
    $export0(this$static);
  }
}

function $export0(this$static){
  var pkg = declarePackage('sapcodpricing.CodPriceCalculationManager');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPriceCalculationManager = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPriceCalculationManager);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPriceCalculationManager.prototype = new Object;
  __0.addItem = $entry(function(a0, a1){
    return this.g.addItem_0(a0, a1 == null?null:a1.g);
  }
  );
  __0.addItems = $entry(function(a0, a1){
    return this.g.addItems_0(a0, gwtInstance(a1));
  }
  );
  __0.calculate = $entry(function(a0){
    return wrap_0(this.g.calculate_0(a0 == null?null:a0.g));
  }
  );
  __0.calculatePrice = $entry(function(a0){
    return this.g.calculatePrice_0(a0 == null?null:a0.g);
  }
  );
  __0.getDocumentResult = $entry(function(a0, a1){
    return wrap_0(this.g.getDocumentResult_0(a0, a1));
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPriceCalculationManager[p] === undefined && ($wnd.sapcodpricing.CodPriceCalculationManager[p] = pkg[p]);
}

function CodPriceCalculationManager_ExporterImpl(){
  $export(this);
}

defineClass(396, 1, $intern_18, CodPriceCalculationManager_ExporterImpl);
_.getJsConstructor = function getJsConstructor(){
  return $wnd.sapcodpricing.CodPriceCalculationManager;
}
;
_.isAssignable = function isAssignable(o){
  return o != null && instanceOf(o, 217);
}
;
var exported = false;
var Lcom_sap_cod_pricing_engine_api_CodPriceCalculationManager_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.api', 'CodPriceCalculationManager_ExporterImpl', 396, Ljava_lang_Object_2_classLit);
function $convertEmptyStringToNull(str){
  return str == null || str.length == 0?null:str;
}

function $createPhysicalUnitTO(unitOfMeasurement, dimensionKey, numeratorSIUnitConversion, denominatorSIUnitConversion, baseTenExponentSIUnitConversion, additiveConstantSIUnitConversion, isoCode, primarySelectionForConversion){
  var physicalUnitTO;
  physicalUnitTO = new PhysicalUnitTO;
  physicalUnitTO.name_0 = unitOfMeasurement;
  physicalUnitTO.dimension = dimensionKey == null || dimensionKey.length == 0?null:dimensionKey;
  physicalUnitTO.fractionNumerator = numeratorSIUnitConversion;
  physicalUnitTO.fractionDenominator = denominatorSIUnitConversion;
  physicalUnitTO.fractionExponent = baseTenExponentSIUnitConversion;
  physicalUnitTO.offset = additiveConstantSIUnitConversion;
  physicalUnitTO.isoCode = isoCode == null || isoCode.length == 0?null:isoCode;
  physicalUnitTO.isPrimaryUnitForIsoCodeConversion = primarySelectionForConversion;
  return physicalUnitTO;
}

function $getAccess(this$static, application, name_0, number){
  var access, accessSequence, accessesList, i_0, iter, j, size_0, to;
  accessSequence = $getAccessSequence(this$static, application, name_0);
  access = null;
  for (iter = accessSequence.accesses.iterator(); iter.i < iter.this$01.size_1();) {
    to = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 103));
    if (to.accessNumber == number) {
      access = to;
      break;
    }
  }
  if (!access) {
    access = new AccessTO;
    access.accessNumber = number;
    access.attributeMaps = new ArrayList;
    accessesList = accessSequence.accesses;
    size_0 = accessesList.size_1();
    if (size_0 == 0)
      accessesList.add_0(access);
    else {
      i_0 = 0;
      while (i_0 < size_0) {
        if (dynamicCast(accessesList.get_5(i_0), 103).accessNumber >= number)
          break;
        ++i_0;
      }
      if (i_0 == size_0)
        accessesList.add_0(access);
      else {
        if (number < dynamicCast(accessesList.get_5(i_0), 103).accessNumber) {
          accessesList.add_0(accessesList.get_5(size_0 - 1));
          for (j = size_0 - 1; j > i_0; j--)
            accessesList.set_0(j, accessesList.get_5(j - 1));
          accessesList.set_0(i_0, access);
        }
      }
    }
  }
  return access;
}

function $getAccessSequence(this$static, application, name_0){
  var accessSequence;
  accessSequence = $getAccessSequence_0(this$static.accessSequenceDAO, application, this$static.usage, name_0);
  if (!accessSequence) {
    accessSequence = new AccessSequenceTO;
    accessSequence.application = application;
    accessSequence.usage = this$static.usage;
    accessSequence.name_0 = name_0;
    accessSequence.accesses = new ArrayList;
    $putAccessSequence(this$static.accessSequenceDAO, accessSequence);
    accessSequence = null;
  }
  return accessSequence;
}

function $getPricingProcedure(this$static, application, name_0){
  var pricingProcedure;
  pricingProcedure = null;
  try {
    pricingProcedure = $getPricingProcedure_0(this$static.pricingProcedureDAO, application, this$static.usage, name_0);
    if (!pricingProcedure) {
      pricingProcedure = new PricingProcedureTO_0;
      pricingProcedure.application = application;
      pricingProcedure.usage = this$static.usage;
      pricingProcedure.name_0 = name_0;
      pricingProcedure.steps = new ArrayList;
      $putPricingProcedure(this$static.pricingProcedureDAO, pricingProcedure);
    }
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
  return pricingProcedure;
}

function $getPricingStep(this$static, application, name_0, number, counter){
  var iter, pricingProcedure, pricingStep, to;
  pricingProcedure = $getPricingProcedure(this$static, application, name_0);
  pricingStep = null;
  for (iter = pricingProcedure.steps.iterator(); iter.i < iter.this$01.size_1();) {
    to = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 121));
    if (to.stepNumber == number && to.counter == counter) {
      pricingStep = to;
      break;
    }
  }
  if (!pricingStep) {
    pricingStep = new PricingStepTO;
    pricingStep.stepNumber = number;
    pricingStep.counter = counter;
    pricingProcedure.steps.add_0(pricingStep);
  }
  return pricingStep;
}

function $putConditionTable(this$static, applicationName, conditionTableNamePart, conditionTableName, variableKeyFields){
  var i_0, tableTO;
  tableTO = new ConditionTableTO;
  tableTO.application = applicationName;
  tableTO.usage = this$static.usage;
  tableTO.conditionTable = conditionTableNamePart;
  tableTO.conditionTableFullName = conditionTableName == null || conditionTableName.length == 0?null:conditionTableName;
  tableTO.useNamespace = false;
  tableTO.hasValidityPeriod = true;
  tableTO.variableDataFields = new ArrayList_0(0);
  tableTO.variableKeyFields = new ArrayList_0(variableKeyFields.length);
  for (i_0 = 0; i_0 < variableKeyFields.length; i_0++) {
    tableTO.variableKeyFields.add_0($convertEmptyStringToNull(variableKeyFields[i_0]));
  }
  $putConditionTable_0(this$static.conditionTableDAO, tableTO);
}

function $putCurrencyUnit(this$static, currencyUnitName, nbOfDecimalPlaces){
  var currencyUnit;
  currencyUnit = new CurrencyUnitTO;
  currencyUnit.name_0 = currencyUnitName;
  currencyUnit.isoCode = null;
  currencyUnit.numberOfDecimals = nbOfDecimalPlaces;
  currencyUnit.isPrimaryUnitForIsoCodeConversion = false;
  try {
    $putCurrencyUnits_0(this$static.currencyUnitDAO, currencyUnit);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}

function $putExchangeRate(this$static, exchangeRateTypeName, fromCurrency, toCurrency, exchangeRateValidityStartDate, rate, fromFactor, toFactor){
  var exchangeRate;
  exchangeRate = new ExchangeRateTO;
  exchangeRate.name_0 = exchangeRateTypeName;
  exchangeRate.fromCurrency = fromCurrency;
  exchangeRate.toCurrency = toCurrency;
  exchangeRate.date = exchangeRateValidityStartDate;
  exchangeRate.rate = rate;
  exchangeRate.fromFactor = fromFactor;
  exchangeRate.toFactor = toFactor;
  try {
    $putExchangeRate_0(this$static.exchangeRateDAO, exchangeRate);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}

function $putExclusionGroup(this$static, applicationName, groupName, conditionTypeNames){
  var exclusionGroup, i_0;
  exclusionGroup = new ExclusionGroupTO;
  exclusionGroup.application = applicationName;
  exclusionGroup.name_0 = groupName;
  exclusionGroup.conditionTypeNames = new ArrayList_0(conditionTypeNames.length);
  for (i_0 = 0; i_0 < conditionTypeNames.length; i_0++)
    $add_3(exclusionGroup.conditionTypeNames, convertEmptyStringToNull(conditionTypeNames[i_0]));
  $putExclusionGroup_0(this$static.exclusionGroupDAO, exclusionGroup);
}

function $putPricingConditionMasterData(this$static, applicationName, condTableNamePart, condTypeName, validityStart, validityEnd, concatVarKeysVals, varKeysLength, calculationType, rateVal, rateUnit, prcUnit, unitOfMeasure, scaleType, scaleBaseType, scaleUoM, scaleCurrency, scaleAmountsString, scaleRatesString, lowerLimit, upperLimit){
  var condRecord, condRecordKey, condRecordMap, condRecordTO, condRecordTOList, condRecordTOMap, condTable, e, fieldValue, i_0, i0, i1, i2, j, keyForFacade, pos, pricingUnit, rateValue, scaleAmounts, scaleDefinitionTO, scaleLevelTO, scaleRateTO, scaleRates, varKeys, vkValues, retVal;
  scaleRates = initDim(Ljava_math_BigDecimal_2_classLit, $intern_7, 12, scaleRatesString.length, 0, 1);
  for (i0 = 0; i0 < scaleRatesString.length; i0++) {
    scaleRates[i0] = new BigDecimal(scaleRatesString[i0]);
  }
  scaleAmounts = initDim(Ljava_math_BigDecimal_2_classLit, $intern_7, 12, scaleAmountsString.length, 0, 1);
  for (j = 0; j < scaleAmountsString.length; j++) {
    scaleAmounts[j] = new BigDecimal_1(scaleAmountsString[j]);
  }
  pricingUnit = new BigDecimal_1(prcUnit);
  rateValue = new BigDecimal(rateVal);
  condRecordTO = new ConditionRecordTO;
  condTable = $getConditionTableByName(this$static.pce, applicationName, condTableNamePart);
  try {
    $getConditionType(this$static.pce, applicationName, condTypeName);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 42)) {
      e = $e0;
      $printStackTrace(e);
    }
     else 
      throw unwrap($e0);
  }
  varKeys = condTable.variableKeys;
  condRecordTO.applicationAndUsageData = new HashMap;
  pos = 0;
  fieldValue = null;
  vkValues = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, varKeys.length, 4, 1);
  for (i1 = 0; i1 < varKeys.length; i1++) {
    try {
      fieldValue = $substring_0(concatVarKeysVals, pos, pos + varKeysLength[i1]);
      fieldValue = $trim(fieldValue);
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (!instanceOf($e1, 82))
        throw unwrap($e1);
    }
    fieldValue == null && (fieldValue = '');
    condRecordTO.applicationAndUsageData.put_0(dynamicCast(varKeys[i1], 60).field.fieldTO.name_0, fieldValue);
    vkValues[i1] = fieldValue;
    pos += varKeysLength[i1];
  }
  condRecordTO.applicationAndUsageData.put_0('KRECH', calculationType);
  condRecordTO.applicationAndUsageData.put_0('KBETR', '' + rateValue);
  condRecordTO.applicationAndUsageData.put_0('KONWA', rateUnit);
  condRecordTO.applicationAndUsageData.put_0('KPEIN', '' + pricingUnit);
  unitOfMeasure == null && (unitOfMeasure = '');
  condRecordTO.applicationAndUsageData.put_0('KMEIN', unitOfMeasure);
  !!lowerLimit && condRecordTO.applicationAndUsageData.put_0('MXWRT', '' + lowerLimit);
  !!upperLimit && condRecordTO.applicationAndUsageData.put_0('GKWRT', '' + upperLimit);
  $equals_7(this$static.vStartString, validityStart) || (this$static.vStart = parseyyyyMMddHHmmss(validityStart));
  $equals_7(this$static.vEndString, validityEnd) || (this$static.vEnd = parseyyyyMMddHHmmss(validityEnd));
  condRecordTO.validityStart = this$static.vStart;
  condRecordTO.validityEnd = this$static.vEnd;
  condRecordTO.conditionType = condTypeName;
  condRecordTO.objectId = '';
  condRecordTO.releaseStatus = 32;
  condRecordTO.maintenanceStatus = '';
  condRecordTO.id_0 = uuid_0();
  (retVal = true , scaleBaseType != null && ($equals_7(scaleBaseType, 'B') || $equals_7(scaleBaseType, 'TC1'))?scaleCurrency != null && $equals_7(scaleCurrency, '') && (retVal = false):$equals_7(scaleUoM, '') && (retVal = false) , retVal) || (scaleBaseType = '');
  if (scaleBaseType != null && !$equals_7(scaleBaseType, '')) {
    scaleAmounts.length > 0 && scaleRates.length > 0 && (condRecordTO.dimensionNumber = 1);
    for (i2 = 0; i2 < scaleAmounts.length; i2++) {
      scaleLevelTO = new ScaleLevelTO;
      scaleLevelTO.scaleId = condRecordTO.id_0;
      scaleLevelTO.scaleLineId = i2 + 1;
      scaleLevelTO.scaleLevelFields = new HashMap_0(1);
      $putStringValue(scaleLevelTO.scaleLevelFields, 'SCALE_AMOUNT', '' + scaleAmounts[i2]);
      $putScaleLevel(this$static.scaleDAO, scaleLevelTO);
    }
    scaleDefinitionTO = new ScaleDefinitionTO;
    scaleDefinitionTO.scaleId = condRecordTO.id_0;
    scaleDefinitionTO.scaleBaseType = scaleBaseType;
    scaleDefinitionTO.scaleDefFields = new HashMap_0(5);
    $putStringValue(scaleDefinitionTO.scaleDefFields, 'KBETR', rateValue);
    $putStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_CURRENCY', rateUnit);
    $putStringValue(scaleDefinitionTO.scaleDefFields, 'KPEIN', pricingUnit);
    $putStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_UNIT', unitOfMeasure);
    $putStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_TYPE', valueOf_0(scaleType));
    $putScaleDefinition(this$static.scaleDAO, scaleDefinitionTO);
    $putScaleAdditionalData(this$static.scaleDAO, condRecordTO.id_0, 'KONWA', rateUnit);
    $putScaleAdditionalData(this$static.scaleDAO, condRecordTO.id_0, 'KPEIN', '' + pricingUnit);
    $putScaleAdditionalData(this$static.scaleDAO, condRecordTO.id_0, 'KMEIN', unitOfMeasure);
    for (i_0 = 0; i_0 < scaleRates.length; i_0++) {
      scaleRateTO = new ScaleRateTO;
      scaleRateTO.conditionRecordId = condRecordTO.id_0;
      scaleRateTO.evaluationType = '' + calculationType;
      scaleRateTO.scaleLineIds = initDim(I_classLit, $intern_4, 0, 1, 7, 1);
      scaleRateTO.scaleLineIds[0] = i_0 + 1;
      scaleRateTO.usageFields = new HashMap;
      $putStringValue(scaleRateTO.usageFields, 'KBETR', '' + scaleRates[i_0]);
      $putScaleRate(this$static.scaleDAO, scaleRateTO);
    }
  }
  condRecordTOList = new ArrayList;
  setCheck(condRecordTOList.array, condRecordTOList.array.length, condRecordTO);
  condRecordTOMap = new HashMap;
  condRecordKey = create_12(vkValues);
  condRecordKey == null?$put_1(condRecordTOMap.hashCodeMap, null, condRecordTOList):condRecordTOMap.stringMap.put_1(condRecordKey, condRecordTOList);
  condRecordMap = $createConditionRecords(this$static.stdBuilder, condTable, condRecordTOMap, applicationName);
  condRecordKey = create_4('', condRecordKey);
  condRecord = dynamicCast(condRecordKey == null?getEntryValueOrNull($getEntry(condRecordMap.hashCodeMap, null)):condRecordMap.stringMap.get_0(condRecordKey), 45);
  keyForFacade = this$static.usage + '|' + 'dynamic' + '|' + condTypeName + '|' + condTableNamePart + '|' + applicationName + condRecordKey;
  !!condRecord && ($isConditionRecordExists(this$static.conditionRecordDAO, keyForFacade, condRecord) || $putConditionRecord(this$static.conditionRecordDAO, keyForFacade, condRecord));
}

function CodPricingDataImportHandler(usage){
  this.stdBuilder = dynamicCast($getBuilder(($clinit_BuilderManager() , $clinit_BuilderManager() , SINGELTON_1), 'CON', 'A', 'CR'), 123);
  this.pce = dynamicCast($getCustomizingEngine(factory_0, 'A'), 132);
  this.applicationDAO = dynamicCast($getDAO(($clinit_DAOManagerHelper() , $clinit_DAOManagerHelper() , SINGELTON), 'Application'), 625);
  this.fieldCatalogueDAO = dynamicCast($getDAO((null , SINGELTON), 'FieldCatalogue'), 282);
  this.conditionTableDAO = dynamicCast($getDAO((null , SINGELTON), 'ConditionTable'), 627);
  this.accessSequenceDAO = dynamicCast($getDAO((null , SINGELTON), 'AccessSequence'), 626);
  this.conditionTypeDAO = dynamicCast($getDAO((null , SINGELTON), 'ConditionType'), 356);
  this.pricingConditionTypeDAO = dynamicCast($getDAO((null , SINGELTON), 'PricingConditionType'), 347);
  this.exclusionGroupDAO = dynamicCast($getDAO((null , SINGELTON), 'ExclusionGroup'), 628);
  this.exclusionProcedureDAO = dynamicCast($getDAO((null , SINGELTON), 'ExclusionProcedure'), 629);
  this.conversionFactorDAO = dynamicCast($getDAO((null , SINGELTON), 'ConversionFactor'), 353);
  this.currencyUnitDAO = dynamicCast($getDAO((null , SINGELTON), 'CurrencyUnit'), 619);
  this.emuKeysDAO = dynamicCast($getDAO((null , SINGELTON), 'EmuKeys'), 620);
  this.exchangeRateDAO = dynamicCast($getDAO((null , SINGELTON), 'ExchangeRate'), 621);
  this.exchangeRateTypeDAO = dynamicCast($getDAO((null , SINGELTON), 'ExchangeRateType'), 622);
  dynamicCast($getDAO((null , SINGELTON), 'ExpiringCurrency'), 354);
  this.notationDAO = dynamicCast($getDAO((null , SINGELTON), 'Notation'), 685);
  this.notationPrefixDAO = dynamicCast($getDAO((null , SINGELTON), 'NotationPrefix'), 686);
  this.dimensionDAO = dynamicCast($getDAO((null , SINGELTON), 'Dimension'), 624);
  this.physicalUnitDAO = dynamicCast($getDAO((null , SINGELTON), 'PhysicalUnit'), 623);
  this.pricingProcedureDAO = dynamicCast($getDAO((null , SINGELTON), 'PricingProcedure'), 348);
  this.scaleDAO = dynamicCast($getDAO((null , SINGELTON), 'Scale'), 208);
  this.conditionRecordDAO = dynamicCast($getDAO((null , SINGELTON), 'ConditionRecord'), 206);
  this.usage = usage;
}

defineClass(216, 1, {216:1, 32:1}, CodPricingDataImportHandler);
_.getAccess_0 = function getAccess(application, name_0, number){
  return $getAccess(this, application, name_0, number);
}
;
_.getAccessSequence_0 = function getAccessSequence(application, name_0){
  return $getAccessSequence(this, application, name_0);
}
;
_.getPricingProcedure_0 = function getPricingProcedure(application, name_0){
  return $getPricingProcedure(this, application, name_0);
}
;
_.getPricingStep_0 = function getPricingStep(application, name_0, number, counter){
  return $getPricingStep(this, application, name_0, number, counter);
}
;
_.putAccess_0 = function putAccess(applicationName, accessSequenceName, accessNumber, conditionTableNamePart, indicatorExclusiveAccess, requirementNumber){
  var access;
  access = $getAccess(this, applicationName, accessSequenceName, accessNumber);
  access.conditionTable = conditionTableNamePart;
  access.exclusiveAccess = indicatorExclusiveAccess;
  access.requirementNumber = requirementNumber;
}
;
_.putAccessSequence_0 = function putAccessSequence(applicationName, accessSequenceName){
  $getAccessSequence(this, applicationName, accessSequenceName);
}
;
_.putApplication_0 = function putApplication(name_0, headerFields, itemfields){
  var applicationTO;
  applicationTO = new ApplicationTO;
  applicationTO.name_0 = name_0;
  applicationTO.headerFields = headerFields;
  applicationTO.itemFields = itemfields;
  $putApplication(this.applicationDAO, applicationTO);
}
;
_.putApplicationField_0 = function putApplicationField(applicationName, fieldName, tableNameDocStructure, tableFieldDocStructure){
  var comm_str_type, fieldTO;
  comm_str_type = 32;
  $equalsIgnoreCase(tableNameDocStructure, 'KOMP')?(comm_str_type = 73):$equalsIgnoreCase(tableNameDocStructure, 'KOMK')?(comm_str_type = 77):$equalsIgnoreCase(tableNameDocStructure, 'KOMPAZD')?(comm_str_type = 73):$equals_7(tableNameDocStructure, '') && (comm_str_type = 73);
  if (comm_str_type != 32) {
    fieldTO = new ApplicationFieldTO;
    fieldTO.application = applicationName;
    fieldTO.name_0 = fieldName;
    fieldTO.isMultiValued_0 = false;
    fieldTO.dataElement = null;
    fieldTO.fieldOccurence = 67;
    fieldTO.type_0 = comm_str_type;
    fieldTO.isAccessTimestamp_0 = false;
    $putApplicationField(this.fieldCatalogueDAO, fieldTO);
  }
}
;
_.putAttributeMap_0 = function putAttributeMap(applicationName, accessSequenceName, accessNumber, conditionTableNamePart, fieldCount, conditionTableField, documentStructure, documentStructureField, actualValueSource, accessFieldType, evaluationPriority, attributesCount){
  var access, attributeMap;
  access = $getAccess(this, applicationName, accessSequenceName, accessNumber);
  if (access.attributeMaps.size_1() < attributesCount) {
    attributeMap = new AttributeMapTO;
    attributeMap.counter = fieldCount;
    attributeMap.tableField = conditionTableField == null || conditionTableField.length == 0?null:conditionTableField;
    attributeMap.documentStructure = documentStructure == null || documentStructure.length == 0?null:documentStructure;
    attributeMap.documentField = documentStructureField == null || documentStructureField.length == 0?null:documentStructureField;
    attributeMap.directValue = actualValueSource == null || actualValueSource.length == 0?null:actualValueSource;
    attributeMap.accessFieldType = accessFieldType;
    attributeMap.evaluationPriority = evaluationPriority;
    access.attributeMaps.add_0(attributeMap);
  }
}
;
_.putConversionFactor_0 = function putConversionFactor(exchangeRateTypeName, fromCurrency, toCurrency, factorValidityStartDate, fromFactor, toFactor, exchangeRateTypeAlternative, factorValidityStartDateAlternative){
  var conversionFactor;
  conversionFactor = new ConversionFactorTO;
  conversionFactor.exRateTypeName = exchangeRateTypeName;
  conversionFactor.fromCurrency = fromCurrency;
  conversionFactor.toCurrency = toCurrency;
  conversionFactor.date = parseInvertedYYYYMMDD(factorValidityStartDate);
  conversionFactor.fromFactor = fromFactor;
  conversionFactor.toFactor = toFactor;
  conversionFactor.altExRateTypeName = exchangeRateTypeAlternative == null || exchangeRateTypeAlternative.length == 0?null:exchangeRateTypeAlternative;
  parseInvertedYYYYMMDD(factorValidityStartDateAlternative);
  try {
    $putConversionFactor(this.conversionFactorDAO, conversionFactor);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putCurrencyLength_0 = function putCurrencyLength(currencyUnitName, nbOfDecimalPlaces){
  $putCurrencyUnit(this, currencyUnitName, nbOfDecimalPlaces);
}
;
_.putCurrencyUnit_0 = function putCurrencyUnit(currencyUnitName){
  $equals_7(currencyUnitName, '%')?$putCurrencyUnit(this, '%', 3):$equals_7(currencyUnitName, '%7')?$putCurrencyUnit(this, '%7', 7):$putCurrencyUnit(this, currencyUnitName, 2);
}
;
_.putCurrencyUnit_1 = function putCurrencyUnit_0(currencyUnitName, nbOfDecimalPlaces){
  $putCurrencyUnit(this, currencyUnitName, nbOfDecimalPlaces);
}
;
_.putDimension_0 = function putDimension(dimensionName, lengthExponent, massExponent, timeExponent, electricCurrentExponent, temperatureExponent, moleQuantityExponent, luminosityExponent, siUnit){
  var dimension;
  dimension = new DimensionTO;
  dimension.name_0 = dimensionName;
  dimension.lengthExponent = lengthExponent;
  dimension.massExponent = massExponent;
  dimension.timexExponent = timeExponent;
  dimension.electricCurrentExponent = electricCurrentExponent;
  dimension.temperatureExponent = temperatureExponent;
  dimension.moleQuantityExponent = moleQuantityExponent;
  dimension.luminosityExponent = luminosityExponent;
  try {
    $isDimensionExists(this.dimensionDAO, dimension) || $putDimension(this.dimensionDAO, dimension);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putEMUCurrencyUnitName_0 = function putEMUCurrencyUnitName(toCurrency){
  try {
    $putCurrencyUnits(this.conversionFactorDAO, toCurrency);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putExchangeRate_0 = function putExchangeRate(exchangeRateTypeName, fromCurrency, toCurrency, exchangeRateValidityStartDate, exchangeRate, fromFactor, toFactor){
  $putExchangeRate(this, exchangeRateTypeName, fromCurrency, toCurrency, exchangeRateValidityStartDate, new BigDecimal_4(exchangeRate), fromFactor, toFactor);
}
;
_.putExchangeRate_1 = function putExchangeRate_0(exchangeRateTypeName, fromCurrency, toCurrency, exchangeRateValidityStartDate, rate, fromFactor, toFactor){
  $putExchangeRate(this, exchangeRateTypeName, fromCurrency, toCurrency, exchangeRateValidityStartDate, rate, fromFactor, toFactor);
}
;
_.putExchangeRateType_0 = function putExchangeRateType(exchangeRateTypeName, indicatorInvertedCalculationAllowed, baseCurrency, indicatorBaseCurrencyFrom, indicatorFixedExchangeRates, indicatorSpecialTranslationModel){
  var exchangeRateType;
  exchangeRateType = new ExchangeRateTypeTO;
  exchangeRateType.name_0 = exchangeRateTypeName;
  exchangeRateType.indicatorInvertedCalculationAllowed = indicatorInvertedCalculationAllowed;
  exchangeRateType.baseCurrency = baseCurrency == null || baseCurrency.length == 0?null:baseCurrency;
  exchangeRateType.indicatorSpecialTranslationModel = indicatorSpecialTranslationModel;
  try {
    $putExchangeRateTypes(this.exchangeRateTypeDAO, exchangeRateType);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putExclusionProcedure_0 = function putExclusionProcedure(application, procedureName, count, exType, exGroup1Name, exGroup2Name){
  var exclusionProcedure, exclusionStep;
  exclusionProcedure = $getExclusionProcedure(this.exclusionProcedureDAO, application, procedureName);
  if (!exclusionProcedure) {
    exclusionProcedure = new ExclusionProcedureTO_0;
    exclusionProcedure.exclusionSteps = new ArrayList;
  }
  exclusionProcedure.application = application;
  exclusionProcedure.name_0 = procedureName;
  exclusionStep = new ExclusionStepTO;
  exclusionStep.counter = count;
  exclusionStep.exlusionType = exType;
  exclusionStep.exclusionGroup1 = convertEmptyStringToNull(exGroup1Name);
  exclusionStep.exclusionGroup2 = convertEmptyStringToNull(exGroup2Name);
  $add_3(exclusionProcedure.exclusionSteps, exclusionStep);
  $putExclusionProcedure(this.exclusionProcedureDAO, exclusionProcedure);
}
;
_.putNotation_0 = function putNotation(fromCurrency, toCurrency, exchangeRateValidityStartDate, quotationTypeForCurrencyTranslation){
  var notation, sapdate;
  sapdate = this.sapdateTemp;
  if (!$equals_7(this.sapdateTempInString, exchangeRateValidityStartDate)) {
    try {
      sapdate = parseInvertedYYYYMMDD(exchangeRateValidityStartDate);
      this.sapdateTemp = sapdate;
      this.sapdateTempInString = exchangeRateValidityStartDate;
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (!instanceOf($e0, 9))
        throw unwrap($e0);
    }
  }
  notation = new Notation_0(fromCurrency, toCurrency, sapdate, quotationTypeForCurrencyTranslation);
  try {
    $putNotation(this.notationDAO, notation);
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (!instanceOf($e1, 9))
      throw unwrap($e1);
  }
}
;
_.putNotationPrefix_0 = function putNotationPrefix(exchangeRateDirectQuotationIndicator, exchangeRateIndirectQuotationIndicator){
  var notationPrefixTO;
  notationPrefixTO = new NotationPrefixTO;
  try {
    $putNotationPrefix(this.notationPrefixDAO, notationPrefixTO);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putPhysicalUnit_0 = function putPhysicalUnit(unitOfMeasurement, dimensionKey, numeratorSIUnitConversion, denominatorSIUnitConversion, baseTenExponentSIUnitConversion, additiveConstantSIUnitConversion, baseTenExponentFloatingPointDisplay, isoCode, primarySelectionForConversion){
  var allPhysicalUnits, physicalUnitTO;
  physicalUnitTO = $createPhysicalUnitTO(unitOfMeasurement, dimensionKey, numeratorSIUnitConversion, denominatorSIUnitConversion, baseTenExponentSIUnitConversion, additiveConstantSIUnitConversion, isoCode, primarySelectionForConversion);
  try {
    allPhysicalUnits = $getPhysicalUnits(this.physicalUnitDAO);
    allPhysicalUnits == null && $putPhysicalUnits(this.physicalUnitDAO, '', $createPhysicalUnitTO('', 'AAAADL', 0, 0, 0, 0, null, false));
    $isPhysicalUnitExists(this.physicalUnitDAO, unitOfMeasurement) || $putPhysicalUnits(this.physicalUnitDAO, unitOfMeasurement, physicalUnitTO);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putPhysicalUnitExternalDescription_0 = function putPhysicalUnitExternalDescription(unitOfMeasurement, externalUnitCommercialFormat, externalUnitTechnicalFormat, unitDescriptionShort, unitDescriptionLong){
  var physicalUnitTO;
  physicalUnitTO = new PhysicalUnitDescriptionTO;
  physicalUnitTO.internalName = unitOfMeasurement;
  physicalUnitTO.externalUnitCommercialFormat = externalUnitCommercialFormat;
  physicalUnitTO.externalUnitTechnicalFormat = externalUnitTechnicalFormat;
  physicalUnitTO.shortDescription = unitDescriptionShort == null || unitDescriptionShort.length == 0?null:unitDescriptionShort;
  physicalUnitTO.longDescription = unitDescriptionLong == null || unitDescriptionLong.length == 0?null:unitDescriptionLong;
  try {
    $putPhysicalUnitDescriptions(this.physicalUnitDAO, unitOfMeasurement, physicalUnitTO);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putPricingConditionLimits_0 = function putPricingConditionLimits(applicationName, conditionTypeName, calculationType, conditionCurrency, lowerLimit, upperLimit, pricingUnit, unifOfMeasurement){
  var lowLimit, prcCondLimitTo, prcUnit, upLimit;
  prcUnit = new BigDecimal_1(pricingUnit);
  lowLimit = new BigDecimal(lowerLimit);
  upLimit = new BigDecimal(upperLimit);
  prcCondLimitTo = new PricingConditionLimitsTO;
  prcCondLimitTo.application = applicationName;
  prcCondLimitTo.conditionType = conditionTypeName;
  prcCondLimitTo.calculationType = calculationType;
  prcCondLimitTo.conditionCurrency = conditionCurrency;
  prcCondLimitTo.lowerLimit = lowLimit;
  prcCondLimitTo.upperLimit = upLimit;
  prcCondLimitTo.pricingUnit = prcUnit;
  prcCondLimitTo.unifOfMeasurement = unifOfMeasurement;
  $putPricingConditionLimits(this.pricingConditionTypeDAO, prcCondLimitTo);
}
;
_.putPricingConditionType_0 = function putPricingConditionType(applicationName, conditionTypeName, accessSequenceName, calculationType, scaleBaseIndicator, condCategory, manualEntries, groupConditionKeyFormulaNo, scaleBaseUnitName, currConvIndicator, groupConditionIndicator, invoiceList, indicatorStructureCondition, accruals, scaleBaseFormulaNo, condClass, headerCond, itemCond, plusMinus, roundingRule, scaleRatesCheckingRule, changeOfRateAllowed, changeOfValueAllowed, changeOfConvFactAllowed, changeOfCalcTypeAllowed, deletionAllowed, pricingDateFlag, scaleType, roundingDifferenceCalculation, interCompany, variant, quantityConversion, indicatorConditionUpdate){
  var cTypeTO, pcTypeTO;
  cTypeTO = new ConditionTypeTO_0;
  cTypeTO.referenceConditionType = null;
  cTypeTO.accessSequence = accessSequenceName == null || accessSequenceName.length == 0?null:accessSequenceName;
  cTypeTO.accessTimestamp = 'DET_DEFAULT_TIMESTAMP';
  cTypeTO.name_0 = conditionTypeName;
  cTypeTO.application = applicationName;
  cTypeTO.usage = this.usage;
  $putConditionType(this.conditionTypeDAO, cTypeTO);
  pcTypeTO = new PricingConditionTypeTO_0;
  pcTypeTO.application = applicationName;
  pcTypeTO.usage = this.usage;
  pcTypeTO.name_0 = conditionTypeName;
  pcTypeTO.calculationType = calculationType;
  pcTypeTO.scaleBaseType = scaleBaseIndicator;
  pcTypeTO.conditionCategory = condCategory;
  pcTypeTO.manualEntryFlag = manualEntries;
  pcTypeTO.groupConditionKeyFormulaNumber = groupConditionKeyFormulaNo;
  pcTypeTO.scaleBaseUnit = convertEmptyStringToNull(scaleBaseUnitName);
  pcTypeTO.currencyConversion = currConvIndicator;
  pcTypeTO.groupCondition = groupConditionIndicator;
  pcTypeTO.invoiceList = invoiceList;
  pcTypeTO.structureCondition = indicatorStructureCondition;
  pcTypeTO.accrual = accruals;
  pcTypeTO.scaleBaseFormulaNumber = scaleBaseFormulaNo;
  pcTypeTO.conditionClass = condClass;
  pcTypeTO.headerCondition = headerCond;
  pcTypeTO.itemCondition = itemCond;
  pcTypeTO.plusMinus = plusMinus;
  pcTypeTO.roundingRule = roundingRule;
  pcTypeTO.changeOfRateAllowed = changeOfRateAllowed;
  pcTypeTO.changeOfValueAllowed = changeOfValueAllowed;
  pcTypeTO.changeOfConversionFactorAllowed = changeOfConvFactAllowed;
  pcTypeTO.changeOfCalculationTypeAllowed = changeOfCalcTypeAllowed;
  pcTypeTO.deletionAllowed = deletionAllowed;
  pcTypeTO.pricingDateFlag = pricingDateFlag;
  pcTypeTO.scaleType = scaleType;
  pcTypeTO.roundingDifferenceCalculationRequired = roundingDifferenceCalculation;
  pcTypeTO.interCompanyBilling = interCompany;
  pcTypeTO.variantCondition = variant;
  pcTypeTO.quantityConversion = 32;
  pcTypeTO.conditionUpdate = indicatorConditionUpdate;
  pcTypeTO.purposeName = null;
  $putPricingConditionType(this.pricingConditionTypeDAO, pcTypeTO);
}
;
_.putPricingProcedure_0 = function putPricingProcedure(applicationName, pricingProcedureName){
  var pricingProcedure;
  try {
    pricingProcedure = $getPricingProcedure_0(this.pricingProcedureDAO, applicationName, this.usage, pricingProcedureName);
    if (!pricingProcedure) {
      pricingProcedure = new PricingProcedureTO_0;
      pricingProcedure.application = applicationName;
      pricingProcedure.usage = this.usage;
      pricingProcedure.name_0 = pricingProcedureName;
      pricingProcedure.steps = new ArrayList;
      $putPricingProcedure(this.pricingProcedureDAO, pricingProcedure);
    }
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.putPricingStep_0 = function putPricingStep(applicationName, procedureName, stepNumber, conditionCounter, conditionTypeName, percentageConditionFromStep, percentageConditionToStep, indicatorManually, indicatorSubtotal, indicatorStatistical, indicatorMandatory, accountKey, accountKeyAccrualsAndProvisions, requirementNumber, conditionBaseFormulaNumber, conditionValueFormulaNumber, printIdForConditionLines, authorityNeeded){
  var stepTO;
  stepTO = $getPricingStep(this, applicationName, procedureName, stepNumber, conditionCounter);
  stepTO.counter = conditionCounter;
  conditionTypeName != null && $equals_7(conditionTypeName, '') && (conditionTypeName = null);
  stepTO.conditionType = conditionTypeName == null || conditionTypeName.length == 0?null:conditionTypeName;
  stepTO.fromStep = percentageConditionFromStep;
  stepTO.toStep = percentageConditionToStep;
  stepTO.manually = indicatorManually;
  stepTO.subtotalFlag = indicatorSubtotal;
  stepTO.statistical = indicatorStatistical;
  stepTO.mandatory = indicatorMandatory;
  stepTO.accountKey1 = accountKey == null || accountKey.length == 0?null:accountKey;
  stepTO.accountKey2 = accountKeyAccrualsAndProvisions == null || accountKeyAccrualsAndProvisions.length == 0?null:accountKeyAccrualsAndProvisions;
  stepTO.requirementNumber = requirementNumber;
  stepTO.baseFormulaNumber = conditionBaseFormulaNumber;
  stepTO.valueFormulaNumber = conditionValueFormulaNumber;
  stepTO.printId = printIdForConditionLines;
  stepTO.usage = $convertEmptyStringToNull(this.usage);
  stepTO.authorityLevel = authorityNeeded;
  stepTO.mandatoryType = 32;
}
;
_.putUsageField_0 = function putUsageField(fieldName, isUsedInScale, isUsedInRateTable, isFieldInSupplementaryTable){
  var fieldTO;
  fieldTO = new UsageFieldTO;
  fieldTO.name_0 = fieldName;
  fieldTO.dataElement = null;
  fieldTO.fieldOccurence = 67;
  fieldTO.usedInScale = isUsedInScale;
  fieldTO.usedInRate = isUsedInRateTable;
  fieldTO.supplementaryField = isFieldInSupplementaryTable;
  $putUsageField(this.fieldCatalogueDAO, fieldTO);
}
;
_.setEuroKeys_0 = function setEuroKeys(currency, exchangeRate, date){
  var emuKeysTO, sapdate;
  emuKeysTO = new EmuKeysTO;
  date == null && (date = '19990101');
  (currency == null || currency.length == 0) && (currency = 'EUR');
  (exchangeRate == null || exchangeRate.length == 0) && (exchangeRate = 'EURO');
  sapdate = parseInvertedYYYYMMDD(date);
  sapdate.toString$();
  emuKeysTO.newCurrencyKey = currency;
  emuKeysTO.exchangeRateTypeFixedRates = exchangeRate;
  try {
    $putEmuKeys(this.emuKeysDAO, emuKeysTO);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}
;
_.sapdateTempInString = '';
_.vEnd = null;
_.vEndString = '';
_.vStart = null;
_.vStartString = '';
var Lcom_sap_cod_pricing_engine_api_CodPricingDataImportHandler_2_classLit = createForClass('com.sap.cod.pricing.engine.api', 'CodPricingDataImportHandler', 216, Ljava_lang_Object_2_classLit);
function $export_0(this$static){
  if (!exported_0) {
    exported_0 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_api_CodPricingDataImportHandler_2_classLit, this$static);
    new AccessTO_ExporterImpl;
    new AccessSequenceTO_ExporterImpl;
    new ProcedureTO_ExporterImpl;
    new PricingStepTO_ExporterImpl;
    $export0_0(this$static);
  }
}

function $export0_0(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingDataImportHandler');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingDataImportHandler = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 1 && (g = new CodPricingDataImportHandler(a[0]));
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingDataImportHandler.prototype = new Object;
  __0.getAccess = $entry(function(a0, a1, a2){
    return wrap_0(this.g.getAccess_0(a0, a1, a2));
  }
  );
  __0.getAccessSequence = $entry(function(a0, a1){
    return wrap_0(this.g.getAccessSequence_0(a0, a1));
  }
  );
  __0.getPricingProcedure = $entry(function(a0, a1){
    return wrap_0(this.g.getPricingProcedure_0(a0, a1));
  }
  );
  __0.getPricingStep = $entry(function(a0, a1, a2, a3){
    return wrap_0(this.g.getPricingStep_0(a0, a1, a2, a3));
  }
  );
  __0.putAccess = $entry(function(a0, a1, a2, a3, a4, a5){
    this.g.putAccess_0(a0, a1, a2, a3, a4, a5);
  }
  );
  __0.putAccessSequence = $entry(function(a0, a1){
    this.g.putAccessSequence_0(a0, a1);
  }
  );
  __0.putApplication = $entry(function(a0, a1, a2){
    this.g.putApplication_0(a0, a1, a2);
  }
  );
  __0.putApplicationField = $entry(function(a0, a1, a2, a3){
    this.g.putApplicationField_0(a0, a1, a2, a3);
  }
  );
  __0.putAttributeMap = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    this.g.putAttributeMap_0(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  );
  __0.putConditionTable = $entry(function(a0, a1, a2, a3){
    __static_wrapper_putConditionTable(this.g, a0, a1, a2, a3);
  }
  );
  __0.putConversionFactor = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7){
    this.g.putConversionFactor_0(a0, a1, a2, a3, a4, a5, a6, a7);
  }
  );
  __0.putCurrencyLength = $entry(function(a0, a1){
    this.g.putCurrencyLength_0(a0, a1);
  }
  );
  __0.putCurrencyUnit = $entry(function(a0, a1){
    runDispatch(this.g, Lcom_sap_cod_pricing_engine_api_CodPricingDataImportHandler_2_classLit, 0, arguments, false, false)[0];
  }
  );
  __0.putDimension = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7, a8){
    this.g.putDimension_0(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  }
  );
  __0.putEMUCurrencyUnitName = $entry(function(a0){
    this.g.putEMUCurrencyUnitName_0(a0);
  }
  );
  __0.putExchangeRate = $entry(function(a0, a1, a2, a3, a4, a5, a6){
    runDispatch(this.g, Lcom_sap_cod_pricing_engine_api_CodPricingDataImportHandler_2_classLit, 1, arguments, false, false)[0];
  }
  );
  __0.putExchangeRateType = $entry(function(a0, a1, a2, a3, a4, a5){
    this.g.putExchangeRateType_0(a0, a1, a2, a3, a4, a5);
  }
  );
  __0.putExclusionGroup = $entry(function(a0, a1, a2){
    __static_wrapper_putExclusionGroup(this.g, a0, a1, a2);
  }
  );
  __0.putExclusionProcedure = $entry(function(a0, a1, a2, a3, a4, a5){
    this.g.putExclusionProcedure_0(a0, a1, a2, a3, a4, a5);
  }
  );
  __0.putNotation = $entry(function(a0, a1, a2, a3){
    this.g.putNotation_0(a0, a1, a2, a3);
  }
  );
  __0.putNotationPrefix = $entry(function(a0, a1){
    this.g.putNotationPrefix_0(a0, a1);
  }
  );
  __0.putPhysicalUnit = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7, a8){
    this.g.putPhysicalUnit_0(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  }
  );
  __0.putPhysicalUnitExternalDescription = $entry(function(a0, a1, a2, a3, a4){
    this.g.putPhysicalUnitExternalDescription_0(a0, a1, a2, a3, a4);
  }
  );
  __0.putPricingConditionLimits = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7){
    this.g.putPricingConditionLimits_0(a0, a1, a2, a3, a4, a5, a6, a7);
  }
  );
  __0.putPricingConditionMasterData = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19){
    __static_wrapper_putPricingConditionMasterData(this.g, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, gwtInstance(a18), gwtInstance(a19));
  }
  );
  __0.putPricingConditionType = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32){
    this.g.putPricingConditionType_0(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  );
  __0.putPricingProcedure = $entry(function(a0, a1){
    this.g.putPricingProcedure_0(a0, a1);
  }
  );
  __0.putPricingStep = $entry(function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17){
    this.g.putPricingStep_0(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  );
  __0.putUsageField = $entry(function(a0, a1, a2, a3){
    this.g.putUsageField_0(a0, a1, a2, a3);
  }
  );
  __0.setEuroKeys = $entry(function(a0, a1, a2){
    this.g.setEuroKeys_0(a0, a1, a2);
  }
  );
  registerDispatchMap(Lcom_sap_cod_pricing_engine_api_CodPricingDataImportHandler_2_classLit, {0:{1:[[function(){
    return this.putCurrencyUnit_0.apply(this, arguments);
  }
  , null, undefined, 'string']], 2:[[function(){
    return this.putCurrencyUnit_1.apply(this, arguments);
  }
  , null, undefined, 'string', 'number']]}, 1:{7:[[function(){
    return this.putExchangeRate_1.apply(this, arguments);
  }
  , null, undefined, 'string', 'string', 'string', 'string', Ljava_math_BigDecimal_2_classLit, 'number', 'number'], [function(){
    return this.putExchangeRate_0.apply(this, arguments);
  }
  , null, undefined, 'string', 'string', 'string', 'string', 'string', 'number', 'number']]}}, false);
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingDataImportHandler[p] === undefined && ($wnd.sapcodpricing.CodPricingDataImportHandler[p] = pkg[p]);
}

function CodPricingDataImportHandler_ExporterImpl(){
  $export_0(this);
}

function __static_wrapper_putConditionTable(instance, a0, a1, a2, a3){
  $putConditionTable(instance, a0, a1, a2, ($clinit_ExporterUtil() , $toArrString(a3)));
}

function __static_wrapper_putExclusionGroup(instance, a0, a1, a2){
  $putExclusionGroup(instance, a0, a1, ($clinit_ExporterUtil() , $toArrString(a2)));
}

function __static_wrapper_putPricingConditionMasterData(instance, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19){
  $putPricingConditionMasterData(instance, a0, a1, a2, a3, a4, a5, ($clinit_ExporterUtil() , $toArrInt(a6)), a7, a8, a9, a10, a11, a12, a13, a14, a15, $toArrInt(a16), $toArrDouble(a17), a18, a19);
}

defineClass(389, 1, $intern_18, CodPricingDataImportHandler_ExporterImpl);
_.getJsConstructor = function getJsConstructor_0(){
  return $wnd.sapcodpricing.CodPricingDataImportHandler;
}
;
_.isAssignable = function isAssignable_0(o){
  return o != null && instanceOf(o, 216);
}
;
var exported_0 = false;
var Lcom_sap_cod_pricing_engine_api_CodPricingDataImportHandler_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.api', 'CodPricingDataImportHandler_ExporterImpl', 389, Ljava_lang_Object_2_classLit);
function CodPricingEngineStartHandler(){
}

defineClass(213, 1, {213:1, 32:1}, CodPricingEngineStartHandler);
_.clear_0 = function clear_0(){
  $clearBuffer(($clinit_BootStrapUtil() , $clinit_BootStrapUtil() , SINGELTON_0));
}
;
_.start_0 = function start_1(){
  $bootstrapPricingEngine($clinit_BootStrapUtil());
}
;
var Lcom_sap_cod_pricing_engine_api_CodPricingEngineStartHandler_2_classLit = createForClass('com.sap.cod.pricing.engine.api', 'CodPricingEngineStartHandler', 213, Ljava_lang_Object_2_classLit);
function $export_1(this$static){
  if (!exported_1) {
    exported_1 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_api_CodPricingEngineStartHandler_2_classLit, this$static);
    $export0_1(this$static);
  }
}

function $export0_1(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingEngineStartHandler');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingEngineStartHandler = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPricingEngineStartHandler);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingEngineStartHandler.prototype = new Object;
  __0.clear = $entry(function(){
    this.g.clear_0();
  }
  );
  __0.start = $entry(function(){
    this.g.start_0();
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingEngineStartHandler[p] === undefined && ($wnd.sapcodpricing.CodPricingEngineStartHandler[p] = pkg[p]);
}

function CodPricingEngineStartHandler_ExporterImpl(){
  $export_1(this);
}

defineClass(290, 1, $intern_18, CodPricingEngineStartHandler_ExporterImpl);
_.getJsConstructor = function getJsConstructor_1(){
  return $wnd.sapcodpricing.CodPricingEngineStartHandler;
}
;
_.isAssignable = function isAssignable_1(o){
  return o != null && instanceOf(o, 213);
}
;
var exported_1 = false;
var Lcom_sap_cod_pricing_engine_api_CodPricingEngineStartHandler_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.api', 'CodPricingEngineStartHandler_ExporterImpl', 290, Ljava_lang_Object_2_classLit);
function CodPricingConditionInput(){
}

defineClass(185, 1, {185:1, 32:1}, CodPricingConditionInput);
_.getCalculationType_0 = function getCalculationType(){
  return this.calculationType;
}
;
_.getCondRate_0 = function getCondRate(){
  return this.condRate;
}
;
_.getCondTypeName_0 = function getCondTypeName(){
  return this.condTypeName;
}
;
_.getPrUnitName_0 = function getPrUnitName(){
  return this.prUnitName;
}
;
_.getPrUnitValue_0 = function getPrUnitValue(){
  return this.prUnitValue;
}
;
_.getUnitName_0 = function getUnitName(){
  return this.unitName;
}
;
_.setCalculationType_0 = function setCalculationType(calculationType){
  this.calculationType = calculationType;
}
;
_.setCondRate_0 = function setCondRate(condRate){
  this.condRate = new BigDecimal(condRate);
}
;
_.setCondTypeName_0 = function setCondTypeName(condTypeName){
  this.condTypeName = condTypeName;
}
;
_.setPrUnitName_0 = function setPrUnitName(prUnitName){
  this.prUnitName = prUnitName;
}
;
_.setPrUnitValue_0 = function setPrUnitValue(prUnitValue){
  this.prUnitValue = prUnitValue;
}
;
_.setUnitName_0 = function setUnitName(unitName){
  this.unitName = unitName;
}
;
_.calculationType = 0;
var Lcom_sap_cod_pricing_engine_calc_CodPricingConditionInput_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingConditionInput', 185, Ljava_lang_Object_2_classLit);
function $export_2(this$static){
  if (!exported_2) {
    exported_2 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_calc_CodPricingConditionInput_2_classLit, this$static);
    $export0_2(this$static);
  }
}

function $export0_2(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingConditionInput');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingConditionInput = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPricingConditionInput);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingConditionInput.prototype = new Object;
  __0.getCalculationType = $entry(function(){
    return this.g.getCalculationType_0();
  }
  );
  __0.getCondRate = $entry(function(){
    return this.g.getCondRate_0();
  }
  );
  __0.getCondTypeName = $entry(function(){
    return this.g.getCondTypeName_0();
  }
  );
  __0.getPrUnitName = $entry(function(){
    return this.g.getPrUnitName_0();
  }
  );
  __0.getPrUnitValue = $entry(function(){
    return this.g.getPrUnitValue_0();
  }
  );
  __0.getUnitName = $entry(function(){
    return this.g.getUnitName_0();
  }
  );
  __0.setCalculationType = $entry(function(a0){
    this.g.setCalculationType_0(a0);
  }
  );
  __0.setCondRate = $entry(function(a0){
    this.g.setCondRate_0(a0);
  }
  );
  __0.setCondTypeName = $entry(function(a0){
    this.g.setCondTypeName_0(a0);
  }
  );
  __0.setPrUnitName = $entry(function(a0){
    this.g.setPrUnitName_0(a0);
  }
  );
  __0.setPrUnitValue = $entry(function(a0){
    this.g.setPrUnitValue_0(gwtInstance(a0));
  }
  );
  __0.setUnitName = $entry(function(a0){
    this.g.setUnitName_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingConditionInput[p] === undefined && ($wnd.sapcodpricing.CodPricingConditionInput[p] = pkg[p]);
}

function CodPricingConditionInput_ExporterImpl(){
  $export_2(this);
}

defineClass(298, 1, $intern_18, CodPricingConditionInput_ExporterImpl);
_.getJsConstructor = function getJsConstructor_2(){
  return $wnd.sapcodpricing.CodPricingConditionInput;
}
;
_.isAssignable = function isAssignable_2(o){
  return o != null && instanceOf(o, 185);
}
;
var exported_2 = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingConditionInput_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingConditionInput_ExporterImpl', 298, Ljava_lang_Object_2_classLit);
function $getitemArray(this$static){
  var i_0, itemArray, iter;
  itemArray = null;
  if (this$static.items) {
    itemArray = initDim(Lcom_sap_cod_pricing_engine_calc_CodPricingItemInput_2_classLit, $intern_15, 138, this$static.items.array.length, 0, 1);
    i_0 = 0;
    for (iter = new AbstractList$IteratorImpl(this$static.items); iter.i < iter.this$01.size_1();) {
      itemArray[i_0] = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 138));
      ++i_0;
    }
  }
  return itemArray;
}

function CodPricingDocumentInput(){
}

defineClass(218, 1, {218:1, 32:1}, CodPricingDocumentInput);
_.addItem_1 = function addItem_0(item_0){
  !this.items && (this.items = new ArrayList);
  $add_3(this.items, item_0);
}
;
_.getApplication_0 = function getApplication(){
  return this.application;
}
;
_.getDocCurrency_0 = function getDocCurrency(){
  return this.docCurrency;
}
;
_.getId_0 = function getId(){
  return this.id_0;
}
;
_.getItems_0 = function getItems(){
  return !this.items && (this.items = new ArrayList) , this.items;
}
;
_.getLocCurrency_0 = function getLocCurrency(){
  return this.locCurrency;
}
;
_.getPricingProcedureName_0 = function getPricingProcedureName(){
  return this.pricingProcedureName;
}
;
_.getUsage_0 = function getUsage(){
  return this.usage;
}
;
_.getitemArray_0 = function getitemArray(){
  return $getitemArray(this);
}
;
_.isPerformTrace_0 = function isPerformTrace(){
  return this.performTrace;
}
;
_.setApplication_0 = function setApplication(application){
  this.application = application;
}
;
_.setDocCurrency_0 = function setDocCurrency(docCurrency){
  this.docCurrency = docCurrency;
}
;
_.setId_0 = function setId(id_0){
  this.id_0 = id_0;
}
;
_.setLocCurrency_0 = function setLocCurrency(locCurrency){
  this.locCurrency = locCurrency;
}
;
_.setPerformTrace_0 = function setPerformTrace(performTrace){
  this.performTrace = performTrace;
}
;
_.setPricingProcedureName_0 = function setPricingProcedureName(pricingProcedureName){
  this.pricingProcedureName = pricingProcedureName;
}
;
_.setUsage_0 = function setUsage(usage){
  this.usage = usage;
}
;
_.performTrace = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingDocumentInput_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingDocumentInput', 218, Ljava_lang_Object_2_classLit);
function $export_3(this$static){
  if (!exported_3) {
    exported_3 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_calc_CodPricingDocumentInput_2_classLit, this$static);
    $export0_3(this$static);
  }
}

function $export0_3(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingDocumentInput');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingDocumentInput = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPricingDocumentInput);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingDocumentInput.prototype = new Object;
  __0.addItem = $entry(function(a0){
    this.g.addItem_1(a0 == null?null:a0.g);
  }
  );
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getDocCurrency = $entry(function(){
    return this.g.getDocCurrency_0();
  }
  );
  __0.getId = $entry(function(){
    return this.g.getId_0();
  }
  );
  __0.getItems = $entry(function(){
    return this.g.getItems_0();
  }
  );
  __0.getLocCurrency = $entry(function(){
    return this.g.getLocCurrency_0();
  }
  );
  __0.getPricingProcedureName = $entry(function(){
    return this.g.getPricingProcedureName_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.getitemArray = $entry(function(){
    return wrap_2(this.g.getitemArray_0());
  }
  );
  __0.isPerformTrace = $entry(function(){
    return this.g.isPerformTrace_0();
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setDocCurrency = $entry(function(a0){
    this.g.setDocCurrency_0(a0);
  }
  );
  __0.setId = $entry(function(a0){
    this.g.setId_0(a0);
  }
  );
  __0.setLocCurrency = $entry(function(a0){
    this.g.setLocCurrency_0(a0);
  }
  );
  __0.setPerformTrace = $entry(function(a0){
    this.g.setPerformTrace_0(a0);
  }
  );
  __0.setPricingProcedureName = $entry(function(a0){
    this.g.setPricingProcedureName_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingDocumentInput[p] === undefined && ($wnd.sapcodpricing.CodPricingDocumentInput[p] = pkg[p]);
}

function CodPricingDocumentInput_ExporterImpl(){
  $export_3(this);
}

defineClass(299, 1, $intern_18, CodPricingDocumentInput_ExporterImpl);
_.getJsConstructor = function getJsConstructor_3(){
  return $wnd.sapcodpricing.CodPricingDocumentInput;
}
;
_.isAssignable = function isAssignable_3(o){
  return o != null && instanceOf(o, 218);
}
;
var exported_3 = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingDocumentInput_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingDocumentInput_ExporterImpl', 299, Ljava_lang_Object_2_classLit);
function $setNetValue(this$static, netValue){
  this$static.netValue = netValue;
}

function $setNetValueCurrency(this$static, netValueCurrency){
  this$static.netValueCurrency = netValueCurrency;
}

function $setNetValueLocale(this$static, netValueLocale){
  this$static.netValueLocale = netValueLocale;
}

function $setPricingConditions(this$static, pricingConditions){
  this$static.pricingConditions = pricingConditions;
}

function CodPricingDocumentOutput(){
}

defineClass(164, 1, {164:1, 32:1}, CodPricingDocumentOutput);
_.addItem_2 = function addItem_1(item_0){
  !this.items && (this.items = new ArrayList);
  $add_3(this.items, item_0);
}
;
_.getGrossValue_0 = function getGrossValue(){
  return this.grossValue;
}
;
_.getId_0 = function getId_0(){
  return this.id_0;
}
;
_.getNetValue_0 = function getNetValue(){
  return this.netValue;
}
;
_.getNetValueCurrency_0 = function getNetValueCurrency(){
  return this.netValueCurrency;
}
;
_.getNetValueLocale_0 = function getNetValueLocale(){
  return this.netValueLocale;
}
;
_.getPricingConditions_0 = function getPricingConditions(){
  return this.pricingConditions;
}
;
_.getitemArray_1 = function getitemArray_0(){
  var i_0, itemArray, iter;
  itemArray = null;
  if (this.items) {
    itemArray = initDim(Lcom_sap_cod_pricing_engine_calc_CodPricingItemOutput_2_classLit, $intern_15, 119, this.items.array.length, 0, 1);
    i_0 = 0;
    for (iter = new AbstractList$IteratorImpl(this.items); iter.i < iter.this$01.size_1();) {
      itemArray[i_0] = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 119));
      ++i_0;
    }
  }
  return itemArray;
}
;
_.setGrossValue_0 = function setGrossValue(grossValue){
  this.grossValue = grossValue;
}
;
_.setId_0 = function setId_0(id_0){
  this.id_0 = id_0;
}
;
_.setNetValue_0 = function setNetValue(netValue){
  $setNetValue(this, netValue);
}
;
_.setNetValueCurrency_0 = function setNetValueCurrency(netValueCurrency){
  $setNetValueCurrency(this, netValueCurrency);
}
;
_.setNetValueLocale_0 = function setNetValueLocale(netValueLocale){
  $setNetValueLocale(this, netValueLocale);
}
;
var Lcom_sap_cod_pricing_engine_calc_CodPricingDocumentOutput_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingDocumentOutput', 164, Ljava_lang_Object_2_classLit);
function $export_4(this$static){
  if (!exported_4) {
    exported_4 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_calc_CodPricingDocumentOutput_2_classLit, this$static);
    new CodPricingItemOutput_ExporterImpl;
    $export0_4(this$static);
  }
}

function $export0_4(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingDocumentOutput');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingDocumentOutput = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPricingDocumentOutput);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingDocumentOutput.prototype = new Object;
  __0.addItem = $entry(function(a0){
    this.g.addItem_2(a0 == null?null:a0.g);
  }
  );
  __0.getGrossValue = $entry(function(){
    return this.g.getGrossValue_0();
  }
  );
  __0.getId = $entry(function(){
    return this.g.getId_0();
  }
  );
  __0.getNetValue = $entry(function(){
    return this.g.getNetValue_0();
  }
  );
  __0.getNetValueCurrency = $entry(function(){
    return this.g.getNetValueCurrency_0();
  }
  );
  __0.getNetValueLocale = $entry(function(){
    return this.g.getNetValueLocale_0();
  }
  );
  __0.getPricingConditions = $entry(function(){
    return wrap_0(this.g.getPricingConditions_0());
  }
  );
  __0.getitemArray = $entry(function(){
    return wrap_2(this.g.getitemArray_1());
  }
  );
  __0.setGrossValue = $entry(function(a0){
    this.g.setGrossValue_0(gwtInstance(a0));
  }
  );
  __0.setId = $entry(function(a0){
    this.g.setId_0(a0);
  }
  );
  __0.setNetValue = $entry(function(a0){
    this.g.setNetValue_0(gwtInstance(a0));
  }
  );
  __0.setNetValueCurrency = $entry(function(a0){
    this.g.setNetValueCurrency_0(a0);
  }
  );
  __0.setNetValueLocale = $entry(function(a0){
    this.g.setNetValueLocale_0(a0);
  }
  );
  __0.setPricingConditions = $entry(function(a0){
    __static_wrapper_setPricingConditions(this.g, a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingDocumentOutput[p] === undefined && ($wnd.sapcodpricing.CodPricingDocumentOutput[p] = pkg[p]);
}

function CodPricingDocumentOutput_ExporterImpl(){
  $export_4(this);
}

function __static_wrapper_setPricingConditions(instance, a0){
  $setPricingConditions(instance, ($clinit_ExporterUtil() , dynamicCast($toArrObject(a0, initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, a0.length, 0, 1)), 75)));
}

defineClass(300, 1, $intern_18, CodPricingDocumentOutput_ExporterImpl);
_.getJsConstructor = function getJsConstructor_4(){
  return $wnd.sapcodpricing.CodPricingDocumentOutput;
}
;
_.isAssignable = function isAssignable_4(o){
  return o != null && instanceOf(o, 164);
}
;
var exported_4 = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingDocumentOutput_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingDocumentOutput_ExporterImpl', 300, Ljava_lang_Object_2_classLit);
function $getAllAttributes(this$static){
  var allAttributes, attrKey, attrKey$iterator, i_0;
  allAttributes = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, this$static.attributes.size_0, 4, 1);
  i_0 = 0;
  for (attrKey$iterator = $iterator(new AbstractMap$1(this$static.attributes)); $hasNext(attrKey$iterator.val$outerIter2);) {
    attrKey = dynamicCastToString($next_1(attrKey$iterator));
    allAttributes[i_0] = attrKey;
    ++i_0;
  }
  return allAttributes;
}

function $getAttributeValues(this$static, name_0){
  var attribValues, i_0, val, val$iterator, vals;
  attribValues = null;
  vals = dynamicCast($getStringValue(this$static.attributes, name_0), 13);
  if (vals) {
    attribValues = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, vals.array.length, 4, 1);
    i_0 = 0;
    for (val$iterator = new AbstractList$IteratorImpl(vals); val$iterator.i < val$iterator.this$01.size_1();) {
      val = (checkCriticalElement(val$iterator.i < val$iterator.this$01.size_1()) , dynamicCastToString(val$iterator.this$01.get_5(val$iterator.last = val$iterator.i++)));
      attribValues[i_0] = val;
      ++i_0;
    }
  }
  return attribValues;
}

function CodPricingItemInput(){
}

defineClass(138, 1, {138:1, 32:1}, CodPricingItemInput);
_.addManualCondition_0 = function addManualCondition(manualCondn){
  !this.manualCondns && (this.manualCondns = new ArrayList);
  $add_3(this.manualCondns, manualCondn);
}
;
_.addPricingProductUnit_0 = function addPricingProductUnit(pricingProductUnit){
  !this.pricingProductUnits && (this.pricingProductUnits = new ArrayList);
  $add_3(this.pricingProductUnits, pricingProductUnit);
}
;
_.addProductUnit_0 = function addProductUnit(prodUnit){
  !this.productUnits && (this.productUnits = new ArrayList);
  $add_3(this.productUnits, prodUnit);
}
;
_.getAccessTimeStamps_0 = function getAccessTimeStamps(){
  return this.accessTimeStamps;
}
;
_.getAllAttributes_0 = function getAllAttributes(){
  return $getAllAttributes(this);
}
;
_.getAttributeValues_0 = function getAttributeValues(name_0){
  return $getAttributeValues(this, name_0);
}
;
_.getAttributes_0 = function getAttributes(){
  return this.attributes;
}
;
_.getBaseUnit_0 = function getBaseUnit(){
  return this.baseUnit;
}
;
_.getDocId_0 = function getDocId(){
  return this.docId;
}
;
_.getExchRateDate_0 = function getExchRateDate(){
  return this.exchRateDate;
}
;
_.getExchRateType_0 = function getExchRateType(){
  return this.exchRateType;
}
;
_.getExternalId_0 = function getExternalId(){
  return this.externalId;
}
;
_.getItemId_0 = function getItemId(){
  return this.itemId;
}
;
_.getManualCondns_0 = function getManualCondns(){
  return this.manualCondns;
}
;
_.getPricingProductUnit_0 = function getPricingProductUnit(){
  return !this.pricingProductUnits && (this.pricingProductUnits = new ArrayList) , this.pricingProductUnits;
}
;
_.getProductId_0 = function getProductId(){
  return this.productId;
}
;
_.getProductUnits_0 = function getProductUnits(){
  return this.productUnits;
}
;
_.getQuantity_0 = function getQuantity(){
  return this.quantityStr;
}
;
_.getQuantityUnit_0 = function getQuantityUnit(){
  return this.quantityUnit;
}
;
_.setAccessTimestamp_0 = function setAccessTimestamp(name_0, value_0){
  !this.accessTimeStamps && (this.accessTimeStamps = new HashMap);
  $putStringValue(this.accessTimeStamps, name_0, value_0);
}
;
_.setAttributeValue_0 = function setAttributeValue(name_0, value_0){
  var values;
  !this.attributes && (this.attributes = new HashMap);
  values = dynamicCast($getStringValue(this.attributes, name_0), 13);
  !values && (values = new ArrayList);
  setCheck(values.array, values.array.length, value_0);
  $putStringValue(this.attributes, name_0, values);
}
;
_.setBaseUnit_0 = function setBaseUnit(baseUnit){
  this.baseUnit = baseUnit;
}
;
_.setDocId_0 = function setDocId(docId){
  this.docId = docId;
}
;
_.setExchRateDate_0 = function setExchRateDate(exchRateDate){
  this.exchRateDate = exchRateDate;
}
;
_.setExchRateType_0 = function setExchRateType(exchRateType){
  this.exchRateType = exchRateType;
}
;
_.setExternalId_0 = function setExternalId(externalId){
  this.externalId = externalId;
}
;
_.setItemId_0 = function setItemId(itemId){
  this.itemId = itemId;
}
;
_.setManualCondns_0 = function setManualCondns(manualCondns){
  !this.manualCondns && (this.manualCondns = new ArrayList);
  this.manualCondns = manualCondns;
}
;
_.setProductId_0 = function setProductId(productId){
  this.productId = productId;
}
;
_.setQuantity_0 = function setQuantity(quantity){
  var qty;
  qty = new BigDecimal_1(quantity);
  this.quantityStr = qty;
}
;
_.setQuantityUnit_0 = function setQuantityUnit(quantityUnit){
  this.quantityUnit = quantityUnit;
}
;
_.accessTimeStamps = null;
_.attributes = null;
_.manualCondns = null;
_.productUnits = null;
var Lcom_sap_cod_pricing_engine_calc_CodPricingItemInput_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingItemInput', 138, Ljava_lang_Object_2_classLit);
function $export_5(this$static){
  if (!exported_5) {
    exported_5 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_calc_CodPricingItemInput_2_classLit, this$static);
    new CodPricingConditionInput_ExporterImpl;
    new CodPricingProductUnit_ExporterImpl;
    $export0_5(this$static);
  }
}

function $export0_5(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingItemInput');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingItemInput = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPricingItemInput);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingItemInput.prototype = new Object;
  __0.addManualCondition = $entry(function(a0){
    this.g.addManualCondition_0(a0 == null?null:a0.g);
  }
  );
  __0.addPricingProductUnit = $entry(function(a0){
    this.g.addPricingProductUnit_0(a0 == null?null:a0.g);
  }
  );
  __0.addProductUnit = $entry(function(a0){
    this.g.addProductUnit_0(a0 == null?null:a0.g);
  }
  );
  __0.getAccessTimeStamps = $entry(function(){
    return this.g.getAccessTimeStamps_0();
  }
  );
  __0.getAllAttributes = $entry(function(){
    return wrap_1(this.g.getAllAttributes_0());
  }
  );
  __0.getAttributeValues = $entry(function(a0){
    return wrap_1(this.g.getAttributeValues_0(a0));
  }
  );
  __0.getAttributes = $entry(function(){
    return this.g.getAttributes_0();
  }
  );
  __0.getBaseUnit = $entry(function(){
    return this.g.getBaseUnit_0();
  }
  );
  __0.getDocId = $entry(function(){
    return this.g.getDocId_0();
  }
  );
  __0.getExchRateDate = $entry(function(){
    return this.g.getExchRateDate_0();
  }
  );
  __0.getExchRateType = $entry(function(){
    return this.g.getExchRateType_0();
  }
  );
  __0.getExternalId = $entry(function(){
    return this.g.getExternalId_0();
  }
  );
  __0.getItemId = $entry(function(){
    return this.g.getItemId_0();
  }
  );
  __0.getManualCondns = $entry(function(){
    return this.g.getManualCondns_0();
  }
  );
  __0.getPricingProductUnit = $entry(function(){
    return this.g.getPricingProductUnit_0();
  }
  );
  __0.getProductId = $entry(function(){
    return this.g.getProductId_0();
  }
  );
  __0.getProductUnits = $entry(function(){
    return this.g.getProductUnits_0();
  }
  );
  __0.getQuantity = $entry(function(){
    return this.g.getQuantity_0();
  }
  );
  __0.getQuantityUnit = $entry(function(){
    return this.g.getQuantityUnit_0();
  }
  );
  __0.setAccessTimestamp = $entry(function(a0, a1){
    this.g.setAccessTimestamp_0(a0, a1);
  }
  );
  __0.setAttributeValue = $entry(function(a0, a1){
    this.g.setAttributeValue_0(a0, a1);
  }
  );
  __0.setBaseUnit = $entry(function(a0){
    this.g.setBaseUnit_0(a0);
  }
  );
  __0.setDocId = $entry(function(a0){
    this.g.setDocId_0(a0);
  }
  );
  __0.setExchRateDate = $entry(function(a0){
    this.g.setExchRateDate_0(a0);
  }
  );
  __0.setExchRateType = $entry(function(a0){
    this.g.setExchRateType_0(a0);
  }
  );
  __0.setExternalId = $entry(function(a0){
    this.g.setExternalId_0(a0);
  }
  );
  __0.setItemId = $entry(function(a0){
    this.g.setItemId_0(a0);
  }
  );
  __0.setManualCondns = $entry(function(a0){
    this.g.setManualCondns_0(gwtInstance(a0));
  }
  );
  __0.setProductId = $entry(function(a0){
    this.g.setProductId_0(a0);
  }
  );
  __0.setQuantity = $entry(function(a0){
    this.g.setQuantity_0(a0);
  }
  );
  __0.setQuantityUnit = $entry(function(a0){
    this.g.setQuantityUnit_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingItemInput[p] === undefined && ($wnd.sapcodpricing.CodPricingItemInput[p] = pkg[p]);
}

function CodPricingItemInput_ExporterImpl(){
  $export_5(this);
}

defineClass(301, 1, $intern_18, CodPricingItemInput_ExporterImpl);
_.getJsConstructor = function getJsConstructor_5(){
  return $wnd.sapcodpricing.CodPricingItemInput;
}
;
_.isAssignable = function isAssignable_5(o){
  return o != null && instanceOf(o, 138);
}
;
var exported_5 = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingItemInput_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingItemInput_ExporterImpl', 301, Ljava_lang_Object_2_classLit);
function $setMsgVariables(this$static, messageVariables){
  this$static.msgVariables = messageVariables;
}

function CodPricingItemMessage(messageGroup, messageId){
  CodPricingItemMessage_1.call(this, messageGroup, messageId, '', initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1));
}

function CodPricingItemMessage_0(messageGroup, messageId, messageBody){
  CodPricingItemMessage_1.call(this, messageGroup, messageId, messageBody, initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1));
}

function CodPricingItemMessage_1(messageGroup, messageId, messageBody, messageVariables){
  this.messageGroup = messageGroup;
  this.messageId = messageId;
  messageBody.length > 0?(this.messageBody = messageBody):(this.messageBody = '');
  messageVariables.length > 0 && (this.msgVariables = messageVariables);
}

defineClass(87, 1, {87:1, 32:1}, CodPricingItemMessage, CodPricingItemMessage_0, CodPricingItemMessage_1);
_.getMessageBody_0 = function getMessageBody(){
  return this.messageBody;
}
;
_.getMessageGroup_0 = function getMessageGroup(){
  return this.messageGroup;
}
;
_.getMessageId_0 = function getMessageId(){
  return this.messageId;
}
;
_.getMsgVariables_0 = function getMsgVariables(){
  return this.msgVariables;
}
;
_.setMessageBody_0 = function setMessageBody(messageBody){
  this.messageBody = messageBody;
}
;
_.setMessageGroup_0 = function setMessageGroup(messageGroup){
  this.messageGroup = messageGroup;
}
;
_.setMessageId_0 = function setMessageId(messageId){
  this.messageId = messageId;
}
;
var Lcom_sap_cod_pricing_engine_calc_CodPricingItemMessage_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingItemMessage', 87, Ljava_lang_Object_2_classLit);
function $export_6(this$static){
  if (!exported_6) {
    exported_6 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_calc_CodPricingItemMessage_2_classLit, this$static);
    $export0_6(this$static);
  }
}

function $export0_6(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingItemMessage');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingItemMessage = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 4?(g = new CodPricingItemMessage_1(a[0], a[1], a[2], a[3])):a.length == 3?(g = new CodPricingItemMessage_0(a[0], a[1], a[2])):a.length == 2 && (g = new CodPricingItemMessage(a[0], a[1]));
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingItemMessage.prototype = new Object;
  __0.getMessageBody = $entry(function(){
    return this.g.getMessageBody_0();
  }
  );
  __0.getMessageGroup = $entry(function(){
    return this.g.getMessageGroup_0();
  }
  );
  __0.getMessageId = $entry(function(){
    return this.g.getMessageId_0();
  }
  );
  __0.getMsgVariables = $entry(function(){
    return wrap_1(this.g.getMsgVariables_0());
  }
  );
  __0.setMessageBody = $entry(function(a0){
    this.g.setMessageBody_0(a0);
  }
  );
  __0.setMessageGroup = $entry(function(a0){
    this.g.setMessageGroup_0(a0);
  }
  );
  __0.setMessageId = $entry(function(a0){
    this.g.setMessageId_0(a0);
  }
  );
  __0.setMsgVariables = $entry(function(a0){
    __static_wrapper_setMsgVariables(this.g, a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingItemMessage[p] === undefined && ($wnd.sapcodpricing.CodPricingItemMessage[p] = pkg[p]);
}

function CodPricingItemMessage_ExporterImpl(){
  $export_6(this);
}

function __static_wrapper_setMsgVariables(instance, a0){
  $setMsgVariables(instance, ($clinit_ExporterUtil() , $toArrString(a0)));
}

defineClass(296, 1, $intern_18, CodPricingItemMessage_ExporterImpl);
_.getJsConstructor = function getJsConstructor_6(){
  return $wnd.sapcodpricing.CodPricingItemMessage;
}
;
_.isAssignable = function isAssignable_6(o){
  return o != null && instanceOf(o, 87);
}
;
var exported_6 = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingItemMessage_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingItemMessage_ExporterImpl', 296, Ljava_lang_Object_2_classLit);
function $setId(this$static, id_0){
  this$static.id_0 = id_0;
}

function $setItemId(this$static, itemId){
  this$static.itemId = itemId;
}

function $setNetPrice(this$static, netPrice){
  this$static.netPrice = netPrice;
}

function $setNetPriceLocale(this$static, netPriceLocale){
  this$static.netPriceLocale = netPriceLocale;
}

function $setNetValue_0(this$static, netValue){
  this$static.netValue = netValue;
}

function $setNetValueCurrency_0(this$static, netValueCurrency){
  this$static.netValueCurrency = netValueCurrency;
}

function $setNetValueLocale_0(this$static, netValueLocale){
  this$static.netValueLocale = netValueLocale;
}

function $setPricingConditions_0(this$static, pricingConditions){
  this$static.pricingConditions = pricingConditions;
}

function $setResultMessages(this$static, resultMessages){
  this$static.resultMessages = resultMessages;
}

function CodPricingItemOutput(){
}

defineClass(119, 1, {119:1, 32:1}, CodPricingItemOutput);
_.getCashDiscount_0 = function getCashDiscount(){
  return this.cashDiscount;
}
;
_.getDocId_0 = function getDocId_0(){
  return this.docId;
}
;
_.getFreight_0 = function getFreight(){
  return this.freight;
}
;
_.getGrossValue_0 = function getGrossValue_0(){
  return this.grossValue;
}
;
_.getId_0 = function getId_1(){
  return this.id_0;
}
;
_.getItemId_0 = function getItemId_0(){
  return this.itemId;
}
;
_.getNetPrice_0 = function getNetPrice(){
  return this.netPrice;
}
;
_.getNetPriceLocale_0 = function getNetPriceLocale(){
  return this.netPriceLocale;
}
;
_.getNetPriceUnit_0 = function getNetPriceUnit(){
  return this.netPriceUnit;
}
;
_.getNetValue_0 = function getNetValue_0(){
  return this.netValue;
}
;
_.getNetValueCurrency_0 = function getNetValueCurrency_0(){
  return this.netValueCurrency;
}
;
_.getNetValueFreightless_0 = function getNetValueFreightless(){
  return this.netValueFreightless;
}
;
_.getNetValueLocale_0 = function getNetValueLocale_0(){
  return this.netValueLocale;
}
;
_.getPricingConditions_0 = function getPricingConditions_0(){
  return this.pricingConditions;
}
;
_.getResultMessages_0 = function getResultMessages(){
  return this.resultMessages;
}
;
_.getSubtotals_0 = function getSubtotals(){
  return this.subtotals;
}
;
_.setCashDiscount_0 = function setCashDiscount(cashDiscount){
  this.cashDiscount = cashDiscount;
}
;
_.setDocId_0 = function setDocId_0(docId){
  this.docId = docId;
}
;
_.setFreight_0 = function setFreight(freight){
  this.freight = freight;
}
;
_.setGrossValue_0 = function setGrossValue_0(grossValue){
  this.grossValue = grossValue;
}
;
_.setId_0 = function setId_1(id_0){
  $setId(this, id_0);
}
;
_.setItemId_0 = function setItemId_0(itemId){
  $setItemId(this, itemId);
}
;
_.setNetPrice_0 = function setNetPrice(netPrice){
  $setNetPrice(this, netPrice);
}
;
_.setNetPriceLocale_0 = function setNetPriceLocale(netPriceLocale){
  $setNetPriceLocale(this, netPriceLocale);
}
;
_.setNetPriceUnit_0 = function setNetPriceUnit(netPriceUnit){
  this.netPriceUnit = netPriceUnit;
}
;
_.setNetValue_0 = function setNetValue_0(netValue){
  $setNetValue_0(this, netValue);
}
;
_.setNetValueCurrency_0 = function setNetValueCurrency_0(netValueCurrency){
  $setNetValueCurrency_0(this, netValueCurrency);
}
;
_.setNetValueFreightless_0 = function setNetValueFreightless(netValueFreightless){
  this.netValueFreightless = netValueFreightless;
}
;
_.setNetValueLocale_0 = function setNetValueLocale_0(netValueLocale){
  $setNetValueLocale_0(this, netValueLocale);
}
;
_.setSubtotals_0 = function setSubtotals(subtotals){
  this.subtotals = subtotals;
}
;
var Lcom_sap_cod_pricing_engine_calc_CodPricingItemOutput_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingItemOutput', 119, Ljava_lang_Object_2_classLit);
function $export_7(this$static){
  if (!exported_7) {
    exported_7 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_calc_CodPricingItemOutput_2_classLit, this$static);
    new CodPricingItemMessage_ExporterImpl;
    $export0_7(this$static);
  }
}

function $export0_7(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingItemOutput');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingItemOutput = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPricingItemOutput);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingItemOutput.prototype = new Object;
  __0.getCashDiscount = $entry(function(){
    return this.g.getCashDiscount_0();
  }
  );
  __0.getDocId = $entry(function(){
    return this.g.getDocId_0();
  }
  );
  __0.getFreight = $entry(function(){
    return this.g.getFreight_0();
  }
  );
  __0.getGrossValue = $entry(function(){
    return this.g.getGrossValue_0();
  }
  );
  __0.getId = $entry(function(){
    return this.g.getId_0();
  }
  );
  __0.getItemId = $entry(function(){
    return this.g.getItemId_0();
  }
  );
  __0.getNetPrice = $entry(function(){
    return this.g.getNetPrice_0();
  }
  );
  __0.getNetPriceLocale = $entry(function(){
    return this.g.getNetPriceLocale_0();
  }
  );
  __0.getNetPriceUnit = $entry(function(){
    return this.g.getNetPriceUnit_0();
  }
  );
  __0.getNetValue = $entry(function(){
    return this.g.getNetValue_0();
  }
  );
  __0.getNetValueCurrency = $entry(function(){
    return this.g.getNetValueCurrency_0();
  }
  );
  __0.getNetValueFreightless = $entry(function(){
    return this.g.getNetValueFreightless_0();
  }
  );
  __0.getNetValueLocale = $entry(function(){
    return this.g.getNetValueLocale_0();
  }
  );
  __0.getPricingConditions = $entry(function(){
    return wrap_0(this.g.getPricingConditions_0());
  }
  );
  __0.getResultMessages = $entry(function(){
    return wrap_2(this.g.getResultMessages_0());
  }
  );
  __0.getSubtotals = $entry(function(){
    return this.g.getSubtotals_0();
  }
  );
  __0.setCashDiscount = $entry(function(a0){
    this.g.setCashDiscount_0(gwtInstance(a0));
  }
  );
  __0.setDocId = $entry(function(a0){
    this.g.setDocId_0(a0);
  }
  );
  __0.setFreight = $entry(function(a0){
    this.g.setFreight_0(gwtInstance(a0));
  }
  );
  __0.setGrossValue = $entry(function(a0){
    this.g.setGrossValue_0(gwtInstance(a0));
  }
  );
  __0.setId = $entry(function(a0){
    this.g.setId_0(a0);
  }
  );
  __0.setItemId = $entry(function(a0){
    this.g.setItemId_0(a0);
  }
  );
  __0.setNetPrice = $entry(function(a0){
    this.g.setNetPrice_0(gwtInstance(a0));
  }
  );
  __0.setNetPriceLocale = $entry(function(a0){
    this.g.setNetPriceLocale_0(a0);
  }
  );
  __0.setNetPriceUnit = $entry(function(a0){
    this.g.setNetPriceUnit_0(a0);
  }
  );
  __0.setNetValue = $entry(function(a0){
    this.g.setNetValue_0(gwtInstance(a0));
  }
  );
  __0.setNetValueCurrency = $entry(function(a0){
    this.g.setNetValueCurrency_0(a0);
  }
  );
  __0.setNetValueFreightless = $entry(function(a0){
    this.g.setNetValueFreightless_0(gwtInstance(a0));
  }
  );
  __0.setNetValueLocale = $entry(function(a0){
    this.g.setNetValueLocale_0(a0);
  }
  );
  __0.setPricingConditions = $entry(function(a0){
    __static_wrapper_setPricingConditions_0(this.g, a0);
  }
  );
  __0.setResultMessages = $entry(function(a0){
    __static_wrapper_setResultMessages(this.g, a0);
  }
  );
  __0.setSubtotals = $entry(function(a0){
    this.g.setSubtotals_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingItemOutput[p] === undefined && ($wnd.sapcodpricing.CodPricingItemOutput[p] = pkg[p]);
}

function CodPricingItemOutput_ExporterImpl(){
  $export_7(this);
}

function __static_wrapper_setPricingConditions_0(instance, a0){
  $setPricingConditions_0(instance, ($clinit_ExporterUtil() , dynamicCast($toArrObject(a0, initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, a0.length, 0, 1)), 75)));
}

function __static_wrapper_setResultMessages(instance, a0){
  $setResultMessages(instance, ($clinit_ExporterUtil() , dynamicCast($toArrObject(a0, initDim(Lcom_sap_cod_pricing_engine_calc_CodPricingItemMessage_2_classLit, $intern_17, 87, a0.length, 0, 1)), 277)));
}

defineClass(302, 1, $intern_18, CodPricingItemOutput_ExporterImpl);
_.getJsConstructor = function getJsConstructor_7(){
  return $wnd.sapcodpricing.CodPricingItemOutput;
}
;
_.isAssignable = function isAssignable_7(o){
  return o != null && instanceOf(o, 119);
}
;
var exported_7 = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingItemOutput_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingItemOutput_ExporterImpl', 302, Ljava_lang_Object_2_classLit);
function CodPricingProductUnit(){
}

defineClass(186, 1, {186:1, 32:1}, CodPricingProductUnit);
_.getAlternativeUnitName_0 = function getAlternativeUnitName(){
  return this.alternativeUnitName;
}
;
_.getDenominator_0 = function getDenominator(){
  return this.denominator;
}
;
_.getExponent_0 = function getExponent(){
  return this.exponent;
}
;
_.getNumerator_0 = function getNumerator(){
  return this.numerator;
}
;
_.setAlternativeUnitName_0 = function setAlternativeUnitName(alternativeUnitName){
  this.alternativeUnitName = alternativeUnitName;
}
;
_.setDenominator_0 = function setDenominator(denominator){
  this.denominator = denominator;
}
;
_.setExponent_0 = function setExponent(exponent){
  this.exponent = exponent;
}
;
_.setNumerator_0 = function setNumerator(numerator){
  this.numerator = numerator;
}
;
_.denominator = 0;
_.exponent = 0;
_.numerator = 0;
var Lcom_sap_cod_pricing_engine_calc_CodPricingProductUnit_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingProductUnit', 186, Ljava_lang_Object_2_classLit);
function $export_8(this$static){
  if (!exported_8) {
    exported_8 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_cod_pricing_engine_calc_CodPricingProductUnit_2_classLit, this$static);
    $export0_8(this$static);
  }
}

function $export0_8(this$static){
  var pkg = declarePackage('sapcodpricing.CodPricingProductUnit');
  var __0, __ = this$static;
  $wnd.sapcodpricing.CodPricingProductUnit = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new CodPricingProductUnit);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.CodPricingProductUnit.prototype = new Object;
  __0.getAlternativeUnitName = $entry(function(){
    return this.g.getAlternativeUnitName_0();
  }
  );
  __0.getDenominator = $entry(function(){
    return this.g.getDenominator_0();
  }
  );
  __0.getExponent = $entry(function(){
    return this.g.getExponent_0();
  }
  );
  __0.getNumerator = $entry(function(){
    return this.g.getNumerator_0();
  }
  );
  __0.setAlternativeUnitName = $entry(function(a0){
    this.g.setAlternativeUnitName_0(a0);
  }
  );
  __0.setDenominator = $entry(function(a0){
    this.g.setDenominator_0(a0);
  }
  );
  __0.setExponent = $entry(function(a0){
    this.g.setExponent_0(a0);
  }
  );
  __0.setNumerator = $entry(function(a0){
    this.g.setNumerator_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.CodPricingProductUnit[p] === undefined && ($wnd.sapcodpricing.CodPricingProductUnit[p] = pkg[p]);
}

function CodPricingProductUnit_ExporterImpl(){
  $export_8(this);
}

defineClass(303, 1, $intern_18, CodPricingProductUnit_ExporterImpl);
_.getJsConstructor = function getJsConstructor_8(){
  return $wnd.sapcodpricing.CodPricingProductUnit;
}
;
_.isAssignable = function isAssignable_8(o){
  return o != null && instanceOf(o, 186);
}
;
var exported_8 = false;
var Lcom_sap_cod_pricing_engine_calc_CodPricingProductUnit_1ExporterImpl_2_classLit = createForClass('com.sap.cod.pricing.engine.calc', 'CodPricingProductUnit_ExporterImpl', 303, Ljava_lang_Object_2_classLit);
function $clinit_DAOManagerHelper(){
  $clinit_DAOManagerHelper = emptyMethod;
  SINGELTON = new DAOManagerHelper;
}

function $getDAO(this$static, objectType){
  switch (objectType) {
    case 'Application':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'Application', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ApplicationDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.condmgnt.customizing.dao.legacy.ApplicationDAOImpl');
      }

      break;
    case 'ExclusionGroup':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'ExclusionGroup', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ExclusionGroupDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.pricing.customizing.dao.legacy.ExclusionGroupDAOImpl');
      }

      break;
    case 'ExclusionProcedure':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'ExclusionProcedure', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ExclusionProcedureDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.pricing.customizing.dao.legacy.ExclusionProcedureDAOImpl');
      }

      break;
    case 'FieldCatalogue':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'FieldCatalogue', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new FieldCatalogueDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.condmgnt.customizing.dao.legacy.FieldCatalogueDAOImpl');
      }

      break;
    case 'ConditionTable':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'ConditionTable', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ConditionTableDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.condmgnt.customizing.dao.legacy.ConditionTableDAOImpl');
      }

      break;
    case 'AccessSequence':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'AccessSequence', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new AccessSequenceDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.condmgnt.customizing.dao.legacy.AccessSequenceDAOImpl');
      }

      break;
    case 'ConditionType':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'ConditionType', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ConditionTypeDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.condmgnt.customizing.dao.legacy.ConditionTypeDAOImpl');
      }

      break;
    case 'Scale':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.masterdata', 'Scale', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ScaleDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.condmgnt.masterdata.dao.legacy.ScaleDAOImpl');
      }

      break;
    case 'ConversionFactor':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ConversionFactor', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ConversionFactorDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.ConversionFactorDAOImpl');
      }

      break;
    case 'CurrencyUnit':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'CurrencyUnit', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new CurrencyUnitDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.CurrencyUnitDAOImpl');
      }

      break;
    case 'ExchangeRate':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ExchangeRate', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ExchangeRateDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.ExchangeRateDAOImpl');
      }

      break;
    case 'ExchangeRateType':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ExchangeRateType', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ExchangeRateTypeDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.ExchangeRateTypeDAOImpl');
      }

      break;
    case 'EmuKeys':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'EmuKeys', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new EmuKeysDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.EmuKeysDAOImpl');
      }

      break;
    case 'ExpiringCurrency':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ExpiringCurrency', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ExpiringCurrencyDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.ExpiringCurrencyDAOImpl');
      }

      break;
    case 'Notation':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'Notation', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new NotationDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.NotationDAOImpl');
      }

      break;
    case 'NotationPrefix':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'NotationPrefix', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new NotationPrefixDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.NotationPrefixDAOImpl');
      }

      break;
    case 'Dimension':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'Dimension', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new DimensionDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.DimensionDAOImpl');
      }

      break;
    case 'PhysicalUnit':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'PhysicalUnit', 'dao.standard');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new PhysicalUnitDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.conversion.dao.standard.PhysicalUnitDAOImpl');
      }

      break;
    case 'PricingProcedure':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'PricingProcedure', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new PricingProcedureDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.pricing.customizing.dao.legacy.PricingProcedureDAOImpl');
      }

      break;
    case 'ConditionRecord':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.masterdata', 'ConditionRecord', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new ConditionRecordDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.condmgnt.masterdata.dao.legacy.ConditionRecordDAOImpl');
      }

      break;
    case 'PricingConditionType':
      this$static.dao_0 = $getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'PricingConditionType', 'dao.legacy');
      if (this$static.dao_0 == null) {
        this$static.dao_0 = new PricingConditionTypeDAOImpl;
        $putDAO((null , SINGELTON_2), this$static.dao_0, 'com.sap.spe.pricing.customizing.dao.legacy.PricingConditionTypeDAOImpl');
      }

      break;
    default:this$static.dao_0 = null;
  }
  return this$static.dao_0;
}

function DAOManagerHelper(){
}

defineClass(436, 1, {32:1}, DAOManagerHelper);
_.dao_0 = null;
var SINGELTON;
var Lcom_sap_cod_pricing_engine_dataimport_DAOManagerHelper_2_classLit = createForClass('com.sap.cod.pricing.engine.dataimport', 'DAOManagerHelper', 436, Ljava_lang_Object_2_classLit);
function $clinit_BootStrapUtil(){
  $clinit_BootStrapUtil = emptyMethod;
  SINGELTON_0 = new BootStrapUtil;
}

function $bootstrapBuilders(){
  var accSeqBuilder, appBuilder, conRecBuilder, condGrpBuilder, condPurBuilder, condTableBuilder, condTypeBuilder, convBuilderContainer, convFactorBuilder, copyTypeBuilder, currUnitBuilder, custBuilderContainer, dimnBuilder, emuKeyBuilder, exchRateBuilder, exchRateTypeBuilder, exclusionGrpBuilder, exclusionProcedureBuilder, expireCurrBuilder, fieldCatBuilder, fixationGrpBuilder, notatnBuilder, notatnPrfxBuilder, physicalUnitBuilder, prbuilderContainer, prcExclusionGrpBuilder, prexclusionProcedureBuilder, pricingCondbuilder, pricingTypeBuilder, procedureBuilder, relAttributeBuilder, scaleBuilder, taskBuilder, usageBuilder;
  $getBuilderContainer(($clinit_BuilderManager() , $clinit_BuilderManager() , SINGELTON_1), 'TXT', null);
  convBuilderContainer = $getBuilderContainer((null , SINGELTON_1), 'CNV', null);
  convFactorBuilder = new ConversionFactorBuilder;
  $putStringValue(convBuilderContainer.builders, 'FA', convFactorBuilder);
  currUnitBuilder = new CurrencyUnitBuilder;
  $putStringValue(convBuilderContainer.builders, 'CU', currUnitBuilder);
  emuKeyBuilder = new EmuKeysBuilder;
  $putStringValue(convBuilderContainer.builders, 'EM', emuKeyBuilder);
  exchRateBuilder = new ExchangeRateBuilder;
  $putStringValue(convBuilderContainer.builders, 'ER', exchRateBuilder);
  exchRateTypeBuilder = new ExchangeRateTypeBuilder;
  $putStringValue(convBuilderContainer.builders, 'ET', exchRateTypeBuilder);
  expireCurrBuilder = new ExpiringCurrencyBuilder;
  $putStringValue(convBuilderContainer.builders, 'EC', expireCurrBuilder);
  notatnBuilder = new NotationBuilder;
  $putStringValue(convBuilderContainer.builders, 'NO', notatnBuilder);
  notatnPrfxBuilder = new NotationPrefixBuilder;
  $putStringValue(convBuilderContainer.builders, 'NP', notatnPrfxBuilder);
  physicalUnitBuilder = new PhysicalUnitBuilder;
  $putStringValue(convBuilderContainer.builders, 'PU', physicalUnitBuilder);
  dimnBuilder = new DimensionBuilder;
  $putStringValue(convBuilderContainer.builders, 'DI', dimnBuilder);
  custBuilderContainer = $getBuilderContainer((null , SINGELTON_1), 'CON', 'A');
  appBuilder = new ApplicationBuilder;
  $putStringValue(custBuilderContainer.builders, 'AP', appBuilder);
  accSeqBuilder = new AccessSequenceBuilder;
  $putStringValue(custBuilderContainer.builders, 'AS', accSeqBuilder);
  condGrpBuilder = new ConditionGroupBuilder;
  $putStringValue(custBuilderContainer.builders, 'GR', condGrpBuilder);
  condTableBuilder = new ConditionTableBuilder;
  $putStringValue(custBuilderContainer.builders, 'TB', condTableBuilder);
  condTypeBuilder = new PricingConditionTypeBuilder;
  $putStringValue(custBuilderContainer.builders, 'TY', condTypeBuilder);
  fieldCatBuilder = new FieldCatalogueBuilder;
  $putStringValue(custBuilderContainer.builders, 'FC', fieldCatBuilder);
  procedureBuilder = new PricingProcedureBuilder;
  $putStringValue(custBuilderContainer.builders, 'PR', procedureBuilder);
  taskBuilder = new TaskBuilder;
  $putStringValue(custBuilderContainer.builders, 'TA', taskBuilder);
  usageBuilder = new UsageBuilder;
  $putStringValue(custBuilderContainer.builders, 'US', usageBuilder);
  conRecBuilder = new PricingConditionRecordBuilder;
  $putStringValue(custBuilderContainer.builders, 'CR', conRecBuilder);
  scaleBuilder = new PricingScaleBuilder;
  $putStringValue(custBuilderContainer.builders, 'SC', scaleBuilder);
  condPurBuilder = new ConditionPurposeBuilder;
  $putStringValue(custBuilderContainer.builders, 'PU', condPurBuilder);
  copyTypeBuilder = new CopyTypeBuilder;
  $putStringValue(custBuilderContainer.builders, 'PC', copyTypeBuilder);
  exclusionGrpBuilder = new ExclusionGroupBuilder;
  $putStringValue(custBuilderContainer.builders, 'EG', exclusionGrpBuilder);
  exclusionProcedureBuilder = new ExclusionProcedureBuilder;
  $putStringValue(custBuilderContainer.builders, 'EP', exclusionProcedureBuilder);
  fixationGrpBuilder = new FixationGroupBuilder;
  $putStringValue(custBuilderContainer.builders, 'FG', fixationGrpBuilder);
  pricingTypeBuilder = new PricingTypeBuilder;
  $putStringValue(custBuilderContainer.builders, 'PT', pricingTypeBuilder);
  pricingCondbuilder = new PricingConditionBuilder;
  $putStringValue(custBuilderContainer.builders, 'CO', pricingCondbuilder);
  relAttributeBuilder = new RelevantAttributesBuilder;
  $putStringValue(custBuilderContainer.builders, 'RA', relAttributeBuilder);
  prbuilderContainer = $getBuilderContainer((null , SINGELTON_1), 'CON', 'PR');
  prexclusionProcedureBuilder = new ExclusionProcedureBuilder;
  $putStringValue(prbuilderContainer.builders, 'EP', prexclusionProcedureBuilder);
  prcExclusionGrpBuilder = new ExclusionGroupBuilder;
  $putStringValue(prbuilderContainer.builders, 'EG', prcExclusionGrpBuilder);
}

function $bootstrapPricingEngine(){
  var prUsageEc, condCustEng, condMasDataEng, condFinEng, txtEc, txtEng, convEc, convEngine, bd, pbdb, pcab, prohier, proconfig, prodescbuilder, promatdatabuilder, logicalsysbuilder;
  $clinit_TextEngineFactory();
  rFactory = new TextEngineFactoryImpl;
  factory_3 = new CurrencyConversionTracerFactoryImpl;
  factory_0 = new ConditionCustomizingEngineFactoryImpl;
  new ConversionEngineFactoryImpl;
  factory_2 = new ConditionMasterDataEngineFactoryImpl;
  factory_1 = new ConditionFindingEngineFactoryImpl;
  rFactory = new TextEngineFactoryImpl;
  factory_4 = new DocumentEngineFactoryImpl;
  prUsageEc = $getEngineContainer(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'A');
  condCustEng = new PricingCustomizingEngine;
  $putStringValue(prUsageEc.engines, 'CUS', condCustEng);
  condMasDataEng = new ConditionMasterDataEngine;
  $putStringValue(prUsageEc.engines, 'MAS', condMasDataEng);
  condFinEng = new PricingEngine;
  $putStringValue(prUsageEc.engines, 'FIN', condFinEng);
  txtEc = $getEngineContainer((null , SINGELTON_3), 'TXT');
  txtEng = new TextEngine;
  $putStringValue(txtEc.engines, 'TXT', txtEng);
  convEc = $getEngineContainer((null , SINGELTON_3), 'CNV');
  convEngine = new ConversionEngine;
  $putStringValue(convEc.engines, 'CNV', convEngine);
  $bootstrapBuilders();
  bd = new BuilderDispatcher;
  pbdb = new ProductBaseDataBuilder;
  pcab = new ProductCategoryAssignmentBuilder;
  prohier = new ProductCategoryHierarchyBuilder;
  proconfig = new ProductConfigurationDataBuilder;
  prodescbuilder = new ProductDescriptionBuilder;
  promatdatabuilder = new ProductMaterialDataBuilder;
  logicalsysbuilder = new LogicalSystemBuilder;
  $clinit_ConditionCustomizingCacheFacadeImpl();
  cr_0 = bd;
  $clinit_ConversionCacheFacadeImpl();
  cr_1 = bd;
  cr_3 = bd;
  $clinit_PricingCustomizingCacheFacadeImpl();
  cr_2 = bd;
  $clinit_TextCacheFacadeImpl();
  cr_11 = bd;
  $clinit_ProductBaseDataCacheFacadeImpl();
  cr_4 = pbdb;
  $clinit_ProductCategoryAssignmentCacheFacadeImpl();
  cr_5 = pcab;
  $clinit_ProductCategoryHierarchyCacheFacadeImpl();
  cr_6 = prohier;
  $clinit_ProductConfigDataCacheFacadeImpl();
  cr_7 = proconfig;
  $clinit_ProductDescriptionCacheFacadeImpl();
  cr_8 = prodescbuilder;
  $clinit_ProductMaterialDataCacheFacadeImpl();
  cr_10 = promatdatabuilder;
  $clinit_ProductLogicalSystemCacheFacadeImpl();
  cr_9 = logicalsysbuilder;
}

function $clearBuffer(this$static){
  var convEc, prUsageEc, txtEc, dummyPriceCondition;
  prUsageEc = $getEngineContainer(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'A');
  $reset(prUsageEc.engines);
  txtEc = $getEngineContainer((null , SINGELTON_3), 'TXT');
  $reset(txtEc.engines);
  convEc = $getEngineContainer((null , SINGELTON_3), 'CNV');
  $reset(convEc.engines);
  $reset((null , SINGELTON_3).engines);
  $reset(($clinit_BuilderManager() , $clinit_BuilderManager() , SINGELTON_1).containers);
  $clinit_TextEngineFactory();
  rFactory = null;
  factory_3 = null;
  factory_0 = null;
  factory_2 = null;
  factory_1 = null;
  rFactory = null;
  factory_4 = null;
  $clinit_ConditionCustomizingCacheFacadeImpl();
  cr_0 = null;
  $clinit_ConversionCacheFacadeImpl();
  cr_1 = null;
  cr_3 = null;
  $clinit_PricingCustomizingCacheFacadeImpl();
  cr_2 = null;
  $clinit_TextCacheFacadeImpl();
  cr_11 = null;
  $clinit_ProductBaseDataCacheFacadeImpl();
  cr_4 = null;
  $clinit_ProductCategoryAssignmentCacheFacadeImpl();
  cr_5 = null;
  $clinit_ProductCategoryHierarchyCacheFacadeImpl();
  cr_6 = null;
  $clinit_ProductConfigDataCacheFacadeImpl();
  cr_7 = null;
  $clinit_ProductDescriptionCacheFacadeImpl();
  cr_8 = null;
  $clinit_ProductMaterialDataCacheFacadeImpl();
  cr_10 = null;
  $clinit_ProductLogicalSystemCacheFacadeImpl();
  cr_9 = null;
  this$static.conditionRecordDAO = dynamicCast($getDAO(($clinit_DAOManagerHelper() , $clinit_DAOManagerHelper() , SINGELTON), 'ConditionRecord'), 206);
  this$static.pricingConditionTypeDAO = dynamicCast($getDAO((null , SINGELTON), 'PricingConditionType'), 347);
  this$static.pricingProcedureDAO = dynamicCast($getDAO((null , SINGELTON), 'PricingProcedure'), 348);
  dummyPriceCondition = ($clinit_DummyPricingCondition() , $clinit_DummyPricingCondition() , SINGELTON_4);
  dummyPriceCondition.pricingCondition = null;
  $clearBuffer_0(this$static.conditionRecordDAO);
  $clearBuffer_1(this$static.pricingConditionTypeDAO);
  $clearBuffer_2(this$static.pricingProcedureDAO);
  this$static.conditionRecordDAO = null;
  this$static.pricingConditionTypeDAO = null;
  this$static.pricingProcedureDAO = null;
  (null , SINGELTON).dao_0 = null;
  $reset(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2).daos);
}

function BootStrapUtil(){
}

defineClass(388, 1, {}, BootStrapUtil);
var SINGELTON_0;
var Lcom_sap_cod_pricing_engine_starter_BootStrapUtil_2_classLit = createForClass('com.sap.cod.pricing.engine.starter', 'BootStrapUtil', 388, Ljava_lang_Object_2_classLit);
function convertEmptyStringToNull(value_0){
  if (value_0 != null) {
    if (value_0.length == 0) {
      return null;
    }
    if (value_0.length == 1) {
      if (isSpace(value_0.charCodeAt(0))) {
        return null;
      }
    }
  }
  return value_0;
}

function $clinit_IProductEngineFactory(){
  $clinit_IProductEngineFactory = emptyMethod;
  getLocation(Lcom_sap_spc_product_IProductEngineFactory_2_classLit);
}

var factory = null;
var Lcom_sap_spc_product_IProductEngineFactory_2_classLit = createForClass('com.sap.spc.product', 'IProductEngineFactory', null, Ljava_lang_Object_2_classLit);
function BaseRuntimeException(){
  RuntimeException.call(this);
}

function BaseRuntimeException_0(){
  RuntimeException.call(this);
}

defineClass(127, 20, $intern_2);
_.getCause = function getCause_0(){
  return this.cause;
}
;
_.getMessageClass = function getMessageClass(){
  return null;
}
;
_.getMessageNr = function getMessageNr(){
  return 0;
}
;
_.printStackTrace = function printStackTrace_0(){
  $printStackTrace(this);
}
;
var Lcom_sap_vmc_exception_BaseRuntimeException_2_classLit = createForClass('com.sap.vmc.exception', 'BaseRuntimeException', 127, Ljava_lang_RuntimeException_2_classLit);
function ProductCacheException(messageNumber){
  BaseRuntimeException_0.call(this, valueOf(messageNumber));
}

defineClass(267, 127, $intern_2, ProductCacheException);
var Lcom_sap_spc_product_exception_ProductCacheException_2_classLit = createForClass('com.sap.spc.product.exception', 'ProductCacheException', 267, Lcom_sap_vmc_exception_BaseRuntimeException_2_classLit);
function BaseException(){
  Exception.call(this);
}

defineClass(46, 9, $intern_20);
_.getCause = function getCause_1(){
  return this.cause;
}
;
_.getLocalizedMessage = function getLocalizedMessage_0(){
  return '';
}
;
_.getMessage_0 = function getMessage_1(){
  return '';
}
;
_.getMessageClass = function getMessageClass_0(){
  return '';
}
;
_.getMessageNr = function getMessageNr_0(){
  return 0;
}
;
var Lcom_sap_vmc_exception_BaseException_2_classLit = createForClass('com.sap.vmc.exception', 'BaseException', 46, Ljava_lang_Exception_2_classLit);
function ProductInconsistentDBException(messageNumber){
  BaseException.call(this, valueOf(messageNumber));
}

defineClass(93, 46, {93:1, 46:1, 3:1, 9:1, 18:1}, ProductInconsistentDBException);
var Lcom_sap_spc_product_exception_ProductInconsistentDBException_2_classLit = createForClass('com.sap.spc.product.exception', 'ProductInconsistentDBException', 93, Lcom_sap_vmc_exception_BaseException_2_classLit);
defineClass(675, 1, $intern_21);
var Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit = createForClass('com.sap.spe.base.cache', 'CacheReaderAdapter', 675, Ljava_lang_Object_2_classLit);
function $get(key){
  getKeys(key);
  try {
    ($clinit_IProductEngineFactory() , $clinit_IProductEngineFactory() , factory = ($clinit_ClassFinder() , $clinit_ClassFinder() , null) , $clinit_IProductEngineFactory() , factory).nullMethod();
    throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), null.nullMethod(), 'LogicalSystem', null.nullMethod()));
    null.nullMethod();
    return null;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 93))
      throw unwrap($e0);
  }
}

function LogicalSystemBuilder(){
}

defineClass(422, 675, $intern_21, LogicalSystemBuilder);
var Lcom_sap_spc_product_impl_LogicalSystemBuilder_2_classLit = createForClass('com.sap.spc.product.impl', 'LogicalSystemBuilder', 422, Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit);
function $get_0(key){
  var cacheObject, keys_0, objectType;
  cacheObject = null;
  keys_0 = getKeysWithoutNull(key);
  objectType = keys_0[0];
  try {
    ($clinit_IProductEngineFactory() , $clinit_IProductEngineFactory() , factory = ($clinit_ClassFinder() , $clinit_ClassFinder() , null) , $clinit_IProductEngineFactory() , factory).nullMethod();
    throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), null.nullMethod(), 'ProductBaseData', null.nullMethod()));
    $equals_7(objectType, 'ProductBaseData')?(cacheObject = $getProductBaseData(keys_0[2])):$equals_7(objectType, 'ProductBaseData_Array')?(cacheObject = $getProductsBaseData()):$equals_7(objectType, 'RelationshipType') && (cacheObject = new CacheObjectImpl(null.nullMethod()));
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 93)) {
      throw new ProductCacheException(4);
    }
     else 
      throw unwrap($e0);
  }
  return cacheObject;
}

function $getProductBaseData(productGUID){
  null.nullMethod();
  throw new ProductInconsistentDBException(2, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [productGUID, null.nullMethod()]));
}

function $getProductsBaseData(){
  null.nullMethod();
  throw new ProductInconsistentDBException(4);
}

function ProductBaseDataBuilder(){
}

defineClass(416, 675, $intern_21, ProductBaseDataBuilder);
var Lcom_sap_spc_product_impl_ProductBaseDataBuilder_2_classLit = createForClass('com.sap.spc.product.impl', 'ProductBaseDataBuilder', 416, Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit);
function $get_1(key){
  var cacheObject, keys_0, objectType, categorieIDs;
  cacheObject = null;
  try {
    keys_0 = getKeys(key);
    objectType = keys_0[0];
    ($clinit_IProductEngineFactory() , $clinit_IProductEngineFactory() , factory = ($clinit_ClassFinder() , $clinit_ClassFinder() , null) , $clinit_IProductEngineFactory() , factory).nullMethod();
    throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), null.nullMethod(), 'ProductCategoryAssignment', null.nullMethod()));
    $equals_7(objectType, 'ProductCategoryAssignment')?(cacheObject = $getProductCategoryAssignment()):$equals_7(objectType, 'ProductCategoryAssignmentS') && (cacheObject = (categorieIDs = null.nullMethod() , new CacheObjectImpl(categorieIDs)));
    return cacheObject;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 93)) {
      throw new ProductCacheException(0);
    }
     else 
      throw unwrap($e0);
  }
}

function $getProductCategoryAssignment(){
  null.nullMethod();
  throw new ProductInconsistentDBException(5);
}

function ProductCategoryAssignmentBuilder(){
}

defineClass(417, 675, $intern_21, ProductCategoryAssignmentBuilder);
var Lcom_sap_spc_product_impl_ProductCategoryAssignmentBuilder_2_classLit = createForClass('com.sap.spc.product.impl', 'ProductCategoryAssignmentBuilder', 417, Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit);
function $get_2(key){
  getKeys(key);
  try {
    ($clinit_IProductEngineFactory() , $clinit_IProductEngineFactory() , factory = ($clinit_ClassFinder() , $clinit_ClassFinder() , null) , $clinit_IProductEngineFactory() , factory).nullMethod();
    throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), null.nullMethod(), 'ProductCategoryHierarchy', null.nullMethod()));
    null.nullMethod();
    return null;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      throw new ProductCacheException(15);
    }
     else 
      throw unwrap($e0);
  }
}

function ProductCategoryHierarchyBuilder(){
}

defineClass(418, 675, $intern_21, ProductCategoryHierarchyBuilder);
var Lcom_sap_spc_product_impl_ProductCategoryHierarchyBuilder_2_classLit = createForClass('com.sap.spc.product.impl', 'ProductCategoryHierarchyBuilder', 418, Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit);
function $get_3(key){
  var keys_0, objectType;
  keys_0 = getKeys(key);
  objectType = keys_0[0];
  try {
    ($clinit_IProductEngineFactory() , $clinit_IProductEngineFactory() , factory = ($clinit_ClassFinder() , $clinit_ClassFinder() , null) , $clinit_IProductEngineFactory() , factory).nullMethod();
    throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), null.nullMethod(), 'ProductConfigurationData', null.nullMethod()));
    $equals_7(objectType, 'ProductConfigurationData') && (null.nullMethod() , null);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 93))
      throw unwrap($e0);
  }
  return null;
}

function ProductConfigurationDataBuilder(){
}

defineClass(419, 675, $intern_21, ProductConfigurationDataBuilder);
var Lcom_sap_spc_product_impl_ProductConfigurationDataBuilder_2_classLit = createForClass('com.sap.spc.product.impl', 'ProductConfigurationDataBuilder', 419, Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit);
function $get_4(key){
  var keys_0, objectType;
  keys_0 = getKeys(key);
  objectType = keys_0[0];
  try {
    ($clinit_IProductEngineFactory() , $clinit_IProductEngineFactory() , factory = ($clinit_ClassFinder() , $clinit_ClassFinder() , null) , $clinit_IProductEngineFactory() , factory).nullMethod();
    throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), null.nullMethod(), 'ProductDescription', null.nullMethod()));
    $equals_7(objectType, 'ProductDescription') && (null.nullMethod() , null);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 93))
      throw unwrap($e0);
  }
  return null;
}

function ProductDescriptionBuilder(){
}

defineClass(420, 675, $intern_21, ProductDescriptionBuilder);
var Lcom_sap_spc_product_impl_ProductDescriptionBuilder_2_classLit = createForClass('com.sap.spc.product.impl', 'ProductDescriptionBuilder', 420, Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit);
function $get_5(key){
  var keys_0, objectType;
  keys_0 = getKeys(key);
  objectType = keys_0[0];
  try {
    ($clinit_IProductEngineFactory() , $clinit_IProductEngineFactory() , factory = ($clinit_ClassFinder() , $clinit_ClassFinder() , null) , $clinit_IProductEngineFactory() , factory).nullMethod();
    throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), null.nullMethod(), 'ProductMaterialData', null.nullMethod()));
    $equals_7(objectType, 'ProductMaterialData') && (null.nullMethod() , null);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 93))
      throw unwrap($e0);
  }
  return null;
}

function ProductMaterialDataBuilder(){
}

defineClass(421, 675, $intern_21, ProductMaterialDataBuilder);
var Lcom_sap_spc_product_impl_ProductMaterialDataBuilder_2_classLit = createForClass('com.sap.spc.product.impl', 'ProductMaterialDataBuilder', 421, Lcom_sap_spe_base_cache_CacheReaderAdapter_2_classLit);
function $clinit_Constants(){
  $clinit_Constants = emptyMethod;
  getCategory('/AP/PRC/Base');
}

defineClass(663, 1, $intern_22);
_.create_0 = function create_3(keys_0){
  return null;
}
;
var Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit = createForClass('com.sap.spe.base.cache', 'BuilderAdapter', 663, Ljava_lang_Object_2_classLit);
function $clinit_BuilderDispatcher(){
  $clinit_BuilderDispatcher = emptyMethod;
  getLocation(Lcom_sap_spe_base_cache_BuilderDispatcher_2_classLit);
}

function $get_6(this$static, key){
  var builder, businessObject, keys_0, usage, builder_0;
  keys_0 = getKeys(key);
  builder = (usage = null , $equals_7(this$static.businessFunctionality, 'CON') && (usage = keys_0[1]) , builder_0 = $getBuilder(($clinit_BuilderManager() , $clinit_BuilderManager() , SINGELTON_1), this$static.businessFunctionality, usage, keys_0[0]) , !builder_0 && ($clinit_Constants() , initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [keys_0[0], usage])) , builder_0);
  if (builder) {
    businessObject = builder.create_0(keys_0);
    return new CacheObjectImpl(businessObject);
  }
  throw new PRCIllegalArgumentException;
}

function $init(this$static, props){
  this$static.businessFunctionality = toString__Ljava_lang_String___devirtual$(props.stringMap.get_0('functionality'));
  if (this$static.businessFunctionality == null) {
    throw new PluginException;
  }
}

function BuilderDispatcher(){
  $clinit_BuilderDispatcher();
}

defineClass(415, 1, $intern_21, BuilderDispatcher);
var Lcom_sap_spe_base_cache_BuilderDispatcher_2_classLit = createForClass('com.sap.spe.base.cache', 'BuilderDispatcher', 415, Ljava_lang_Object_2_classLit);
function $clinit_BuilderManager(){
  $clinit_BuilderManager = emptyMethod;
  getLocation(Lcom_sap_spe_base_cache_BuilderManager_2_classLit);
  SINGELTON_1 = new BuilderManager;
}

function $getBuilder(this$static, businessFunctionality, deviantBusinessFunctionality, obejctTypeId){
  var container;
  container = $getBuilderContainer(this$static, businessFunctionality, deviantBusinessFunctionality);
  return dynamicCast($getStringValue(container.builders, obejctTypeId), 35);
}

function $getBuilderContainer(this$static, businessFunctionality, deviantBusinessFunctionality){
  var container, functionality;
  functionality = deviantBusinessFunctionality != null?deviantBusinessFunctionality:businessFunctionality;
  container = dynamicCast($getStringValue(this$static.containers, functionality), 223);
  if (!container) {
    container = new BuilderManager$BuilderContainer;
    $putStringValue(this$static.containers, functionality, container);
  }
  return container;
}

function BuilderManager(){
  this.containers = new HashMap_0(50);
}

defineClass(414, 1, {}, BuilderManager);
var SINGELTON_1;
var Lcom_sap_spe_base_cache_BuilderManager_2_classLit = createForClass('com.sap.spe.base.cache', 'BuilderManager', 414, Ljava_lang_Object_2_classLit);
function BuilderManager$BuilderContainer(){
  this.builders = new HashMap_0(50);
}

defineClass(223, 1, {223:1}, BuilderManager$BuilderContainer);
var Lcom_sap_spe_base_cache_BuilderManager$BuilderContainer_2_classLit = createForClass('com.sap.spe.base.cache', 'BuilderManager/BuilderContainer', 223, Ljava_lang_Object_2_classLit);
function $clinit_CartesianProduct(){
  $clinit_CartesianProduct = emptyMethod;
  INITIAL_BUFFER = new StringBuffer_0;
}

function calculate_0(keyArray){
  $clinit_CartesianProduct();
  var amount, attr, i_0, resultStringBuffer, ret, simple;
  amount = keyArray.length;
  simple = true;
  resultStringBuffer = new StringBuffer_0;
  ret = new ArrayList;
  for (i_0 = amount; i_0 > 0; i_0--) {
    attr = keyArray[amount - i_0];
    if (attr.length > 1) {
      simple = false;
      break;
    }
     else 
      attr.length != 0 && $append_1(resultStringBuffer, attr[0]);
    i_0 > 1 && (resultStringBuffer.string += '|' , resultStringBuffer);
  }
  simple?$add_3(ret, resultStringBuffer.string):recursiveCalculation(INITIAL_BUFFER, keyArray, ret, 0);
  return ret;
}

function recursiveCalculation(str, listArray, result, index_0){
  var attr, c, t;
  attr = listArray[index_0];
  if (attr.length == 0) {
    index_0 < listArray.length - 1?recursiveCalculation((str.string += '|' , str), listArray, result, index_0 + 1):result.add_0(str.string);
  }
   else {
    for (c = 0; c < attr.length; c++) {
      t = new StringBuffer_1(str.string);
      $append_1(t, attr[c]);
      index_0 < listArray.length - 1?recursiveCalculation((t.string += '|' , t), listArray, result, index_0 + 1):result.add_0(t.string);
    }
  }
}

var INITIAL_BUFFER;
function $clinit_DAOManager(){
  $clinit_DAOManager = emptyMethod;
  SINGELTON_2 = new DAOManager;
}

function $getDAO_0(this$static, usage, runtimeClass){
  var className, daoPackageName, objectType;
  $equals_7(usage, 'PR')?(daoPackageName = 'dao.advanced'):$equals_7(usage, 'A')?(daoPackageName = 'dao.legacy'):(daoPackageName = 'dao.advanced');
  className = ($ensureNamesAreInitialized(runtimeClass) , runtimeClass.typeName);
  objectType = $substring_0(className, 38, className.length - 7);
  return $getDAO_1(this$static, 'com.sap.spe.condmgnt.customizing', objectType, daoPackageName);
}

function $getDAO_1(this$static, packageName, objectType, daoPackageName){
  var buffer, className, dao;
  buffer = new StringBuffer_0;
  buffer.string += packageName;
  buffer.string += '.';
  buffer.string += daoPackageName;
  buffer.string += '.';
  buffer.string += objectType;
  buffer.string += 'DAOImpl';
  className = buffer.string;
  dao = $getStringValue(this$static.daos, className);
  return dao;
}

function $putDAO(this$static, dao, className){
  $putStringValue(this$static.daos, className, dao);
}

function DAOManager(){
  this.daos = new HashMap;
}

defineClass(437, 1, {}, DAOManager);
var SINGELTON_2;
var Lcom_sap_spe_base_cache_DAOManager_2_classLit = createForClass('com.sap.spe.base.cache', 'DAOManager', 437, Ljava_lang_Object_2_classLit);
function $clinit_EngineManager(){
  $clinit_EngineManager = emptyMethod;
  getLocation(Lcom_sap_spe_base_cache_EngineManager_2_classLit);
  SINGELTON_3 = new EngineManager;
}

function $getEngine(this$static, usage, id_0){
  var engineContainer;
  engineContainer = $getEngineContainer(this$static, usage);
  return dynamicCast($getStringValue(engineContainer.engines, id_0), 159);
}

function $getEngineContainer(this$static, usage){
  var engineContainer;
  engineContainer = dynamicCast($getStringValue(this$static.engines, usage), 222);
  if (!engineContainer) {
    engineContainer = new EngineManager$EngineContainer;
    $putStringValue(this$static.engines, usage, engineContainer);
  }
  return engineContainer;
}

function EngineManager(){
  this.engines = new HashMap_0(50);
}

defineClass(413, 1, {}, EngineManager);
var SINGELTON_3;
var Lcom_sap_spe_base_cache_EngineManager_2_classLit = createForClass('com.sap.spe.base.cache', 'EngineManager', 413, Ljava_lang_Object_2_classLit);
function EngineManager$EngineContainer(){
  this.engines = new HashMap_0(3);
}

defineClass(222, 1, {222:1}, EngineManager$EngineContainer);
var Lcom_sap_spe_base_cache_EngineManager$EngineContainer_2_classLit = createForClass('com.sap.spe.base.cache', 'EngineManager/EngineContainer', 222, Ljava_lang_Object_2_classLit);
function create_4(s0, s1){
  var buf;
  buf = new StringBuffer_0(s0.length + s1.length + 1);
  buf.string += s0;
  $append(buf, ($clinit_CartesianProduct() , 124));
  buf.string += s1;
  return buf.string;
}

function create_5(s0, s1, s2){
  var buf;
  buf = new StringBuffer_0(s0.length + s1.length + s2.length + 2);
  buf.string += s0;
  $append(buf, ($clinit_CartesianProduct() , 124));
  buf.string += s1;
  $append(buf, 124);
  buf.string += s2;
  return buf.string;
}

function create_6(s0, s1, s2, s3){
  var buf;
  buf = new StringBuffer_0(s0.length + s1.length + s2.length + s3.length + 3);
  buf.string += s0;
  $append(buf, ($clinit_CartesianProduct() , 124));
  buf.string += s1;
  $append(buf, 124);
  buf.string += s2;
  $append(buf, 124);
  buf.string += s3;
  return buf.string;
}

function create_7(s0, s1, s2, s3, s4){
  var buf;
  buf = new StringBuffer_0(s0.length + s1.length + s2.length + s3.length + s4.length + 4);
  buf.string += s0;
  $append(buf, ($clinit_CartesianProduct() , 124));
  buf.string += s1;
  $append(buf, 124);
  buf.string += s2;
  $append(buf, 124);
  buf.string += s3;
  $append(buf, 124);
  buf.string += s4;
  return buf.string;
}

function create_8(s1, s3, s4, s5){
  var buf;
  buf = new StringBuffer_0(2 + s1.length + 2 + s3.length + s4.length + s5.length + 5);
  buf.string += 'PR';
  $append(buf, ($clinit_CartesianProduct() , 124));
  buf.string += s1;
  $append(buf, 124);
  buf.string += 'SL';
  $append(buf, 124);
  buf.string += s3;
  $append(buf, 124);
  buf.string += s4;
  $append(buf, 124);
  buf.string += s5;
  return buf.string;
}

function create_9(s1, s2, s3, s4, s5, s6){
  var buf;
  buf = new StringBuffer_0(2 + s1.length + s2.length + s3.length + s4.length + s5.length + s6.length + 6);
  buf.string += 'ER';
  $append(buf, ($clinit_CartesianProduct() , 124));
  buf.string += s1;
  $append(buf, 124);
  buf.string += s2;
  $append(buf, 124);
  buf.string += s3;
  $append(buf, 124);
  buf.string += s4;
  $append(buf, 124);
  buf.string += s5;
  $append(buf, 124);
  buf.string += s6;
  return buf.string;
}

function create_10(s1, s3, s4, s5, s6){
  var buf, c, c0;
  buf = new StringBuffer_0(2 + s1.length + s6.length + 6);
  buf.string += 'PC';
  $append(buf, ($clinit_CartesianProduct() , 124));
  buf.string += s1;
  $append(buf, 124);
  buf.string += 'IT';
  $append(buf, 124);
  buf.string += s3;
  $append(buf, 124);
  for (c0 = 0; c0 < s4.length; c0++) {
    $append_1(buf, s4[c0]);
    $append(buf, 124);
  }
  for (c = 0; c < s5.length; c++) {
    $append(buf, 124);
    $append_1(buf, s5[c]);
  }
  buf.string += s6;
  return buf.string;
}

function create_11(s){
  var buf, c;
  buf = new StringBuffer;
  for (c = 0; c < s.length; c++) {
    $append(buf, ($clinit_CartesianProduct() , 124));
    $append_0(buf, s[c]);
  }
  return buf.string;
}

function create_12(s){
  var buf, c;
  buf = new StringBuffer_1(s[0]);
  for (c = 1; c < s.length; c++) {
    $append(buf, ($clinit_CartesianProduct() , 124));
    $append_1(buf, s[c]);
  }
  return buf.string;
}

function getKeys(key){
  var keys_0;
  if (key == null) {
    throw new IllegalArgumentException;
  }
  keys_0 = $split(key, '\\|', 0);
  return keys_0;
}

function getKeysWithoutNull(key){
  var i_0, keys_0;
  keys_0 = getKeys(key);
  for (i_0 = 0; i_0 < keys_0.length; i_0++) {
    $equals_7(keys_0[i_0], 'null') && (keys_0[i_0] = '');
  }
  return keys_0;
}

function IllegalArgumentException(){
  RuntimeException.call(this);
}

function IllegalArgumentException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(39, 20, $intern_23, IllegalArgumentException, IllegalArgumentException_0);
var Ljava_lang_IllegalArgumentException_2_classLit = createForClass('java.lang', 'IllegalArgumentException', 39, Ljava_lang_RuntimeException_2_classLit);
function PRCIllegalArgumentException(){
  IllegalArgumentException.call(this);
  this.info = new BaseExceptionInfo;
}

defineClass(246, 39, $intern_23, PRCIllegalArgumentException);
_.getCause = function getCause_2(){
  return null;
}
;
_.getLocalizedMessage = function getLocalizedMessage_1(){
  return this.info.detailMessage;
}
;
_.getMessage_0 = function getMessage_2(){
  return this.info.detailMessage;
}
;
_.getMessageClass = function getMessageClass_1(){
  return null;
}
;
_.getMessageNr = function getMessageNr_1(){
  return 0;
}
;
var Lcom_sap_spe_base_exception_PRCIllegalArgumentException_2_classLit = createForClass('com.sap.spe.base.exception', 'PRCIllegalArgumentException', 246, Ljava_lang_IllegalArgumentException_2_classLit);
function $createNext(this$static, line){
  this$static._next = new ListElement(line);
  return this$static._next;
}

function ListElement(line){
  this._next = null;
  this._line = line;
}

defineClass(329, 1, $intern_21, ListElement);
var Lcom_sap_spe_base_logging_ListElement_2_classLit = createForClass('com.sap.spe.base.logging', 'ListElement', 329, Ljava_lang_Object_2_classLit);
function $set_upToFourVariables(this$static, _upToFourVariables){
  this$static._upToFourVariables = _upToFourVariables;
}

function Message(area, number, defaultMessage, variables){
  var e, i_0, message, numberOfVariables;
  this._area = area;
  this._number = number;
  if (variables == null) {
    return;
  }
  numberOfVariables = variables.length;
  numberOfVariables > 4 && (numberOfVariables = 4);
  this._upToFourVariables = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, numberOfVariables, 4, 1);
  for (i_0 = 0; i_0 < numberOfVariables; i_0++) {
    this._upToFourVariables[i_0] = variables[i_0];
  }
  try {
    message = $getMessage_1($getMessageResourceManager((!instance_1 && (instance_1 = new ResourceManagerFactory) , this._area)), this._number, this._upToFourVariables);
    message.final_message.length == 0?(this._defaultMessage = defaultMessage):(this._defaultMessage = message.final_message);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      e = $e0;
      e.printStackTrace();
    }
     else 
      throw unwrap($e0);
  }
}

defineClass(40, 1, {40:1, 3:1, 32:1}, Message);
_.getArea_0 = function getArea(){
  return this._area;
}
;
_.getDefaultMessage_0 = function getDefaultMessage(){
  return this._defaultMessage;
}
;
_.getNumber_0 = function getNumber(){
  return this._number;
}
;
_.getVariables_0 = function getVariables(){
  return this._upToFourVariables;
}
;
_.get_area_0 = function get_area(){
  return this._area;
}
;
_.get_defaultMessage_0 = function get_defaultMessage(){
  return this._defaultMessage;
}
;
_.get_number_0 = function get_number(){
  return this._number;
}
;
_.get_upToFourVariables_0 = function get_upToFourVariables(){
  return this._upToFourVariables;
}
;
_.set_defaultMessage_0 = function set_defaultMessage(_defaultMessage){
  this._defaultMessage = _defaultMessage;
}
;
_._number = 0;
var Lcom_sap_spe_base_logging_Message_2_classLit = createForClass('com.sap.spe.base.logging', 'Message', 40, Ljava_lang_Object_2_classLit);
function $export_9(this$static){
  if (!exported_9) {
    exported_9 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_base_logging_Message_2_classLit, this$static);
    $export0_9(this$static);
  }
}

function $export0_9(this$static){
  var pkg = declarePackage('sapcodpricing.Message');
  var __0, __ = this$static;
  $wnd.sapcodpricing.Message = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 4 && (g = new Message(a[0], a[1], a[2], a[3]));
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.Message.prototype = new Object;
  __0.getArea = $entry(function(){
    return this.g.getArea_0();
  }
  );
  __0.getDefaultMessage = $entry(function(){
    return this.g.getDefaultMessage_0();
  }
  );
  __0.getNumber = $entry(function(){
    return this.g.getNumber_0();
  }
  );
  __0.getVariables = $entry(function(){
    return wrap_1(this.g.getVariables_0());
  }
  );
  __0.get_area = $entry(function(){
    return this.g.get_area_0();
  }
  );
  __0.get_defaultMessage = $entry(function(){
    return this.g.get_defaultMessage_0();
  }
  );
  __0.get_number = $entry(function(){
    return this.g.get_number_0();
  }
  );
  __0.get_upToFourVariables = $entry(function(){
    return wrap_1(this.g.get_upToFourVariables_0());
  }
  );
  __0.set_defaultMessage = $entry(function(a0){
    this.g.set_defaultMessage_0(a0);
  }
  );
  __0.set_upToFourVariables = $entry(function(a0){
    __static_wrapper_set_upToFourVariables(this.g, a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.Message[p] === undefined && ($wnd.sapcodpricing.Message[p] = pkg[p]);
}

function Message_ExporterImpl(){
  $export_9(this);
}

function __static_wrapper_set_upToFourVariables(instance, a0){
  $set_upToFourVariables(instance, ($clinit_ExporterUtil() , $toArrString(a0)));
}

defineClass(297, 1, $intern_18, Message_ExporterImpl);
_.getJsConstructor = function getJsConstructor_9(){
  return $wnd.sapcodpricing.Message;
}
;
_.isAssignable = function isAssignable_9(o){
  return o != null && instanceOf(o, 40);
}
;
var exported_9 = false;
var Lcom_sap_spe_base_logging_Message_1ExporterImpl_2_classLit = createForClass('com.sap.spe.base.logging', 'Message_ExporterImpl', 297, Ljava_lang_Object_2_classLit);
function $appendLine(this$static, protocolLine){
  ++this$static.numberOfLines;
  if (this$static._lastLine) {
    this$static._lastLine = $createNext(this$static._lastLine, protocolLine);
  }
   else if (this$static._firstLine) {
    $createNext(this$static._firstLine, protocolLine);
    this$static._lastLine = this$static._firstLine._next;
  }
   else {
    this$static._firstLine = new ListElement(protocolLine);
  }
}

function $clearLines(this$static, context){
  var currentLine, isFirstLine, previousLine;
  if (this$static.numberOfLines == 0) {
    return;
  }
  if (context != null) {
    if (this$static.numberOfLines == 1) {
      if ($equals_7(this$static._firstLine._line._context, context)) {
        this$static._firstLine = null;
        this$static.numberOfLines = 0;
      }
      return;
    }
    currentLine = this$static._firstLine;
    previousLine = this$static._firstLine;
    isFirstLine = true;
    while (currentLine) {
      if ($equals_7(currentLine._line._context, context)) {
        --this$static.numberOfLines;
        if (isFirstLine) {
          currentLine = currentLine._next;
          previousLine = currentLine;
          this$static._firstLine = currentLine;
        }
         else {
          currentLine = currentLine._next;
          previousLine._next = currentLine;
        }
      }
       else {
        isFirstLine?(isFirstLine = false):(previousLine = currentLine);
        currentLine = currentLine._next;
      }
    }
    this$static.numberOfLines < 2?(this$static._lastLine = null):(this$static._lastLine = previousLine);
  }
   else {
    this$static._firstLine = null;
    this$static._lastLine = null;
    this$static.numberOfLines = 0;
  }
}

function $getNextLine(currentLine){
  if (currentLine) {
    return currentLine._next;
  }
  return null;
}

function Protocol(){
}

defineClass(199, 1, $intern_21, Protocol);
_._firstLine = null;
_._lastLine = null;
_.numberOfLines = 0;
var Lcom_sap_spe_base_logging_Protocol_2_classLit = createForClass('com.sap.spe.base.logging', 'Protocol', 199, Ljava_lang_Object_2_classLit);
function ProtocolLine(exc){
  var args, i_0;
  ProtocolLine_2.call(this, 'E', exc.getLocalizedMessage(), 'PRCEXCEPTION');
  args = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
  if (instanceOf(exc, 46)) {
    dynamicCast(exc, 46);
    args = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, null.length, 4, 1);
    for (i_0 = 0; i_0 < null.length; i_0++) {
    }
  }
  this._message = new Message(exc.getMessageClass(), exc.getMessageNr(), exc.getLocalizedMessage(), args);
}

function ProtocolLine_0(exc, sourceId){
  ProtocolLine_2.call(this, 'E', exc.getLocalizedMessage(), 'PRCEXCEPTION');
  this._sourceId = sourceId;
}

function ProtocolLine_1(messageType, message, context){
  if (context == null) {
    throw new PRCIllegalArgumentException;
  }
  this._time = now_2();
  this._messageType = messageType;
  this._message = message;
  this._messageString = message._defaultMessage;
  this._context = context;
}

function ProtocolLine_2(messageType, message, context){
  if (context == null) {
    throw new PRCIllegalArgumentException;
  }
  this._time = now_2();
  this._messageType = messageType;
  this._messageString = message;
  this._context = context;
}

defineClass(62, 1, {62:1, 3:1, 32:1}, ProtocolLine, ProtocolLine_0, ProtocolLine_1, ProtocolLine_2);
_.getContext_0 = function getContext(){
  return this._context;
}
;
_.getMessage_1 = function getMessage_3(){
  return this._message;
}
;
_.getMessageString_0 = function getMessageString(){
  return this._messageString;
}
;
_.getMessageType_0 = function getMessageType(){
  return this._messageType;
}
;
_.getSourceId_0 = function getSourceId(){
  return this._sourceId;
}
;
_.getTime_0 = function getTime(){
  return this._time;
}
;
_.get_context_0 = function get_context(){
  return this._context;
}
;
_.get_message_0 = function get_message(){
  return this._message;
}
;
_.get_messageString_0 = function get_messageString(){
  return this._messageString;
}
;
_.get_messageType_0 = function get_messageType(){
  return this._messageType;
}
;
_.get_sourceId_0 = function get_sourceId(){
  return this._sourceId;
}
;
_.get_time_0 = function get_time(){
  return this._time;
}
;
_.set_context_0 = function set_context(_context){
  this._context = _context;
}
;
_.set_message_0 = function set_message(_message){
  this._message = _message;
}
;
_.set_messageString_0 = function set_messageString(_messageString){
  this._messageString = _messageString;
}
;
_.set_sourceId_0 = function set_sourceId(_sourceId){
  this._sourceId = _sourceId;
}
;
var Lcom_sap_spe_base_logging_ProtocolLine_2_classLit = createForClass('com.sap.spe.base.logging', 'ProtocolLine', 62, Ljava_lang_Object_2_classLit);
function $export_10(this$static){
  if (!exported_10) {
    exported_10 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_base_logging_ProtocolLine_2_classLit, this$static);
    new Message_ExporterImpl;
    $export0_10(this$static);
  }
}

function $export0_10(this$static){
  var pkg = declarePackage('sapcodpricing.ProtocolLine');
  var __0, __ = this$static;
  $wnd.sapcodpricing.ProtocolLine = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 3?(g = ___create(a[0], a[1] == null?null:a[1].g, a[2])):a.length == 4?(g = new ProtocolLine_2(a[0], a[1], a[2])):a.length == 1?(g = new ProtocolLine(a[0])):a.length == 2 && (g = new ProtocolLine_0(a[0], a[1]));
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.sapcodpricing.ProtocolLine.prototype = new Object;
  __0.getContext = $entry(function(){
    return this.g.getContext_0();
  }
  );
  __0.getMessage = $entry(function(){
    return wrap_0(this.g.getMessage_1());
  }
  );
  __0.getMessageString = $entry(function(){
    return this.g.getMessageString_0();
  }
  );
  __0.getMessageType = $entry(function(){
    return this.g.getMessageType_0();
  }
  );
  __0.getSourceId = $entry(function(){
    return this.g.getSourceId_0();
  }
  );
  __0.getTime = $entry(function(){
    return this.g.getTime_0();
  }
  );
  __0.get_context = $entry(function(){
    return this.g.get_context_0();
  }
  );
  __0.get_message = $entry(function(){
    return wrap_0(this.g.get_message_0());
  }
  );
  __0.get_messageString = $entry(function(){
    return this.g.get_messageString_0();
  }
  );
  __0.get_messageType = $entry(function(){
    return this.g.get_messageType_0();
  }
  );
  __0.get_sourceId = $entry(function(){
    return this.g.get_sourceId_0();
  }
  );
  __0.get_time = $entry(function(){
    return this.g.get_time_0();
  }
  );
  __0.set_context = $entry(function(a0){
    this.g.set_context_0(a0);
  }
  );
  __0.set_message = $entry(function(a0){
    this.g.set_message_0(a0 == null?null:a0.g);
  }
  );
  __0.set_messageString = $entry(function(a0){
    this.g.set_messageString_0(a0);
  }
  );
  __0.set_sourceId = $entry(function(a0){
    this.g.set_sourceId_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.sapcodpricing.ProtocolLine[p] === undefined && ($wnd.sapcodpricing.ProtocolLine[p] = pkg[p]);
}

function ProtocolLine_ExporterImpl(){
  $export_10(this);
}

function ___create(a0, a1, a2){
  return new ProtocolLine_1(a0, a1, a2);
}

defineClass(390, 1, $intern_18, ProtocolLine_ExporterImpl);
_.getJsConstructor = function getJsConstructor_10(){
  return $wnd.sapcodpricing.ProtocolLine;
}
;
_.isAssignable = function isAssignable_10(o){
  return o != null && instanceOf(o, 62);
}
;
var exported_10 = false;
var Lcom_sap_spe_base_logging_ProtocolLine_1ExporterImpl_2_classLit = createForClass('com.sap.spe.base.logging', 'ProtocolLine_ExporterImpl', 390, Ljava_lang_Object_2_classLit);
function $clinit_BitArray(){
  $clinit_BitArray = emptyMethod;
  var i_0;
  MAX_BITS = 32;
  BITS = initDim(I_classLit, $intern_4, 0, MAX_BITS, 7, 1);
  BITS[0] = 0;
  BITS[1] = 1;
  for (i_0 = 2; i_0 < MAX_BITS; i_0++) {
    BITS[i_0] = BITS[i_0 - 1] << 1;
  }
}

function $setBit(this$static, bit){
  if (bit > MAX_BITS || bit == 0) {
    throw new RuntimeException_0('Cannot set ' + bit + ' bit in BitArray!');
  }
  this$static.value_0 = this$static.value_0 | BITS[MAX_BITS - bit];
}

function BitArray(){
  $clinit_BitArray();
  this.value_0 = 0;
}

defineClass(611, 1, {}, BitArray);
_.value_0 = 0;
var BITS, MAX_BITS = 0;
var Lcom_sap_spe_base_util_BitArray_2_classLit = createForClass('com.sap.spe.base.util', 'BitArray', 611, Ljava_lang_Object_2_classLit);
function $clinit_ClassFinder(){
  $clinit_ClassFinder = emptyMethod;
  getLocation(Lcom_sap_spe_base_util_ClassFinder_2_classLit);
}

var Lcom_sap_spe_base_util_ClassFinder_2_classLit = createForClass('com.sap.spe.base.util', 'ClassFinder', null, Ljava_lang_Object_2_classLit);
function getActiveISOLanguage(){
  if (useDefaultLoginISOLanguage)
    return $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2))) , 'EN';
  try {
    $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
    return 'EN';
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      useDefaultLoginISOLanguage = true;
      return $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2))) , 'EN';
    }
     else 
      throw unwrap($e0);
  }
}

function getActiveLanguage(){
  if (useDefaultLoginLanguage)
    return $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2))) , 'EN';
  try {
    $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
    return 'EN';
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      useDefaultLoginLanguage = true;
      return $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2))) , 'EN';
    }
     else 
      throw unwrap($e0);
  }
}

var useDefaultLoginISOLanguage = false, useDefaultLoginLanguage = false;
defineClass(678, 1, {});
var Ljava_util_EventObject_2_classLit = createForClass('java.util', 'EventObject', 678, Ljava_lang_Object_2_classLit);
function StatusEvent(messageNumber, messageArguments, message, context){
  StatusEvent_0.call(this, messageNumber, messageArguments, message, context, false);
}

function StatusEvent_0(messageNumber, messageArguments, message, context, popUp){
  StatusEvent_1.call(this, message, context, popUp);
  this.m_messageArea = 'PRC_PRI';
  this.m_messageNumber = messageNumber;
  this.m_arguments = messageArguments != null?messageArguments:initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
}

function StatusEvent_1(message, context, popup){
  this.m_arguments = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
  this.popup = popup;
  this.m_message = message;
  this._context = context;
}

defineClass(106, 678, {});
_.m_messageArea = '';
_.m_messageNumber = 0;
_.popup = false;
var Lcom_sap_spe_base_util_event_StatusEvent_2_classLit = createForClass('com.sap.spe.base.util.event', 'StatusEvent', 106, Ljava_util_EventObject_2_classLit);
function ClearAllStatusEvent(context){
  StatusEvent_1.call(this, '', context, false);
}

defineClass(64, 106, {}, ClearAllStatusEvent);
var Lcom_sap_spe_base_util_event_ClearAllStatusEvent_2_classLit = createForClass('com.sap.spe.base.util.event', 'ClearAllStatusEvent', 64, Lcom_sap_spe_base_util_event_StatusEvent_2_classLit);
function ErrorStatusEvent(messageArguments, messageNumber, message, context){
  StatusEvent.call(this, messageNumber, messageArguments, message, context);
}

defineClass(126, 106, {126:1}, ErrorStatusEvent);
var Lcom_sap_spe_base_util_event_ErrorStatusEvent_2_classLit = createForClass('com.sap.spe.base.util.event', 'ErrorStatusEvent', 126, Lcom_sap_spe_base_util_event_StatusEvent_2_classLit);
function WarningStatusEvent(message){
  WarningStatusEvent_3.call(this, message, '');
}

function WarningStatusEvent_0(messageNumber, messageArguments, message, context){
  StatusEvent.call(this, messageNumber, messageArguments, message, context);
}

function WarningStatusEvent_1(messageNumber, messageArguments, message, context, popUp){
  StatusEvent_0.call(this, messageNumber, messageArguments, message, context, popUp);
}

function WarningStatusEvent_2(message, context){
  WarningStatusEvent_3.call(this, message, context);
}

function WarningStatusEvent_3(message, context){
  StatusEvent_1.call(this, message, context, false);
}

defineClass(44, 106, {44:1}, WarningStatusEvent, WarningStatusEvent_0, WarningStatusEvent_1, WarningStatusEvent_2);
var Lcom_sap_spe_base_util_event_WarningStatusEvent_2_classLit = createForClass('com.sap.spe.base.util.event', 'WarningStatusEvent', 44, Lcom_sap_spe_base_util_event_StatusEvent_2_classLit);
function $clinit_Configuration(){
  $clinit_Configuration = emptyMethod;
  getCategory('/AP/PRC/Conditions');
}

function $clinit_ResourceAccessor(){
  $clinit_ResourceAccessor = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_ResourceAccessor_2_classLit);
}

function get_0(){
  $clinit_ResourceAccessor();
  var e;
  if (!resManager) {
    !instance_1 && (instance_1 = new ResourceManagerFactory);
    try {
      resManager = $getMessageResourceManager('/SAPCND/DET');
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        e = $e0;
        e.printStackTrace();
      }
       else 
        throw unwrap($e0);
    }
  }
  return resManager;
}

function getMessage_4(messageNumer){
  $clinit_ResourceAccessor();
  try {
    getActiveISOLanguage();
    $clinit_LocaleInfo();
    return $getMessage_0($getMessageResource($getMessageResourceManager((!instance_1 && (instance_1 = new ResourceManagerFactory) , '/SAPCND/DET'))), messageNumer);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration();
      return '';
    }
     else 
      throw unwrap($e0);
  }
}

var resManager = null;
var Lcom_sap_spe_condmgnt_ResourceAccessor_2_classLit = createForClass('com.sap.spe.condmgnt', 'ResourceAccessor', null, Ljava_lang_Object_2_classLit);
defineClass(668, 1, {});
var factory_0 = null;
var Lcom_sap_spe_condmgnt_customizing_ConditionCustomizingEngineFactory_2_classLit = createForClass('com.sap.spe.condmgnt.customizing', 'ConditionCustomizingEngineFactory', 668, Ljava_lang_Object_2_classLit);
var Lcom_sap_spe_condmgnt_customizing_IApplication_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'IApplication');
var Lcom_sap_spe_condmgnt_customizing_IConditionGroupItem_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'IConditionGroupItem');
var Lcom_sap_spe_condmgnt_customizing_ITableField_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'ITableField');
var Lcom_sap_spe_condmgnt_customizing_IUsageField_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'IUsageField');
function $_initAttributeMaps(this$static){
  var i_0;
  this$static.attributeMapsMap = new HashMap;
  for (i_0 = 0; i_0 < this$static.attributeMaps.length; i_0++) {
    $putStringValue(this$static.attributeMapsMap, this$static.attributeMaps[i_0].tableAttributeClass.field.fieldTO.name_0, this$static.attributeMaps[i_0]);
  }
}

function $getAttributeMap(this$static, tableFieldName){
  return dynamicCast($getStringValue(this$static.attributeMapsMap, tableFieldName), 699);
}

function $toString_0(this$static){
  var c, str;
  str = new StringBuffer_1('  ' + this$static.conditionTable.conditionTableTO.conditionTableFullName + ': \n');
  for (c = 0; c < this$static.attributeMaps.length; c++) {
    $append_1(str, '   ' + $toString_1(this$static.attributeMaps[c]) + '\n');
  }
  return str.string;
}

function Access(accessTO, conditionTable, attributeMaps){
  this.accessTO = accessTO;
  this.conditionTable = conditionTable;
  this.attributeMaps = attributeMaps;
  $_initAttributeMaps(this);
}

defineClass(224, 1, {700:1, 224:1, 3:1}, Access);
_.equals$ = function equals_1(o){
  var access;
  if (this === o)
    return true;
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_condmgnt_customizing_bo_Access_2_classLit)
    return false;
  access = dynamicCast(o, 700);
  if (!$equals(this.accessSequence, access.accessSequence) || this.accessTO.accessNumber != access.accessTO.accessNumber) {
    return false;
  }
  return true;
}
;
_.hashCode$ = function hashCode_2(){
  var hash;
  hash = 217 + this.accessTO.accessNumber;
  hash = 31 * hash + (!this.accessSequence?0:$hashCode(this.accessSequence));
  return hash;
}
;
_.toString$ = function toString_4(){
  return $toString_0(this);
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_Access_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'Access', 224, Ljava_lang_Object_2_classLit);
function $equals(this$static, o){
  var accessSequence;
  if (this$static === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_condmgnt_customizing_bo_AccessSequence_2_classLit) {
    return false;
  }
  accessSequence = dynamicCast(o, 631);
  if (!$equals_7(this$static.accessSequenceTO.application, accessSequence.accessSequenceTO.application) || !$equals_7(this$static.accessSequenceTO.usage, accessSequence.accessSequenceTO.usage) || !$equals_7(this$static.accessSequenceTO.name_0, accessSequence.accessSequenceTO.name_0)) {
    return false;
  }
  return true;
}

function $hashCode(this$static){
  var appl, hash, usage;
  appl = this$static.accessSequenceTO.application;
  usage = this$static.accessSequenceTO.usage;
  hash = 217 + (null == appl?0:getHashCode_0(appl));
  hash = 31 * hash + (null == usage?0:getHashCode_0(usage));
  return hash;
}

function AccessSequence(accessSequenceTO, accesses){
  var i_0;
  this.accessSequenceTO = accessSequenceTO;
  this.accesses = accesses;
  for (i_0 = 0; i_0 < accesses.length; i_0++) {
    accesses[i_0].accessSequence = this;
  }
}

defineClass(532, 1, {631:1, 3:1}, AccessSequence);
_.equals$ = function equals_2(o){
  return $equals(this, o);
}
;
_.hashCode$ = function hashCode_3(){
  return $hashCode(this);
}
;
_.toString$ = function toString_5(){
  var c, str;
  str = new StringBuffer_1(this.accessSequenceTO.name_0 + ': \n');
  for (c = 0; c < this.accesses.length; c++) {
    $append_1(str, $toString_0(this.accesses[c]) + '\n');
  }
  return str.string;
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_AccessSequence_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'AccessSequence', 532, Ljava_lang_Object_2_classLit);
function $equals_0(this$static, o){
  var application;
  application = dynamicCast(o, 257);
  if (!$equals_7(this$static.applicationTO.name_0, application.applicationTO.name_0)) {
    return false;
  }
  return true;
}

function $hashCode_0(this$static){
  var hash, name_0;
  name_0 = this$static.applicationTO.name_0;
  hash = 217 + (null == name_0?0:getHashCode_0(name_0));
  return hash;
}

function Application_0(applicationTO){
  this.applicationTO = applicationTO;
}

defineClass(257, 1, {635:1, 257:1, 3:1}, Application_0);
_.equals$ = function equals_3(o){
  return $equals_0(this, o);
}
;
_.hashCode$ = function hashCode_4(){
  return $hashCode_0(this);
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_Application_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'Application', 257, Ljava_lang_Object_2_classLit);
function $getDataElement(this$static){
  if (this$static.fieldTO.dataElement != null) {
    return $clinit_TextEngineFactory() , $getDataElement_1(dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'TXT', 'TXT'), 352), this$static.fieldTO.dataElement);
  }
  return null;
}

function Field(fieldTO){
  this.fieldTO = fieldTO;
}

defineClass(122, 1, {360:1, 122:1, 3:1});
_.getName_0 = function getName(){
  return this.fieldTO.name_0;
}
;
_.isFieldInDatabase = function isFieldInDatabase(){
  return this.fieldTO.fieldOccurence == 65 || this.fieldTO.fieldOccurence == 67 || this.fieldTO.fieldOccurence == 69;
}
;
_.isUsedInRateTable = function isUsedInRateTable_0(){
  return this.fieldTO.usedInRate;
}
;
_.isUsedInScale_0 = function isUsedInScale_0(){
  return this.fieldTO.usedInScale;
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_Field_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'Field', 122, Ljava_lang_Object_2_classLit);
function ApplicationField(applicationFieldTO){
  Field.call(this, applicationFieldTO);
  this.applicationFieldTO = applicationFieldTO;
  this.isHeaderField = applicationFieldTO.type_0 == 72 || applicationFieldTO.type_0 == 77 || applicationFieldTO.type_0 == 79 || this.applicationFieldTO.type_0 == 81;
}

defineClass(227, 122, {359:1, 360:1, 227:1, 122:1, 3:1}, ApplicationField);
_.isHeaderField = false;
var Lcom_sap_spe_condmgnt_customizing_bo_ApplicationField_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'ApplicationField', 227, Lcom_sap_spe_condmgnt_customizing_bo_Field_2_classLit);
function $toString_1(this$static){
  var compareValue;
  compareValue = !this$static.documentAttributeClass?this$static.attributeMapTO.directValue:this$static.documentAttributeClass.fieldTO.name_0;
  return this$static.tableAttributeClass.field.fieldTO.name_0 + ' = ' + compareValue;
}

function AttributeMap(attributeMapTO, tableAttributeClass, documentAttributeClass){
  this.attributeMapTO = attributeMapTO;
  this.tableAttributeClass = tableAttributeClass;
  this.documentAttributeClass = documentAttributeClass;
}

defineClass(225, 1, {699:1, 225:1, 3:1}, AttributeMap);
_.toString$ = function toString_6(){
  return $toString_1(this);
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_AttributeMap_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'AttributeMap', 225, Ljava_lang_Object_2_classLit);
function $addAllowance(this$static, condTable, condType){
  var a, i_0, n, oldAllowanceLst;
  a = new ConditionGroupItem(condTable, condType);
  n = 0;
  if (this$static.allowanceLst != null) {
    oldAllowanceLst = this$static.allowanceLst;
    n = oldAllowanceLst.length;
    this$static.allowanceLst = initDim(Lcom_sap_spe_condmgnt_customizing_IConditionGroupItem_2_classLit, $intern_24, 638, n + 1, 0, 1);
    for (i_0 = 0; i_0 < n; i_0++) {
      setCheck(this$static.allowanceLst, i_0, oldAllowanceLst[i_0]);
    }
  }
   else {
    this$static.allowanceLst = initDim(Lcom_sap_spe_condmgnt_customizing_IConditionGroupItem_2_classLit, $intern_24, 638, 1, 0, 1);
  }
  setCheck(this$static.allowanceLst, n, a);
}

function ConditionGroup(){
}

defineClass(190, 1, {707:1, 190:1, 3:1}, ConditionGroup);
var Lcom_sap_spe_condmgnt_customizing_bo_ConditionGroup_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'ConditionGroup', 190, Ljava_lang_Object_2_classLit);
function ConditionGroupItem(condTable, condType){
  this._condTable = condTable;
  this._condType = condType;
}

defineClass(258, 1, {638:1, 258:1, 3:1}, ConditionGroupItem);
_.equals$ = function equals_4(o){
  var a;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_condmgnt_customizing_bo_ConditionGroupItem_2_classLit) {
    return false;
  }
  a = dynamicCast(o, 258);
  if (this._condType != a._condType || !$equals_1(this._condTable, a._condTable)) {
    return false;
  }
  return true;
}
;
_.hashCode$ = function hashCode_5(){
  var hash, table, type_0;
  type_0 = this._condType;
  table = this._condTable;
  hash = 217 + (!type_0?0:getHashCode(type_0));
  hash = 31 * hash + (!table?0:$hashCode_1(table));
  return hash;
}
;
_.toString$ = function toString_7(){
  if (!!this._condType && !!this._condTable) {
    return this._condType.getDescription_0() + ' - ' + $getDescription(this._condTable);
  }
  return '';
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_ConditionGroupItem_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'ConditionGroupItem', 258, Ljava_lang_Object_2_classLit);
function $equals_1(this$static, o){
  var conditionTable;
  if (this$static === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_condmgnt_customizing_bo_ConditionTable_2_classLit) {
    return false;
  }
  conditionTable = dynamicCast(o, 636);
  if (!$equals_7(this$static.conditionTableTO.conditionTableFullName, conditionTable.conditionTableTO.conditionTableFullName)) {
    return false;
  }
  return true;
}

function $getDescription(this$static){
  return $getConditionTableDescription(dynamicCast($getCustomizingEngine(factory_0, this$static.conditionTableTO.usage), 73), this$static);
}

function $getName(this$static, type_0){
  var buffer;
  buffer = new StringBuffer;
  buffer.string += 'CN';
  buffer.string += type_0;
  $append_1(buffer, createDefaultString(this$static.conditionTableTO.application, 3));
  $append_1(buffer, createDefaultString(this$static.conditionTableTO.usage, 2));
  $append_1(buffer, this$static.conditionTableTO.conditionTable);
  return buffer.string;
}

function $getNamePrefix(this$static){
  var buffer, buffer0, lastIndex;
  if (!this$static.conditionTableTO.useNamespace) {
    buffer0 = new StringBuffer;
    buffer0.string += 'CN';
    buffer0.string += 'L';
    $append_1(buffer0, createDefaultString(this$static.conditionTableTO.application, 3));
    $append_1(buffer0, createDefaultString(this$static.conditionTableTO.usage, 2));
    return buffer0.string;
  }
  lastIndex = $lastIndexOf(this$static.conditionTableTO.conditionTableFullName, this$static.conditionTableTO.conditionTable);
  buffer = new StringBuffer_1(this$static.conditionTableTO.conditionTableFullName);
  buffer.string = $substring_0(buffer.string, 0, lastIndex - 3) + 'L' + $substring(buffer.string, lastIndex - 3 + 1);
  return $substring_0(buffer.string, 0, lastIndex);
}

function $getNamespaceName(this$static, type_0){
  var buffer, lastIndex;
  lastIndex = $lastIndexOf(this$static.conditionTableTO.conditionTableFullName, this$static.conditionTableTO.conditionTable);
  buffer = new StringBuffer_1(this$static.conditionTableTO.conditionTableFullName);
  $setCharAt(buffer, lastIndex - 3, type_0.charCodeAt(0));
  return buffer.string;
}

function $getVariableDataField(this$static, fieldName){
  var field, i_0;
  field = null;
  for (i_0 = 0; i_0 < this$static.variableData.length; i_0++) {
    if ($equals_7(dynamicCast(this$static.variableData[i_0], 60).field.fieldTO.name_0, fieldName)) {
      field = this$static.variableData[i_0];
      break;
    }
  }
  return field;
}

function $getVariableKeyField(this$static, fieldName){
  var field, i_0;
  field = null;
  for (i_0 = 0; i_0 < this$static.variableKeys.length; i_0++) {
    if ($equals_7(dynamicCast(this$static.variableKeys[i_0], 60).field.fieldTO.name_0, fieldName)) {
      field = this$static.variableKeys[i_0];
      break;
    }
  }
  return field;
}

function $hashCode_1(this$static){
  var hash, name_0;
  name_0 = this$static.conditionTableTO.conditionTableFullName;
  hash = 217 + (null == name_0?0:getHashCode_0(name_0));
  return hash;
}

function ConditionTable(conditionTableTO, variableKeys, variableData, usageFields){
  var c, headerVarKeyList, i_0, usageFieldList;
  this.conditionTableTO = conditionTableTO;
  this.variableKeys = variableKeys;
  headerVarKeyList = new ArrayList_0(variableKeys.length);
  for (c = 0; c < variableKeys.length; c++) {
    dynamicCast(variableKeys[c], 60).field.isHeaderField && $add_3(headerVarKeyList, dynamicCast(variableKeys[c], 60).field.fieldTO.name_0);
  }
  this.variableHeaderKeyFieldNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, headerVarKeyList.array.length, 4, 1);
  $toArray_1(headerVarKeyList, this.variableHeaderKeyFieldNames);
  this.variableData = variableData;
  usageFieldList = new ArrayList;
  for (i_0 = 0; i_0 < usageFields.length; i_0++) {
    usageFields[i_0].isFieldInDatabase() && $add_3(usageFieldList, usageFields[i_0]);
  }
  this.usageFields = initDim(Lcom_sap_spe_condmgnt_customizing_IUsageField_2_classLit, $intern_25, 697, usageFieldList.array.length, 0, 1);
  $toArray_1(usageFieldList, this.usageFields);
  if (conditionTableTO.useNamespace) {
    $getNamespaceName(this, 'A');
    $getNamespaceName(this, 'S');
  }
   else {
    $getName(this, 'A');
    $getName(this, 'S');
  }
}

function createDefaultString(value_0, length_0){
  var defaultString, i_0;
  if (value_0.length == length_0) {
    return value_0;
  }
  if (value_0.length < length_0) {
    defaultString = new StringBuffer_1(value_0);
    for (i_0 = value_0.length; i_0 < length_0; i_0++) {
      defaultString.string += '_';
    }
    return defaultString.string;
  }
  return __substr(value_0, length_0, value_0.length - length_0);
}

defineClass(533, 1, {636:1, 3:1}, ConditionTable);
_.equals$ = function equals_5(o){
  return $equals_1(this, o);
}
;
_.hashCode$ = function hashCode_6(){
  return $hashCode_1(this);
}
;
_.toString$ = function toString_8(){
  return $getConditionTableDescription(dynamicCast($getCustomizingEngine(factory_0, this.conditionTableTO.usage), 73), this);
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_ConditionTable_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'ConditionTable', 533, Ljava_lang_Object_2_classLit);
function ConditionTechniqueField(conditionTechniqueField){
  Field.call(this, conditionTechniqueField);
}

defineClass(226, 122, {708:1, 360:1, 226:1, 122:1, 3:1}, ConditionTechniqueField);
var Lcom_sap_spe_condmgnt_customizing_bo_ConditionTechniqueField_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'ConditionTechniqueField', 226, Lcom_sap_spe_condmgnt_customizing_bo_Field_2_classLit);
function $getDescription_0(this$static){
  return $getConditionTypeDescription(dynamicCast($getCustomizingEngine(factory_0, this$static.conditionTypeTO.usage), 73), this$static.conditionTypeTO.application, this$static.conditionTypeTO.name_0);
}

function ConditionType(conditionTypeTO, referenceConditionType, accessSequence){
  this.conditionTypeTO = conditionTypeTO;
  this.referenceConditionType = referenceConditionType;
  this.accessSequence = accessSequence;
}

defineClass(137, 1, {630:1, 137:1, 3:1, 32:1}, ConditionType);
_.getAccessSequence_1 = function getAccessSequence_0(){
  return this.accessSequence;
}
;
_.getApplication_0 = function getApplication_0(){
  return this.conditionTypeTO.application;
}
;
_.getConditionAccessTimestampName_0 = function getConditionAccessTimestampName(){
  return this.conditionTypeTO.accessTimestamp;
}
;
_.getDescription_0 = function getDescription(){
  return $getDescription_0(this);
}
;
_.getName_0 = function getName_0(){
  return this.conditionTypeTO.name_0;
}
;
_.getReferenceConditionType_0 = function getReferenceConditionType(){
  return this.referenceConditionType;
}
;
_.getUsage_0 = function getUsage_0(){
  return this.conditionTypeTO.usage;
}
;
_.setAccessSequence_0 = function setAccessSequence(accessSequence){
  this.accessSequence = accessSequence;
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_ConditionType_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'ConditionType', 137, Ljava_lang_Object_2_classLit);
function $export_11(this$static){
  if (!exported_11) {
    exported_11 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_bo_ConditionType_2_classLit, this$static);
    $export0_11(this$static);
  }
}

function $export0_11(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.bo.ConditionType');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.bo.ConditionType = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 3 && (g = ___create_0(a[0] == null?null:a[0].g, a[1], a[2]));
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.bo.ConditionType.prototype = new Object;
  __0.getAccessSequence = $entry(function(){
    return this.g.getAccessSequence_1();
  }
  );
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getConditionAccessTimestampName = $entry(function(){
    return this.g.getConditionAccessTimestampName_0();
  }
  );
  __0.getDescription = $entry(function(){
    return this.g.getDescription_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getReferenceConditionType = $entry(function(){
    return this.g.getReferenceConditionType_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.setAccessSequence = $entry(function(a0){
    this.g.setAccessSequence_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.bo.ConditionType[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.bo.ConditionType[p] = pkg[p]);
}

function ConditionType_ExporterImpl(){
  $export_11(this);
}

function ___create_0(a0, a1, a2){
  return new ConditionType(a0, a1, a2);
}

defineClass(391, 1, $intern_18, ConditionType_ExporterImpl);
_.getJsConstructor = function getJsConstructor_11(){
  return $wnd.com.sap.spe.condmgnt.customizing.bo.ConditionType;
}
;
_.isAssignable = function isAssignable_11(o){
  return o != null && instanceOf(o, 137);
}
;
var exported_11 = false;
var Lcom_sap_spe_condmgnt_customizing_bo_ConditionType_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'ConditionType_ExporterImpl', 391, Ljava_lang_Object_2_classLit);
function TableField(conditionTableFullName, field, varKeyField){
  this.field = field;
  this.varKeyField = varKeyField;
  this.isGuid = false;
  $clinit_TextEngineFactory();
  $getTableField_0(dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'TXT', 'TXT'), 352), conditionTableFullName, field.fieldTO.name_0);
}

defineClass(60, 1, {355:1, 60:1, 3:1}, TableField);
_.equals$ = function equals_6(o){
  var tableAttrClass;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_condmgnt_customizing_bo_TableField_2_classLit) {
    return false;
  }
  tableAttrClass = dynamicCast(o, 355);
  if (!tableAttrClass || !$equals_7(this.field.fieldTO.name_0, tableAttrClass.field.fieldTO.name_0)) {
    return false;
  }
  return true;
}
;
_.hashCode$ = function hashCode_7(){
  var hash, name_0;
  name_0 = this.field.fieldTO.name_0;
  hash = 217 + (null == name_0?0:getHashCode_0(name_0));
  return hash;
}
;
_.toString$ = function toString_9(){
  return $getDataElement(this.field) , this.field.fieldTO.name_0;
}
;
_.isGuid = false;
_.varKeyField = false;
var Lcom_sap_spe_condmgnt_customizing_bo_TableField_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'TableField', 60, Ljava_lang_Object_2_classLit);
function Task(application, usage){
  this.application = application;
  this.usage = usage;
}

defineClass(228, 1, {698:1, 228:1, 3:1}, Task);
_.equals$ = function equals_7(o){
  var caller;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_condmgnt_customizing_bo_Task_2_classLit) {
    return false;
  }
  caller = dynamicCast(o, 698);
  if ($equals_0(caller.application, this.application) && $equals_2(caller.usage, this.usage)) {
    return true;
  }
  return false;
}
;
_.hashCode$ = function hashCode_8(){
  var hash;
  hash = 217 + (!this.application?0:$hashCode_0(this.application));
  hash = 31 * hash + (!this.usage?0:$hashCode_2(this.usage));
  return hash;
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_Task_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'Task', 228, Ljava_lang_Object_2_classLit);
function $equals_2(this$static, o){
  var usage;
  if (this$static === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_condmgnt_customizing_bo_Usage_2_classLit) {
    return false;
  }
  usage = dynamicCast(o, 637);
  if ($equalsIgnoreCase(usage.usageTO.name_0, this$static.usageTO.name_0)) {
    return true;
  }
  return false;
}

function $hashCode_2(this$static){
  var hash, usage;
  usage = this$static.usageTO.name_0;
  hash = 217 + (null == usage?0:getHashCode_0(usage));
  return hash;
}

function Usage_0(usageTOParam){
  this.usageTO = usageTOParam;
}

defineClass(548, 1, {637:1, 3:1}, Usage_0);
_.equals$ = function equals_8(o){
  return $equals_2(this, o);
}
;
_.hashCode$ = function hashCode_9(){
  return $hashCode_2(this);
}
;
var Lcom_sap_spe_condmgnt_customizing_bo_Usage_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'Usage', 548, Ljava_lang_Object_2_classLit);
function UsageField(usageFieldTO){
  Field.call(this, usageFieldTO);
}

defineClass(191, 122, {360:1, 697:1, 122:1, 191:1, 3:1}, UsageField);
var Lcom_sap_spe_condmgnt_customizing_bo_UsageField_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.bo', 'UsageField', 191, Lcom_sap_spe_condmgnt_customizing_bo_Field_2_classLit);
function $export_12(this$static){
  if (!exported_12) {
    exported_12 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_dao_ProcedureDAO_2_classLit, this$static);
    new ProcedureTO_ExporterImpl;
    $export0_12(this$static);
  }
}

function $export0_12(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.dao.ProcedureDAO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.dao.ProcedureDAO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0]) && (g = a[0]);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.dao.ProcedureDAO.prototype = new Object;
  __0.getAllProcedureNames = $entry(function(a0, a1){
    return wrap_1(this.g.nullMethod(a0, a1));
  }
  );
  __0.getDescriptions = $entry(function(a0, a1, a2){
    return this.g.nullMethod(a0, a1, a2);
  }
  );
  __0.getProcedure = $entry(function(a0, a1, a2){
    return wrap_0(this.g.nullMethod(a0, a1, a2));
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.dao.ProcedureDAO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.dao.ProcedureDAO[p] = pkg[p]);
}

function ProcedureDAO_ExporterImpl(){
  $export_12(this);
}

defineClass(392, 1, $intern_18, ProcedureDAO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_12(){
  return $wnd.com.sap.spe.condmgnt.customizing.dao.ProcedureDAO;
}
;
_.isAssignable = function isAssignable_12(o){
  return false;
}
;
var exported_12 = false;
var Lcom_sap_spe_condmgnt_customizing_dao_ProcedureDAO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.dao', 'ProcedureDAO_ExporterImpl', 392, Ljava_lang_Object_2_classLit);
function $getAccessSequence_0(this$static, application, usage, accessSequenceName){
  var key;
  key = create_5(application, usage, accessSequenceName);
  return dynamicCast($getStringValue(this$static.accessSequences, key), 165);
}

function $putAccessSequence(this$static, accessSequenceTO){
  var key;
  key = create_5(accessSequenceTO.application, accessSequenceTO.usage, accessSequenceTO.name_0);
  $putStringValue(this$static.accessSequences, key, accessSequenceTO);
  $putStringValue(this$static.accessSequencesDescriptions, accessSequenceTO.name_0, '');
}

function AccessSequenceDAOImpl(){
  this.accessSequences = new HashMap;
  this.accessSequencesDescriptions = new HashMap;
}

defineClass(316, 1, {626:1}, AccessSequenceDAOImpl);
var Lcom_sap_spe_condmgnt_customizing_dao_legacy_AccessSequenceDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.dao.legacy', 'AccessSequenceDAOImpl', 316, Ljava_lang_Object_2_classLit);
function $putApplication(this$static, applicationTO){
  $add_3(this$static.applications, applicationTO);
}

function ApplicationDAOImpl(){
  this.applications = new ArrayList;
}

defineClass(312, 1, {625:1}, ApplicationDAOImpl);
var Lcom_sap_spe_condmgnt_customizing_dao_legacy_ApplicationDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.dao.legacy', 'ApplicationDAOImpl', 312, Ljava_lang_Object_2_classLit);
function $putConditionTable_0(this$static, cto){
  var key;
  key = create_5(cto.conditionTable, cto.application, cto.usage);
  $putStringValue(this$static._conditionTableTOs, key, cto);
}

function ConditionTableDAOImpl(){
  this._conditionTableTOs = new HashMap;
}

defineClass(315, 1, {627:1}, ConditionTableDAOImpl);
var Lcom_sap_spe_condmgnt_customizing_dao_legacy_ConditionTableDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.dao.legacy', 'ConditionTableDAOImpl', 315, Ljava_lang_Object_2_classLit);
function $getAllConditionTypeNames(this$static, application, usage){
  var iter, key, keyAppli, keyArray, keyName, keyUsage, keys_0, nameArray, names;
  if (!this$static.conditionTypes)
    return null;
  keys_0 = new AbstractMap$1(this$static.conditionTypes);
  names = new ArrayList;
  for (iter = $iterator(keys_0); $hasNext(iter.val$outerIter2);) {
    key = dynamicCastToString($next_1(iter));
    keyArray = getKeys(key);
    if (keyArray == null)
      continue;
    keyAppli = keyArray[0];
    keyUsage = keyArray[1];
    keyName = keyArray[2];
    $equalsIgnoreCase(keyAppli, application) && $equalsIgnoreCase(keyUsage, usage) && (setCheck(names.array, names.array.length, keyName) , true);
  }
  nameArray = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, names.array.length, 4, 1);
  $toArray_1(names, nameArray);
  return nameArray;
}

function $putConditionType(this$static, ConditionTypeTO){
  var key;
  key = create_5(ConditionTypeTO.application, ConditionTypeTO.usage, ConditionTypeTO.name_0);
  $putStringValue(this$static.conditionTypes, key, ConditionTypeTO);
  $putStringValue(this$static.conditionTypeDescriptions, ConditionTypeTO.name_0, '');
}

function ConditionTypeDAOImpl(){
  this.conditionTypes = new HashMap;
  this.conditionTypeDescriptions = new HashMap;
}

defineClass(317, 1, {356:1}, ConditionTypeDAOImpl);
var Lcom_sap_spe_condmgnt_customizing_dao_legacy_ConditionTypeDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.dao.legacy', 'ConditionTypeDAOImpl', 317, Ljava_lang_Object_2_classLit);
function $putApplicationField(this$static, appliField){
  $add_3(this$static.applicationFields, appliField);
}

function $putUsageField(this$static, fieldto){
  $add_3(this$static.usageFields, fieldto);
}

function FieldCatalogueDAOImpl(){
  this.usageFields = new ArrayList;
  this.applicationFields = new ArrayList;
}

defineClass(478, 1, {282:1}, FieldCatalogueDAOImpl);
var Lcom_sap_spe_condmgnt_customizing_dao_legacy_FieldCatalogueDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.dao.legacy', 'FieldCatalogueDAOImpl', 478, Ljava_lang_Object_2_classLit);
function $getScaleDefFields(usage){
  var scaleDefFields;
  scaleDefFields = new ArrayList;
  if ($equals_7(usage, 'A')) {
    setCheck(scaleDefFields.array, scaleDefFields.array.length, 'SCALE_TYPE');
    setCheck(scaleDefFields.array, scaleDefFields.array.length, 'SCALE_CURRENCY');
    setCheck(scaleDefFields.array, scaleDefFields.array.length, 'SCALE_UNIT');
  }
  return scaleDefFields;
}

function $getScaleLevelFields(usage){
  var fieldNameList, scaleBaseType, scaleLevelFields;
  scaleLevelFields = new HashMap;
  if ($equals_7(usage, 'A')) {
    for (scaleBaseType = 65; scaleBaseType <= 90; scaleBaseType++) {
      fieldNameList = new ArrayList;
      setCheck(fieldNameList.array, fieldNameList.array.length, 'SCALE_AMOUNT');
      $putStringValue(scaleLevelFields, valueOf_0(scaleBaseType), fieldNameList);
    }
  }
  return scaleLevelFields;
}

function UsageDAOImpl(){
}

defineClass(547, 1, {283:1}, UsageDAOImpl);
var Lcom_sap_spe_condmgnt_customizing_dao_legacy_UsageDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.dao.legacy', 'UsageDAOImpl', 547, Ljava_lang_Object_2_classLit);
function $clinit_AccessSequenceBuilder(){
  $clinit_AccessSequenceBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_customizing_impl_AccessSequenceBuilder_2_classLit);
}

function $getAccess_0(accessSequenceTO, accessTO){
  var attributeMap, attributeMapArray, attributeMapTO, attributeMaps, conditionTable, customizingEngine, iter;
  if (accessTO.conditionTable == null) {
    initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [new Integer(accessTO.accessNumber), accessSequenceTO.name_0, accessSequenceTO.application, accessSequenceTO.usage]);
    $clinit_Configuration();
    $add_6(accessSequenceTO.errorMessage, getMessage_4(3));
    return null;
  }
  customizingEngine = dynamicCast($getCustomizingEngine(factory_0, accessSequenceTO.usage), 73);
  conditionTable = $getConditionTableByName(customizingEngine, accessSequenceTO.application, accessTO.conditionTable);
  if (!conditionTable) {
    initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [new Integer(accessTO.accessNumber), accessSequenceTO.name_0, accessSequenceTO.application, accessSequenceTO.usage]);
    $clinit_Configuration();
    $add_6(accessSequenceTO.errorMessage, getMessage_4(3));
    return null;
  }
  $mapEvaluationPriority(accessTO);
  attributeMaps = new ArrayList_0(accessTO.attributeMaps.size_1());
  for (iter = accessTO.attributeMaps.iterator(); iter.i < iter.this$01.size_1();) {
    attributeMapTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 120));
    attributeMap = $getAttributeMap_0(accessSequenceTO, accessTO, attributeMapTO);
    !!attributeMap && (setCheck(attributeMaps.array, attributeMaps.array.length, attributeMap) , true);
  }
  attributeMapArray = initDim(Lcom_sap_spe_condmgnt_customizing_bo_AttributeMap_2_classLit, $intern_24, 225, attributeMaps.array.length, 0, 1);
  $toArray_1(attributeMaps, attributeMapArray);
  if (attributeMapArray.length == 0) {
    initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [new Integer(accessTO.accessNumber), accessSequenceTO.application, accessSequenceTO.usage, accessSequenceTO.name_0]);
    $clinit_Configuration();
    $add_6(accessSequenceTO.errorMessage, getMessage_4(11));
    return null;
  }
  if (attributeMapArray.length != conditionTable.variableKeys.length + conditionTable.variableData.length) {
    initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [accessSequenceTO.application + '/' + accessSequenceTO.usage + '/' + accessSequenceTO.name_0 + '/' + new Integer(accessTO.accessNumber), accessTO.conditionTable]);
    $clinit_Configuration();
    $add_6(accessSequenceTO.errorMessage, getMessage_4(9));
    return null;
  }
  return new Access(accessTO, conditionTable, attributeMapArray);
}

function $getAccessSequence_1(dao, application, usage, name_0){
  var access, accessArray, accessSequence, accessSequenceTO, accessTO, accesses, attributeMaps, c, iter, nameOfMultiValuedAttribute;
  accessSequence = null;
  accessSequenceTO = $getAccessSequence_0(dao, application, usage, name_0);
  if (accessSequenceTO) {
    if (!accessSequenceTO.accesses || accessSequenceTO.accesses.size_1() == 0) {
      $clinit_Configuration();
      return null;
    }
    accesses = new ArrayList_0(accessSequenceTO.accesses.size_1());
    nameOfMultiValuedAttribute = null;
    for (iter = accessSequenceTO.accesses.iterator(); iter.i < iter.this$01.size_1();) {
      accessTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 103));
      access = $getAccess_0(accessSequenceTO, accessTO);
      if (access) {
        if (access.accessTO.exclusiveAccess) {
          attributeMaps = access.attributeMaps;
          for (c = 0; c < attributeMaps.length; c++) {
            if (!!attributeMaps[c].documentAttributeClass && attributeMaps[c].documentAttributeClass.applicationFieldTO.isMultiValued_0) {
              if (nameOfMultiValuedAttribute == null) {
                nameOfMultiValuedAttribute = attributeMaps[c].documentAttributeClass.fieldTO.name_0;
              }
               else if (!$equals_7(nameOfMultiValuedAttribute, attributeMaps[c].documentAttributeClass.fieldTO.name_0)) {
                $clinit_Configuration();
                return null;
              }
            }
          }
        }
        setCheck(accesses.array, accesses.array.length, access);
      }
    }
    accessArray = initDim(Lcom_sap_spe_condmgnt_customizing_bo_Access_2_classLit, $intern_24, 224, accesses.array.length, 0, 1);
    $toArray_1(accesses, accessArray);
    accessSequence = new AccessSequence(accessSequenceTO, accessArray);
  }
  return accessSequence;
}

function $getAttributeMap_0(accessSequenceTO, accessTO, attributeMapTO){
  var conditionTable, customizingEngine, documentField, tableField, textEngine;
  if (attributeMapTO.tableField == null) {
    $clinit_Configuration();
    initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [new Integer(accessTO.accessNumber), accessSequenceTO.application, accessSequenceTO.usage, accessSequenceTO.name_0]);
    return null;
  }
  customizingEngine = dynamicCast($getCustomizingEngine(factory_0, accessSequenceTO.usage), 73);
  conditionTable = $getConditionTableByName(customizingEngine, accessSequenceTO.application, accessTO.conditionTable);
  tableField = $getVariableKeyField(conditionTable, attributeMapTO.tableField);
  !tableField && (tableField = $getVariableDataField(conditionTable, attributeMapTO.tableField));
  if (!tableField) {
    $clinit_Configuration();
    initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [attributeMapTO.tableField, accessTO.conditionTable, accessSequenceTO.application + '/' + accessSequenceTO.usage + '/' + accessSequenceTO.name_0 + '/' + new Integer(accessTO.accessNumber)]);
    return null;
  }
  attributeMapTO.accessFieldType == 66?(attributeMapTO.accessFieldType = 98):attributeMapTO.accessFieldType == 67 && (attributeMapTO.accessFieldType = 32);
  documentField = null;
  if (attributeMapTO.documentField != null) {
    documentField = $getApplicationField(customizingEngine, accessSequenceTO.application, attributeMapTO.documentField);
    if (!documentField) {
      $clinit_Configuration();
      initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [attributeMapTO.documentField, accessSequenceTO.application + '/' + accessSequenceTO.usage + '/' + accessSequenceTO.name_0 + '/' + new Integer(accessTO.accessNumber)]);
      return null;
    }
  }
  switch (attributeMapTO.accessFieldType) {
    case 32:
      if (attributeMapTO.directValue == null) {
        if (!documentField) {
          if (attributeMapTO.initialValueAllowed) {
            textEngine = ($clinit_TextEngineFactory() , dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'TXT', 'TXT'), 352));
            $getTableField_0(textEngine, conditionTable.conditionTableTO.conditionTableFullName, tableField.field.fieldTO.name_0);
            attributeMapTO.directValue = '';
          }
           else if (tableField.varKeyField) {
            $clinit_Configuration();
            initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [new Integer(accessTO.accessNumber), accessSequenceTO.application, accessSequenceTO.usage, accessSequenceTO.name_0]);
            return null;
          }
        }
      }
       else {
        documentField = null;
      }

      break;
    case 65:
      if (!documentField) {
        $clinit_Configuration();
        initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [new Integer(accessTO.accessNumber), accessSequenceTO.application, accessSequenceTO.usage, accessSequenceTO.name_0]);
        return null;
      }

      break;
    case 98:
      documentField = null;
      break;
    default:{
        $clinit_Configuration();
        initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [valueOf_0(attributeMapTO.accessFieldType), accessSequenceTO.application + '/' + accessSequenceTO.usage + '/' + accessSequenceTO.name_0 + '/' + new Integer(accessTO.accessNumber)]);
      }

      return null;
  }
  return new AttributeMap(attributeMapTO, tableField, documentField);
}

function $mapEvaluationPriority(accessTO){
  var attributeMapTO, evaluationPriority, iter, iter0, mappedPriority;
  evaluationPriority = new TreeMap;
  for (iter0 = accessTO.attributeMaps.iterator(); iter0.i < iter0.this$01.size_1();) {
    attributeMapTO = (checkCriticalElement(iter0.i < iter0.this$01.size_1()) , dynamicCast(iter0.this$01.get_5(iter0.last = iter0.i++), 120));
    attributeMapTO.accessFieldType == 65 && $put_3(evaluationPriority, new Integer(attributeMapTO.evaluationPriority), attributeMapTO);
  }
  mappedPriority = 1;
  for (iter = $iterator_0(new AbstractMap$2(evaluationPriority)); iter.val$outerIter2.hasNext();) {
    attributeMapTO = dynamicCast($next_2(iter), 120);
    attributeMapTO.evaluationPriority = mappedPriority++;
  }
}

function AccessSequenceBuilder(){
  $clinit_AccessSequenceBuilder();
}

defineClass(461, 663, $intern_22, AccessSequenceBuilder);
_.create_0 = function create_13(keys_0){
  var application, dao, object, objectType, usage;
  usage = keys_0[1];
  objectType = keys_0[2];
  application = keys_0[3];
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'AccessSequence', 'dao.legacy'), 626);
  if (!dao) {
    dao = new AccessSequenceDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.condmgnt.customizing.dao.legacy.AccessSequenceDAOImpl');
  }
  object = null;
  $equals_7(objectType, 'SQ')?(object = $getAccessSequence_1(dao, application, usage, keys_0[4])):$equals_7(objectType, 'DE') && (object = dao.accessSequencesDescriptions);
  return object;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_AccessSequenceBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'AccessSequenceBuilder', 461, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getCacheManager(){
  var cacheManager;
  cacheManager = ($clinit_CacheManagerFactory() , new CacheManagerImpl);
  try {
    $applyConfiguration_0(cacheManager, 'AP_PRC_CON');
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 80)) {
      throw new ConditionCacheException(201);
    }
     else 
      throw unwrap($e0);
  }
  return cacheManager;
}

function ConditionObjectManager(){
  var cacheManager, region;
  this.usage = 'A';
  cacheManager = $getCacheManager();
  region = (cacheManager.cacheRegion = new CacheRegionImpl(cacheManager.appName, '/AP/PRC/Conditions/Customizing') , cacheManager.cacheRegion);
  if (!region) {
    throw new ConditionCacheException(204);
  }
  this.cacheFacade = $getCacheFacade(region);
}

defineClass(69, 1, {});
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionObjectManager', 69, Ljava_lang_Object_2_classLit);
function $createAccessSequence(this$static, application, accessSequenceName){
  var accessSequence, ex, key;
  key = create_7('AS', this$static.usage, 'SQ', application, accessSequenceName);
  try {
    accessSequence = dynamicCast(this$static.cacheFacade.get_3(key, false), 631);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 54)) {
      ex = $e0;
      throw ex;
    }
     else 
      throw unwrap($e0);
  }
  return accessSequence;
}

function AccessSequenceObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(518, 69, {}, AccessSequenceObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_AccessSequenceObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'AccessSequenceObjectManager', 518, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $getApplications(dao){
  var application, applicationTO, applications, applicationsTOs, iter;
  applicationsTOs = dao.applications;
  applications = new HashMap;
  for (iter = new AbstractList$IteratorImpl(applicationsTOs); iter.i < iter.this$01.size_1();) {
    applicationTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 167));
    application = new Application_0(applicationTO);
    $putStringValue(applications, applicationTO.name_0, application);
  }
  return applications;
}

function ApplicationBuilder(){
}

defineClass(460, 663, $intern_22, ApplicationBuilder);
_.create_0 = function create_14(keys_0){
  var dao, object, objectType;
  objectType = keys_0[2];
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'Application', 'dao.legacy'), 625);
  if (!dao) {
    dao = new ApplicationDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.condmgnt.customizing.dao.legacy.ApplicationDAOImpl');
  }
  object = null;
  $equals_7(objectType, 'AL')?(object = $getApplications(dao)):$equals_7(objectType, 'DE') && (object = new HashMap);
  return object;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_ApplicationBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ApplicationBuilder', 460, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $createApplication(this$static, applicationName){
  var applicationMap, key;
  key = create_5('AP', this$static.usage, 'AL');
  applicationMap = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return dynamicCast(applicationMap.get_4(applicationName), 635);
}

function $getAllApplications(this$static){
  var applicationMap, applications, key;
  key = create_5('AP', this$static.usage, 'AL');
  applicationMap = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  applications = initDim(Lcom_sap_spe_condmgnt_customizing_IApplication_2_classLit, $intern_24, 635, applicationMap.size_1(), 0, 1);
  applicationMap.values_0().toArray_0(applications);
  return applications;
}

function ApplicationObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(519, 69, {}, ApplicationObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_ApplicationObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ApplicationObjectManager', 519, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $getAccessSequence_2(this$static, application, accessSequence){
  return $createAccessSequence(this$static.accessSequenceObjectManager, application, accessSequence);
}

function $getApplicationField(this$static, application, fieldName){
  return $createApplicationField(this$static.fieldCatalogueObjectManager, application, fieldName);
}

function $getConditionTableByName(this$static, application, tableNamePart){
  return $getConditionTableByName_0(this$static.conditionTableObjectManager, application, tableNamePart);
}

function $getConditionTableDescription(this$static, conditionTable){
  return $getConditionTableDescription_0(this$static.conditionTableObjectManager, conditionTable);
}

function $getConditionType(this$static, application, conditionTypeName){
  return $createConditionType(this$static.conditionTypeObjectManager, application, conditionTypeName);
}

function $getConditionTypeDescription(this$static, application, conditionTypeName){
  return $getDescription_1(this$static.conditionTypeObjectManager, application, conditionTypeName);
}

function $getUsageFields(this$static, usage){
  return $createUsageFields_0(this$static.fieldCatalogueObjectManager, usage);
}

function $getUserExitFormulas(this$static, application, typeName){
  return $getUserExitFormulas_0(this$static.userExitFormulaObjectManager, application, typeName);
}

defineClass(73, 1, {159:1, 349:1, 73:1});
_.getAllApplications = function getAllApplications(){
  return $getAllApplications(this.applicationObjectManager);
}
;
_.getApplication_1 = function getApplication_1(application){
  return $createApplication(this.applicationObjectManager, application);
}
;
_.getApplicationField = function getApplicationField(application, fieldName){
  return $getApplicationField(this, application, fieldName);
}
;
_.getConditionTableByName = function getConditionTableByName(application, tableNamePart){
  return $getConditionTableByName(this, application, tableNamePart);
}
;
_.getConditionType_0 = function getConditionType(application, conditionTypeName){
  return $getConditionType(this, application, conditionTypeName);
}
;
_.getProcedure_0 = function getProcedure(application, name_0){
  return $createProcedure(this.procedureObjectManager, application, name_0);
}
;
_.getUsage_1 = function getUsage_1(usageParam){
  return $createUsage(this.usageObjectManager, usageParam);
}
;
_.getUsageFields = function getUsageFields(usage){
  return $getUsageFields(this, usage);
}
;
_.getUserExitFormulas = function getUserExitFormulas(application, typeName){
  return $getUserExitFormulas(this, application, typeName);
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionCustomizingEngine_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionCustomizingEngine', 73, Ljava_lang_Object_2_classLit);
function $getCustomizingEngine(this$static, usage){
  var engine;
  engine = dynamicCast($getStringValue(this$static.engines, usage), 349);
  if (!engine) {
    engine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), usage, 'CUS'), 349);
    $putStringValue(this$static.engines, usage, engine);
  }
  return engine;
}

function ConditionCustomizingEngineFactoryImpl(){
  this.engines = new HashMap;
}

defineClass(439, 668, {}, ConditionCustomizingEngineFactoryImpl);
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionCustomizingEngineFactoryImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionCustomizingEngineFactoryImpl', 439, Lcom_sap_spe_condmgnt_customizing_ConditionCustomizingEngineFactory_2_classLit);
function $clinit_ConditionGroupBuilder(){
  $clinit_ConditionGroupBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_customizing_impl_ConditionGroupBuilder_2_classLit);
}

function ConditionGroupBuilder(){
  $clinit_ConditionGroupBuilder();
}

defineClass(462, 663, $intern_22, ConditionGroupBuilder);
_.create_0 = function create_15(keys_0){
  var cg, cgTO, cgs, cgsHash, customizingEngine, i_0, it, nbCg, table, type_0, usage;
  usage = keys_0[1];
  throwClassCastExceptionUnlessNull($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_ConditionGroupBuilder_2_classLit));
  customizingEngine = dynamicCast($getCustomizingEngine(factory_0, usage), 73);
  cgTO = null.nullMethod();
  cgsHash = new HashMap;
  for (i_0 = 0; i_0 < cgTO.length; i_0++) {
    try {
      if (cgTO[i_0].nullField.nullMethod()) {
        cg = dynamicCast($get_12(cgsHash, cgTO[i_0].nullField), 190);
        if (!cg) {
          cg = new ConditionGroup(cgTO[i_0]);
          $put_0(cgsHash, cgTO[i_0].nullField, cg);
        }
        table = $getConditionTableByName(customizingEngine, cgTO[i_0].nullField, cgTO[i_0].nullField);
        type_0 = $getConditionType(customizingEngine, cgTO[i_0].nullField, cgTO[i_0].nullField);
        !!table && !!type_0 && $addAllowance(cg, table, type_0);
      }
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $clinit_Configuration();
        initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [cgTO[i_0].nullField, cgTO[i_0].nullField, cgTO[i_0].nullField]);
      }
       else 
        throw unwrap($e0);
    }
  }
  cgs = initDim(Lcom_sap_spe_condmgnt_customizing_bo_ConditionGroup_2_classLit, $intern_24, 190, cgsHash.size_0, 0, 1);
  nbCg = 0;
  it = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(cgsHash)).this$01);
  while ($hasNext(it)) {
    cgs[nbCg] = (checkStructuralChange(it.this$01, it) , checkCriticalElement($hasNext(it)) , it.last = it.current , throwClassCastExceptionUnlessNull(dynamicCast(it.current.next(), 25)));
    ++nbCg;
  }
  return cgs;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionGroupBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionGroupBuilder', 462, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function ConditionGroupContextObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(528, 69, {}, ConditionGroupContextObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionGroupContextObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionGroupContextObjectManager', 528, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function ConditionGroupObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(520, 69, {}, ConditionGroupObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionGroupObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionGroupObjectManager', 520, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $createConditionTable(dao, application, usage, tableNamePart){
  var conditionTableTO, customizingEngine, data_0, fieldName, i_0, iterator, iterator0, keys_0, table, usageFields, usageObejct, key;
  conditionTableTO = (key = create_5(tableNamePart, application, usage) , dynamicCast($getStringValue(dao._conditionTableTOs, key), 168));
  customizingEngine = $getCustomizingEngine(factory_0, usage);
  if (conditionTableTO) {
    keys_0 = initDim(Lcom_sap_spe_condmgnt_customizing_ITableField_2_classLit, $intern_24, 355, conditionTableTO.variableKeyFields.size_1(), 0, 1);
    i_0 = 0;
    for (iterator0 = conditionTableTO.variableKeyFields.iterator(); iterator0.i < iterator0.this$01.size_1(); i_0++) {
      fieldName = (checkCriticalElement(iterator0.i < iterator0.this$01.size_1()) , dynamicCastToString(iterator0.this$01.get_5(iterator0.last = iterator0.i++)));
      setCheck(keys_0, i_0, $createTableField(customizingEngine, conditionTableTO.conditionTableFullName, application, fieldName, true));
      if (!keys_0[i_0]) {
        return null;
      }
    }
    data_0 = initDim(Lcom_sap_spe_condmgnt_customizing_ITableField_2_classLit, $intern_24, 355, conditionTableTO.variableDataFields.size_1(), 0, 1);
    i_0 = 0;
    for (iterator = conditionTableTO.variableDataFields.iterator(); iterator.i < iterator.this$01.size_1(); i_0++) {
      fieldName = (checkCriticalElement(iterator.i < iterator.this$01.size_1()) , dynamicCastToString(iterator.this$01.get_5(iterator.last = iterator.i++)));
      setCheck(data_0, i_0, $createTableField(customizingEngine, conditionTableTO.conditionTableFullName, application, fieldName, false));
      if (!data_0[i_0]) {
        return null;
      }
    }
    usageObejct = customizingEngine.getUsage_1(usage);
    usageFields = $getUsageFields(dynamicCast($getCustomizingEngine(factory_0, usageObejct.usageTO.name_0), 73), usageObejct.usageTO.name_0);
    table = new ConditionTable(conditionTableTO, keys_0, data_0, usageFields);
    return table;
  }
  return null;
}

function $createTableField(customizingEngine, conditionTableFullName, application, name_0, varKeyField){
  var field;
  field = customizingEngine.getApplicationField(application, name_0);
  if (field) {
    return new TableField(conditionTableFullName, field, varKeyField);
  }
  return null;
}

function ConditionTableBuilder(){
}

defineClass(463, 663, $intern_22, ConditionTableBuilder);
_.create_0 = function create_16(keys_0){
  var application, dao, object, objectType, usage;
  usage = keys_0[1];
  objectType = keys_0[2];
  application = keys_0[3];
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'ConditionTable', 'dao.legacy'), 627);
  if (!dao) {
    dao = new ConditionTableDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.condmgnt.customizing.dao.legacy.ConditionTableDAOImpl');
  }
  object = null;
  $equals_7(objectType, 'CT')?(object = $createConditionTable(dao, application, usage, keys_0[4])):$equals_7(objectType, 'DE')?(object = new HashMap):$equals_7(objectType, 'VA') && (object = null);
  return object;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionTableBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionTableBuilder', 463, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getConditionTableByName_0(this$static, application, tableNamePart){
  var conditionTable, key;
  key = create_7('TB', this$static.usage, 'CT', application, tableNamePart);
  conditionTable = dynamicCast(this$static.cacheFacade.get_3(key, false), 636);
  return conditionTable;
}

function $getConditionTableDescription_0(this$static, conditionTable){
  var descriptions, key, language;
  language = getActiveLanguage();
  key = create_7('TB', this$static.usage, 'DE', conditionTable.conditionTableTO.application, language);
  descriptions = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return dynamicCastToString(descriptions.get_4(conditionTable.conditionTableTO.conditionTable));
}

function ConditionTableObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(521, 69, {}, ConditionTableObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionTableObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionTableObjectManager', 521, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $clinit_ConditionTypeBuilder(){
  $clinit_ConditionTypeBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_customizing_impl_ConditionTypeBuilder_2_classLit);
}

function $getConditionType_0(this$static, usage, application, name_0){
  var accessSequence, conditionType, conditionTypeDAO, conditionTypeTO, customizingEngine, referenceConditionType, key;
  conditionTypeDAO = dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_ConditionTypeBuilder_2_classLit), 356);
  customizingEngine = dynamicCast($getCustomizingEngine(factory_0, usage), 73);
  conditionTypeTO = (key = create_5(application, usage, name_0) , dynamicCast($getStringValue(conditionTypeDAO.conditionTypes, key), 140));
  if (!conditionTypeTO) {
    throw new ConditionInconsistentDBException(15);
  }
  accessSequence = null;
  if (conditionTypeTO.accessSequence != null) {
    accessSequence = $getAccessSequence_2(customizingEngine, application, conditionTypeTO.accessSequence);
    if (!accessSequence) {
      $clinit_Configuration();
      throw new ConditionInconsistentDBException(19);
    }
    conditionTypeTO.accessTimestamp == null && (conditionTypeTO.accessTimestamp = 'DET_DEFAULT_TIMESTAMP');
  }
  referenceConditionType = null;
  conditionTypeTO.referenceConditionType != null && !$equalsIgnoreCase(conditionTypeTO.referenceConditionType, conditionTypeTO.name_0) && (referenceConditionType = $getConditionType(customizingEngine, application, conditionTypeTO.referenceConditionType));
  conditionType = this$static.createUsageSpecificConditionType(conditionTypeTO, referenceConditionType, accessSequence);
  return conditionType;
}

defineClass(664, 663, $intern_22);
_.create_0 = function create_17(keys_0){
  var conditionTypeDAO, object, objectType, usage;
  usage = keys_0[1];
  objectType = keys_0[2];
  conditionTypeDAO = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.customizing', 'ConditionType', 'dao.legacy'), 356);
  if (!conditionTypeDAO) {
    conditionTypeDAO = new ConditionTypeDAOImpl;
    $putDAO((null , SINGELTON_2), conditionTypeDAO, 'com.sap.spe.condmgnt.customizing.dao.legacy.ConditionTypeDAOImpl');
  }
  object = null;
  try {
    $equals_7(objectType, 'CT')?(object = $getConditionType_0(this, usage, keys_0[3], keys_0[4])):$equals_7(objectType, 'AC')?(object = $getAllConditionTypeNames(conditionTypeDAO, keys_0[3], usage)):$equals_7(objectType, 'DE') && (object = conditionTypeDAO.conditionTypeDescriptions);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 42)) {
      throw new ConditionCacheException(203);
    }
     else 
      throw unwrap($e0);
  }
  return object;
}
;
_.createUsageSpecificConditionType = function createUsageSpecificConditionType(conditionTypeTO, referenceConditionType, accessSequence){
  return new ConditionType(conditionTypeTO, referenceConditionType, accessSequence);
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionTypeBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionTypeBuilder', 664, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $createConditionType(this$static, application, conditionTypeName){
  var conditionType, ex, key;
  key = create_7('TY', this$static.usage, 'CT', application, conditionTypeName);
  try {
    conditionType = dynamicCast(this$static.cacheFacade.get_3(key, false), 630);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 54)) {
      ex = $e0;
      throw ex;
    }
     else 
      throw unwrap($e0);
  }
  return conditionType;
}

function $getDescription_1(this$static, application, conditionTypeName){
  var descriptions, key, language;
  language = getActiveLanguage();
  key = create_7('TY', this$static.usage, 'DE', application, language);
  descriptions = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return dynamicCastToString(descriptions.get_4(conditionTypeName));
}

function ConditionTypeObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(522, 69, {}, ConditionTypeObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_ConditionTypeObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ConditionTypeObjectManager', 522, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $createApplicationFieldsAsMap(usage){
  var fcDAO, fieldCatalogue, fieldTO, fields, iter;
  fcDAO = dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_FieldCatalogueBuilder_2_classLit), 282);
  fields = fcDAO.applicationFields;
  fieldCatalogue = new HashMap_0(fields.array.length);
  for (iter = new AbstractList$IteratorImpl(fields); iter.i < iter.this$01.size_1();) {
    fieldTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 166));
    $putStringValue(fieldCatalogue, fieldTO.name_0, new ApplicationField(fieldTO));
  }
  return fieldCatalogue;
}

function $createConditionTechniqueFields(usage){
  var conditionTechniqueField, conditionTechniqueFieldTO, conditionTechniqueFields, fieldsArray;
  dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_FieldCatalogueBuilder_2_classLit), 282);
  conditionTechniqueFields = new ArrayList_0(null.nullMethod());
  for (null.nullMethod(); null.nullMethod();) {
    conditionTechniqueFieldTO = null.nullMethod();
    conditionTechniqueField = new ConditionTechniqueField(conditionTechniqueFieldTO);
    setCheck(conditionTechniqueFields.array, conditionTechniqueFields.array.length, conditionTechniqueField);
  }
  fieldsArray = initDim(Lcom_sap_spe_condmgnt_customizing_bo_ConditionTechniqueField_2_classLit, $intern_24, 226, conditionTechniqueFields.array.length, 0, 1);
  $toArray_1(conditionTechniqueFields, fieldsArray);
  return fieldsArray;
}

function $createUsageFields(usage){
  var fieldsArray, iter, usageField, usageFieldTO, usageFieldTOs, usageFields, fcDAO, fieldTOs;
  usageFieldTOs = (fcDAO = dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_FieldCatalogueBuilder_2_classLit), 282) , fieldTOs = fcDAO.usageFields , $getCustomizingEngine(factory_0, usage).getUsage_1(usage) , fieldTOs);
  usageFields = new ArrayList_0(usageFieldTOs.array.length);
  for (iter = new AbstractList$IteratorImpl(usageFieldTOs); iter.i < iter.this$01.size_1();) {
    usageFieldTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 142));
    usageField = new UsageField(usageFieldTO);
    setCheck(usageFields.array, usageFields.array.length, usageField);
  }
  fieldsArray = initDim(Lcom_sap_spe_condmgnt_customizing_bo_UsageField_2_classLit, $intern_25, 191, usageFields.array.length, 0, 1);
  $toArray_1(usageFields, fieldsArray);
  return fieldsArray;
}

function FieldCatalogueBuilder(){
}

defineClass(464, 663, $intern_22, FieldCatalogueBuilder);
_.create_0 = function create_18(keys_0){
  var object, objectType, usage, fieldCatalogue, fieldsArray;
  usage = keys_0[1];
  objectType = keys_0[2];
  object = null;
  $equals_7(objectType, 'UF')?(object = $createUsageFields(usage)):$equals_7(objectType, 'CF')?(object = $createConditionTechniqueFields(usage)):$equals_7(objectType, 'AF')?(object = (fieldCatalogue = $createApplicationFieldsAsMap(usage) , fieldsArray = initDim(Lcom_sap_spe_condmgnt_customizing_bo_ApplicationField_2_classLit, $intern_24, 227, fieldCatalogue.size_0, 0, 1) , $toArray(new AbstractMap$2(fieldCatalogue), fieldsArray) , fieldsArray)):$equals_7(objectType, 'AM') && (object = $createApplicationFieldsAsMap(usage));
  return object;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_FieldCatalogueBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'FieldCatalogueBuilder', 464, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $createApplicationField(this$static, application, fieldName){
  var fields, key;
  key = create_6('FC', this$static.usage, 'AM', application);
  fields = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return dynamicCast(fields.get_4(fieldName), 359);
}

function $createUsageFields_0(this$static, usageParam){
  var key, usageField;
  key = create_6('FC', this$static.usage, 'UF', usageParam);
  usageField = dynamicCast(this$static.cacheFacade.get_3(key, false), 281);
  return usageField;
}

function FieldCatalogueObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(523, 69, {}, FieldCatalogueObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_FieldCatalogueObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'FieldCatalogueObjectManager', 523, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $clinit_ProcedureBuilder(){
  $clinit_ProcedureBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_customizing_impl_ProcedureBuilder_2_classLit);
}

function $getProcedure(){
  null.nullMethod();
  $clinit_Configuration();
  throw new ConditionInconsistentDBException(29);
}

defineClass(665, 663, $intern_22);
_.create_0 = function create_19(keys_0){
  var object, objectType;
  objectType = keys_0[2];
  throwClassCastExceptionUnlessNull($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'PricingProcedure', 'dao.legacy'));
  object = null;
  try {
    $equals_7(objectType, 'P')?(object = $getProcedure()):$equals_7(objectType, 'PN')?(object = null.nullMethod()):$equals_7(objectType, 'DE') && (object = null.nullMethod());
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 42)) {
      throw new ConditionCacheException(203);
    }
     else 
      throw unwrap($e0);
  }
  return object;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_ProcedureBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ProcedureBuilder', 665, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $createProcedure(this$static, application, name_0){
  var ex, key, procedure;
  key = create_7('PR', this$static.usage, 'P', application, name_0);
  try {
    procedure = dynamicCast(this$static.cacheFacade.get_3(key, false), 689);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 54)) {
      ex = $e0;
      throw ex;
    }
     else 
      throw unwrap($e0);
  }
  return procedure;
}

function ProcedureObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(524, 69, {}, ProcedureObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_ProcedureObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'ProcedureObjectManager', 524, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function TaskBuilder(){
}

defineClass(465, 663, $intern_22, TaskBuilder);
_.create_0 = function create_20(keys_0){
  var app, customizingEngine, task, taskArray, tasks, us, usage;
  usage = keys_0[1];
  throwClassCastExceptionUnlessNull($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_TaskBuilder_2_classLit)).nullMethod();
  tasks = new ArrayList_0(null.nullMethod());
  for (null.nullMethod(); null.nullMethod();) {
    null.nullMethod();
    customizingEngine = $getCustomizingEngine(factory_0, usage);
    app = customizingEngine.getApplication_1(null.nullField);
    us = customizingEngine.getUsage_1(null.nullField);
    task = new Task(app, us);
    setCheck(tasks.array, tasks.array.length, task);
  }
  taskArray = initDim(Lcom_sap_spe_condmgnt_customizing_bo_Task_2_classLit, $intern_24, 228, tasks.array.length, 0, 1);
  $toArray_1(tasks, taskArray);
  return taskArray;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_TaskBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'TaskBuilder', 465, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function TaskObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(525, 69, {}, TaskObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_TaskObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'TaskObjectManager', 525, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $getScaleDefFields_0(usageTOMap, usage){
  var scaleDefFields;
  dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_UsageBuilder_2_classLit), 283);
  scaleDefFields = $getScaleDefFields(usage);
  dynamicCast(usage == null?getEntryValueOrNull($getEntry(usageTOMap.hashCodeMap, null)):usageTOMap.stringMap.get_0(usage), 151);
  return scaleDefFields;
}

function $getScaleLevelFields_0(usageTOMap, usage){
  var scaleLevelFields;
  dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_UsageBuilder_2_classLit), 283);
  scaleLevelFields = $getScaleLevelFields(usage);
  dynamicCast(usage == null?getEntryValueOrNull($getEntry(usageTOMap.hashCodeMap, null)):usageTOMap.stringMap.get_0(usage), 151);
  return scaleLevelFields;
}

function $getUsages(){
  var iter, iter0, usageBO, usageDAO, usageTO, usageTOMap, usageTOs, usages, usages_0, usage;
  usageDAO = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.me.condmgnt.customizing', 'Usage', 'dao.legacy'), 283);
  if (!usageDAO) {
    usageDAO = new UsageDAOImpl;
    $putDAO((null , SINGELTON_2), usageDAO, 'com.sap.spe.me.condmgnt.customizing.dao.legacy.UsageDAOImpl');
  }
  usageTOs = (usages_0 = new ArrayList , usage = new UsageTO , usage.name_0 = 'A' , setCheck(usages_0.array, usages_0.array.length, usage) , usages_0);
  usages = new HashMap_0(usageTOs.array.length);
  usageTOMap = new HashMap_0(usageTOs.array.length);
  for (iter0 = new AbstractList$IteratorImpl(usageTOs); iter0.i < iter0.this$01.size_1();) {
    usageTO = (checkCriticalElement(iter0.i < iter0.this$01.size_1()) , dynamicCast(iter0.this$01.get_5(iter0.last = iter0.i++), 151));
    $putStringValue(usageTOMap, usageTO.name_0, usageTO);
  }
  for (iter = $iterator_0(new AbstractMap$2(usageTOMap)); iter.val$outerIter2.hasNext();) {
    usageTO = dynamicCast($next_2(iter), 151);
    usageTO.scaleDefFields = $getScaleDefFields_0(usageTOMap, usageTO.name_0);
    usageTO.scaleLevelFields = $getScaleLevelFields_0(usageTOMap, usageTO.name_0);
    usageBO = new Usage_0(usageTO);
    $putStringValue(usages, usageBO.usageTO.name_0, usageBO);
  }
  return usages;
}

function UsageBuilder(){
}

defineClass(466, 663, $intern_22, UsageBuilder);
_.create_0 = function create_21(keys_0){
  var object, objectType, usage;
  usage = keys_0[1];
  objectType = keys_0[2];
  dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_customizing_impl_UsageBuilder_2_classLit), 283);
  object = null;
  $equals_7(objectType, 'AL')?(object = $getUsages()):$equals_7(objectType, 'DE') && (object = null);
  return object;
}
;
var Lcom_sap_spe_condmgnt_customizing_impl_UsageBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'UsageBuilder', 466, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $createUsage(this$static, usageName){
  var key, usageMap;
  key = create_5('US', this$static.usage, 'AL');
  usageMap = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return dynamicCast(usageMap.get_4(usageName), 637);
}

function UsageObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(526, 69, {}, UsageObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_UsageObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'UsageObjectManager', 526, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $getUserExitFormulas_0(this$static, application, typeName){
  var key;
  key = create_7('UE', this$static.usage, 'FO', application, typeName);
  throwClassCastExceptionUnlessNull(this$static.cacheFacade.get_3(key, false));
  throw new FormulaIsMissingException;
}

function UserExitObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(527, 69, {}, UserExitObjectManager);
var Lcom_sap_spe_condmgnt_customizing_impl_UserExitObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.impl', 'UserExitObjectManager', 527, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function AccessSequenceTO(){
  this.errorMessage = new Vector;
}

defineClass(165, 1, {165:1, 32:1}, AccessSequenceTO);
_.getAccesses_0 = function getAccesses(){
  return this.accesses;
}
;
_.getApplication_0 = function getApplication_2(){
  return this.application;
}
;
_.getErrorMessage_0 = function getErrorMessage(){
  return this.errorMessage;
}
;
_.getName_0 = function getName_1(){
  return this.name_0;
}
;
_.getUsage_0 = function getUsage_2(){
  return this.usage;
}
;
_.setAccesses_0 = function setAccesses(accesses){
  this.accesses = accesses;
}
;
_.setApplication_0 = function setApplication_0(application){
  this.application = application;
}
;
_.setErrorMessage_0 = function setErrorMessage(errorMessage){
  this.errorMessage = errorMessage;
}
;
_.setName_0 = function setName(name_0){
  this.name_0 = name_0;
}
;
_.setUsage_0 = function setUsage_0(usage){
  this.usage = usage;
}
;
var Lcom_sap_spe_condmgnt_customizing_to_AccessSequenceTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'AccessSequenceTO', 165, Ljava_lang_Object_2_classLit);
function $export_13(this$static){
  if (!exported_13) {
    exported_13 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_AccessSequenceTO_2_classLit, this$static);
    $export0_13(this$static);
  }
}

function $export0_13(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.AccessSequenceTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.AccessSequenceTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new AccessSequenceTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.AccessSequenceTO.prototype = new Object;
  __0.getAccesses = $entry(function(){
    return this.g.getAccesses_0();
  }
  );
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getErrorMessage = $entry(function(){
    return this.g.getErrorMessage_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.setAccesses = $entry(function(a0){
    this.g.setAccesses_0(a0);
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setErrorMessage = $entry(function(a0){
    this.g.setErrorMessage_0(gwtInstance(a0));
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.AccessSequenceTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.AccessSequenceTO[p] = pkg[p]);
}

function AccessSequenceTO_ExporterImpl(){
  $export_13(this);
}

defineClass(304, 1, $intern_18, AccessSequenceTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_13(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.AccessSequenceTO;
}
;
_.isAssignable = function isAssignable_13(o){
  return o != null && instanceOf(o, 165);
}
;
var exported_13 = false;
var Lcom_sap_spe_condmgnt_customizing_to_AccessSequenceTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'AccessSequenceTO_ExporterImpl', 304, Ljava_lang_Object_2_classLit);
function AccessTO(){
}

defineClass(103, 1, {103:1, 32:1}, AccessTO);
_.getAccessNumber_0 = function getAccessNumber(){
  return this.accessNumber;
}
;
_.getAttributeMaps_0 = function getAttributeMaps(){
  return this.attributeMaps;
}
;
_.getConditionTable_0 = function getConditionTable(){
  return this.conditionTable;
}
;
_.getProcessingTypeForField_0 = function getProcessingTypeForField(){
  return this.processingTypeForField;
}
;
_.getRequirementNumber_0 = function getRequirementNumber(){
  return this.requirementNumber;
}
;
_.isExclusiveAccess_0 = function isExclusiveAccess(){
  return this.exclusiveAccess;
}
;
_.setAccessNumber_0 = function setAccessNumber(accessNumber){
  this.accessNumber = accessNumber;
}
;
_.setAttributeMaps_0 = function setAttributeMaps(attributeMaps){
  this.attributeMaps = attributeMaps;
}
;
_.setConditionTable_0 = function setConditionTable(conditionTable){
  this.conditionTable = conditionTable;
}
;
_.setExclusiveAccess_0 = function setExclusiveAccess(exclusiveAccess){
  this.exclusiveAccess = exclusiveAccess;
}
;
_.setProcessingTypeForField_0 = function setProcessingTypeForField(processingTypeForField){
  this.processingTypeForField = processingTypeForField;
}
;
_.setRequirementNumber_0 = function setRequirementNumber(requirementNumber){
  this.requirementNumber = requirementNumber;
}
;
_.accessNumber = 0;
_.exclusiveAccess = false;
_.processingTypeForField = 0;
_.requirementNumber = 0;
var Lcom_sap_spe_condmgnt_customizing_to_AccessTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'AccessTO', 103, Ljava_lang_Object_2_classLit);
function $export_14(this$static){
  if (!exported_14) {
    exported_14 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_AccessTO_2_classLit, this$static);
    $export0_14(this$static);
  }
}

function $export0_14(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.AccessTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.AccessTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new AccessTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.AccessTO.prototype = new Object;
  __0.getAccessNumber = $entry(function(){
    return this.g.getAccessNumber_0();
  }
  );
  __0.getAttributeMaps = $entry(function(){
    return this.g.getAttributeMaps_0();
  }
  );
  __0.getConditionTable = $entry(function(){
    return this.g.getConditionTable_0();
  }
  );
  __0.getProcessingTypeForField = $entry(function(){
    return this.g.getProcessingTypeForField_0();
  }
  );
  __0.getRequirementNumber = $entry(function(){
    return this.g.getRequirementNumber_0();
  }
  );
  __0.isExclusiveAccess = $entry(function(){
    return this.g.isExclusiveAccess_0();
  }
  );
  __0.setAccessNumber = $entry(function(a0){
    this.g.setAccessNumber_0(a0);
  }
  );
  __0.setAttributeMaps = $entry(function(a0){
    this.g.setAttributeMaps_0(a0);
  }
  );
  __0.setConditionTable = $entry(function(a0){
    this.g.setConditionTable_0(a0);
  }
  );
  __0.setExclusiveAccess = $entry(function(a0){
    this.g.setExclusiveAccess_0(a0);
  }
  );
  __0.setProcessingTypeForField = $entry(function(a0){
    this.g.setProcessingTypeForField_0(a0);
  }
  );
  __0.setRequirementNumber = $entry(function(a0){
    this.g.setRequirementNumber_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.AccessTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.AccessTO[p] = pkg[p]);
}

function AccessTO_ExporterImpl(){
  $export_14(this);
}

defineClass(305, 1, $intern_18, AccessTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_14(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.AccessTO;
}
;
_.isAssignable = function isAssignable_14(o){
  return o != null && instanceOf(o, 103);
}
;
var exported_14 = false;
var Lcom_sap_spe_condmgnt_customizing_to_AccessTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'AccessTO_ExporterImpl', 305, Ljava_lang_Object_2_classLit);
function FieldTO(){
}

defineClass(139, 1, {139:1, 32:1}, FieldTO);
_.getDataElement_0 = function getDataElement(){
  return this.dataElement;
}
;
_.getFieldOccurence_0 = function getFieldOccurence(){
  return this.fieldOccurence;
}
;
_.getFieldRelation_0 = function getFieldRelation(){
  return this.fieldRelation;
}
;
_.getName_0 = function getName_2(){
  return this.name_0;
}
;
_.isUsedInRate_0 = function isUsedInRate(){
  return this.usedInRate;
}
;
_.isUsedInScale_0 = function isUsedInScale_1(){
  return this.usedInScale;
}
;
_.setDataElement_0 = function setDataElement(dataElement){
  this.dataElement = dataElement;
}
;
_.setFieldOccurence_0 = function setFieldOccurence(fieldOccurence){
  this.fieldOccurence = fieldOccurence;
}
;
_.setFieldRelation_0 = function setFieldRelation(fieldRelation){
  this.fieldRelation = fieldRelation;
}
;
_.setName_0 = function setName_0(name_0){
  this.name_0 = name_0;
}
;
_.setUsedInRate_0 = function setUsedInRate(usedInRate){
  this.usedInRate = usedInRate;
}
;
_.setUsedInScale_0 = function setUsedInScale(usedInScale){
  this.usedInScale = usedInScale;
}
;
_.fieldOccurence = 0;
_.usedInRate = false;
_.usedInScale = false;
var Lcom_sap_spe_condmgnt_customizing_to_FieldTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'FieldTO', 139, Ljava_lang_Object_2_classLit);
function ApplicationFieldTO(){
}

defineClass(166, 139, {166:1, 139:1, 32:1}, ApplicationFieldTO);
_.getApplication_0 = function getApplication_3(){
  return this.application;
}
;
_.getType_0 = function getType(){
  return this.type_0;
}
;
_.isAccessTimestamp_1 = function isAccessTimestamp_0(){
  return this.isAccessTimestamp_0;
}
;
_.isMultiValued_1 = function isMultiValued_0(){
  return this.isMultiValued_0;
}
;
_.setAccessTimestamp_1 = function setAccessTimestamp_0(isAccessTimestamp){
  this.isAccessTimestamp_0 = isAccessTimestamp;
}
;
_.setApplication_0 = function setApplication_1(application){
  this.application = application;
}
;
_.setMultiValued_0 = function setMultiValued(isMultiValued){
  this.isMultiValued_0 = isMultiValued;
}
;
_.setType_0 = function setType(type_0){
  this.type_0 = type_0;
}
;
_.isAccessTimestamp_0 = false;
_.isMultiValued_0 = false;
_.type_0 = 0;
var Lcom_sap_spe_condmgnt_customizing_to_ApplicationFieldTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ApplicationFieldTO', 166, Lcom_sap_spe_condmgnt_customizing_to_FieldTO_2_classLit);
function $export_15(this$static){
  if (!exported_15) {
    exported_15 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_ApplicationFieldTO_2_classLit, this$static);
    $export0_15(this$static);
  }
}

function $export0_15(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.ApplicationFieldTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationFieldTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ApplicationFieldTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationFieldTO.prototype = new Object;
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getDataElement = $entry(function(){
    return this.g.getDataElement_0();
  }
  );
  __0.getFieldOccurence = $entry(function(){
    return this.g.getFieldOccurence_0();
  }
  );
  __0.getFieldRelation = $entry(function(){
    return this.g.getFieldRelation_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getType = $entry(function(){
    return this.g.getType_0();
  }
  );
  __0.isAccessTimestamp = $entry(function(){
    return this.g.isAccessTimestamp_1();
  }
  );
  __0.isMultiValued = $entry(function(){
    return this.g.isMultiValued_1();
  }
  );
  __0.isUsedInRate = $entry(function(){
    return this.g.isUsedInRate_0();
  }
  );
  __0.isUsedInScale = $entry(function(){
    return this.g.isUsedInScale_0();
  }
  );
  __0.setAccessTimestamp = $entry(function(a0){
    this.g.setAccessTimestamp_1(a0);
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setDataElement = $entry(function(a0){
    this.g.setDataElement_0(a0);
  }
  );
  __0.setFieldOccurence = $entry(function(a0){
    this.g.setFieldOccurence_0(a0);
  }
  );
  __0.setFieldRelation = $entry(function(a0){
    this.g.setFieldRelation_0(a0);
  }
  );
  __0.setMultiValued = $entry(function(a0){
    this.g.setMultiValued_0(a0);
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setType = $entry(function(a0){
    this.g.setType_0(a0);
  }
  );
  __0.setUsedInRate = $entry(function(a0){
    this.g.setUsedInRate_0(a0);
  }
  );
  __0.setUsedInScale = $entry(function(a0){
    this.g.setUsedInScale_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationFieldTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.ApplicationFieldTO[p] = pkg[p]);
}

function ApplicationFieldTO_ExporterImpl(){
  $export_15(this);
}

defineClass(397, 1, $intern_18, ApplicationFieldTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_15(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationFieldTO;
}
;
_.isAssignable = function isAssignable_15(o){
  return o != null && instanceOf(o, 166);
}
;
var exported_15 = false;
var Lcom_sap_spe_condmgnt_customizing_to_ApplicationFieldTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ApplicationFieldTO_ExporterImpl', 397, Ljava_lang_Object_2_classLit);
function ApplicationTO(){
}

defineClass(167, 1, {167:1, 32:1}, ApplicationTO);
_.getHeaderFields_0 = function getHeaderFields(){
  return this.headerFields;
}
;
_.getItemFields_0 = function getItemFields(){
  return this.itemFields;
}
;
_.getName_0 = function getName_3(){
  return this.name_0;
}
;
_.setHeaderFields_0 = function setHeaderFields(headerFields){
  this.headerFields = headerFields;
}
;
_.setItemFields_0 = function setItemFields(itemFields){
  this.itemFields = itemFields;
}
;
_.setName_0 = function setName_1(name_0){
  this.name_0 = name_0;
}
;
var Lcom_sap_spe_condmgnt_customizing_to_ApplicationTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ApplicationTO', 167, Ljava_lang_Object_2_classLit);
function $export_16(this$static){
  if (!exported_16) {
    exported_16 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_ApplicationTO_2_classLit, this$static);
    $export0_16(this$static);
  }
}

function $export0_16(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.ApplicationTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ApplicationTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationTO.prototype = new Object;
  __0.getHeaderFields = $entry(function(){
    return this.g.getHeaderFields_0();
  }
  );
  __0.getItemFields = $entry(function(){
    return this.g.getItemFields_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.setHeaderFields = $entry(function(a0){
    this.g.setHeaderFields_0(a0);
  }
  );
  __0.setItemFields = $entry(function(a0){
    this.g.setItemFields_0(a0);
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.ApplicationTO[p] = pkg[p]);
}

function ApplicationTO_ExporterImpl(){
  $export_16(this);
}

defineClass(398, 1, $intern_18, ApplicationTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_16(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.ApplicationTO;
}
;
_.isAssignable = function isAssignable_16(o){
  return o != null && instanceOf(o, 167);
}
;
var exported_16 = false;
var Lcom_sap_spe_condmgnt_customizing_to_ApplicationTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ApplicationTO_ExporterImpl', 398, Ljava_lang_Object_2_classLit);
function AttributeMapTO(){
}

defineClass(120, 1, {120:1, 32:1}, AttributeMapTO);
_.getAccessFieldType_0 = function getAccessFieldType(){
  return this.accessFieldType;
}
;
_.getCounter_0 = function getCounter(){
  return this.counter;
}
;
_.getDirectValue_0 = function getDirectValue(){
  return this.directValue;
}
;
_.getDocumentField_0 = function getDocumentField(){
  return this.documentField;
}
;
_.getDocumentStructure_0 = function getDocumentStructure(){
  return this.documentStructure;
}
;
_.getEvaluationPriority_0 = function getEvaluationPriority(){
  return this.evaluationPriority;
}
;
_.getTableField_0 = function getTableField(){
  return this.tableField;
}
;
_.isInitialValueAllowed_0 = function isInitialValueAllowed(){
  return this.initialValueAllowed;
}
;
_.setAccessFieldType_0 = function setAccessFieldType(accessFieldType){
  this.accessFieldType = accessFieldType;
}
;
_.setCounter_0 = function setCounter(counter){
  this.counter = counter;
}
;
_.setDirectValue_0 = function setDirectValue(directValue){
  this.directValue = directValue;
}
;
_.setDocumentField_0 = function setDocumentField(documentField){
  this.documentField = documentField;
}
;
_.setDocumentStructure_0 = function setDocumentStructure(documentStructure){
  this.documentStructure = documentStructure;
}
;
_.setEvaluationPriority_0 = function setEvaluationPriority(evaluationPriority){
  this.evaluationPriority = evaluationPriority;
}
;
_.setInitialValueAllowed_0 = function setInitialValueAllowed(initialValueAllowed){
  this.initialValueAllowed = initialValueAllowed;
}
;
_.setTableField_0 = function setTableField(tableField){
  this.tableField = tableField;
}
;
_.accessFieldType = 0;
_.counter = 0;
_.evaluationPriority = 0;
_.initialValueAllowed = false;
var Lcom_sap_spe_condmgnt_customizing_to_AttributeMapTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'AttributeMapTO', 120, Ljava_lang_Object_2_classLit);
function $export_17(this$static){
  if (!exported_17) {
    exported_17 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_AttributeMapTO_2_classLit, this$static);
    $export0_17(this$static);
  }
}

function $export0_17(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.AttributeMapTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.AttributeMapTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new AttributeMapTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.AttributeMapTO.prototype = new Object;
  __0.getAccessFieldType = $entry(function(){
    return this.g.getAccessFieldType_0();
  }
  );
  __0.getCounter = $entry(function(){
    return this.g.getCounter_0();
  }
  );
  __0.getDirectValue = $entry(function(){
    return this.g.getDirectValue_0();
  }
  );
  __0.getDocumentField = $entry(function(){
    return this.g.getDocumentField_0();
  }
  );
  __0.getDocumentStructure = $entry(function(){
    return this.g.getDocumentStructure_0();
  }
  );
  __0.getEvaluationPriority = $entry(function(){
    return this.g.getEvaluationPriority_0();
  }
  );
  __0.getTableField = $entry(function(){
    return this.g.getTableField_0();
  }
  );
  __0.isInitialValueAllowed = $entry(function(){
    return this.g.isInitialValueAllowed_0();
  }
  );
  __0.setAccessFieldType = $entry(function(a0){
    this.g.setAccessFieldType_0(a0);
  }
  );
  __0.setCounter = $entry(function(a0){
    this.g.setCounter_0(a0);
  }
  );
  __0.setDirectValue = $entry(function(a0){
    this.g.setDirectValue_0(a0);
  }
  );
  __0.setDocumentField = $entry(function(a0){
    this.g.setDocumentField_0(a0);
  }
  );
  __0.setDocumentStructure = $entry(function(a0){
    this.g.setDocumentStructure_0(a0);
  }
  );
  __0.setEvaluationPriority = $entry(function(a0){
    this.g.setEvaluationPriority_0(a0);
  }
  );
  __0.setInitialValueAllowed = $entry(function(a0){
    this.g.setInitialValueAllowed_0(a0);
  }
  );
  __0.setTableField = $entry(function(a0){
    this.g.setTableField_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.AttributeMapTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.AttributeMapTO[p] = pkg[p]);
}

function AttributeMapTO_ExporterImpl(){
  $export_17(this);
}

defineClass(399, 1, $intern_18, AttributeMapTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_17(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.AttributeMapTO;
}
;
_.isAssignable = function isAssignable_17(o){
  return o != null && instanceOf(o, 120);
}
;
var exported_17 = false;
var Lcom_sap_spe_condmgnt_customizing_to_AttributeMapTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'AttributeMapTO_ExporterImpl', 399, Ljava_lang_Object_2_classLit);
function ConditionGroupTO(){
}

defineClass(219, 1, {219:1, 32:1}, ConditionGroupTO);
_.getApplication_0 = function getApplication_4(){
  return this.application;
}
;
_.getClient_0 = function getClient(){
  return this.client;
}
;
_.getConditionTable_0 = function getConditionTable_0(){
  return this.conditionTable;
}
;
_.getConditionType_1 = function getConditionType_0(){
  return this.conditionType;
}
;
_.getGroupname_0 = function getGroupname(){
  return this.groupname;
}
;
_.getUsage_0 = function getUsage_3(){
  return this.usage;
}
;
_.setApplication_0 = function setApplication_2(application){
  this.application = application;
}
;
_.setClient_0 = function setClient(client){
  this.client = client;
}
;
_.setConditionTable_0 = function setConditionTable_0(conditionTable){
  this.conditionTable = conditionTable;
}
;
_.setConditionType_0 = function setConditionType(conditionType){
  this.conditionType = conditionType;
}
;
_.setGroupname_0 = function setGroupname(groupname){
  this.groupname = groupname;
}
;
_.setUsage_0 = function setUsage_1(usage){
  this.usage = usage;
}
;
var Lcom_sap_spe_condmgnt_customizing_to_ConditionGroupTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionGroupTO', 219, Ljava_lang_Object_2_classLit);
function $export_18(this$static){
  if (!exported_18) {
    exported_18 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_ConditionGroupTO_2_classLit, this$static);
    $export0_18(this$static);
  }
}

function $export0_18(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.ConditionGroupTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.ConditionGroupTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ConditionGroupTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.ConditionGroupTO.prototype = new Object;
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getClient = $entry(function(){
    return this.g.getClient_0();
  }
  );
  __0.getConditionTable = $entry(function(){
    return this.g.getConditionTable_0();
  }
  );
  __0.getConditionType = $entry(function(){
    return this.g.getConditionType_1();
  }
  );
  __0.getGroupname = $entry(function(){
    return this.g.getGroupname_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setClient = $entry(function(a0){
    this.g.setClient_0(a0);
  }
  );
  __0.setConditionTable = $entry(function(a0){
    this.g.setConditionTable_0(a0);
  }
  );
  __0.setConditionType = $entry(function(a0){
    this.g.setConditionType_0(a0);
  }
  );
  __0.setGroupname = $entry(function(a0){
    this.g.setGroupname_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.ConditionGroupTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.ConditionGroupTO[p] = pkg[p]);
}

function ConditionGroupTO_ExporterImpl(){
  $export_18(this);
}

defineClass(400, 1, $intern_18, ConditionGroupTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_18(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.ConditionGroupTO;
}
;
_.isAssignable = function isAssignable_18(o){
  return o != null && instanceOf(o, 219);
}
;
var exported_18 = false;
var Lcom_sap_spe_condmgnt_customizing_to_ConditionGroupTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionGroupTO_ExporterImpl', 400, Ljava_lang_Object_2_classLit);
function ConditionTableTO(){
}

defineClass(168, 1, {168:1, 32:1}, ConditionTableTO);
_.getApplication_0 = function getApplication_5(){
  return this.application;
}
;
_.getConditionTable_0 = function getConditionTable_1(){
  return this.conditionTable;
}
;
_.getConditionTableFullName_0 = function getConditionTableFullName(){
  return this.conditionTableFullName;
}
;
_.getUsage_0 = function getUsage_4(){
  return this.usage;
}
;
_.getVariableDataFields_0 = function getVariableDataFields(){
  return this.variableDataFields;
}
;
_.getVariableKeyFields_0 = function getVariableKeyFields(){
  return this.variableKeyFields;
}
;
_.isHasValidityPeriod_0 = function isHasValidityPeriod(){
  return this.hasValidityPeriod;
}
;
_.isUseNamespace_0 = function isUseNamespace(){
  return this.useNamespace;
}
;
_.setApplication_0 = function setApplication_3(application){
  this.application = application;
}
;
_.setConditionTable_0 = function setConditionTable_1(conditionTable){
  this.conditionTable = conditionTable;
}
;
_.setConditionTableFullName_0 = function setConditionTableFullName(conditionTableFullName){
  this.conditionTableFullName = conditionTableFullName;
}
;
_.setHasValidityPeriod_0 = function setHasValidityPeriod(hasValidityPeriod){
  this.hasValidityPeriod = hasValidityPeriod;
}
;
_.setUsage_0 = function setUsage_2(usage){
  this.usage = usage;
}
;
_.setUseNamespace_0 = function setUseNamespace(useNamespace){
  this.useNamespace = useNamespace;
}
;
_.setVariableDataFields_0 = function setVariableDataFields(variableDataFields){
  this.variableDataFields = variableDataFields;
}
;
_.setVariableKeyFields_0 = function setVariableKeyFields(variableKeyFields){
  this.variableKeyFields = variableKeyFields;
}
;
_.hasValidityPeriod = false;
_.useNamespace = false;
var Lcom_sap_spe_condmgnt_customizing_to_ConditionTableTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionTableTO', 168, Ljava_lang_Object_2_classLit);
function $export_19(this$static){
  if (!exported_19) {
    exported_19 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_ConditionTableTO_2_classLit, this$static);
    $export0_19(this$static);
  }
}

function $export0_19(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.ConditionTableTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTableTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ConditionTableTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTableTO.prototype = new Object;
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getConditionTable = $entry(function(){
    return this.g.getConditionTable_0();
  }
  );
  __0.getConditionTableFullName = $entry(function(){
    return this.g.getConditionTableFullName_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.getVariableDataFields = $entry(function(){
    return this.g.getVariableDataFields_0();
  }
  );
  __0.getVariableKeyFields = $entry(function(){
    return this.g.getVariableKeyFields_0();
  }
  );
  __0.isHasValidityPeriod = $entry(function(){
    return this.g.isHasValidityPeriod_0();
  }
  );
  __0.isUseNamespace = $entry(function(){
    return this.g.isUseNamespace_0();
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setConditionTable = $entry(function(a0){
    this.g.setConditionTable_0(a0);
  }
  );
  __0.setConditionTableFullName = $entry(function(a0){
    this.g.setConditionTableFullName_0(a0);
  }
  );
  __0.setHasValidityPeriod = $entry(function(a0){
    this.g.setHasValidityPeriod_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  __0.setUseNamespace = $entry(function(a0){
    this.g.setUseNamespace_0(a0);
  }
  );
  __0.setVariableDataFields = $entry(function(a0){
    this.g.setVariableDataFields_0(a0);
  }
  );
  __0.setVariableKeyFields = $entry(function(a0){
    this.g.setVariableKeyFields_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTableTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.ConditionTableTO[p] = pkg[p]);
}

function ConditionTableTO_ExporterImpl(){
  $export_19(this);
}

defineClass(401, 1, $intern_18, ConditionTableTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_19(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTableTO;
}
;
_.isAssignable = function isAssignable_19(o){
  return o != null && instanceOf(o, 168);
}
;
var exported_19 = false;
var Lcom_sap_spe_condmgnt_customizing_to_ConditionTableTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionTableTO_ExporterImpl', 401, Ljava_lang_Object_2_classLit);
function ConditionTechniqueFieldTO(){
}

defineClass(220, 139, {220:1, 139:1, 3:1, 32:1}, ConditionTechniqueFieldTO);
var Lcom_sap_spe_condmgnt_customizing_to_ConditionTechniqueFieldTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionTechniqueFieldTO', 220, Lcom_sap_spe_condmgnt_customizing_to_FieldTO_2_classLit);
function $export_20(this$static){
  if (!exported_20) {
    exported_20 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_ConditionTechniqueFieldTO_2_classLit, this$static);
    $export0_20(this$static);
  }
}

function $export0_20(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.ConditionTechniqueFieldTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTechniqueFieldTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ConditionTechniqueFieldTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTechniqueFieldTO.prototype = new Object;
  __0.getDataElement = $entry(function(){
    return this.g.getDataElement_0();
  }
  );
  __0.getFieldOccurence = $entry(function(){
    return this.g.getFieldOccurence_0();
  }
  );
  __0.getFieldRelation = $entry(function(){
    return this.g.getFieldRelation_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.isUsedInRate = $entry(function(){
    return this.g.isUsedInRate_0();
  }
  );
  __0.isUsedInScale = $entry(function(){
    return this.g.isUsedInScale_0();
  }
  );
  __0.setDataElement = $entry(function(a0){
    this.g.setDataElement_0(a0);
  }
  );
  __0.setFieldOccurence = $entry(function(a0){
    this.g.setFieldOccurence_0(a0);
  }
  );
  __0.setFieldRelation = $entry(function(a0){
    this.g.setFieldRelation_0(a0);
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setUsedInRate = $entry(function(a0){
    this.g.setUsedInRate_0(a0);
  }
  );
  __0.setUsedInScale = $entry(function(a0){
    this.g.setUsedInScale_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTechniqueFieldTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.ConditionTechniqueFieldTO[p] = pkg[p]);
}

function ConditionTechniqueFieldTO_ExporterImpl(){
  $export_20(this);
}

defineClass(402, 1, $intern_18, ConditionTechniqueFieldTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_20(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTechniqueFieldTO;
}
;
_.isAssignable = function isAssignable_20(o){
  return o != null && instanceOf(o, 220);
}
;
var exported_20 = false;
var Lcom_sap_spe_condmgnt_customizing_to_ConditionTechniqueFieldTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionTechniqueFieldTO_ExporterImpl', 402, Ljava_lang_Object_2_classLit);
function ConditionTypeTO_0(){
}

defineClass(140, 1, {140:1, 32:1}, ConditionTypeTO_0);
_.getAccessSequence_2 = function getAccessSequence_1(){
  return this.accessSequence;
}
;
_.getAccessTimestamp_0 = function getAccessTimestamp(){
  return this.accessTimestamp;
}
;
_.getApplication_0 = function getApplication_6(){
  return this.application;
}
;
_.getName_0 = function getName_4(){
  return this.name_0;
}
;
_.getReferenceConditionType_1 = function getReferenceConditionType_0(){
  return this.referenceConditionType;
}
;
_.getUsage_0 = function getUsage_5(){
  return this.usage;
}
;
_.setAccessSequence_1 = function setAccessSequence_0(accessSequence){
  this.accessSequence = accessSequence;
}
;
_.setAccessTimestamp_2 = function setAccessTimestamp_1(accessTimestamp){
  this.accessTimestamp = accessTimestamp;
}
;
_.setApplication_0 = function setApplication_4(application){
  this.application = application;
}
;
_.setName_0 = function setName_2(name_0){
  this.name_0 = name_0;
}
;
_.setReferenceConditionType_0 = function setReferenceConditionType(referenceConditionType){
  this.referenceConditionType = referenceConditionType;
}
;
_.setUsage_0 = function setUsage_3(usage){
  this.usage = usage;
}
;
var Lcom_sap_spe_condmgnt_customizing_to_ConditionTypeTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionTypeTO', 140, Ljava_lang_Object_2_classLit);
function $export_21(this$static){
  if (!exported_21) {
    exported_21 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_ConditionTypeTO_2_classLit, this$static);
    $export0_21(this$static);
  }
}

function $export0_21(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.ConditionTypeTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTypeTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ConditionTypeTO_0);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTypeTO.prototype = new Object;
  __0.getAccessSequence = $entry(function(){
    return this.g.getAccessSequence_2();
  }
  );
  __0.getAccessTimestamp = $entry(function(){
    return this.g.getAccessTimestamp_0();
  }
  );
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getReferenceConditionType = $entry(function(){
    return this.g.getReferenceConditionType_1();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.setAccessSequence = $entry(function(a0){
    this.g.setAccessSequence_1(a0);
  }
  );
  __0.setAccessTimestamp = $entry(function(a0){
    this.g.setAccessTimestamp_2(a0);
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setReferenceConditionType = $entry(function(a0){
    this.g.setReferenceConditionType_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTypeTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.ConditionTypeTO[p] = pkg[p]);
}

function ConditionTypeTO_ExporterImpl(){
  $export_21(this);
}

defineClass(403, 1, $intern_18, ConditionTypeTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_21(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.ConditionTypeTO;
}
;
_.isAssignable = function isAssignable_21(o){
  return o != null && instanceOf(o, 140);
}
;
var exported_21 = false;
var Lcom_sap_spe_condmgnt_customizing_to_ConditionTypeTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ConditionTypeTO_ExporterImpl', 403, Ljava_lang_Object_2_classLit);
function $export_22(this$static){
  if (!exported_22) {
    exported_22 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_FieldTO_2_classLit, this$static);
    $export0_22(this$static);
  }
}

function $export0_22(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.FieldTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.FieldTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new FieldTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.FieldTO.prototype = new Object;
  __0.getDataElement = $entry(function(){
    return this.g.getDataElement_0();
  }
  );
  __0.getFieldOccurence = $entry(function(){
    return this.g.getFieldOccurence_0();
  }
  );
  __0.getFieldRelation = $entry(function(){
    return this.g.getFieldRelation_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.isUsedInRate = $entry(function(){
    return this.g.isUsedInRate_0();
  }
  );
  __0.isUsedInScale = $entry(function(){
    return this.g.isUsedInScale_0();
  }
  );
  __0.setDataElement = $entry(function(a0){
    this.g.setDataElement_0(a0);
  }
  );
  __0.setFieldOccurence = $entry(function(a0){
    this.g.setFieldOccurence_0(a0);
  }
  );
  __0.setFieldRelation = $entry(function(a0){
    this.g.setFieldRelation_0(a0);
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setUsedInRate = $entry(function(a0){
    this.g.setUsedInRate_0(a0);
  }
  );
  __0.setUsedInScale = $entry(function(a0){
    this.g.setUsedInScale_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.FieldTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.FieldTO[p] = pkg[p]);
}

function FieldTO_ExporterImpl(){
  $export_22(this);
}

defineClass(404, 1, $intern_18, FieldTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_22(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.FieldTO;
}
;
_.isAssignable = function isAssignable_22(o){
  return o != null && instanceOf(o, 139);
}
;
var exported_22 = false;
var Lcom_sap_spe_condmgnt_customizing_to_FieldTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'FieldTO_ExporterImpl', 404, Ljava_lang_Object_2_classLit);
function ProcedureTO(){
  this.errorMessage = new Vector;
}

defineClass(141, 1, {141:1, 32:1}, ProcedureTO);
_.getApplication_0 = function getApplication_7(){
  return this.application;
}
;
_.getErrorMessage_0 = function getErrorMessage_0(){
  return this.errorMessage;
}
;
_.getName_0 = function getName_5(){
  return this.name_0;
}
;
_.getSteps_0 = function getSteps(){
  return this.steps;
}
;
_.getUsage_0 = function getUsage_6(){
  return this.usage;
}
;
_.setApplication_0 = function setApplication_5(application){
  this.application = application;
}
;
_.setErrorMessage_0 = function setErrorMessage_0(errorMessage){
  this.errorMessage = errorMessage;
}
;
_.setName_0 = function setName_3(name_0){
  this.name_0 = name_0;
}
;
_.setSteps_0 = function setSteps(steps){
  this.steps = steps;
}
;
_.setUsage_0 = function setUsage_4(usage){
  this.usage = usage;
}
;
var Lcom_sap_spe_condmgnt_customizing_to_ProcedureTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ProcedureTO', 141, Ljava_lang_Object_2_classLit);
function $export_23(this$static){
  if (!exported_23) {
    exported_23 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_ProcedureTO_2_classLit, this$static);
    $export0_23(this$static);
  }
}

function $export0_23(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.ProcedureTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.ProcedureTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ProcedureTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.ProcedureTO.prototype = new Object;
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getErrorMessage = $entry(function(){
    return this.g.getErrorMessage_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getSteps = $entry(function(){
    return this.g.getSteps_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setErrorMessage = $entry(function(a0){
    this.g.setErrorMessage_0(gwtInstance(a0));
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setSteps = $entry(function(a0){
    this.g.setSteps_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.ProcedureTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.ProcedureTO[p] = pkg[p]);
}

function ProcedureTO_ExporterImpl(){
  $export_23(this);
}

defineClass(221, 1, $intern_18, ProcedureTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_23(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.ProcedureTO;
}
;
_.isAssignable = function isAssignable_23(o){
  return o != null && instanceOf(o, 141);
}
;
var exported_23 = false;
var Lcom_sap_spe_condmgnt_customizing_to_ProcedureTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'ProcedureTO_ExporterImpl', 221, Ljava_lang_Object_2_classLit);
function StepTO(){
}

defineClass(187, 1, {187:1, 32:1}, StepTO);
_.getConditionType_1 = function getConditionType_1(){
  return this.conditionType;
}
;
_.getCounter_0 = function getCounter_0(){
  return this.counter;
}
;
_.getRequirementNumber_0 = function getRequirementNumber_0(){
  return this.requirementNumber;
}
;
_.getStepNumber_0 = function getStepNumber(){
  return this.stepNumber;
}
;
_.setConditionType_0 = function setConditionType_0(conditionType){
  this.conditionType = conditionType;
}
;
_.setCounter_0 = function setCounter_0(counter){
  this.counter = counter;
}
;
_.setRequirementNumber_0 = function setRequirementNumber_0(requirementNumber){
  this.requirementNumber = requirementNumber;
}
;
_.setStepNumber_0 = function setStepNumber(stepNumber){
  this.stepNumber = stepNumber;
}
;
_.counter = 0;
_.requirementNumber = 0;
_.stepNumber = 0;
var Lcom_sap_spe_condmgnt_customizing_to_StepTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'StepTO', 187, Ljava_lang_Object_2_classLit);
function $export_24(this$static){
  if (!exported_24) {
    exported_24 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_StepTO_2_classLit, this$static);
    $export0_24(this$static);
  }
}

function $export0_24(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.StepTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.StepTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new StepTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.StepTO.prototype = new Object;
  __0.getConditionType = $entry(function(){
    return this.g.getConditionType_1();
  }
  );
  __0.getCounter = $entry(function(){
    return this.g.getCounter_0();
  }
  );
  __0.getRequirementNumber = $entry(function(){
    return this.g.getRequirementNumber_0();
  }
  );
  __0.getStepNumber = $entry(function(){
    return this.g.getStepNumber_0();
  }
  );
  __0.setConditionType = $entry(function(a0){
    this.g.setConditionType_0(a0);
  }
  );
  __0.setCounter = $entry(function(a0){
    this.g.setCounter_0(a0);
  }
  );
  __0.setRequirementNumber = $entry(function(a0){
    this.g.setRequirementNumber_0(a0);
  }
  );
  __0.setStepNumber = $entry(function(a0){
    this.g.setStepNumber_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.StepTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.StepTO[p] = pkg[p]);
}

function StepTO_ExporterImpl(){
  $export_24(this);
}

defineClass(405, 1, $intern_18, StepTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_24(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.StepTO;
}
;
_.isAssignable = function isAssignable_24(o){
  return o != null && instanceOf(o, 187);
}
;
var exported_24 = false;
var Lcom_sap_spe_condmgnt_customizing_to_StepTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'StepTO_ExporterImpl', 405, Ljava_lang_Object_2_classLit);
function UsageFieldTO(){
}

defineClass(142, 139, {139:1, 142:1, 32:1}, UsageFieldTO);
_.getUsage_0 = function getUsage_7(){
  return this.usage;
}
;
_.isSupplementaryField_0 = function isSupplementaryField(){
  return this.supplementaryField;
}
;
_.setSupplementaryField_0 = function setSupplementaryField(supplementaryField){
  this.supplementaryField = supplementaryField;
}
;
_.setUsage_0 = function setUsage_5(usage){
  this.usage = usage;
}
;
_.supplementaryField = false;
var Lcom_sap_spe_condmgnt_customizing_to_UsageFieldTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'UsageFieldTO', 142, Lcom_sap_spe_condmgnt_customizing_to_FieldTO_2_classLit);
function $export_25(this$static){
  if (!exported_25) {
    exported_25 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_customizing_to_UsageFieldTO_2_classLit, this$static);
    $export0_25(this$static);
  }
}

function $export0_25(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.customizing.to.UsageFieldTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.customizing.to.UsageFieldTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new UsageFieldTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.customizing.to.UsageFieldTO.prototype = new Object;
  __0.getDataElement = $entry(function(){
    return this.g.getDataElement_0();
  }
  );
  __0.getFieldOccurence = $entry(function(){
    return this.g.getFieldOccurence_0();
  }
  );
  __0.getFieldRelation = $entry(function(){
    return this.g.getFieldRelation_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.isSupplementaryField = $entry(function(){
    return this.g.isSupplementaryField_0();
  }
  );
  __0.isUsedInRate = $entry(function(){
    return this.g.isUsedInRate_0();
  }
  );
  __0.isUsedInScale = $entry(function(){
    return this.g.isUsedInScale_0();
  }
  );
  __0.setDataElement = $entry(function(a0){
    this.g.setDataElement_0(a0);
  }
  );
  __0.setFieldOccurence = $entry(function(a0){
    this.g.setFieldOccurence_0(a0);
  }
  );
  __0.setFieldRelation = $entry(function(a0){
    this.g.setFieldRelation_0(a0);
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setSupplementaryField = $entry(function(a0){
    this.g.setSupplementaryField_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  __0.setUsedInRate = $entry(function(a0){
    this.g.setUsedInRate_0(a0);
  }
  );
  __0.setUsedInScale = $entry(function(a0){
    this.g.setUsedInScale_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.customizing.to.UsageFieldTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.customizing.to.UsageFieldTO[p] = pkg[p]);
}

function UsageFieldTO_ExporterImpl(){
  $export_25(this);
}

defineClass(406, 1, $intern_18, UsageFieldTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_25(){
  return $wnd.com.sap.spe.condmgnt.customizing.to.UsageFieldTO;
}
;
_.isAssignable = function isAssignable_25(o){
  return o != null && instanceOf(o, 142);
}
;
var exported_25 = false;
var Lcom_sap_spe_condmgnt_customizing_to_UsageFieldTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'UsageFieldTO_ExporterImpl', 406, Ljava_lang_Object_2_classLit);
function UsageTO(){
}

defineClass(151, 1, {151:1, 3:1}, UsageTO);
var Lcom_sap_spe_condmgnt_customizing_to_UsageTO_2_classLit = createForClass('com.sap.spe.condmgnt.customizing.to', 'UsageTO', 151, Ljava_lang_Object_2_classLit);
function ConditionRuntimeException(messageNumber){
  BaseRuntimeException_0.call(this, valueOf(messageNumber));
}

defineClass(175, 127, $intern_2, ConditionRuntimeException);
var Lcom_sap_spe_condmgnt_exception_ConditionRuntimeException_2_classLit = createForClass('com.sap.spe.condmgnt.exception', 'ConditionRuntimeException', 175, Lcom_sap_vmc_exception_BaseRuntimeException_2_classLit);
function ConditionCacheException(messageNumber){
  ConditionRuntimeException.call(this, messageNumber);
}

defineClass(54, 175, {54:1, 3:1, 9:1, 20:1, 18:1}, ConditionCacheException);
var Lcom_sap_spe_condmgnt_exception_ConditionCacheException_2_classLit = createForClass('com.sap.spe.condmgnt.exception', 'ConditionCacheException', 54, Lcom_sap_spe_condmgnt_exception_ConditionRuntimeException_2_classLit);
function ConditionException(messageNumber){
  BaseException.call(this, valueOf(messageNumber));
}

defineClass(232, 46, $intern_20);
var Lcom_sap_spe_condmgnt_exception_ConditionException_2_classLit = createForClass('com.sap.spe.condmgnt.exception', 'ConditionException', 232, Lcom_sap_vmc_exception_BaseException_2_classLit);
function ConditionIllegalArgumentException(messageNumber){
  ConditionRuntimeException.call(this, messageNumber);
}

defineClass(338, 175, $intern_2, ConditionIllegalArgumentException);
var Lcom_sap_spe_condmgnt_exception_ConditionIllegalArgumentException_2_classLit = createForClass('com.sap.spe.condmgnt.exception', 'ConditionIllegalArgumentException', 338, Lcom_sap_spe_condmgnt_exception_ConditionRuntimeException_2_classLit);
function ConditionInconsistentDBException(messageNumber){
  ConditionException.call(this, messageNumber);
}

defineClass(42, 232, {42:1, 46:1, 3:1, 9:1, 18:1}, ConditionInconsistentDBException);
var Lcom_sap_spe_condmgnt_exception_ConditionInconsistentDBException_2_classLit = createForClass('com.sap.spe.condmgnt.exception', 'ConditionInconsistentDBException', 42, Lcom_sap_spe_condmgnt_exception_ConditionException_2_classLit);
function FormulaIsMissingException(){
  ConditionException.call(this, 22);
}

function FormulaIsMissingException_0(){
  ConditionException.call(this, 20);
}

defineClass(52, 232, {52:1, 46:1, 3:1, 9:1, 18:1}, FormulaIsMissingException, FormulaIsMissingException_0);
var Lcom_sap_spe_condmgnt_exception_FormulaIsMissingException_2_classLit = createForClass('com.sap.spe.condmgnt.exception', 'FormulaIsMissingException', 52, Lcom_sap_spe_condmgnt_exception_ConditionException_2_classLit);
defineClass(671, 1, {});
var factory_1 = null;
var Lcom_sap_spe_condmgnt_finding_ConditionFindingEngineFactory_2_classLit = createForClass('com.sap.spe.condmgnt.finding', 'ConditionFindingEngineFactory', 671, Ljava_lang_Object_2_classLit);
function $clinit_IAttributeBinding(){
  $clinit_IAttributeBinding = emptyMethod;
  INITIAL_ATTRIBUTE_VALUE = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
}

var INITIAL_ATTRIBUTE_VALUE;
var Lcom_sap_spe_condmgnt_finding_IAttributeBinding_2_classLit = createForInterface('com.sap.spe.condmgnt.finding', 'IAttributeBinding');
var Lcom_sap_spe_condmgnt_finding_ICondition_2_classLit = createForInterface('com.sap.spe.condmgnt.finding', 'ICondition');
var Lcom_sap_spe_condmgnt_finding_IConditionAccessTimestamp_2_classLit = createForInterface('com.sap.spe.condmgnt.finding', 'IConditionAccessTimestamp');
function $clinit_AttributeBinding(){
  $clinit_AttributeBinding = emptyMethod;
  EMPTY_STRING_ATTRIBUTE_VALUE = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['']);
}

function AttributeBinding(field, values){
  var i_0, valueList;
  this.field = field;
  if (values != null) {
    if (values.length > 1) {
      if (!field.applicationFieldTO.isMultiValued_0) {
        throw new ConditionIllegalArgumentException(16);
      }
      valueList = new ArrayList_0(values.length);
      for (i_0 = 0; i_0 < values.length; i_0++) {
        $indexOf_1(valueList, values[i_0], 0) != -1 || $add_3(valueList, values[i_0]);
      }
      if (values.length == valueList.array.length) {
        this.values = values;
      }
       else {
        this.values = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, valueList.array.length, 4, 1);
        $toArray_1(valueList, this.values);
      }
    }
     else 
      values.length == 1 && values[0] == null?(this.values = EMPTY_STRING_ATTRIBUTE_VALUE):(this.values = values);
  }
   else {
    this.values = ($clinit_IAttributeBinding() , INITIAL_ATTRIBUTE_VALUE);
  }
}

defineClass(581, 1, {115:1, 3:1});
_.equals$ = function equals_9(o){
  var attributeBinding, valuesToCompare;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != this.___clazz$) {
    return false;
  }
  attributeBinding = dynamicCast(o, 115);
  if (!$equals_7(this.field.fieldTO.name_0, attributeBinding.getApplicationField_0().fieldTO.name_0)) {
    return false;
  }
  valuesToCompare = attributeBinding.getValues();
  return equals_36(this.values, valuesToCompare);
}
;
_.getApplicationField_0 = function getApplicationField_0(){
  return this.field;
}
;
_.getName_0 = function getName_6(){
  return this.field.fieldTO.name_0;
}
;
_.getValues = function getValues(){
  return this.values;
}
;
_.hashCode$ = function hashCode_10(){
  var hash, name_0, valuesLocal;
  name_0 = this.field.fieldTO.name_0;
  valuesLocal = this.getValues();
  hash = 217 + (null == name_0?0:getHashCode_0(name_0));
  hash = 31 * hash + (null == valuesLocal?0:hashCode__I__devirtual$(valuesLocal));
  return hash;
}
;
_.toString$ = function toString_10(){
  var buffer, i_0;
  buffer = new StringBuffer;
  $append_1(buffer, this.getName_0());
  buffer.string += '={';
  for (i_0 = 0; i_0 < this.values.length; i_0++) {
    $append_1(buffer, this.values[i_0]);
    i_0 < this.values.length - 1 && (buffer.string += ',' , buffer);
  }
  buffer.string += '}';
  return buffer.string;
}
;
var EMPTY_STRING_ATTRIBUTE_VALUE;
var Lcom_sap_spe_condmgnt_finding_bo_AttributeBinding_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'AttributeBinding', 581, Ljava_lang_Object_2_classLit);
function $clinit_AttributeEnvironment(){
  $clinit_AttributeEnvironment = emptyMethod;
  INITIAL_VALUE = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
}

function $getAttributeBinding(this$static, attributeName){
  return dynamicCast($getStringValue(this$static.attributeValues, attributeName), 115);
}

function $isAttributeModified(this$static, attributeName){
  var obj;
  obj = $getStringValue(this$static.modifiedAttributes, attributeName);
  return obj == null || dynamicCast(obj, 67).value_0;
}

function $newConditionFindingIsPerformed(this$static){
  var i_0;
  for (i_0 = 0; i_0 < this$static.attributes.length; i_0++) {
    $putStringValue(this$static.modifiedAttributes, this$static.attributes[i_0], ($clinit_Boolean() , FALSE));
  }
}

function $setAttributeBinding(this$static, attributeBinding){
  var name_0, obj, oldAttributeBinding;
  name_0 = attributeBinding.getApplicationField_0();
  if (name_0) {
    obj = $putStringValue(this$static.attributeValues, name_0.fieldTO.name_0, attributeBinding);
    if (obj != null) {
      oldAttributeBinding = dynamicCast(obj, 115);
      oldAttributeBinding.equals$(attributeBinding) || $putStringValue(this$static.modifiedAttributes, name_0.fieldTO.name_0, ($clinit_Boolean() , TRUE));
      return dynamicCast(obj, 115);
    }
    $removeStringValue(this$static.attributeValues, name_0.fieldTO.name_0);
  }
  return null;
}

function AttributeEnvironment(usageParam, relevantAttributes){
  $clinit_AttributeEnvironment();
  var applicationField, i_0;
  $getConditionFindingEngine(factory_1, usageParam);
  this.attributes = relevantAttributes.attributeNamesInternal;
  this.attributeValues = new HashMap_0(this.attributes.length);
  for (i_0 = 0; i_0 < this.attributes.length; i_0++) {
    applicationField = $getRelevantApplicationField(relevantAttributes, this.attributes[i_0]);
    $putStringValue(this.attributeValues, this.attributes[i_0], new MagicAttributeBinding(applicationField, INITIAL_VALUE));
  }
  this.modifiedAttributes = new HashMap_0(this.attributes.length);
}

defineClass(599, 1, $intern_21, AttributeEnvironment);
var INITIAL_VALUE;
var Lcom_sap_spe_condmgnt_finding_bo_AttributeEnvironment_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'AttributeEnvironment', 599, Ljava_lang_Object_2_classLit);
function $setCounter(this$static, c){
  this$static.counter = c;
}

function $setStepNumber(this$static, stepNumber){
  this$static.stepNumber = stepNumber;
}

function Condition(stepNumber){
  this.stepNumber = stepNumber;
  this.counter = 1;
}

function Condition_0(stepParam, conditionRecordParam, conditionFindingTimestampParam){
  if (instanceOf(conditionRecordParam, 133) && !!stepParam) {
    this.step = $determineStepOfConditionType(stepParam.procedure, conditionRecordParam.getConditionType_2().getName_0());
    if (!this.step) {
      throw new InvalidSupplementaryCondition('Supplementary condition ignored: Condition type ' + conditionRecordParam.getConditionType_2().getName_0() + ' not contained in pricing procedure ' + stepParam.procedure.pricingProcedureTO.name_0 + '.');
    }
  }
   else {
    this.step = stepParam;
  }
  this.counter = 1;
  this.conditionRecord = conditionRecordParam;
  this.conditionFindingTimestamp = conditionFindingTimestampParam;
  !!this.step && (this.stepNumber = this.step.stepTO.stepNumber);
}

defineClass(79, 1, {65:1, 79:1, 3:1, 4:1}, Condition);
_.getConditionFindingTimestamp = function getConditionFindingTimestamp(){
  return this.conditionFindingTimestamp;
}
;
_.getConditionRecord = function getConditionRecord(){
  return this.conditionRecord;
}
;
_.getCounter_0 = function getCounter_1(){
  return this.counter;
}
;
_.getStep = function getStep(){
  return this.step;
}
;
_.getStepNumber_0 = function getStepNumber_0(){
  return this.stepNumber;
}
;
_.counter = 0;
_.stepNumber = 0;
var Lcom_sap_spe_condmgnt_finding_bo_Condition_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'Condition', 79, Ljava_lang_Object_2_classLit);
function ConditionAccessTimestamp(conditionAccessTimestampName, conditionAccessTimestampValue){
  this.name_0 = conditionAccessTimestampName;
  this.value_0 = conditionAccessTimestampValue;
}

defineClass(179, 1, {288:1, 179:1, 3:1}, ConditionAccessTimestamp);
_.hashCode$ = function hashCode_11(){
  var hash;
  hash = 217 + (null == this.name_0?0:getHashCode_0(this.name_0)) + $hashCode_5(this.value_0);
  return hash;
}
;
var Lcom_sap_spe_condmgnt_finding_bo_ConditionAccessTimestamp_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionAccessTimestamp', 179, Ljava_lang_Object_2_classLit);
function $getTimestamp(this$static, conditionType){
  if (conditionType) {
    return $getTimestamp_0(this$static, conditionType.conditionTypeTO.accessTimestamp);
  }
  return null;
}

function $getTimestamp_0(this$static, conditionAccessTimestampName){
  var obj;
  if (conditionAccessTimestampName != null && !$equals_7(conditionAccessTimestampName, '')) {
    obj = $getStringValue(this$static.timestamps, conditionAccessTimestampName);
    if (obj != null) {
      return dynamicCast(obj, 288);
    }
  }
  return null;
}

function $isStepModified(this$static, conditionType){
  var obj;
  if (!!conditionType && !!this$static.modifiedTimestamps) {
    if (conditionType.conditionTypeTO.accessTimestamp != null) {
      obj = $getStringValue(this$static.modifiedTimestamps, conditionType.conditionTypeTO.accessTimestamp);
      if (obj == null) {
        return false;
      }
      return dynamicCast(obj, 67).value_0;
    }
  }
  return false;
}

function $newConditionFindingIsPerformed_0(this$static){
  var iter;
  $reset(this$static.modifiedTimestamps);
  iter = $iterator(new AbstractMap$1(this$static.timestamps));
  while ($hasNext(iter.val$outerIter2)) {
    $put_0(this$static.modifiedTimestamps, $next_1(iter), ($clinit_Boolean() , FALSE));
  }
}

function $setTimestamp(this$static, timestamp){
  var oldTimestamp, ts;
  if (timestamp.value_0) {
    ts = dynamicCast($putStringValue(this$static.timestamps, timestamp.name_0, timestamp), 179);
    if (ts) {
      oldTimestamp = ts.value_0;
      if (!$equals_5(oldTimestamp, timestamp.value_0)) {
        $putStringValue(this$static.modifiedTimestamps, timestamp.name_0, ($clinit_Boolean() , TRUE));
        return ts;
      }
    }
     else {
      $putStringValue(this$static.modifiedTimestamps, timestamp.name_0, ($clinit_Boolean() , TRUE));
    }
  }
  return null;
}

function ConditionAccessTimestamps(conditionAccessTimestampNames){
  var i_0;
  this.timestamps = new HashMap_0(conditionAccessTimestampNames.length);
  this.modifiedTimestamps = new HashMap_0(conditionAccessTimestampNames.length);
  if (conditionAccessTimestampNames != null) {
    for (i_0 = 0; i_0 < conditionAccessTimestampNames.length; i_0++) {
      $put_0(this.timestamps, conditionAccessTimestampNames[i_0], null);
    }
  }
}

defineClass(598, 1, $intern_21, ConditionAccessTimestamps);
var Lcom_sap_spe_condmgnt_finding_bo_ConditionAccessTimestamps_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionAccessTimestamps', 598, Ljava_lang_Object_2_classLit);
function $clinit_ConditionComparator(){
  $clinit_ConditionComparator = emptyMethod;
  INSTANCE_0 = new ConditionComparator;
}

function ConditionComparator(){
}

defineClass(605, 1, $intern_21, ConditionComparator);
_.compare = function compare_1(condition1, condition2){
  var compare, cond1, cond2;
  cond1 = dynamicCast(condition1, 65);
  cond2 = dynamicCast(condition2, 65);
  compare = cond1.getStepNumber_0() - cond2.getStepNumber_0();
  if (compare != 0) {
    return compare;
  }
  return cond1.getCounter_0() - cond2.getCounter_0();
}
;
var INSTANCE_0;
var Lcom_sap_spe_condmgnt_finding_bo_ConditionComparator_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionComparator', 605, Ljava_lang_Object_2_classLit);
function $clinit_ConditionFindingManager(){
  $clinit_ConditionFindingManager = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_finding_bo_ConditionFindingManager_2_classLit);
  RELEASED = initValues(getClassLiteralForArray(C_classLit, 1), $intern_4, 0, 7, [32]);
  SIMULATION = initValues(getClassLiteralForArray(C_classLit, 1), $intern_4, 0, 7, [32, 66]);
  bool_true = new Boolean_0(true);
  new Boolean_0(false);
  VARIABLE_KEY_COMPARATOR = new ConditionFindingManager$1;
}

function $_areAttributesModified(this$static, access){
  var documentField, i_0, maps;
  maps = access.attributeMaps;
  for (i_0 = 0; i_0 < maps.length; i_0++) {
    documentField = maps[i_0].documentAttributeClass;
    if (!!documentField && $isAttributeModified(this$static.attributeEnvironment, documentField.fieldTO.name_0)) {
      return true;
    }
  }
  return false;
}

function $_checkRequirement(){
  return true;
}

function $_getTableAttributeBindings(this$static, access){
  var addInitial, attributeBinding, attributeMap, attributeValues, c, conditionTable, directValue, documentField, furtherAttributeValue, i_0, newAttributeValues, tableAttributeBindings, varKeys;
  conditionTable = access.conditionTable;
  varKeys = conditionTable.variableKeys;
  tableAttributeBindings = initDim(Lcom_sap_spe_condmgnt_masterdata_ITableAttributeBinding_2_classLit, $intern_15, 285, varKeys.length, 0, 1);
  $getMasterDataEngine(factory_2, access.accessSequence.accessSequenceTO.usage);
  for (i_0 = 0; i_0 < varKeys.length; i_0++) {
    attributeMap = $getAttributeMap(access, dynamicCast(varKeys[i_0], 60).field.fieldTO.name_0);
    if (!attributeMap) {
      initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [dynamicCast(varKeys[i_0], 60).field.fieldTO.name_0, conditionTable.conditionTableTO.conditionTableFullName, access.accessSequence.accessSequenceTO.name_0, '' + access.accessTO.accessNumber]);
      throw new ConditionInconsistentDBException(30);
    }
    switch (attributeMap.attributeMapTO.accessFieldType) {
      case 32:
        {
          directValue = attributeMap.attributeMapTO.directValue;
          if (directValue == null) {
            documentField = attributeMap.documentAttributeClass;
            attributeBinding = dynamicCast($getAttributeBinding_0(this$static, documentField.fieldTO.name_0), 156);
            attributeBinding.attributeMap = attributeMap;
            if (attributeBinding.values.length == 0 && attributeMap.attributeMapTO.initialValueAllowed) {
              furtherAttributeValue = attributeMap.tableAttributeClass.isGuid?'00000000000000000000000000000000':'';
              attributeBinding.values = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [furtherAttributeValue]);
              attributeBinding.directValueUsageIndicator = true;
            }
            setCheck(tableAttributeBindings, i_0, attributeBinding);
          }
           else {
            setCheck(tableAttributeBindings, i_0, new TableAttributeBinding(varKeys[i_0], initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [directValue])));
            tableAttributeBindings[i_0].setDirectValueUsageIndicator(true);
          }
          break;
        }

      case 65:
        {
          this$static.hierarchyAccess = true;
          documentField = attributeMap.documentAttributeClass;
          attributeBinding = dynamicCast($getAttributeBinding_0(this$static, documentField.fieldTO.name_0), 156);
          furtherAttributeValue = attributeMap.tableAttributeClass.isGuid?'00000000000000000000000000000000':'';
          attributeValues = attributeBinding.values;
          addInitial = true;
          for (c = 0; c < attributeValues.length; c++) {
            if ($equals_7(attributeValues[c], furtherAttributeValue)) {
              addInitial = false;
              break;
            }
          }
          if (addInitial) {
            newAttributeValues = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, attributeValues.length + 1, 4, 1);
            newAttributeValues[0] = furtherAttributeValue;
            arraycopy(attributeValues, 0, newAttributeValues, 1, attributeValues.length);
            setCheck(tableAttributeBindings, i_0, new TableAttributeBinding(varKeys[i_0], newAttributeValues));
          }
           else {
            attributeBinding.attributeMap = attributeMap;
            setCheck(tableAttributeBindings, i_0, attributeBinding);
          }
          break;
        }

      case 98:
        setCheck(tableAttributeBindings, i_0, new TableAttributeBinding(varKeys[i_0], ($clinit_IAttributeBinding() , INITIAL_ATTRIBUTE_VALUE)));
        tableAttributeBindings[i_0].setKeyFieldNotUsed(true);
    }
    tableAttributeBindings[i_0].getTableAttributeClass().field.applicationFieldTO.isMultiValued_0 && (this$static.multivaluedAttributeExist = true);
  }
  return tableAttributeBindings;
}

function $_isOldAccessRequired(this$static, access){
  var obj;
  obj = $get_12(this$static.oldAccessRequirementStati, access);
  if (obj == null || equals_Ljava_lang_Object__Z__devirtual$(obj, ($clinit_Boolean() , TRUE))) {
    return true;
  }
  return false;
}

function $_isOldStepRequired(this$static, step){
  var obj;
  obj = $get_12(this$static.oldStepRequirementStati, step);
  if (obj == null || equals_Ljava_lang_Object__Z__devirtual$(obj, ($clinit_Boolean() , TRUE))) {
    return true;
  }
  return false;
}

function $addCondition(this$static, condition){
  while (!$add_5(this$static.conditions, condition)) {
    ++condition.counter;
  }
}

function $calculateHierarchyAccessPriority(condRecord, attrMap){
  var condRecPriorityValue, j, value_0;
  condRecPriorityValue = new BitArray;
  for (j = 0; j < attrMap.length; j++) {
    if (attrMap[j].attributeMapTO.accessFieldType == 65) {
      value_0 = condRecord.getVariableKeyValue(attrMap[j].tableAttributeClass.field.fieldTO.name_0);
      $equals_7(value_0, '') || $equals_7(value_0, '00000000000000000000000000000000') || $setBit(condRecPriorityValue, attrMap[j].attributeMapTO.evaluationPriority);
    }
  }
  return condRecPriorityValue;
}

function $conditionsAreUpToDate(this$static){
  var accessCount, accessSequence, accesses, conditionType, step, stepCount, steps;
  steps = this$static.procedure.pricingSteps;
  for (stepCount = 0; stepCount < steps.length; stepCount++) {
    step = steps[stepCount];
    $put_0(this$static.oldStepRequirementStati, step, bool_true);
    conditionType = step.conditionType;
    if (conditionType) {
      accessSequence = conditionType.accessSequence;
      if (accessSequence) {
        accesses = accessSequence.accesses;
        for (accessCount = 0; accessCount < accesses.length; accessCount++) {
          $put_0(this$static.oldAccessRequirementStati, accesses[accessCount], bool_true);
        }
      }
    }
  }
}

function $determineConditionRecordsForHierarchyAccess(this$static, access, conditionRecords){
  var attrMap, attributeBindings, condRec, condRecWorkPkg, condRecsAfterPriorityEvltnFromCurrntWrkPkg, conditionRecordsAfterPriorityEvaltn, condnRecWrkPkgsBeforePriorityEvaltn, currentCondRecWorkPkg, currentPrio, highestPrio, i_0, i0, j, lastRecIndx, length_0, multiValueAttributeName, multiValuedAttribCount, mutliValueAttributeBinding, newCondRecs, numOfRecordsInWrkPkg, numOfWrkPkgsToProcess, oldValue, resultRecCountFromCurrentWrkPkg, value_0;
  if (conditionRecords.length < 2) {
    return conditionRecords;
  }
  mutliValueAttributeBinding = null;
  if (this$static.multivaluedAttributeExist) {
    try {
      attributeBindings = $_getTableAttributeBindings(this$static, access);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 42)) {
        throw new ConditionRuntimeException(0);
      }
       else 
        throw unwrap($e0);
    }
    length_0 = attributeBindings.length;
    multiValuedAttribCount = 0;
    for (i0 = 0; i0 < length_0; i0++) {
      attrMap = $getAttributeMap(access, attributeBindings[i0].getName_0());
      if (attributeBindings[i0].getTableAttributeClass().field.applicationFieldTO.isMultiValued_0) {
        if (attrMap.attributeMapTO.accessFieldType == 65) {
          initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [attributeBindings[i0].getName_0(), '' + (new Integer(access.accessTO.accessNumber)).value_0, access.accessSequence.accessSequenceTO.name_0]);
          $clinit_Configuration();
          return initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, 0, 0, 1);
        }
        if (multiValuedAttribCount > 1) {
          initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['' + (new Integer(access.accessTO.accessNumber)).value_0, access.accessSequence.accessSequenceTO.name_0]);
          $clinit_Configuration();
          return initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, 0, 0, 1);
        }
        mutliValueAttributeBinding = attributeBindings[i0];
        ++multiValuedAttribCount;
      }
    }
  }
  condnRecWrkPkgsBeforePriorityEvaltn = new ArrayList;
  length_0 = conditionRecords.length;
  if (mutliValueAttributeBinding) {
    condRecWorkPkg = null;
    multiValueAttributeName = mutliValueAttributeBinding.getName_0();
    oldValue = null;
    lastRecIndx = length_0 - 1;
    for (i0 = 0; i0 < length_0; i0++) {
      value_0 = conditionRecords[i0].getVariableKeyValue(multiValueAttributeName);
      if ($equals_7(value_0, oldValue)) {
        $add_3(condRecWorkPkg, conditionRecords[i0]);
      }
       else {
        i0 != 0 && (setCheck(condnRecWrkPkgsBeforePriorityEvaltn.array, condnRecWrkPkgsBeforePriorityEvaltn.array.length, condRecWorkPkg) , true);
        condRecWorkPkg = new ArrayList;
        $add_3(condRecWorkPkg, conditionRecords[i0]);
        oldValue = value_0;
      }
      i0 == lastRecIndx && (setCheck(condnRecWrkPkgsBeforePriorityEvaltn.array, condnRecWrkPkgsBeforePriorityEvaltn.array.length, condRecWorkPkg) , true);
    }
  }
   else {
    condRecWorkPkg = new ArrayList;
    for (i0 = 0; i0 < length_0; i0++) {
      $add_3(condRecWorkPkg, conditionRecords[i0]);
    }
    setCheck(condnRecWrkPkgsBeforePriorityEvaltn.array, condnRecWrkPkgsBeforePriorityEvaltn.array.length, condRecWorkPkg);
  }
  conditionRecordsAfterPriorityEvaltn = new ArrayList_0(condnRecWrkPkgsBeforePriorityEvaltn.array.length);
  numOfWrkPkgsToProcess = condnRecWrkPkgsBeforePriorityEvaltn.array.length;
  condRecsAfterPriorityEvltnFromCurrntWrkPkg = new ArrayList;
  for (i_0 = 0; i_0 < numOfWrkPkgsToProcess; i_0++) {
    currentCondRecWorkPkg = (checkElementIndex(i_0, condnRecWrkPkgsBeforePriorityEvaltn.array.length) , dynamicCast(condnRecWrkPkgsBeforePriorityEvaltn.array[i_0], 33));
    resultRecCountFromCurrentWrkPkg = 0;
    numOfRecordsInWrkPkg = currentCondRecWorkPkg.size_1();
    if (numOfRecordsInWrkPkg > 1) {
      highestPrio = 0;
      attrMap = access.attributeMaps;
      for (j = 0; j < numOfRecordsInWrkPkg; j++) {
        condRec = dynamicCast(currentCondRecWorkPkg.get_5(j), 45);
        currentPrio = $calculateHierarchyAccessPriority(condRec, attrMap);
        if (currentPrio.value_0 == highestPrio) {
          ++resultRecCountFromCurrentWrkPkg;
          setCheck(condRecsAfterPriorityEvltnFromCurrntWrkPkg.array, condRecsAfterPriorityEvltnFromCurrntWrkPkg.array.length, condRec);
        }
         else if (currentPrio.value_0 > highestPrio) {
          resultRecCountFromCurrentWrkPkg = 1;
          highestPrio = currentPrio.value_0;
          setCheck(condRecsAfterPriorityEvltnFromCurrntWrkPkg.array, condRecsAfterPriorityEvltnFromCurrntWrkPkg.array.length, condRec);
        }
      }
      $addAll_0(conditionRecordsAfterPriorityEvaltn, new AbstractList$SubList(condRecsAfterPriorityEvltnFromCurrntWrkPkg, condRecsAfterPriorityEvltnFromCurrntWrkPkg.array.length - resultRecCountFromCurrentWrkPkg, condRecsAfterPriorityEvltnFromCurrntWrkPkg.array.length));
      condRecsAfterPriorityEvltnFromCurrntWrkPkg.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
    }
     else {
      condRec = dynamicCast(currentCondRecWorkPkg.get_5(0), 45);
      setCheck(conditionRecordsAfterPriorityEvaltn.array, conditionRecordsAfterPriorityEvaltn.array.length, condRec);
    }
  }
  newCondRecs = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, conditionRecordsAfterPriorityEvaltn.array.length, 0, 1);
  return dynamicCast($toArray_1(conditionRecordsAfterPriorityEvaltn, newCondRecs), 49);
}

function $determineConditionRecordsForSimulation(conditionRecords){
  var condRecords, i_0, oldConditionRecord, recordsToSurvive, survivedRecords;
  if (conditionRecords.length < 2) {
    return conditionRecords;
  }
  recordsToSurvive = new TreeMap_0(VARIABLE_KEY_COMPARATOR);
  for (i_0 = 0; i_0 < conditionRecords.length; i_0++) {
    oldConditionRecord = dynamicCast($put_3(recordsToSurvive, conditionRecords[i_0], conditionRecords[i_0]), 45);
    !!oldConditionRecord && oldConditionRecord.getReleaseStatus_0() == 66 && $put_3(recordsToSurvive, oldConditionRecord, oldConditionRecord);
  }
  survivedRecords = new AbstractMap$2(recordsToSurvive);
  condRecords = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, survivedRecords.this$01.size_1(), 0, 1);
  return dynamicCast($toArray(survivedRecords, condRecords), 49);
}

function $determineConditionTypesToSearchFor(this$static, determineAllCondition){
  var accessCount, accessSequence, accesses, conditionType, step, stepCount, steps;
  if (!this$static.determineConditionTypesToSearchFor) {
    this$static.determineConditionTypesToSearchFor = true;
    return;
  }
  $reset(this$static.conditionTypesToSearchFor.map_0);
  steps = this$static.procedure.pricingSteps;
  if (determineAllCondition) {
    for (stepCount = 0; stepCount < steps.length; stepCount++) {
      conditionType = steps[stepCount].conditionType;
      !!conditionType && $add_4(this$static.conditionTypesToSearchFor, conditionType.conditionTypeTO.name_0);
    }
  }
   else {
    for (stepCount = 0; stepCount < steps.length; stepCount++) {
      step = steps[stepCount];
      conditionType = step.conditionType;
      if (conditionType) {
        if ($isConditionFindingRequiredForStep(this$static, step)) {
          $add_4(this$static.conditionTypesToSearchFor, conditionType.conditionTypeTO.name_0);
          continue;
        }
        if ($isStepModified(this$static.timestamps, step.conditionType)) {
          $add_4(this$static.conditionTypesToSearchFor, conditionType.conditionTypeTO.name_0);
          continue;
        }
        accessSequence = conditionType.accessSequence;
        if (accessSequence) {
          accesses = accessSequence.accesses;
          for (accessCount = 0; accessCount < accesses.length; accessCount++) {
            if ($_areAttributesModified(this$static, accesses[accessCount]) || !$_isOldAccessRequired(this$static, accesses[accessCount])) {
              $add_4(this$static.conditionTypesToSearchFor, conditionType.conditionTypeTO.name_0);
              break;
            }
          }
        }
      }
    }
  }
}

function $determineConditions(this$static, redetermineAllConditionsParam){
  var conditionArray, redetermineAllConditions;
  redetermineAllConditions = redetermineAllConditionsParam;
  redetermineAllConditionsParam && $removeOldConditions(this$static);
  if (!this$static.conditions) {
    this$static.conditions = new TreeSet_0(($clinit_ConditionComparator() , $clinit_ConditionComparator() , INSTANCE_0));
    redetermineAllConditions = true;
  }
  $determineConditionTypesToSearchFor(this$static, redetermineAllConditions);
  $removeConditionsToSearchFor(this$static);
  this$static.performTrace && $addTracer(this$static.conditionFindingTracer, new Tracer(this$static.conditionFindingTracer.traces.map_0.size_1()));
  $determineConditionsForProcedure(this$static);
  $newConditionFindingIsPerformed_0(this$static.timestamps);
  $newConditionFindingIsPerformed(this$static.attributeEnvironment);
  conditionArray = initDim(Lcom_sap_spe_condmgnt_finding_ICondition_2_classLit, $intern_15, 65, this$static.conditions.map_0.size_1(), 0, 1);
  this$static.conditions.toArray_0(conditionArray);
  return conditionArray;
}

function $determineConditionsForAccess(this$static, step, access, timestamp){
  var aiex, conditionCount, conditionRecordCount, conditionRecordFound, conditionRecords, conditionTable, foundConditions, indx, masterDataEngine, releaseStatus, tableAttributeBindings, trace;
  $put_0(this$static.oldAccessRequirementStati, access, bool_true);
  conditionRecordFound = false;
  conditionTable = access.conditionTable;
  if (conditionTable) {
    masterDataEngine = $getMasterDataEngine(factory_2, step.conditionType.conditionTypeTO.usage);
    this$static.hierarchyAccess = false;
    this$static.multivaluedAttributeExist = false;
    try {
      tableAttributeBindings = $_getTableAttributeBindings(this$static, access);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 42)) {
        throw new ConditionRuntimeException(0);
      }
       else 
        throw unwrap($e0);
    }
    this$static.conditionsForAccessSequence.attrValue != null && (tableAttributeBindings = $calculateTableAttributeBinding(this$static.conditionsForAccessSequence, tableAttributeBindings));
    if (tableAttributeBindings.length == 0) {
      return false;
    }
    trace = null;
    this$static.performTrace && (trace = new MasterdataTrace);
    this$static.simulation?(releaseStatus = SIMULATION):(releaseStatus = RELEASED);
    conditionRecords = $getConditionRecords_1(step.conditionType, access, timestamp, masterDataEngine, tableAttributeBindings, releaseStatus, this$static.hierarchyAccess, trace);
    this$static.simulation && (conditionRecords = $determineConditionRecordsForSimulation(conditionRecords));
    this$static.hierarchyAccess && (conditionRecords = $determineConditionRecordsForHierarchyAccess(this$static, access, conditionRecords));
    this$static.performTrace && $addMasterdataTrace(this$static.conditionFindingTracer, trace, access, tableAttributeBindings);
    if (conditionRecords.length > 0) {
      conditionRecordFound = true;
      for (conditionRecordCount = 0; conditionRecordCount < conditionRecords.length; conditionRecordCount++) {
        if (conditionRecords[conditionRecordCount]) {
          foundConditions = $determineConditionsForConditionRecordAndItsSupplConditionRecords(this$static, step, access, conditionRecords[conditionRecordCount], timestamp);
          if (access.accessTO.exclusiveAccess) {
            $clinit_Location();
            try {
              $calculateAttributeValues(this$static.conditionsForAccessSequence, tableAttributeBindings, foundConditions);
            }
             catch ($e1) {
              $e1 = wrap($e1);
              if (instanceOf($e1, 201)) {
                aiex = $e1;
                for (indx = 0; indx < conditionRecords.length; indx++) {
                  debugT('VARNUMH = ' + conditionRecords[indx].getId_0() + ', AttribValue = ' + conditionRecords[indx].getVariableKeyValue('VARCOND'));
                  debugT('Validity Strat = ' + $formatYYYYMMDD(conditionRecords[indx].getValidityStart_0()) + ', Validity End = ' + $formatYYYYMMDD(conditionRecords[indx].getValidityEnd_0()));
                }
                throw aiex;
              }
               else 
                throw unwrap($e1);
            }
            tableAttributeBindings = $calculateTableAttributeBinding(this$static.conditionsForAccessSequence, tableAttributeBindings);
          }
          for (conditionCount = 0; conditionCount < foundConditions.length; conditionCount++) {
            $addCondition_0(this$static, foundConditions[conditionCount]);
          }
        }
      }
    }
  }
  return conditionRecordFound;
}

function $determineConditionsForAccessSequence(this$static, step, accessSequence, timestamp){
  var accessCount, accesses, conditionRecordFound, performAccess, trAccess, tracerStep;
  conditionRecordFound = false;
  this$static.conditionsForAccessSequence.attrValue = null;
  performAccess = true;
  accesses = accessSequence.accesses;
  for (accessCount = 0; accessCount < accesses.length; accessCount++) {
    if (performAccess) {
      conditionRecordFound = $determineConditionsForAccess(this$static, step, accesses[accessCount], timestamp);
      if (conditionRecordFound && (accesses[accessCount].accessTO.exclusiveAccess || this$static.stopAfterFirstConditionRecordFound) && this$static.conditionsForAccessSequence.attrValue == null) {
        if (!this$static.performTrace) {
          break;
        }
        performAccess = false;
      }
    }
     else if (this$static.performTrace) {
      tracerStep = $getCurrentTracerStep(this$static.conditionFindingTracer);
      trAccess = new TracerAccess_0(accesses[accessCount]);
      $add_5(tracerStep.accesses, trAccess);
    }
  }
  return conditionRecordFound;
}

function $determineConditionsForConditionRecordAndItsSupplConditionRecords(this$static, step, access, conditionRecord, conditionFindingTimestamp){
  var conditionArray, conditionList, conds, i_0, j, j0, supplCondRecs, supplConds, tracer;
  conds = $determineConditionsForConditionRecord(this$static, step, access, conditionRecord, conditionFindingTimestamp);
  supplCondRecs = conditionRecord.getSupplementaryConditionRecords();
  conditionList = null;
  for (i_0 = 0; i_0 < supplCondRecs.length; i_0++) {
    if (!conditionList) {
      conditionList = new ArrayList_0(conds.length + supplCondRecs.length);
      for (j0 = 0; j0 < conds.length; j0++) {
        $add_3(conditionList, conds[j0]);
      }
    }
    if (this$static.performTrace) {
      tracer = $getCurrentTracer(this$static.conditionFindingTracer);
      $getCurrentTracerStep(this$static.conditionFindingTracer);
      $addTracerStepForSupplemantaryConditions(tracer, supplCondRecs[i_0].getConditionType_2());
      dynamicCast(getKeyOrNSE(tracer.steps.map_0.getLastEntry()), 361);
    }
    supplConds = $determineConditionsForConditionRecord(this$static, step, access, supplCondRecs[i_0], conditionFindingTimestamp);
    for (j = 0; j < supplConds.length; j++) {
      $add_3(conditionList, supplConds[j]);
    }
  }
  if (!conditionList) {
    return conds;
  }
  conditionArray = initDim(Lcom_sap_spe_condmgnt_finding_ICondition_2_classLit, $intern_15, 65, conditionList.array.length, 0, 1);
  $toArray_1(conditionList, conditionArray);
  return conditionArray;
}

function $determineConditionsForConditionType(this$static, step, conditionType){
  var accessTimestamp, conditionRecordFound;
  conditionRecordFound = false;
  accessTimestamp = $getAccessTimestamp(this$static, conditionType);
  if (!accessTimestamp) {
    this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
    return false;
  }
  $contains_0(this$static.conditionTypesToSearchFor, conditionType.conditionTypeTO.name_0)?(conditionRecordFound = $determineConditionsForConditionType_1(this$static, step, conditionType, accessTimestamp)):this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
  return conditionRecordFound;
}

function $determineConditionsForConditionType_0(this$static, step, conditionType, timestamp){
  var accessSequence, conditionRecordFound;
  this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
  conditionRecordFound = false;
  accessSequence = conditionType.accessSequence;
  accessSequence?(conditionRecordFound = $determineConditionsForAccessSequence(this$static, step, accessSequence, timestamp)):this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
  return conditionRecordFound;
}

function $determineConditionsForProcedure(this$static){
  var conditionRecordFound, stepCount, steps;
  steps = this$static.procedure.pricingSteps;
  for (stepCount = 0; stepCount < steps.length; stepCount++) {
    conditionRecordFound = $determineConditionsForStep(this$static, steps[stepCount]);
    if (conditionRecordFound && this$static.stopAfterFirstConditionRecordFound) {
      return;
    }
  }
}

function $determineConditionsForRequiredStep(this$static, step){
  var conditionType;
  conditionType = step.conditionType;
  if (conditionType) {
    return $determineConditionsForConditionType(this$static, step, conditionType);
  }
  return false;
}

function $determineConditionsForStep(this$static, step){
  var conditionRecordFound, tracer;
  $put_0(this$static.oldStepRequirementStati, step, bool_true);
  if (this$static.performTrace) {
    tracer = $getCurrentTracer(this$static.conditionFindingTracer);
    $addTracerStep(tracer, new TracerStep_0(step, step.stepTO.counter, step.conditionType));
  }
  conditionRecordFound = $determineConditionsForRequiredStep_0(this$static, step);
  return conditionRecordFound;
}

function $getAccessTimestamp(this$static, conditionType){
  var accessTimestamp, time;
  accessTimestamp = null;
  if (this$static.timestamps) {
    time = $getTimestamp(this$static.timestamps, conditionType);
    !!time && (accessTimestamp = time.value_0);
  }
  return accessTimestamp;
}

function $getAttributeBinding_0(this$static, name_0){
  return $getAttributeBinding(this$static.attributeEnvironment, name_0);
}

function $getConditions(this$static, fromStep, toStep){
  var subSet;
  $setStepNumber(this$static.SEARCH_CONDITION_FROM, fromStep);
  $setStepNumber(this$static.SEARCH_CONDITION_TO, toStep + 1);
  subSet = $subSet(this$static.conditions, this$static.SEARCH_CONDITION_FROM, this$static.SEARCH_CONDITION_TO);
  return subSet;
}

function $removeCondition(this$static, condition){
  var conditionType;
  conditionType = condition.getStep().conditionType;
  if (!conditionType || $contains_0(this$static.conditionTypesToSearchFor, conditionType.conditionTypeTO.name_0)) {
    if (!condition.getConditionRecord()) {
      return true;
    }
    return !instanceOf(condition.getConditionRecord(), 133);
  }
  return false;
}

function $removeConditionsToSearchFor(this$static){
  var condition, conditionRecord, i_0, iterator, iterator0, supplCondRecs, varnumhsToRemove;
  varnumhsToRemove = new HashSet;
  for (iterator0 = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator0.val$entryIterator2.iter);) {
    condition = dynamicCast($next_3(iterator0), 65);
    if ($removeCondition_0(this$static, condition)) {
      $remove_7(iterator0.val$entryIterator2);
      conditionRecord = condition.getConditionRecord();
      if (conditionRecord) {
        if (!instanceOf(conditionRecord, 133)) {
          supplCondRecs = conditionRecord.getSupplementaryConditionRecords();
          for (i_0 = 0; i_0 < supplCondRecs.length; i_0++) {
            $add_4(varnumhsToRemove, supplCondRecs[i_0].getId_0());
          }
        }
      }
    }
  }
  if (varnumhsToRemove.map_0.size_0 > 0) {
    for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
      condition = dynamicCast($next_3(iterator), 65);
      conditionRecord = condition.getConditionRecord();
      !!conditionRecord && $contains_0(varnumhsToRemove, conditionRecord.getId_0()) && $remove_7(iterator.val$entryIterator2);
    }
  }
}

function $setConditionTypeNamesToSearchFor(this$static, conditionTypeNamesToSearchFor){
  var i_0;
  $reset(this$static.conditionTypesToSearchFor.map_0);
  for (i_0 = 0; i_0 < conditionTypeNamesToSearchFor.length; i_0++) {
    conditionTypeNamesToSearchFor[i_0] != null && $add_4(this$static.conditionTypesToSearchFor, conditionTypeNamesToSearchFor[i_0]);
  }
  $conditionsAreUpToDate(this$static);
  this$static.determineConditionTypesToSearchFor = false;
}

function $setPerformTrace(this$static, performTraceParam){
  if (this$static.performTrace != performTraceParam) {
    performTraceParam && (this$static.conditionFindingTracer = new ConditionFindingTracer);
    this$static.performTrace = performTraceParam;
  }
}

function $setSimulation(this$static, simulation){
  this$static.simulation = simulation;
}

function ConditionFindingManager(procedureParam){
  $clinit_ConditionFindingManager();
  this.SEARCH_CONDITION_FROM = new Condition(0);
  this.SEARCH_CONDITION_TO = new Condition(0);
  this.usage = procedureParam.pricingProcedureTO.usage;
  this.application = procedureParam.pricingProcedureTO.application;
  this.procedure = procedureParam;
  this.performTrace = false;
  this.oldAccessRequirementStati = new HashMap_0(50);
  this.oldStepRequirementStati = new HashMap_0(20);
  try {
    this.relevantAttributes = $getConditionFindingEngine(factory_1, this.usage).getRelevantAttributes(this.application, this.procedure.pricingProcedureTO.name_0);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 42)) {
      $clinit_Configuration();
      throw new ConditionIllegalArgumentException(18);
    }
     else 
      throw unwrap($e0);
  }
  this.conditionsForAccessSequence = new ConditionFindingManager$ConditionsForAccessSequence(this);
  this.timestamps = new ConditionAccessTimestamps(this.relevantAttributes.conditionAccessTimestampNames);
  this.attributeEnvironment = new AttributeEnvironment(this.usage, this.relevantAttributes);
  this.conditionTypesToSearchFor = new HashSet;
  this.determineConditionTypesToSearchFor = true;
}

defineClass(259, 1, {694:1, 695:1, 259:1, 701:1, 3:1});
_.determineConditionTypesToSearchFor = false;
_.hierarchyAccess = false;
_.multivaluedAttributeExist = false;
_.performTrace = false;
_.simulation = false;
_.stopAfterFirstConditionRecordFound = false;
var RELEASED, SIMULATION, VARIABLE_KEY_COMPARATOR, bool_true;
var Lcom_sap_spe_condmgnt_finding_bo_ConditionFindingManager_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionFindingManager', 259, Ljava_lang_Object_2_classLit);
function ConditionFindingManager$1(){
}

defineClass(554, 1, {}, ConditionFindingManager$1);
_.compare = function compare_2(conditionRecord1, conditionRecord2){
  var compare, i_0, record1, record2, values1, values2;
  record1 = dynamicCast(conditionRecord1, 45);
  record2 = dynamicCast(conditionRecord2, 45);
  values1 = record1.getVariableKeyValues();
  values2 = record2.getVariableKeyValues();
  compare = 0;
  for (i_0 = 0; i_0 < values1.length; i_0++) {
    compare = compareTo_7(values1[i_0], values2[i_0]);
    if (compare != 0) {
      break;
    }
  }
  return compare;
}
;
var Lcom_sap_spe_condmgnt_finding_bo_ConditionFindingManager$1_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionFindingManager/1', 554, Ljava_lang_Object_2_classLit);
function $calculateAttributeValues(this$static, tableAttributeBinding, conditionsParam){
  var aiex, attrName, attrValues, attrValuesFound, counter, i_0, indx, j, j0, newAttrValue;
  for (i_0 = 0; i_0 < tableAttributeBinding.length; i_0++) {
    if (tableAttributeBinding[i_0].getTableAttributeClass().field.applicationFieldTO.isMultiValued_0 && !tableAttributeBinding[i_0].isKeyFieldNotUsed()) {
      attrName = tableAttributeBinding[i_0].getName_0();
      attrValues = tableAttributeBinding[i_0].getValues();
      if (attrValues == null) {
        this$static.attrValue = null;
        return;
      }
      attrValuesFound = new HashSet_0(attrValues.length);
      for (j0 = 0; j0 < conditionsParam.length; j0++) {
        $add_4(attrValuesFound, conditionsParam[j0].getConditionRecord().getVariableKeyValue(attrName));
      }
      if (attrValues.length == attrValuesFound.map_0.size_0) {
        this$static.attrValue = null;
        return;
      }
      newAttrValue = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, attrValues.length - attrValuesFound.map_0.size_0, 4, 1);
      counter = 0;
      for (j = 0; j < attrValues.length; j++) {
        if (!$containsKey(attrValuesFound.map_0, attrValues[j])) {
          try {
            newAttrValue[counter] = attrValues[j];
          }
           catch ($e0) {
            $e0 = wrap($e0);
            if (instanceOf($e0, 201)) {
              aiex = $e0;
              $clinit_ConditionFindingManager();
              $clinit_Location();
              for (indx = 0; indx < attrValues.length; indx++) {
              }
              throw aiex;
            }
             else 
              throw unwrap($e0);
          }
          ++counter;
        }
      }
      this$static.attrValue = newAttrValue;
      return;
    }
  }
}

function $calculateTableAttributeBinding(this$static, binding){
  var i_0, newBinding;
  $getMasterDataEngine(factory_2, this$static.this$01.usage);
  newBinding = initDim(Lcom_sap_spe_condmgnt_masterdata_ITableAttributeBinding_2_classLit, $intern_15, 285, binding.length, 0, 1);
  for (i_0 = 0; i_0 < binding.length; i_0++) {
    binding[i_0].getTableAttributeClass().field.applicationFieldTO.isMultiValued_0?setCheck(newBinding, i_0, new TableAttributeBinding(binding[i_0].getTableAttributeClass(), this$static.attrValue)):setCheck(newBinding, i_0, binding[i_0]);
  }
  return newBinding;
}

function ConditionFindingManager$ConditionsForAccessSequence(this$0){
  this.this$01 = this$0;
}

defineClass(553, 1, $intern_21, ConditionFindingManager$ConditionsForAccessSequence);
_.attrValue = null;
var Lcom_sap_spe_condmgnt_finding_bo_ConditionFindingManager$ConditionsForAccessSequence_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionFindingManager/ConditionsForAccessSequence', 553, Ljava_lang_Object_2_classLit);
function $addMasterdataTrace(this$static, trace, access, tableAttributeBindings){
  var i_0, tI, trAccess, trStep, tracingArray;
  trStep = $getCurrentTracerStep(this$static);
  trAccess = new TracerAccess_0(access);
  tI = (tracingArray = initDim(Lcom_sap_spe_condmgnt_masterdata_ITracingInput_2_classLit, {643:1, 3:1, 4:1, 5:1}, 703, trace.traceList.array.length, 0, 1) , dynamicCast($toArray_1(trace.traceList, tracingArray), 643));
  for (i_0 = 0; i_0 < tI.length; i_0++) {
    $addTracerAccessAttributes(trAccess, dynamicCast(tI[i_0], 56).attrValues, tableAttributeBindings, access, dynamicCast(tI[i_0], 56).accessTextNo == 106);
    dynamicCast(tI[i_0], 56);
    dynamicCast(tI[i_0], 56);
    dynamicCast(tI[i_0], 56);
    dynamicCast(tI[i_0], 56);
    $enrichTraceByUsageData(dynamicCast(tI[i_0], 56).applicationAndUsageData);
    if (dynamicCast(tI[i_0], 56).accessTextNo == 103) {
      dynamicCast(tI[i_0], 56);
      dynamicCast(tI[i_0], 56);
      dynamicCast(tI[i_0], 56);
    }
     else {
      dynamicCast(tI[i_0], 56);
      dynamicCast(tI[i_0], 56);
    }
  }
  $add_5(trStep.accesses, trAccess);
}

function $addTracer(this$static, tracer){
  $add_5(this$static.traces, tracer);
}

function $getCurrentTracer(this$static){
  if (this$static.traces.map_0.size_1() == 0) {
    return null;
  }
  return $getTracer(this$static, this$static.traces.map_0.size_1() - 1);
}

function $getCurrentTracerStep(this$static){
  var tracer;
  tracer = $getCurrentTracer(this$static);
  if (!tracer) {
    return null;
  }
  return dynamicCast(getKeyOrNSE(tracer.steps.map_0.getLastEntry()), 361);
}

function $getTracer(this$static, count){
  var tailSet;
  tailSet = $tailSet(this$static.traces, new Tracer(count));
  if (tailSet.map_0.size_1() > 0) {
    return dynamicCast(getKeyOrNSE(tailSet.map_0.getFirstEntry()), 130);
  }
  return null;
}

function ConditionFindingTracer(){
  new Date_0;
  this.traces = new TreeSet_0(($clinit_ConditionFindingTracer$TracerComparator() , $clinit_ConditionFindingTracer$TracerComparator() , INSTANCE_1));
}

defineClass(586, 1, $intern_21, ConditionFindingTracer);
var Lcom_sap_spe_condmgnt_finding_bo_ConditionFindingTracer_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionFindingTracer', 586, Ljava_lang_Object_2_classLit);
function $clinit_ConditionFindingTracer$TracerComparator(){
  $clinit_ConditionFindingTracer$TracerComparator = emptyMethod;
  INSTANCE_1 = new ConditionFindingTracer$TracerComparator;
}

function ConditionFindingTracer$TracerComparator(){
}

defineClass(587, 1, $intern_21, ConditionFindingTracer$TracerComparator);
_.compare = function compare_3(tracer1, tracer2){
  var tr1, tr2;
  tr1 = dynamicCast(tracer1, 130);
  tr2 = dynamicCast(tracer2, 130);
  return tr1.count - tr2.count;
}
;
var INSTANCE_1;
var Lcom_sap_spe_condmgnt_finding_bo_ConditionFindingTracer$TracerComparator_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'ConditionFindingTracer/TracerComparator', 587, Ljava_lang_Object_2_classLit);
function MagicAttributeBinding(field, values){
  $clinit_AttributeBinding();
  AttributeBinding.call(this, field, values);
}

defineClass(156, 581, {115:1, 156:1, 285:1, 3:1}, MagicAttributeBinding);
_.getName_0 = function getName_7(){
  if (this.attributeMap) {
    return this.attributeMap.tableAttributeClass.field.fieldTO.name_0;
  }
  return this.field.fieldTO.name_0;
}
;
_.getTableAttributeClass = function getTableAttributeClass(){
  return this.attributeMap.tableAttributeClass;
}
;
_.getValue = function getValue(){
  return this.values.length > 0?this.values[0]:null;
}
;
_.getValues = function getValues_0(){
  return this.values;
}
;
_.isDirectValueAssigned = function isDirectValueAssigned(){
  return this.directValueUsageIndicator;
}
;
_.isHeaderAttributeBinding = function isHeaderAttributeBinding(){
  return this.field.isHeaderField;
}
;
_.isKeyFieldNotUsed = function isKeyFieldNotUsed(){
  return this.attributeMap.attributeMapTO.accessFieldType == 98;
}
;
_.isMultipleAttributeValue = function isMultipleAttributeValue(){
  return this.values.length > 1;
}
;
_.setDirectValueUsageIndicator = function setDirectValueUsageIndicator(directValueIndicator){
  this.directValueUsageIndicator = directValueIndicator;
}
;
_.setKeyFieldNotUsed = function setKeyFieldNotUsed(b){
}
;
_.directValueUsageIndicator = false;
var Lcom_sap_spe_condmgnt_finding_bo_MagicAttributeBinding_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'MagicAttributeBinding', 156, Lcom_sap_spe_condmgnt_finding_bo_AttributeBinding_2_classLit);
function $clinit_RelevantAttributes(){
  $clinit_RelevantAttributes = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_finding_bo_RelevantAttributes_2_classLit);
}

function $_determineRelevantAttributes(this$static){
  var accessCount, accessRelAttr, accessSequence, accesses, attributeMaps, conditionType, i_0, i0, mapCount, relevantAttributeVector, stepCount, stepRelAttr, steps;
  relevantAttributeVector = new TreeSet;
  if (this$static.procedure) {
    steps = this$static.procedure.pricingSteps;
    for (stepCount = 0; stepCount < steps.length; stepCount++) {
      conditionType = steps[stepCount].conditionType;
      stepRelAttr = $determineRelevantAttributeNames(this$static, steps[stepCount]);
      for (i0 = 0; i0 < stepRelAttr.length; i0++) {
        $add_5(relevantAttributeVector, stepRelAttr[i0]);
      }
      if (conditionType) {
        accessSequence = conditionType.accessSequence;
        if (accessSequence) {
          accesses = accessSequence.accesses;
          for (accessCount = 0; accessCount < accesses.length; accessCount++) {
            accessRelAttr = $determineRelevantAttributeNames_0(this$static, accesses[accessCount]);
            for (i_0 = 0; i_0 < accessRelAttr.length; i_0++) {
              $add_5(relevantAttributeVector, accessRelAttr[i_0]);
            }
            attributeMaps = accesses[accessCount].attributeMaps;
            for (mapCount = 0; mapCount < attributeMaps.length; mapCount++) {
              attributeMaps[mapCount].attributeMapTO.directValue == null && (attributeMaps[mapCount].attributeMapTO.accessFieldType == 32 || attributeMaps[mapCount].attributeMapTO.accessFieldType == 65) && attributeMaps[mapCount].tableAttributeClass.varKeyField && !!attributeMaps[mapCount].documentAttributeClass && $add_5(relevantAttributeVector, attributeMaps[mapCount].documentAttributeClass.fieldTO.name_0);
            }
          }
        }
      }
    }
  }
  this$static.attributeNamesInternal = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, relevantAttributeVector.map_0.size_1(), 4, 1);
  relevantAttributeVector.toArray_0(this$static.attributeNamesInternal);
  this$static.attributeNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, relevantAttributeVector.map_0.size_1(), 4, 1);
  relevantAttributeVector.toArray_0(this$static.attributeNames);
}

function $_determineRelevantConditionAccessTimestamps(this$static){
  var i_0, relevantAttributeVector, steps;
  relevantAttributeVector = new TreeSet;
  if (this$static.procedure) {
    steps = this$static.procedure.pricingSteps;
    for (i_0 = 0; i_0 < steps.length; i_0++) {
      !!steps[i_0].conditionType && steps[i_0].conditionType.conditionTypeTO.accessTimestamp != null && !$equals_7(steps[i_0].conditionType.conditionTypeTO.accessTimestamp, '') && $add_5(relevantAttributeVector, steps[i_0].conditionType.conditionTypeTO.accessTimestamp);
    }
  }
  this$static.conditionAccessTimestampNamesInternal = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, relevantAttributeVector.map_0.size_1(), 4, 1);
  relevantAttributeVector.toArray_0(this$static.conditionAccessTimestampNamesInternal);
  this$static.conditionAccessTimestampNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, relevantAttributeVector.map_0.size_1(), 4, 1);
  relevantAttributeVector.toArray_0(this$static.conditionAccessTimestampNames);
}

function $buildUpCacheForApplicationFieldBOs(this$static){
  var application, applicationField, customizingEngine, i_0, i0;
  this$static.applicationFields = new HashMap;
  customizingEngine = $getCustomizingEngine(factory_0, this$static.procedure.pricingProcedureTO.usage);
  application = this$static.procedure.pricingProcedureTO.application;
  for (i0 = 0; i0 < this$static.attributeNames.length; i0++) {
    applicationField = customizingEngine.getApplicationField(application, this$static.attributeNames[i0]);
    $putStringValue(this$static.applicationFields, this$static.attributeNames[i0], applicationField);
  }
  for (i_0 = 0; i_0 < this$static.attributeNamesInternal.length; i_0++) {
    if ($getStringValue(this$static.applicationFields, this$static.attributeNamesInternal[i_0]) == null) {
      applicationField = customizingEngine.getApplicationField(application, this$static.attributeNamesInternal[i_0]);
      $putStringValue(this$static.applicationFields, this$static.attributeNamesInternal[i_0], applicationField);
    }
  }
}

function $determineRelevantAttributeNames(this$static, step){
  var relevantAttributes, requirementNumber;
  relevantAttributes = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
  requirementNumber = step.stepTO.requirementNumber;
  if (requirementNumber != 0) {
    try {
      $getCustomizingEngine(factory_0, this$static.procedure.pricingProcedureTO.usage).getUserExitFormulas(this$static.procedure.pricingProcedureTO.application, 'REQ');
      null.nullMethod();
      relevantAttributes = null.nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 52)) {
        $clinit_Configuration();
      }
       else 
        throw unwrap($e0);
    }
  }
  return relevantAttributes;
}

function $determineRelevantAttributeNames_0(this$static, access){
  var relevantAttributes, requirementNumber;
  relevantAttributes = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
  requirementNumber = access.accessTO.requirementNumber;
  if (requirementNumber != 0) {
    try {
      $getCustomizingEngine(factory_0, this$static.procedure.pricingProcedureTO.usage).getUserExitFormulas(this$static.procedure.pricingProcedureTO.application, 'REQ');
      null.nullMethod();
      relevantAttributes = null.nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 52)) {
        $clinit_Configuration();
      }
       else 
        throw unwrap($e0);
    }
  }
  return relevantAttributes;
}

function $getRelevantApplicationField(this$static, name_0){
  return dynamicCast($getStringValue(this$static.applicationFields, name_0), 359);
}

function RelevantAttributes(procedureParam){
  $clinit_RelevantAttributes();
  this.procedure = procedureParam;
  $_determineRelevantConditionAccessTimestamps(this);
  $_determineRelevantAttributes(this);
  $buildUpCacheForApplicationFieldBOs(this);
}

defineClass(249, 1, {249:1, 3:1}, RelevantAttributes);
var Lcom_sap_spe_condmgnt_finding_bo_RelevantAttributes_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'RelevantAttributes', 249, Ljava_lang_Object_2_classLit);
function $addTracerStep(this$static, trStep){
  $add_5(this$static.steps, trStep);
}

function $addTracerStepForSupplemantaryConditions(this$static, condType){
  var currentTrStep, newTrStep;
  currentTrStep = dynamicCast(getKeyOrNSE(this$static.steps.map_0.getLastEntry()), 361);
  newTrStep = new TracerStep_1(currentTrStep);
  newTrStep.conditionType = condType;
  newTrStep.count += 1;
  $add_5(this$static.steps, newTrStep);
}

function $getTracerStep(this$static, stepNo){
  var sortedSet, step;
  sortedSet = $headSet(this$static.steps, new TracerStep(stepNo));
  if (sortedSet.map_0.size_1() > 0) {
    step = dynamicCast(getKeyOrNSE(sortedSet.map_0.getLastEntry()), 112);
    return step;
  }
  return null;
}

function Tracer(count){
  this.count = count;
  this.steps = new TreeSet_0(($clinit_Tracer$TracerStepComparator() , $clinit_Tracer$TracerStepComparator() , INSTANCE_2));
}

defineClass(130, 1, {130:1, 3:1}, Tracer);
_.count = 0;
var Lcom_sap_spe_condmgnt_finding_bo_Tracer_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'Tracer', 130, Ljava_lang_Object_2_classLit);
function $clinit_Tracer$TracerStepComparator(){
  $clinit_Tracer$TracerStepComparator = emptyMethod;
  INSTANCE_2 = new Tracer$TracerStepComparator;
}

function Tracer$TracerStepComparator(){
}

defineClass(603, 1, $intern_21, Tracer$TracerStepComparator);
_.compare = function compare_4(tracerStep1, tracerStep2){
  var compare, trStep1, trStep2;
  trStep1 = dynamicCast(tracerStep1, 112);
  trStep2 = dynamicCast(tracerStep2, 112);
  compare = trStep1.stepNo - trStep2.stepNo;
  if (compare != 0) {
    return compare;
  }
  return trStep1.count - trStep2.count;
}
;
var INSTANCE_2;
var Lcom_sap_spe_condmgnt_finding_bo_Tracer$TracerStepComparator_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'Tracer/TracerStepComparator', 603, Ljava_lang_Object_2_classLit);
function $addTracerAccessAttributes(this$static, attrValues, tableAttributeBindings, access, onlyHeaderAttributes){
  var accessAttributes, attrMap, c, originalAttributeValue, valueIndex, trcAttrmap;
  accessAttributes = new TracerAccessAttributes;
  valueIndex = 0;
  for (c = 0; c < tableAttributeBindings.length; c++) {
    attrMap = $getAttributeMap(access, tableAttributeBindings[c].getName_0());
    if (!attrMap) {
      continue;
    }
    if (onlyHeaderAttributes && !tableAttributeBindings[c].isHeaderAttributeBinding() && !tableAttributeBindings[c].isDirectValueAssigned()) {
      ++valueIndex;
      continue;
    }
    tableAttributeBindings[c].getName_0();
    originalAttributeValue = attrValues[valueIndex++];
    $equals_7(originalAttributeValue, '0x12')?($clinit_ResourceAccessor() , $getMessage($getMessageResource(get_0(), (getActiveISOLanguage() , $clinit_LocaleInfo())), 129)):originalAttributeValue;
    $getAttributeMap(access, tableAttributeBindings[c].getTableAttributeClass().field.fieldTO.name_0).attributeMapTO.directValue != null;
    trcAttrmap = new TracerAttributeMap(c);
    $add_5(accessAttributes.accessAttributes, trcAttrmap);
  }
  $add_3(this$static.tracerAccessAttributes, accessAttributes);
  return accessAttributes;
}

function TracerAccess(){
  this.count = $intern_0;
}

function TracerAccess_0(access){
  this.count = access.accessTO.accessNumber;
  this.tracerAccessAttributes = new ArrayList;
}

defineClass(131, 1, {131:1, 3:1}, TracerAccess, TracerAccess_0);
_.count = 0;
var Lcom_sap_spe_condmgnt_finding_bo_TracerAccess_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'TracerAccess', 131, Ljava_lang_Object_2_classLit);
function TracerAccessAttributes(){
  this.accessAttributes = new TreeSet_0(($clinit_TracerAccessAttributes$TracerAttributeSetComparator() , $clinit_TracerAccessAttributes$TracerAttributeSetComparator() , INSTANCE_3));
}

defineClass(612, 1, $intern_21, TracerAccessAttributes);
var Lcom_sap_spe_condmgnt_finding_bo_TracerAccessAttributes_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'TracerAccessAttributes', 612, Ljava_lang_Object_2_classLit);
function $clinit_TracerAccessAttributes$TracerAttributeSetComparator(){
  $clinit_TracerAccessAttributes$TracerAttributeSetComparator = emptyMethod;
  INSTANCE_3 = new TracerAccessAttributes$TracerAttributeSetComparator;
}

function TracerAccessAttributes$TracerAttributeSetComparator(){
}

defineClass(613, 1, $intern_21, TracerAccessAttributes$TracerAttributeSetComparator);
_.compare = function compare_5(tracerAttributeMap1, tracerAttributeMap2){
  var trAttrMap1, trAttrMap2;
  trAttrMap1 = dynamicCast(tracerAttributeMap1, 205);
  trAttrMap2 = dynamicCast(tracerAttributeMap2, 205);
  return trAttrMap1.count - trAttrMap2.count;
}
;
var INSTANCE_3;
var Lcom_sap_spe_condmgnt_finding_bo_TracerAccessAttributes$TracerAttributeSetComparator_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'TracerAccessAttributes/TracerAttributeSetComparator', 613, Ljava_lang_Object_2_classLit);
function TracerAttributeMap(count){
  this.count = count;
}

defineClass(205, 1, {205:1, 3:1}, TracerAttributeMap);
_.count = 0;
var Lcom_sap_spe_condmgnt_finding_bo_TracerAttributeMap_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'TracerAttributeMap', 205, Ljava_lang_Object_2_classLit);
function $getCurrentTracerAccess(this$static){
  if (this$static.accesses.map_0.size_1() == 0) {
    return null;
  }
  return $getTracerAccess(this$static);
}

function $getTracerAccess(this$static){
  var access, sortedSet;
  sortedSet = $headSet(this$static.accesses, new TracerAccess);
  if (sortedSet.map_0.size_1() > 0) {
    access = dynamicCast(getKeyOrNSE(sortedSet.map_0.getLastEntry()), 131);
    return access;
  }
  return null;
}

function TracerStep(stepNo){
  this.stepNo = stepNo;
  this.count = 0;
}

function TracerStep_0(step, count, conditionType){
  this.stepNo = step.stepTO.stepNumber;
  this.requirementNo = step.stepTO.requirementNumber;
  $getDescription_2(step);
  this.count = count;
  this.conditionType = conditionType;
  this.accesses = new TreeSet_0(($clinit_TracerStep$TracerAccessComparator() , $clinit_TracerStep$TracerAccessComparator() , INSTANCE_4));
}

function TracerStep_1(source){
  this.stepNo = source.stepNo;
  this.requirementNo = source.requirementNo;
  this.count = source.count;
  this.conditionType = source.conditionType;
  this.accesses = new TreeSet_0(($clinit_TracerStep$TracerAccessComparator() , $clinit_TracerStep$TracerAccessComparator() , INSTANCE_4));
}

defineClass(112, 1, {361:1, 112:1, 3:1}, TracerStep, TracerStep_0, TracerStep_1);
_.count = 0;
_.requirementNo = 0;
_.stepNo = 0;
var Lcom_sap_spe_condmgnt_finding_bo_TracerStep_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'TracerStep', 112, Ljava_lang_Object_2_classLit);
function $clinit_TracerStep$TracerAccessComparator(){
  $clinit_TracerStep$TracerAccessComparator = emptyMethod;
  INSTANCE_4 = new TracerStep$TracerAccessComparator;
}

function TracerStep$TracerAccessComparator(){
}

defineClass(604, 1, $intern_21, TracerStep$TracerAccessComparator);
_.compare = function compare_6(tracerAccess1, tracerAccess2){
  var trAccess1, trAccess2;
  trAccess1 = dynamicCast(tracerAccess1, 131);
  trAccess2 = dynamicCast(tracerAccess2, 131);
  return trAccess1.count - trAccess2.count;
}
;
var INSTANCE_4;
var Lcom_sap_spe_condmgnt_finding_bo_TracerStep$TracerAccessComparator_2_classLit = createForClass('com.sap.spe.condmgnt.finding.bo', 'TracerStep/TracerAccessComparator', 604, Ljava_lang_Object_2_classLit);
function InvalidSupplementaryCondition(){
  BaseRuntimeException.call(this);
}

defineClass(274, 127, {274:1, 3:1, 9:1, 20:1, 18:1}, InvalidSupplementaryCondition);
var Lcom_sap_spe_condmgnt_finding_exc_InvalidSupplementaryCondition_2_classLit = createForClass('com.sap.spe.condmgnt.finding.exc', 'InvalidSupplementaryCondition', 274, Lcom_sap_vmc_exception_BaseRuntimeException_2_classLit);
function $clinit_ConditionFindingEngine(){
  $clinit_ConditionFindingEngine = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_finding_impl_ConditionFindingEngine_2_classLit);
}

function $createAttributeBinding(this$static, application, attributeName, attributeValue){
  var applicationField, custEng;
  custEng = $getCustomizingEngine(factory_0, this$static.usage);
  applicationField = custEng.getApplicationField(application, attributeName);
  if (!applicationField) {
    $clinit_Location();
    return null;
  }
  return new MagicAttributeBinding(applicationField, attributeValue);
}

function $getProcedure_0(this$static, application, name_0){
  return this$static.customizingEngine.getProcedure_0(application, name_0);
}

defineClass(446, 1, {159:1, 350:1});
_.createAttributeBinding = function createAttributeBinding(applicationField, attributeValues){
  return new MagicAttributeBinding(applicationField, attributeValues);
}
;
_.getRelevantAttributes = function getRelevantAttributes(application, procedureName){
  return $createRelevantAttributes(this.relevantAttributesObjMgr, application, procedureName);
}
;
var Lcom_sap_spe_condmgnt_finding_impl_ConditionFindingEngine_2_classLit = createForClass('com.sap.spe.condmgnt.finding.impl', 'ConditionFindingEngine', 446, Ljava_lang_Object_2_classLit);
function $getConditionFindingEngine(this$static, usage){
  var engine;
  engine = dynamicCast($getStringValue(this$static.engines, usage), 350);
  if (!engine) {
    engine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), usage, 'FIN'), 350);
    $putStringValue(this$static.engines, usage, engine);
  }
  return engine;
}

function ConditionFindingEngineFactoryImpl(){
  this.engines = new HashMap;
}

defineClass(442, 671, {}, ConditionFindingEngineFactoryImpl);
var Lcom_sap_spe_condmgnt_finding_impl_ConditionFindingEngineFactoryImpl_2_classLit = createForClass('com.sap.spe.condmgnt.finding.impl', 'ConditionFindingEngineFactoryImpl', 442, Lcom_sap_spe_condmgnt_finding_ConditionFindingEngineFactory_2_classLit);
function RelevantAttributesBuilder(){
}

defineClass(474, 663, $intern_22, RelevantAttributesBuilder);
_.create_0 = function create_22(keys_0){
  var procedure, relevantAttributes, usage;
  usage = keys_0[1];
  try {
    procedure = $getCustomizingEngine(factory_0, usage).getProcedure_0(keys_0[2], keys_0[3]);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 42)) {
      throw new ConditionRuntimeException(18);
    }
     else 
      throw unwrap($e0);
  }
  relevantAttributes = new RelevantAttributes(procedure);
  return relevantAttributes;
}
;
var Lcom_sap_spe_condmgnt_finding_impl_RelevantAttributesBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.finding.impl', 'RelevantAttributesBuilder', 474, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $createRelevantAttributes(this$static, application, procedureName){
  var key, relevantAttributes;
  key = create_6('RA', this$static.usage, application, procedureName);
  try {
    relevantAttributes = dynamicCast(this$static.cacheFacade.get_3(key, false), 249);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 54)) {
      throw new ConditionInconsistentDBException(18);
    }
     else 
      throw unwrap($e0);
  }
  return relevantAttributes;
}

function RelevantAttributesObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(529, 69, {}, RelevantAttributesObjectManager);
var Lcom_sap_spe_condmgnt_finding_impl_RelevantAttributesObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.finding.impl', 'RelevantAttributesObjectManager', 529, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
defineClass(670, 1, {});
var factory_2 = null;
var Lcom_sap_spe_condmgnt_masterdata_ConditionMasterDataEngineFactory_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata', 'ConditionMasterDataEngineFactory', 670, Ljava_lang_Object_2_classLit);
var Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'IConditionRecord');
var Lcom_sap_spe_condmgnt_masterdata_IScaleDimension_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'IScaleDimension');
var Lcom_sap_spe_condmgnt_masterdata_IScaleDimensionAmount_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'IScaleDimensionAmount');
var Lcom_sap_spe_condmgnt_masterdata_ISupplementaryConditionRecord_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'ISupplementaryConditionRecord');
var Lcom_sap_spe_condmgnt_masterdata_ITableAttributeBinding_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'ITableAttributeBinding');
var Lcom_sap_spe_condmgnt_masterdata_ITracingInput_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'ITracingInput');
function $addSupplementaryConditionRecord(this$static, cr){
  if (!!cr && cr.getMainConditionRecord() == this$static) {
    !this$static.supplementaryConditionRecords && (this$static.supplementaryConditionRecords = new TreeSet_0(($clinit_ConditionRecord$ConditionRecordComparator() , $clinit_ConditionRecord$ConditionRecordComparator() , INSTANCE_5)));
    $add_5(this$static.supplementaryConditionRecords, cr);
  }
}

function $getValues(this$static, tableAttributeClasses){
  var i_0, value_0, values;
  values = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, tableAttributeClasses.length, 4, 1);
  for (i_0 = 0; i_0 < tableAttributeClasses.length; i_0++) {
    value_0 = dynamicCastToString(this$static.condRecordTO.applicationAndUsageData.get_4(dynamicCast(tableAttributeClasses[i_0], 60).field.fieldTO.name_0));
    values[i_0] = value_0 != null?value_0:'';
  }
  return values;
}

function ConditionRecord(condRecordTOParam, condTable, condType, scaleParam){
  this.condRecordTO = condRecordTOParam;
  this.scale = scaleParam;
  this.conditionTable = condTable;
  this.conditionType = condType;
}

function getNames(tableAttributeClasses){
  var i_0, names;
  names = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, tableAttributeClasses.length, 4, 1);
  for (i_0 = 0; i_0 < names.length; i_0++) {
    names[i_0] = dynamicCast(tableAttributeClasses[i_0], 60).field.fieldTO.name_0;
  }
  return names;
}

defineClass(110, 1, {45:1, 110:1, 3:1}, ConditionRecord);
_.equals$ = function equals_10(o){
  var condRec;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != this.___clazz$) {
    return false;
  }
  condRec = dynamicCast(o, 45);
  return $equals_7(this.condRecordTO.id_0, condRec.getId_0());
}
;
_.getApplication_0 = function getApplication_8(){
  return this.conditionTable.conditionTableTO.application;
}
;
_.getApplicationAndUsageData_0 = function getApplicationAndUsageData(){
  return new Collections$UnmodifiableMap(this.condRecordTO.applicationAndUsageData);
}
;
_.getConditionTable_1 = function getConditionTable_2(){
  return this.conditionTable;
}
;
_.getConditionType_2 = function getConditionType_2(){
  return this.conditionType;
}
;
_.getId_0 = function getId_2(){
  return this.condRecordTO.id_0;
}
;
_.getReleaseStatus_0 = function getReleaseStatus(){
  return this.condRecordTO.releaseStatus;
}
;
_.getScale = function getScale(){
  return this.scale;
}
;
_.getSupplementaryConditionRecords = function getSupplementaryConditionRecords(){
  var size_0, supplementaryConditionRecordArray;
  size_0 = !this.supplementaryConditionRecords?0:this.supplementaryConditionRecords.map_0.size_1();
  supplementaryConditionRecordArray = initDim(Lcom_sap_spe_condmgnt_masterdata_ISupplementaryConditionRecord_2_classLit, $intern_26, 133, size_0, 0, 1);
  !!this.supplementaryConditionRecords && this.supplementaryConditionRecords.toArray_0(supplementaryConditionRecordArray);
  return supplementaryConditionRecordArray;
}
;
_.getUsage_0 = function getUsage_8(){
  return this.conditionTable.conditionTableTO.usage;
}
;
_.getValidityEnd_0 = function getValidityEnd(){
  return this.condRecordTO.validityEnd;
}
;
_.getValidityStart_0 = function getValidityStart(){
  return this.condRecordTO.validityStart;
}
;
_.getVariableKeyNames = function getVariableKeyNames(){
  return getNames(this.conditionTable.variableKeys);
}
;
_.getVariableKeyValue = function getVariableKeyValue(fieldName){
  return dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4(fieldName));
}
;
_.getVariableKeyValues = function getVariableKeyValues(){
  return $getValues(this, this.conditionTable.variableKeys);
}
;
_.hashCode$ = function hashCode_12(){
  var hash, id_0;
  id_0 = this.condRecordTO.id_0;
  hash = 217 + (null == id_0?0:getHashCode_0(id_0));
  return hash;
}
;
var Lcom_sap_spe_condmgnt_masterdata_bo_ConditionRecord_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'ConditionRecord', 110, Ljava_lang_Object_2_classLit);
function $clinit_ConditionRecord$ConditionRecordComparator(){
  $clinit_ConditionRecord$ConditionRecordComparator = emptyMethod;
  INSTANCE_5 = new ConditionRecord$ConditionRecordComparator;
}

function ConditionRecord$ConditionRecordComparator(){
}

defineClass(558, 1, $intern_21, ConditionRecord$ConditionRecordComparator);
_.compare = function compare_7(record1, record2){
  var cr1, cr2;
  cr1 = dynamicCast(record1, 133);
  cr2 = dynamicCast(record2, 133);
  return cr1.getSupplementaryConditionId_0() - cr2.getSupplementaryConditionId_0();
}
;
var INSTANCE_5;
var Lcom_sap_spe_condmgnt_masterdata_bo_ConditionRecord$ConditionRecordComparator_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'ConditionRecord/ConditionRecordComparator', 558, Ljava_lang_Object_2_classLit);
function Scale(scaleDimensions, scaleRatesParam){
  this.scaleDimensions = scaleDimensions;
  this.scaleRates = scaleRatesParam;
}

defineClass(333, 1, $intern_21, Scale);
var Lcom_sap_spe_condmgnt_masterdata_bo_Scale_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'Scale', 333, Ljava_lang_Object_2_classLit);
function ScaleDefinition(scaleDefinitionTO, scaleLevels){
  this.scaleDefinitionTO = scaleDefinitionTO;
  this.scaleLevels = scaleLevels;
}

defineClass(332, 1, $intern_21, ScaleDefinition);
var Lcom_sap_spe_condmgnt_masterdata_bo_ScaleDefinition_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'ScaleDefinition', 332, Ljava_lang_Object_2_classLit);
function ScaleDimension(scaleDefinitionParam){
  this.scaleDefinition = scaleDefinitionParam;
}

defineClass(71, 1, {684:1, 71:1, 3:1}, ScaleDimension);
var Lcom_sap_spe_condmgnt_masterdata_bo_ScaleDimension_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'ScaleDimension', 71, Ljava_lang_Object_2_classLit);
function ScaleDimensionAmount(scaleDimensionParam, scaleLevelParam){
  this.scaleDimension = scaleDimensionParam;
  this.scaleLevel = scaleLevelParam;
}

defineClass(47, 1, {358:1, 47:1, 3:1}, ScaleDimensionAmount);
var Lcom_sap_spe_condmgnt_masterdata_bo_ScaleDimensionAmount_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'ScaleDimensionAmount', 47, Ljava_lang_Object_2_classLit);
function ScaleLevel(scaleLineId){
  this.scaleLineId = scaleLineId;
}

defineClass(172, 1, {362:1, 172:1, 3:1}, ScaleLevel);
_.getLineId = function getLineId(){
  return this.scaleLineId;
}
;
_.scaleLineId = 0;
var Lcom_sap_spe_condmgnt_masterdata_bo_ScaleLevel_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'ScaleLevel', 172, Ljava_lang_Object_2_classLit);
function ScaleRate(scaleRateTO){
  this.scaleRateTO = scaleRateTO;
}

defineClass(334, 1, $intern_21, ScaleRate);
var Lcom_sap_spe_condmgnt_masterdata_bo_ScaleRate_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'ScaleRate', 334, Ljava_lang_Object_2_classLit);
function SupplementaryConditionRecord(condRecordTO, conditionTable, scale, mainConditionRecord, supplementaryConditionType, supplementaryConditionId){
  ConditionRecord.call(this, condRecordTO, conditionTable, supplementaryConditionType, scale);
  this.supplementaryConditionId = supplementaryConditionId;
  this.mainConditionRecord = mainConditionRecord;
  !!mainConditionRecord && $addSupplementaryConditionRecord(this.mainConditionRecord, this);
}

defineClass(563, 110, {45:1, 133:1, 110:1, 3:1}, SupplementaryConditionRecord);
_.getMainConditionRecord = function getMainConditionRecord(){
  return this.mainConditionRecord;
}
;
_.getSupplementaryConditionId_0 = function getSupplementaryConditionId(){
  return this.supplementaryConditionId;
}
;
_.supplementaryConditionId = 0;
var Lcom_sap_spe_condmgnt_masterdata_bo_SupplementaryConditionRecord_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'SupplementaryConditionRecord', 563, Lcom_sap_spe_condmgnt_masterdata_bo_ConditionRecord_2_classLit);
function $getName_0(this$static){
  if (!this$static._tableAttribute) {
    return null;
  }
  return this$static._tableAttribute.field.fieldTO.name_0;
}

function TableAttributeBinding(tableAttributeClass, values){
  this._tableAttribute = tableAttributeClass;
  this._values = values;
  this._isHeaderAttributeBinding = tableAttributeClass.field.isHeaderField;
}

defineClass(204, 1, {285:1}, TableAttributeBinding);
_.getName_0 = function getName_8(){
  return $getName_0(this);
}
;
_.getTableAttributeClass = function getTableAttributeClass_0(){
  return this._tableAttribute;
}
;
_.getValue = function getValue_0(){
  return this._values.length > 0?this._values[0]:null;
}
;
_.getValues = function getValues_1(){
  return this._values;
}
;
_.isDirectValueAssigned = function isDirectValueAssigned_0(){
  return this.directValueUsageIndicator;
}
;
_.isHeaderAttributeBinding = function isHeaderAttributeBinding_0(){
  return this._isHeaderAttributeBinding;
}
;
_.isKeyFieldNotUsed = function isKeyFieldNotUsed_0(){
  return this.keyFieldNotUsed;
}
;
_.isMultipleAttributeValue = function isMultipleAttributeValue_0(){
  return this._values != null && this._values.length > 1;
}
;
_.setDirectValueUsageIndicator = function setDirectValueUsageIndicator_0(directValueIndicator){
  this.directValueUsageIndicator = directValueIndicator;
}
;
_.setKeyFieldNotUsed = function setKeyFieldNotUsed_0(b){
  this.keyFieldNotUsed = b;
}
;
_.toString$ = function toString_11(){
  var buffer, i_0;
  buffer = new StringBuffer;
  $append_1(buffer, $getName_0(this));
  buffer.string += '={';
  for (i_0 = 0; i_0 < this._values.length; i_0++) {
    $append_1(buffer, this._values[i_0]);
    i_0 < this._values.length - 1 && (buffer.string += ',' , buffer);
  }
  buffer.string += '}';
  return buffer.string;
}
;
_._isHeaderAttributeBinding = false;
_.directValueUsageIndicator = false;
_.keyFieldNotUsed = false;
var Lcom_sap_spe_condmgnt_masterdata_bo_TableAttributeBinding_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.bo', 'TableAttributeBinding', 204, Ljava_lang_Object_2_classLit);
function $clinit_ConditionRecordDAOImpl(){
  $clinit_ConditionRecordDAOImpl = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_masterdata_dao_legacy_ConditionRecordDAOImpl_2_classLit);
}

function $clearBuffer_0(this$static){
  var condArrayList, conditerator, conditionRecordMap, condkey, iterator, key;
  iterator = $iterator(new AbstractMap$1(this$static.conditionRecords));
  while ($hasNext(iterator.val$outerIter2)) {
    key = $next_1(iterator);
    conditionRecordMap = dynamicCast($get_12(this$static.conditionRecords, key), 7);
    conditerator = $iterator(new AbstractMap$1(conditionRecordMap));
    while ($hasNext(conditerator.val$outerIter2)) {
      condkey = $next_1(conditerator);
      condArrayList = dynamicCast(isJavaString(condkey)?$getStringValue(conditionRecordMap, condkey):getEntryValueOrNull($getEntry(conditionRecordMap.hashCodeMap, condkey)), 13);
      condArrayList.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
    }
  }
}

function $createLegacyConditionTableName(conditionTableName){
  var conditionTableNameMap;
  conditionTableNameMap = null;
  try {
    conditionTableNameMap = 'A' + $substring(conditionTableName, conditionTableName.length - 3);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration();
    }
     else 
      throw unwrap($e0);
  }
  return conditionTableNameMap;
}

function $getConditions_0(this$static, conditionTableName, conditionTypeName, timestamp, varKeyValues, Application, Usage){
  var condRecordKey, defaultTimeStamp, i_0, isAfter, isBefore, iter, iter0, key, recordList, recordMap, records, vEnd, vStart, validMap, validRecordList, vkValues;
  vkValues = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 10, 4, 1);
  for (iter0 = new AbstractList$IteratorImpl(varKeyValues); iter0.i < iter0.this$01.size_1();) {
    vkValues = (checkCriticalElement(iter0.i < iter0.this$01.size_1()) , dynamicCast(iter0.this$01.get_5(iter0.last = iter0.i++), 10));
  }
  condRecordKey = create_12(vkValues);
  key = Usage + '|' + 'dynamic' + '|' + conditionTypeName + '|' + conditionTableName + '|' + Application + '|' + condRecordKey;
  defaultTimeStamp = parseyyyyMMddHHmmss(timestamp);
  recordMap = dynamicCast($getStringValue(this$static.conditionRecords, key), 24);
  recordList = new ArrayList;
  if (recordMap) {
    for (iter = recordMap.values_0().iterator(); iter.hasNext();) {
      $addAll_0(recordList, dynamicCast(iter.next(), 33));
    }
    if (recordList.array.length > 0) {
      records = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, recordList.array.length, 0, 1);
      records = dynamicCast($toArray_1(recordList, records), 49);
      for (i_0 = 0; i_0 < records.length; i_0++) {
        vStart = records[i_0].getValidityStart_0();
        vEnd = records[i_0].getValidityEnd_0();
        isAfter = $after_0(vStart, defaultTimeStamp);
        isBefore = $before_0(vEnd, defaultTimeStamp);
        if (!isAfter && !isBefore) {
          validMap = new HashMap;
          validRecordList = new ArrayList;
          $add_3(validRecordList, records[i_0]);
          key == null?$put_1(validMap.hashCodeMap, null, validRecordList):validMap.stringMap.put_1(key, validRecordList);
          return validMap;
        }
      }
    }
  }
  return dynamicCast($getStringValue(this$static.conditionRecords, key), 24);
}

function $getConditions_1(conditionTableName){
  var conditionRecords;
  $createLegacyConditionTableName(conditionTableName);
  conditionRecords = new HashMap;
  return conditionRecords;
}

function $isConditionRecordExists(this$static, Key, condRecord){
  var i_0, isKeyExists, iter, recordList, recordMap, records, vEnd, vStart;
  if (this$static.conditionRecords.size_0 == 0) {
    return false;
  }
   else {
    isKeyExists = $hasStringValue(this$static.conditionRecords, Key);
    if (isKeyExists) {
      recordMap = dynamicCast($getStringValue(this$static.conditionRecords, Key), 24);
      recordList = new ArrayList;
      for (iter = recordMap.values_0().iterator(); iter.hasNext();) {
        $addAll_0(recordList, dynamicCast(iter.next(), 33));
      }
      if (recordList.array.length > 0) {
        records = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, recordList.array.length, 0, 1);
        records = dynamicCast($toArray_1(recordList, records), 49);
        for (i_0 = 0; i_0 < records.length; i_0++) {
          vStart = records[i_0].getValidityStart_0();
          vEnd = records[i_0].getValidityEnd_0();
          if ($compareTo_1(vStart, condRecord.getValidityStart_0()) == 0 && $compareTo_1(vEnd, condRecord.getValidityEnd_0()) == 0) {
            return true;
          }
        }
      }
      return false;
    }
     else {
      return false;
    }
  }
}

function $putConditionRecord(this$static, keyForFacade, record){
  var condRecordTOList, recordSet;
  recordSet = dynamicCast($getStringValue(this$static.conditionRecords, keyForFacade), 24);
  if (!recordSet) {
    recordSet = new HashMap;
    condRecordTOList = new ArrayList;
    condRecordTOList.add_0(record);
    try {
      recordSet.put_0(keyForFacade, condRecordTOList);
      $putStringValue(this$static.conditionRecords, keyForFacade, recordSet);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (!instanceOf($e0, 9))
        throw unwrap($e0);
    }
  }
   else {
    condRecordTOList = dynamicCast(recordSet.get_4(keyForFacade), 33);
    condRecordTOList.add_0(record);
  }
}

function ConditionRecordDAOImpl(){
  $clinit_ConditionRecordDAOImpl();
  this.conditionRecords = new HashMap;
}

defineClass(488, 1, {206:1}, ConditionRecordDAOImpl);
var Lcom_sap_spe_condmgnt_masterdata_dao_legacy_ConditionRecordDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.dao.legacy', 'ConditionRecordDAOImpl', 488, Ljava_lang_Object_2_classLit);
function $getScaleLevel(this$static, scaleId){
  return dynamicCast($removeStringValue(this$static._scaleLevels, scaleId), 33);
}

function $putScaleAdditionalData(this$static, conditionRecordId, fieldName, fieldValue){
  var scaleAdditionalData;
  scaleAdditionalData = dynamicCast($getStringValue(this$static._scaleAdditionalData, conditionRecordId), 24);
  !scaleAdditionalData && (scaleAdditionalData = new HashMap_0(3));
  scaleAdditionalData.put_0(fieldName, fieldValue);
  $putStringValue(this$static._scaleAdditionalData, conditionRecordId, scaleAdditionalData);
}

function $putScaleDefinition(this$static, scaleDefTO){
  $putStringValue(this$static._scaleDefinitions, scaleDefTO.scaleId, scaleDefTO);
}

function $putScaleLevel(this$static, scaleLevelTO){
  var scaleLevels;
  scaleLevels = dynamicCast($getStringValue(this$static._scaleLevels, scaleLevelTO.scaleId), 33);
  !scaleLevels && (scaleLevels = new ArrayList);
  scaleLevels.add_0(scaleLevelTO);
  $putStringValue(this$static._scaleLevels, scaleLevelTO.scaleId, scaleLevels);
}

function $putScaleRate(this$static, scaleRateTO){
  var scaleRates;
  scaleRates = dynamicCast($getStringValue(this$static._scaleRates, scaleRateTO.conditionRecordId), 33);
  !scaleRates && (scaleRates = new ArrayList);
  scaleRates.add_0(scaleRateTO);
  $putStringValue(this$static._scaleRates, scaleRateTO.conditionRecordId, scaleRates);
}

function ScaleDAOImpl(){
  this._scaleDefinitions = new HashMap;
  this._scaleRates = new HashMap;
  this._scaleLevels = new HashMap;
  this._scaleAdditionalData = new HashMap;
}

defineClass(173, 1, {208:1}, ScaleDAOImpl);
var Lcom_sap_spe_condmgnt_masterdata_dao_legacy_ScaleDAOImpl_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.dao.legacy', 'ScaleDAOImpl', 173, Ljava_lang_Object_2_classLit);
function $getConditionRecords(this$static, conditionTable, conditionRecordId){
  var ret;
  ret = $createConditionRecords_0(this$static.conditionRecordObjectManager, conditionTable, conditionRecordId);
  return ret;
}

function ConditionMasterDataEngine(){
  this.conditionRecordObjectManager = new ConditionRecordObjectManager;
  new ConditionRecordSelectionManager;
  new ScaleBuilder;
}

defineClass(445, 1, {159:1, 617:1}, ConditionMasterDataEngine);
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionMasterDataEngine_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionMasterDataEngine', 445, Ljava_lang_Object_2_classLit);
function $getMasterDataEngine(this$static, usage){
  var engine;
  engine = dynamicCast($getStringValue(this$static.engines, usage), 617);
  if (!engine) {
    engine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), usage, 'MAS'), 617);
    $putStringValue(this$static.engines, usage, engine);
  }
  return engine;
}

function ConditionMasterDataEngineFactoryImpl(){
  this.engines = new HashMap;
}

defineClass(441, 670, {}, ConditionMasterDataEngineFactoryImpl);
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionMasterDataEngineFactoryImpl_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionMasterDataEngineFactoryImpl', 441, Lcom_sap_spe_condmgnt_masterdata_ConditionMasterDataEngineFactory_2_classLit);
function $createCacheObject(this$static, conditionTable, condRecordsTO, usage, application, fixPart){
  var cacheMap, condRecord, condRecordTO, condRecordTOKey, conditionRecords, conditionType, entry, iter, iter0, key, recordIter, recordList, records, scale, supplmentaryConditions, supplmentaryList, toKey;
  conditionRecords = new HashMap_0(condRecordsTO.size_0);
  supplmentaryConditions = new HashMap;
  for (iter0 = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(condRecordsTO)).this$01); $hasNext(iter0);) {
    entry = (checkStructuralChange(iter0.this$01, iter0) , checkCriticalElement($hasNext(iter0)) , iter0.last = iter0.current , dynamicCast(iter0.current.next(), 25));
    condRecordTOKey = dynamicCastToString(entry.getKey());
    recordList = dynamicCast(entry.getValue_1(), 33);
    toKey = $substring_0(condRecordTOKey, $indexOf(condRecordTOKey, fromCodePoint(($clinit_CartesianProduct() , 124))) + 1, condRecordTOKey.length);
    key = create_4(fixPart, toKey);
    for (recordIter = recordList.iterator(); recordIter.i < recordIter.this$01.size_1();) {
      condRecordTO = (checkCriticalElement(recordIter.i < recordIter.this$01.size_1()) , dynamicCast(recordIter.this$01.get_5(recordIter.last = recordIter.i++), 104));
      if (condRecordTO.supplementaryConditionId > 1) {
        supplmentaryList = dynamicCast(key == null?getEntryValueOrNull($getEntry(supplmentaryConditions.hashCodeMap, null)):supplmentaryConditions.stringMap.get_0(key), 33);
        if (!supplmentaryList) {
          supplmentaryList = new ArrayList;
          key == null?$put_1(supplmentaryConditions.hashCodeMap, null, supplmentaryList):supplmentaryConditions.stringMap.put_1(key, supplmentaryList);
        }
        supplmentaryList.add_0(condRecordTO);
      }
       else {
        scale = $createScale(usage, condRecordTO, conditionTable);
        try {
          conditionType = $getCustomizingEngine(factory_0, usage).getConditionType_0(application, condRecordTO.conditionType);
        }
         catch ($e0) {
          $e0 = wrap($e0);
          if (instanceOf($e0, 42)) {
            throw new ConditionCacheException(15);
          }
           else 
            throw unwrap($e0);
        }
        condRecord = this$static.createConditionRecord(condRecordTO, conditionTable, conditionType, scale);
        if (condRecord) {
          records = dynamicCast(conditionRecords.get_4(key), 33);
          if (!records) {
            records = new ArrayList_0(2);
            conditionRecords.put_0(key, records);
          }
          records.add_0(condRecord);
        }
      }
    }
  }
  supplmentaryConditions.size_0 > 0 && (conditionRecords = $handleSupplementaryConditionRecords(this$static, usage, supplmentaryConditions, conditionRecords));
  cacheMap = new HashMap_0(conditionRecords.size_1());
  for (iter = conditionRecords.entrySet_0().iterator(); iter.hasNext();) {
    entry = dynamicCast(iter.next(), 25);
    $put_0(cacheMap, entry.getKey(), dynamicCast(entry.getValue_1(), 33).get_5(0));
  }
  return cacheMap;
}

function $createConditionRecords(this$static, conditionTable, condRecordsTO, application){
  var cacheMap, condRecord, condRecordTO, condRecordTOKey, conditionRecords, conditionType, entry, iter, iter0, key, recordIter, recordList, records, scale, supplmentaryConditions, supplmentaryList;
  conditionRecords = new HashMap_0(condRecordsTO.size_0);
  supplmentaryConditions = new HashMap;
  for (iter0 = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(condRecordsTO)).this$01); $hasNext(iter0);) {
    entry = (checkStructuralChange(iter0.this$01, iter0) , checkCriticalElement($hasNext(iter0)) , iter0.last = iter0.current , dynamicCast(iter0.current.next(), 25));
    condRecordTOKey = dynamicCastToString(entry.getKey());
    recordList = dynamicCast(entry.getValue_1(), 33);
    $indexOf(condRecordTOKey, fromCodePoint(($clinit_CartesianProduct() , 124))) + 1;
    key = create_4('', condRecordTOKey);
    for (recordIter = recordList.iterator(); recordIter.i < recordIter.this$01.size_1();) {
      condRecordTO = (checkCriticalElement(recordIter.i < recordIter.this$01.size_1()) , dynamicCast(recordIter.this$01.get_5(recordIter.last = recordIter.i++), 104));
      if (condRecordTO.supplementaryConditionId > 1) {
        supplmentaryList = dynamicCast(key == null?getEntryValueOrNull($getEntry(supplmentaryConditions.hashCodeMap, null)):supplmentaryConditions.stringMap.get_0(key), 33);
        if (!supplmentaryList) {
          supplmentaryList = new ArrayList;
          key == null?$put_1(supplmentaryConditions.hashCodeMap, null, supplmentaryList):supplmentaryConditions.stringMap.put_1(key, supplmentaryList);
        }
        supplmentaryList.add_0(condRecordTO);
      }
       else {
        scale = $createScale('A', condRecordTO, conditionTable);
        try {
          conditionType = $getCustomizingEngine(factory_0, 'A').getConditionType_0(application, condRecordTO.conditionType);
          condRecord = this$static.createConditionRecord(condRecordTO, conditionTable, conditionType, scale);
        }
         catch ($e0) {
          $e0 = wrap($e0);
          if (instanceOf($e0, 42)) {
            throw new ConditionCacheException(15);
          }
           else 
            throw unwrap($e0);
        }
        if (condRecord) {
          records = dynamicCast(conditionRecords.get_4(key), 33);
          if (!records) {
            records = new ArrayList_0(2);
            conditionRecords.put_0(key, records);
          }
          records.add_0(condRecord);
        }
      }
    }
  }
  supplmentaryConditions.size_0 > 0 && (conditionRecords = $handleSupplementaryConditionRecords(this$static, 'A', supplmentaryConditions, conditionRecords));
  cacheMap = new HashMap_0(conditionRecords.size_1());
  for (iter = conditionRecords.entrySet_0().iterator(); iter.hasNext();) {
    entry = dynamicCast(iter.next(), 25);
    $put_0(cacheMap, entry.getKey(), dynamicCast(entry.getValue_1(), 33).get_5(0));
  }
  return cacheMap;
}

function $createScale(usage, condRecordTO, table){
  var scale;
  scale = null;
  if (condRecordTO.dimensionNumber > 0) {
    try {
      scale = $getScale($getScaleBuilder(($clinit_DynamicConditionRecordBuffer() , !INSTANCE_7 && (INSTANCE_7 = new DynamicConditionRecordBuffer) , usage)), usage, condRecordTO.id_0, table);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 42)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
  return scale;
}

function $determineUsageSpecificFields(this$static, conditionTable){
  var fields, i_0, usageFields, usageFieldsMainTable, usageFieldsOfSupplemenataryTable;
  fields = dynamicCast($getStringValue(this$static.usageFieldsForTable, conditionTable.conditionTableTO.conditionTableFullName), 229);
  if (!fields) {
    fields = new ConditionRecordBuilder$UsageFields;
    usageFields = conditionTable.usageFields;
    usageFieldsMainTable = new ArrayList;
    usageFieldsOfSupplemenataryTable = new ArrayList;
    for (i_0 = 0; i_0 < usageFields.length; i_0++) {
      dynamicCast(dynamicCast(usageFields[i_0], 191).fieldTO, 142).supplementaryField?$add_3(usageFieldsOfSupplemenataryTable, usageFields[i_0].getName_0()):$add_3(usageFieldsMainTable, usageFields[i_0].getName_0());
    }
    fields.usageFields = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, usageFieldsMainTable.array.length, 4, 1);
    $toArray_1(usageFieldsMainTable, fields.usageFields);
    fields.usageFieldsOfSupplemenataryTable = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, usageFieldsOfSupplemenataryTable.array.length, 4, 1);
    $toArray_1(usageFieldsOfSupplemenataryTable, fields.usageFieldsOfSupplemenataryTable);
    $putStringValue(this$static.usageFieldsForTable, conditionTable.conditionTableTO.conditionTableFullName, fields);
  }
  return fields;
}

function $extractVarKeyValues(keysSet, length_0){
  var iter, key, keyFields, splittedKeys, varKeyValues;
  varKeyValues = new ArrayList_0(keysSet.size_1());
  for (iter = keysSet.iterator(); iter.i < iter.this$01.size_1();) {
    key = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
    splittedKeys = getKeys(key);
    keyFields = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, length_0, 4, 1);
    arraycopy(splittedKeys, 5, keyFields, 0, length_0);
    setCheck(varKeyValues.array, varKeyValues.array.length, keyFields);
  }
  return varKeyValues;
}

function $handleSupplementaryConditionRecords(this$static, usage, supplmentaryConditions, conditionRecords){
  var cond, conditionRecordTOs, entry, iter, key, mainConditionRecord, mainConditionRecords, mainRecordIter, scale, supplCondRecordTO, supplCondType, supplIter, supplRecord;
  for (iter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(supplmentaryConditions)).this$01); $hasNext(iter);) {
    entry = (checkStructuralChange(iter.this$01, iter) , checkCriticalElement($hasNext(iter)) , iter.last = iter.current , dynamicCast(iter.current.next(), 25));
    key = dynamicCastToString(entry.getKey());
    conditionRecordTOs = dynamicCast(entry.getValue_1(), 33);
    mainConditionRecords = dynamicCast(conditionRecords.get_4(key), 33);
    if (!mainConditionRecords) {
      continue;
    }
    for (supplIter = conditionRecordTOs.iterator(); supplIter.i < supplIter.this$01.size_1();) {
      supplCondRecordTO = (checkCriticalElement(supplIter.i < supplIter.this$01.size_1()) , dynamicCast(supplIter.this$01.get_5(supplIter.last = supplIter.i++), 104));
      mainRecordIter = mainConditionRecords.iterator();
      mainConditionRecord = null;
      while (mainRecordIter.i < mainRecordIter.this$01.size_1()) {
        cond = (checkCriticalElement(mainRecordIter.i < mainRecordIter.this$01.size_1()) , dynamicCast(mainRecordIter.this$01.get_5(mainRecordIter.last = mainRecordIter.i++), 110));
        if ($equals_7(cond.condRecordTO.objectId, supplCondRecordTO.objectId)) {
          mainConditionRecord = cond;
          break;
        }
      }
      if (!mainConditionRecord) {
        continue;
      }
      try {
        supplCondType = $getCustomizingEngine(factory_0, usage).getConditionType_0(mainConditionRecord.conditionTable.conditionTableTO.application, supplCondRecordTO.supplementaryConditionType);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 42)) {
          throw new ConditionCacheException(15);
        }
         else 
          throw unwrap($e0);
      }
      scale = $createScale(usage, supplCondRecordTO, mainConditionRecord.conditionTable);
      supplRecord = this$static.createSupplmentaryConditionRecord(mainConditionRecord, supplCondRecordTO, scale, supplCondType);
      !!supplRecord && $addSupplementaryConditionRecord(mainConditionRecord, supplRecord);
    }
  }
  return conditionRecords;
}

function $readAdditionalTable(condRecordsTO, usage){
  var iter, recordIter, recordList;
  dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordBuilder_2_classLit), 206);
  for (iter = $iterator_0(new AbstractMap$2(condRecordsTO)); iter.val$outerIter2.hasNext();) {
    recordList = dynamicCast($next_2(iter), 33);
    for (recordIter = recordList.iterator(); recordIter.i < recordIter.this$01.size_1();) {
      checkCriticalElement(recordIter.i < recordIter.this$01.size_1());
      dynamicCast(recordIter.this$01.get_5(recordIter.last = recordIter.i++), 104);
    }
  }
}

function $readWithConditionRecordId(this$static, keysSet){
  var application, c, c0, cacheType, condRecordsTO, conditionTable, conditionTableName, fixPart, iter, key, splittedKeys, usage, varData, varDataNames, varKeyValues, varKeys, varKeysNames;
  iter = new AbstractList$IteratorImpl(keysSet);
  key = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
  splittedKeys = getKeys(key);
  usage = splittedKeys[0];
  cacheType = splittedKeys[1];
  conditionTableName = splittedKeys[2];
  application = splittedKeys[3];
  fixPart = create_6(usage, cacheType, conditionTableName, application);
  conditionTable = $getCustomizingEngine(factory_0, usage).getConditionTableByName(application, conditionTableName);
  $determineUsageSpecificFields(this$static, conditionTable);
  varKeys = conditionTable.variableKeys;
  varKeysNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, varKeys.length, 4, 1);
  for (c0 = 0; c0 < varKeysNames.length; c0++) {
    varKeysNames[c0] = dynamicCast(varKeys[c0], 60).field.fieldTO.name_0;
  }
  varData = conditionTable.variableData;
  varDataNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, varData.length, 4, 1);
  for (c = 0; c < varDataNames.length; c++) {
    varDataNames[c] = dynamicCast(varData[c], 60).field.fieldTO.name_0;
  }
  varKeyValues = new ArrayList_0(keysSet.array.length);
  iter = new AbstractList$IteratorImpl(keysSet);
  while (iter.i < iter.this$01.size_1()) {
    key = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
    splittedKeys = getKeys(key);
    $add_3(varKeyValues, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [splittedKeys[4]]));
  }
  condRecordsTO = $getConditions_1((dynamicCast($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordBuilder_2_classLit), 206) , conditionTable.conditionTableTO.conditionTableFullName));
  $readAdditionalTable(condRecordsTO, usage);
  return $createCacheObject(this$static, conditionTable, condRecordsTO, usage, application, fixPart);
}

defineClass(123, 663, $intern_27);
_.createConditionRecord = function createConditionRecord(condRecordTO, conditionTable, conditionType, scale){
  return new ConditionRecord(condRecordTO, conditionTable, conditionType, scale);
}
;
_.createSupplmentaryConditionRecord = function createSupplmentaryConditionRecord(mainConditionRecord, supplCondRecordTO, scale, supplCondType){
  return new SupplementaryConditionRecord(supplCondRecordTO, mainConditionRecord.conditionTable, scale, mainConditionRecord, supplCondType, supplCondRecordTO.supplementaryConditionId);
}
;
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionRecordBuilder', 123, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function ConditionRecordBuilder$UsageFields(){
}

defineClass(229, 1, {229:1}, ConditionRecordBuilder$UsageFields);
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordBuilder$UsageFields_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionRecordBuilder/UsageFields', 229, Ljava_lang_Object_2_classLit);
function $clinit_MasterdataBuffer(){
  $clinit_MasterdataBuffer = emptyMethod;
  CACHE_MISS = ($clinit_Boolean() , FALSE);
}

function $buffer(this$static, key, obj){
  !monitor && (monitor = new MonitorImpl);
  try {
    this$static.condRecordBuffer.put(key, obj);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 80)) {
      throw new ConditionCacheException(202);
    }
     else 
      throw unwrap($e0);
  }
}

function $getScaleBuilder(usage){
  return dynamicCast($getBuilder(($clinit_BuilderManager() , $clinit_BuilderManager() , SINGELTON_1), 'CON', usage, 'SC'), 171);
}

function MasterdataBuffer(){
  $clinit_MasterdataBuffer();
  var cacheManager, caches, implementationCache;
  getLocation(Lcom_sap_spe_condmgnt_masterdata_impl_ConditionMasterDataEngine_2_classLit);
  implementationCache = ($clinit_Configuration_1() , !INSTANCE_11 && (INSTANCE_11 = new Configuration) , $clinit_Configuration_1() , INSTANCE_11).implementationCache;
  if (implementationCache) {
    try {
      caches = ($clinit_Caches() , !INSTANCE_10 && (INSTANCE_10 = new Caches) , $clinit_Caches() , INSTANCE_10);
      this.condRecordBuffer = $get_9(caches);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 80)) {
        $clinit_Configuration();
        throw new ConditionCacheException(201);
      }
       else 
        throw unwrap($e0);
    }
  }
   else {
    cacheManager = ($clinit_CacheManagerFactory() , new CacheManagerImpl);
    try {
      $applyConfiguration_0(cacheManager, 'AP_PRC_CON');
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 80)) {
        $clinit_Configuration();
        throw new ConditionCacheException(201);
      }
       else 
        throw unwrap($e1);
    }
    this.condRecordBuffer = $getCacheFacade((cacheManager.cacheRegion = new CacheRegionImpl(cacheManager.appName, '/AP/PRC/Conditions/ConditionRecords') , cacheManager.cacheRegion));
  }
}

defineClass(306, 1, {});
var CACHE_MISS;
var Lcom_sap_spe_condmgnt_masterdata_impl_MasterdataBuffer_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'MasterdataBuffer', 306, Ljava_lang_Object_2_classLit);
function $get_7(this$static, keys_0, usage){
  var condRecord, iter, iter0, listForBuilder, mapFromBuildler, returnList, varnumh;
  !monitor && (monitor = new MonitorImpl);
  returnList = new ArrayList;
  listForBuilder = new ArrayList;
  for (iter0 = new AbstractList$IteratorImpl(keys_0); iter0.i < iter0.this$01.size_1();) {
    varnumh = (checkCriticalElement(iter0.i < iter0.this$01.size_1()) , dynamicCastToString(iter0.this$01.get_5(iter0.last = iter0.i++)));
    condRecord = this$static.condRecordBuffer.get_0(varnumh);
    condRecord == null?(setCheck(listForBuilder.array, listForBuilder.array.length, varnumh) , true):instanceOf(condRecord, 45) && (setCheck(returnList.array, returnList.array.length, condRecord) , true);
  }
  if (listForBuilder.array.length > 0) {
    mapFromBuildler = $readWithConditionRecordId(dynamicCast($getBuilder(($clinit_BuilderManager() , $clinit_BuilderManager() , SINGELTON_1), 'CON', usage, 'CR'), 123), listForBuilder);
    for (iter = new AbstractList$IteratorImpl(listForBuilder); iter.i < iter.this$01.size_1();) {
      varnumh = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
      condRecord = varnumh == null?getEntryValueOrNull($getEntry(mapFromBuildler.hashCodeMap, null)):mapFromBuildler.stringMap.get_0(varnumh);
      instanceOf(condRecord, 45)?(setCheck(returnList.array, returnList.array.length, condRecord) , true):(condRecord = CACHE_MISS);
      $buffer(this$static, varnumh, condRecord);
    }
  }
  return returnList;
}

function $put(this$static, conditionRecords){
  var conditionRecord, iter, key;
  !monitor && (monitor = new MonitorImpl);
  for (iter = conditionRecords.iterator(); iter.i < iter.this$01.size_1();) {
    conditionRecord = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 45));
    key = create_7(conditionRecord.getUsage_0(), 'id', conditionRecord.getConditionTable_1().conditionTableTO.conditionTable, conditionRecord.getApplication_0(), conditionRecord.getId_0());
    $buffer(this$static, key, conditionRecord);
  }
}

function ConditionRecordIDBuffer(){
  $clinit_MasterdataBuffer();
  MasterdataBuffer.call(this);
}

defineClass(327, 306, $intern_21, ConditionRecordIDBuffer);
var INSTANCE_6;
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordIDBuffer_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionRecordIDBuffer', 327, Lcom_sap_spe_condmgnt_masterdata_impl_MasterdataBuffer_2_classLit);
function $clinit_ConditionRecordObjectManager(){
  $clinit_ConditionRecordObjectManager = emptyMethod;
  getLocation(Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordObjectManager_2_classLit);
  FREE_FIELD = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['0x12']);
  NOTHING_FOUND = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, 0, 0, 1);
  DYNAMIC_KEY = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['dynamic']);
  REC_ID_KEY = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['id']);
  PRESTEP_KEY = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['pre']);
}

function $createConditionRecords_0(this$static, conditionTable, conditionRecordId){
  var array, keysForCache, recordList, records;
  array = initDim(Ljava_lang_String_2_classLit, $intern_24, 10, 5, 0, 2);
  array[0] = this$static.usageStringArray;
  array[1] = REC_ID_KEY;
  array[2] = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [conditionTable.conditionTableTO.conditionTable]);
  array[3] = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [conditionTable.conditionTableTO.application]);
  array[4] = dynamicCast($toArray_1(conditionRecordId, initDim(Ljava_lang_String_2_classLit, $intern_6, 2, conditionRecordId.array.length, 4, 1)), 10);
  keysForCache = calculate_0(array);
  recordList = $get_7(($clinit_MasterdataBuffer() , !INSTANCE_6 && (INSTANCE_6 = new ConditionRecordIDBuffer) , $clinit_MasterdataBuffer() , INSTANCE_6), keysForCache, this$static.usage);
  records = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, recordList.array.length, 0, 1);
  return dynamicCast($toArray_1(recordList, records), 49);
}

function $createConditionRecords_1(this$static, conditionType, access, attributeBindings, timestamp, releaseStatus, hierarchyAccess, trace){
  var attributeMap, bindingsForSortCriteria, conditionTypeToUse, counter, freeFieldsInvolved, i_0, i0, i1, initialAttribute, iter, keys_0, keysForCache, keysForCache0, multiValuedAttribIndx, multiValuedCase, preStepKeys, recordList, recordMap, records, timestampAsString;
  multiValuedCase = false;
  freeFieldsInvolved = false;
  conditionTypeToUse = !conditionType.referenceConditionType?conditionType.conditionTypeTO.name_0:conditionType.referenceConditionType.getName_0();
  keys_0 = initDim(Ljava_lang_String_2_classLit, $intern_24, 10, 5 + attributeBindings.length, 0, 2);
  keys_0[0] = this$static.usageStringArray;
  keys_0[1] = DYNAMIC_KEY;
  keys_0[2] = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [conditionTypeToUse]);
  keys_0[3] = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [access.conditionTable.conditionTableTO.conditionTable]);
  keys_0[4] = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [conditionType.conditionTypeTO.application]);
  preStepKeys = initDim(Ljava_lang_String_2_classLit, $intern_24, 10, 5 + attributeBindings.length, 0, 2);
  preStepKeys[0] = this$static.usageStringArray;
  preStepKeys[1] = PRESTEP_KEY;
  preStepKeys[2] = keys_0[2];
  preStepKeys[3] = keys_0[3];
  preStepKeys[4] = keys_0[4];
  initialAttribute = false;
  for (i0 = 0; i0 < attributeBindings.length; i0++) {
    if (attributeBindings[i0].isKeyFieldNotUsed()) {
      freeFieldsInvolved = true;
      keys_0[i0 + 5] = FREE_FIELD;
    }
     else {
      attributeMap = $getAttributeMap(access, attributeBindings[i0].getName_0());
      if (attributeMap.attributeMapTO.initialValueAllowed) {
        attributeBindings[i0].isMultipleAttributeValue() && (multiValuedCase = true);
      }
       else {
        if (attributeBindings[i0].getValues().length == 0) {
          if (!trace) {
            return NOTHING_FOUND;
          }
          initialAttribute = true;
        }
         else {
          if (attributeMap.attributeMapTO.accessFieldType != 65) {
            if ($equals_7(attributeBindings[i0].getValue(), '00000000000000000000000000000000') && attributeMap.tableAttributeClass.isGuid) {
              if (!trace) {
                return NOTHING_FOUND;
              }
              initialAttribute = true;
            }
             else if ($equals_7(attributeBindings[i0].getValue(), '') && !attributeMap.tableAttributeClass.isGuid) {
              if (!trace) {
                return NOTHING_FOUND;
              }
              initialAttribute = true;
            }
          }
        }
      }
      keys_0[i0 + 5] = attributeBindings[i0].getValues();
    }
    if (attributeBindings[i0].isHeaderAttributeBinding() || attributeBindings[i0].isDirectValueAssigned()) {
      preStepKeys[i0 + 5] = attributeBindings[i0].getValues();
      attributeBindings[i0].isKeyFieldNotUsed();
    }
     else {
      preStepKeys[i0 + 5] = FREE_FIELD;
    }
  }
  if (initialAttribute) {
    keysForCache0 = calculate_0(keys_0);
    $writeTrace(keysForCache0, new HashMap_0(0), trace, true, false);
    return initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, 0, 0, 1);
  }
  timestampAsString = timestamp?$formatyyyyMMddHHmmss(timestamp):null;
  keysForCache = calculate_0(keys_0);
  recordMap = $getConditionRecords_0(($clinit_DynamicConditionRecordBuffer() , !INSTANCE_7 && (INSTANCE_7 = new DynamicConditionRecordBuffer) , $clinit_DynamicConditionRecordBuffer() , INSTANCE_7), keysForCache, timestampAsString, this$static.usage, freeFieldsInvolved, releaseStatus, hierarchyAccess);
  recordList = new ArrayList;
  for (iter = $iterator_0(new AbstractMap$2(recordMap)); iter.val$outerIter2.hasNext();) {
    $addAll_0(recordList, dynamicCast($next_2(iter), 33));
  }
  if (recordList.array.length > 0) {
    if (multiValuedCase) {
      multiValuedAttribIndx = 0;
      bindingsForSortCriteria = initDim(Lcom_sap_spe_condmgnt_masterdata_ITableAttributeBinding_2_classLit, $intern_15, 285, attributeBindings.length, 0, 1);
      for (i1 = 0; i1 < attributeBindings.length; i1++) {
        if (attributeBindings[i1].getTableAttributeClass().field.applicationFieldTO.isMultiValued_0) {
          multiValuedAttribIndx = i1;
          break;
        }
      }
      setCheck(bindingsForSortCriteria, 0, attributeBindings[multiValuedAttribIndx]);
      counter = 1;
      for (i_0 = 0; i_0 < attributeBindings.length; i_0++) {
        if (i_0 != multiValuedAttribIndx) {
          setCheck(bindingsForSortCriteria, counter, attributeBindings[i_0]);
          ++counter;
        }
      }
      records = sort_0(recordList, bindingsForSortCriteria);
    }
     else {
      records = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, recordList.array.length, 0, 1);
      records = dynamicCast($toArray_1(recordList, records), 49);
    }
  }
   else {
    records = NOTHING_FOUND;
  }
  !!trace && $writeTrace(keysForCache, recordMap, trace, false, freeFieldsInvolved);
  return records;
}

function $writeTrace(keysToSearchFor, foundConditionRecords, trace, dueToInitialField, freeFieldsInvolved){
  var condRecord, foundRecords, iter, key, missingText, recordIter, tracingInput;
  missingText = dueToInitialField?102:101;
  freeFieldsInvolved && !(new AbstractMap$1(foundConditionRecords)).isEmpty()?(iter = $iterator(new AbstractMap$1(foundConditionRecords))):(iter = new AbstractList$IteratorImpl(keysToSearchFor));
  while (iter.hasNext()) {
    key = dynamicCastToString(iter.next());
    foundRecords = dynamicCast(key == null?getEntryValueOrNull($getEntry(foundConditionRecords.hashCodeMap, null)):foundConditionRecords.stringMap.get_0(key), 33);
    if (foundRecords) {
      for (recordIter = foundRecords.iterator(); recordIter.i < recordIter.this$01.size_1();) {
        tracingInput = new TracingInput(103, key);
        condRecord = (checkCriticalElement(recordIter.i < recordIter.this$01.size_1()) , dynamicCast(recordIter.this$01.get_5(recordIter.last = recordIter.i++), 45));
        condRecord.getId_0();
        $setApplicationAndUsageData(tracingInput, condRecord.getApplicationAndUsageData_0());
        $add_3(trace.traceList, tracingInput);
      }
    }
     else {
      $addTracingInput(trace, new TracingInput(missingText, key));
    }
  }
}

function ConditionRecordObjectManager(){
  $clinit_ConditionRecordObjectManager();
  this.usage = 'A';
  this.usageStringArray = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [this.usage]);
}

defineClass(497, 1, {}, ConditionRecordObjectManager);
var DYNAMIC_KEY, FREE_FIELD, NOTHING_FOUND, PRESTEP_KEY, REC_ID_KEY;
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordObjectManager_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionRecordObjectManager', 497, Ljava_lang_Object_2_classLit);
function ConditionRecordSelectionManager(){
  new HashMap;
  new HashMap;
  new HashMap;
}

defineClass(498, 1, {}, ConditionRecordSelectionManager);
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordSelectionManager_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionRecordSelectionManager', 498, Ljava_lang_Object_2_classLit);
function compare_8(rec1, rec2){
  var i_0;
  for (i_0 = 0; i_0 < rec1.dimension - 1; i_0++) {
    if (rec1.values[i_0] != rec2.values[i_0]) {
      return rec1.values[i_0] - rec2.values[i_0];
    }
  }
  return rec1.values[rec1.dimension - 1] - rec2.values[rec1.dimension - 1];
}

function quicksort(records, left, right){
  var i_0, l;
  if (left >= right) {
    return;
  }
  swap(records, left, ~~((left + right) / 2));
  l = left;
  for (i_0 = left + 1; i_0 <= right; i_0++) {
    compare_8(records[i_0], records[left]) < 0 && swap(records, ++l, i_0);
  }
  swap(records, left, l);
  quicksort(records, left, l - 1);
  quicksort(records, l + 1, right);
}

function sort_0(recordList, bindings){
  var attribute, attributeValues, c, c0, condRecord, i_0, i0, iter, j, recordValue, recordsToBeSorted, returnRecords, val, value_0, valueMap;
  valueMap = initDim(Ljava_util_Map_2_classLit, $intern_15, 24, bindings.length, 0, 1);
  for (i0 = 0; i0 < bindings.length; i0++) {
    attributeValues = bindings[i0].getValues();
    setCheck(valueMap, i0, new HashMap_1(attributeValues.length));
    for (j = 0; j < attributeValues.length; j++) {
      valueMap[i0].put_0(attributeValues[j], new Integer(j));
    }
  }
  recordsToBeSorted = initDim(Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordSorter$SortRecord_2_classLit, $intern_15, 276, recordList.array.length, 0, 1);
  i_0 = 0;
  for (iter = new AbstractList$IteratorImpl(recordList); iter.i < iter.this$01.size_1(); i_0++) {
    condRecord = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 45));
    recordsToBeSorted[i_0] = new ConditionRecordSorter$SortRecord(bindings.length, condRecord);
    for (c0 = 0; c0 < bindings.length; c0++) {
      attribute = bindings[c0].getName_0();
      recordValue = condRecord.getVariableKeyValue(attribute);
      value_0 = dynamicCast(valueMap[c0].get_4(recordValue), 16);
      val = !value_0?1:value_0.value_0;
      recordsToBeSorted[i_0].values[c0] = val;
    }
  }
  quicksort(recordsToBeSorted, 0, recordsToBeSorted.length - 1);
  returnRecords = initDim(Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit, $intern_26, 45, recordList.array.length, 0, 1);
  for (c = 0; c < recordsToBeSorted.length; c++) {
    setCheck(returnRecords, c, recordsToBeSorted[c].record);
  }
  return returnRecords;
}

function swap(records, i_0, j){
  var tmp;
  tmp = records[i_0];
  records[i_0] = records[j];
  records[j] = tmp;
}

function ConditionRecordSorter$SortRecord(dim, record){
  this.dimension = dim;
  this.record = record;
  this.values = initDim(I_classLit, $intern_4, 0, dim, 7, 1);
}

defineClass(276, 1, {276:1}, ConditionRecordSorter$SortRecord);
_.dimension = 0;
var Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordSorter$SortRecord_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ConditionRecordSorter/SortRecord', 276, Ljava_lang_Object_2_classLit);
function $clinit_DynamicConditionRecordBuffer(){
  $clinit_DynamicConditionRecordBuffer = emptyMethod;
  $clinit_MasterdataBuffer();
  getLocation(Lcom_sap_spe_condmgnt_masterdata_impl_DynamicConditionRecordBuffer_2_classLit);
  getCategory('/AP/PRC/Conditions');
}

function $getConditionRecords_0(this$static, keys_0, timestamp, usage, freeFieldsInvolved, releaseStatus, hierarchyAccess){
  var application, builderIterator, c, c0, cacheConditionRecords, condRecordList, condRecordsForFreeFields, conditionTable, conditionTableName, conditionTypeName, container, entry, i_0, iter, iter1, key, keyForBuilder, keyFromBuilder, keysForBuilder, keysFromBuilder, listForBuilder, mapFromBuilder, match_0, objectToBeBuffered, splittedKeys, varData, varDataNames, varKeyValues, varKeys, varKeysNames;
  !this$static.returnMap?(this$static.returnMap = new HashMap_0(keys_0.size_1())):$reset(this$static.returnMap);
  listForBuilder = new ArrayList_0(keys_0.size_1());
  !monitor && (monitor = new MonitorImpl);
  cacheConditionRecords = true;
  (timestamp == null || releaseStatus.length != 1 || releaseStatus[0] != 32 || hierarchyAccess) && (cacheConditionRecords = false);
  iter1 = keys_0.iterator();
  key = (checkCriticalElement(iter1.i < iter1.this$01.size_1()) , dynamicCastToString(iter1.this$01.get_5(iter1.last = iter1.i++)));
  splittedKeys = getKeys(key);
  conditionTypeName = splittedKeys[2];
  conditionTableName = splittedKeys[3];
  application = splittedKeys[4];
  conditionTable = $getCustomizingEngine(factory_0, usage).getConditionTableByName(application, conditionTableName);
  $determineUsageSpecificFields(dynamicCast($getBuilder(($clinit_BuilderManager() , $clinit_BuilderManager() , SINGELTON_1), 'CON', usage, 'CR'), 123), conditionTable);
  varKeys = conditionTable.variableKeys;
  varKeysNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, varKeys.length, 4, 1);
  for (c0 = 0; c0 < varKeysNames.length; c0++) {
    varKeysNames[c0] = dynamicCast(varKeys[c0], 60).field.fieldTO.name_0;
  }
  varData = conditionTable.variableData;
  varDataNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, varData.length, 4, 1);
  for (c = 0; c < varDataNames.length; c++) {
    varDataNames[c] = dynamicCast(varData[c], 60).field.fieldTO.name_0;
  }
  varKeyValues = $extractVarKeyValues((dynamicCast($getBuilder((null , SINGELTON_1), 'CON', usage, 'CR'), 123) , keys_0), varKeys.length);
  if (cacheConditionRecords) {
    for (iter = keys_0.iterator(); iter.i < iter.this$01.size_1();) {
      keyForBuilder = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
      container = null;
      try {
        container = dynamicCast(this$static.condRecordBuffer.get_0(keyForBuilder), 24);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (!instanceOf($e0, 39))
          throw unwrap($e0);
      }
      if (!container) {
        setCheck(listForBuilder.array, listForBuilder.array.length, keyForBuilder);
      }
       else {
        condRecordList = container.get_4(timestamp);
        condRecordList == null?(setCheck(listForBuilder.array, listForBuilder.array.length, keyForBuilder) , true):instanceOf(condRecordList, 33) && dynamicCast(condRecordList, 33).size_1() > 0 && $putStringValue(this$static.returnMap, keyForBuilder, condRecordList);
      }
    }
  }
   else {
    $addAll_0(listForBuilder, keys_0);
  }
  if (listForBuilder.array.length > 0) {
    mapFromBuilder = $getConditions_0(dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.masterdata', 'ConditionRecord', 'dao.legacy'), 206), conditionTableName, conditionTypeName, timestamp, varKeyValues, application, usage);
    if (mapFromBuilder) {
      for (iter = new AbstractList$IteratorImpl(listForBuilder); iter.i < iter.this$01.size_1();) {
        keyForBuilder = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
        if (freeFieldsInvolved) {
          keysForBuilder = getKeys(keyForBuilder);
          condRecordsForFreeFields = new ArrayList;
          for (builderIterator = mapFromBuilder.entrySet_0().iterator(); builderIterator.hasNext();) {
            entry = dynamicCast(builderIterator.next(), 25);
            keyFromBuilder = dynamicCastToString(entry.getKey());
            keysFromBuilder = getKeys(keyFromBuilder);
            match_0 = true;
            for (i_0 = 5; i_0 < keysForBuilder.length; i_0++) {
              if (!$equals_7(keysForBuilder[i_0], '0x12') && !$equals_7(keysForBuilder[i_0], keysFromBuilder[i_0])) {
                match_0 = false;
                break;
              }
            }
            if (match_0) {
              condRecordList = dynamicCast(entry.getValue_1(), 33);
              $addAll_0(condRecordsForFreeFields, condRecordList);
              builderIterator.remove_1();
            }
          }
          objectToBeBuffered = condRecordsForFreeFields.array.length > 0?condRecordsForFreeFields:null;
        }
         else {
          objectToBeBuffered = mapFromBuilder.get_4(keyForBuilder);
        }
        if (cacheConditionRecords) {
          container = new HashMap_0(3);
          if (objectToBeBuffered == null) {
            $putStringValue(container, timestamp, ($clinit_MasterdataBuffer() , CACHE_MISS));
          }
           else {
            timestamp == null?$put_1(container.hashCodeMap, null, objectToBeBuffered):container.stringMap.put_1(timestamp, objectToBeBuffered);
            $put(($clinit_MasterdataBuffer() , !INSTANCE_6 && (INSTANCE_6 = new ConditionRecordIDBuffer) , $clinit_MasterdataBuffer() , INSTANCE_6), dynamicCast(objectToBeBuffered, 33));
          }
          $buffer(this$static, keyForBuilder, container);
        }
        objectToBeBuffered != null && $putStringValue(this$static.returnMap, keyForBuilder, objectToBeBuffered);
      }
    }
  }
  return this$static.returnMap;
}

function DynamicConditionRecordBuffer(){
  $clinit_DynamicConditionRecordBuffer();
  MasterdataBuffer.call(this);
}

defineClass(169, 306, {169:1, 32:1}, DynamicConditionRecordBuffer);
_.testCall_0 = function testCall(name_0, occupation, salary){
}
;
_.returnMap = null;
var INSTANCE_7;
var Lcom_sap_spe_condmgnt_masterdata_impl_DynamicConditionRecordBuffer_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'DynamicConditionRecordBuffer', 169, Lcom_sap_spe_condmgnt_masterdata_impl_MasterdataBuffer_2_classLit);
function $export_26(this$static){
  if (!exported_26) {
    exported_26 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_masterdata_impl_DynamicConditionRecordBuffer_2_classLit, this$static);
    $export0_26(this$static);
  }
}

function $export0_26(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0]) && (g = a[0]);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer.prototype = new Object;
  $wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer.APPLICATION_NAME = 'AP_PRC_CON';
  $wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer.LOGICAL_NAME = 'CACHE';
  __0.getConditionRecords = $entry(function(a0, a1, a2, a3, a4, a5){
    return __static_wrapper_getConditionRecords(this.g, a0, a1, a2, a3, a4, a5);
  }
  );
  $wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer.getInstance = $entry(function(){
    return wrap_0(($clinit_DynamicConditionRecordBuffer() , !INSTANCE_7 && (INSTANCE_7 = new DynamicConditionRecordBuffer) , INSTANCE_7));
  }
  );
  __0.testCall = $entry(function(a0, a1, a2){
    this.g.testCall_0(a0, a1, a2);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer[p] === undefined && ($wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer[p] = pkg[p]);
}

function DynamicConditionRecordBuffer_ExporterImpl(){
  $export_26(this);
}

function __static_wrapper_getConditionRecords(instance, a0, a1, a2, a3, a4, a5){
  return $getConditionRecords_0(instance, a0, a1, a2, a3, ($clinit_ExporterUtil() , $toArrChar(a4)), a5);
}

defineClass(407, 1, $intern_18, DynamicConditionRecordBuffer_ExporterImpl);
_.getJsConstructor = function getJsConstructor_26(){
  return $wnd.com.sap.spe.condmgnt.masterdata.impl.DynamicConditionRecordBuffer;
}
;
_.isAssignable = function isAssignable_26(o){
  return o != null && instanceOf(o, 169);
}
;
var exported_26 = false;
var Lcom_sap_spe_condmgnt_masterdata_impl_DynamicConditionRecordBuffer_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'DynamicConditionRecordBuffer_ExporterImpl', 407, Ljava_lang_Object_2_classLit);
function $addTracingInput(this$static, tracingInput){
  $add_3(this$static.traceList, tracingInput);
}

function MasterdataTrace(){
  this.traceList = new ArrayList;
}

defineClass(610, 1, {}, MasterdataTrace);
var Lcom_sap_spe_condmgnt_masterdata_impl_MasterdataTrace_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'MasterdataTrace', 610, Ljava_lang_Object_2_classLit);
function $getScale(this$static, usage, conditionRecordId, table){
  var scaleDimensions, scaleRates, tablePrefix, usageScaleFields;
  usageScaleFields = dynamicCast($getStringValue(this$static.usageSpecificScaleFields, usage), 230);
  if (!usageScaleFields) {
    usageScaleFields = getUsageSpecificFields(usage);
    $putStringValue(this$static.usageSpecificScaleFields, usage, usageScaleFields);
  }
  tablePrefix = $getNamePrefix(table);
  scaleDimensions = $getScaleDimensions(this$static, usageScaleFields, conditionRecordId, tablePrefix);
  scaleRates = $getScaleRates(this$static, usageScaleFields, conditionRecordId, scaleDimensions.length, tablePrefix);
  return this$static.createScale(scaleDimensions, scaleRates);
}

function $getScaleDefinition(this$static, usageScaleFields, scaleId, tablePrefix){
  var dao, scaleDefinition, scaleDefinitionTO, scaleLevels;
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.masterdata', 'Scale', 'dao.legacy'), 208);
  if (!dao) {
    dao = new ScaleDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.condmgnt.masterdata.dao.legacy.ScaleDAOImpl');
  }
  scaleDefinitionTO = dynamicCast($getStringValue(dao._scaleDefinitions, scaleId), 244);
  scaleLevels = $getScaleLevel_0(this$static, usageScaleFields, scaleDefinitionTO, tablePrefix);
  scaleDefinition = this$static.createScaleDefinition(scaleDefinitionTO, scaleLevels);
  return scaleDefinition;
}

function $getScaleDimensions(this$static, usageScaleFields, condRecordId, tablePrefix){
  var dao, iter, scaleDefinition, scaleDimTO, scaleDimension, scaleDimensionArray, scaleDimensionTO, scaleDimensions, scaleDims, scaleDimensionTO_0;
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.masterdata', 'Scale', 'dao.legacy'), 208);
  if (!dao) {
    dao = new ScaleDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.condmgnt.masterdata.dao.legacy.ScaleDAOImpl');
  }
  scaleDimensionTO = (scaleDims = new ArrayList , scaleDimensionTO_0 = new ScaleDimensionTO , scaleDimensionTO_0.scaleId = condRecordId , setCheck(scaleDims.array, scaleDims.array.length, scaleDimensionTO_0) , scaleDims);
  scaleDimensions = new ArrayList_0(scaleDimensionTO.array.length);
  for (iter = new AbstractList$IteratorImpl(scaleDimensionTO); iter.i < iter.this$01.size_1();) {
    scaleDimTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 263));
    scaleDefinition = $getScaleDefinition(this$static, usageScaleFields, scaleDimTO.scaleId, tablePrefix);
    scaleDimension = new ScaleDimension(scaleDefinition);
    setCheck(scaleDimensions.array, scaleDimensions.array.length, scaleDimension);
  }
  scaleDimensionArray = initDim(Lcom_sap_spe_condmgnt_masterdata_IScaleDimension_2_classLit, $intern_24, 684, scaleDimensions.array.length, 0, 1);
  $toArray_1(scaleDimensions, scaleDimensionArray);
  return scaleDimensionArray;
}

function $getScaleLevel_0(this$static, usageScaleFields, scaleDefinition, tablePrefix){
  var dao, iter, scaleLevel, scaleLevelArray, scaleLevelTO, scaleLevelTOs, scaleLevels, baseType, template, name_0;
  baseType = scaleDefinition.scaleBaseType;
  template = tablePrefix + 'SCALELIN';
  name_0 = new StringBuffer;
  $append_1(name_0, $substring_0(template, 0, tablePrefix.length + 2));
  name_0.string += baseType;
  baseType.length == 1?(name_0.string += '__' , name_0):baseType.length == 2 && (name_0.string += '_' , name_0);
  $append_1(name_0, $substring(template, tablePrefix.length + 5));
  name_0.string;
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.masterdata', 'Scale', 'dao.legacy'), 208);
  if (!dao) {
    dao = new ScaleDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.condmgnt.masterdata.dao.legacy.ScaleDAOImpl');
  }
  scaleLevelTOs = $getScaleLevel(dao, scaleDefinition.scaleId, dynamicCast($getStringValue(usageScaleFields.scaleLevelFields, scaleDefinition.scaleBaseType), 10));
  scaleLevels = new TreeSet_0(new ScaleLevelComparator);
  for (iter = scaleLevelTOs.iterator(); iter.i < iter.this$01.size_1();) {
    scaleLevelTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 243));
    scaleLevel = this$static.createScaleLevel(scaleDefinition, scaleLevelTO, scaleLevelTO.scaleLevelFields);
    scaleLevels.map_0.put_0(scaleLevel, ($clinit_Boolean() , FALSE)) == null;
  }
  scaleLevelArray = initDim(Lcom_sap_spe_condmgnt_masterdata_bo_ScaleLevel_2_classLit, $intern_24, 172, scaleLevels.map_0.size_1(), 0, 1);
  scaleLevels.toArray_0(scaleLevelArray);
  return scaleLevelArray;
}

function $getScaleRates(this$static, usageScaleFields, conditionRecordId, dimensionNumber, tablePrefix){
  var additionalData, additionalDataMap, additionalDataPerEvalType, iter, scaleDAO, scaleRate, scaleRateTO, scaleRateTOs, scaleRates, dimNumber, template, name_0;
  scaleDAO = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.condmgnt.masterdata', 'Scale', 'dao.legacy'), 208);
  if (!scaleDAO) {
    scaleDAO = new ScaleDAOImpl;
    $putDAO((null , SINGELTON_2), scaleDAO, 'com.sap.spe.condmgnt.masterdata.dao.legacy.ScaleDAOImpl');
  }
  dimNumber = '' + dimensionNumber;
  template = tablePrefix + 'SCALEVAL';
  name_0 = new StringBuffer;
  $append_1(name_0, $substring_0(template, 0, tablePrefix.length + 6));
  dimNumber.length == 1 && (name_0.string += '0' , name_0);
  name_0.string += dimNumber;
  name_0.string;
  additionalData = usageScaleFields.additionalDataFieldNames != null && usageScaleFields.additionalDataFieldNames.length > 0;
  scaleRateTOs = dynamicCast($removeStringValue(scaleDAO._scaleRates, conditionRecordId), 33);
  additionalDataPerEvalType = new HashMap;
  scaleRates = new HashMap;
  for (iter = scaleRateTOs.iterator(); iter.i < iter.this$01.size_1();) {
    scaleRateTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 245));
    if (additionalData) {
      additionalDataMap = dynamicCast($getStringValue(additionalDataPerEvalType, scaleRateTO.evaluationType), 24);
      if (!additionalDataMap) {
        additionalDataMap = dynamicCast($getStringValue(scaleDAO._scaleAdditionalData, conditionRecordId), 24);
        $putStringValue(additionalDataPerEvalType, scaleRateTO.evaluationType, additionalDataMap);
      }
      $putAll(scaleRateTO.usageFields, additionalDataMap);
    }
    scaleRate = this$static.createScaleRate(scaleRateTO);
    $putStringValue(scaleRates, create_11(scaleRate.scaleRateTO.scaleLineIds), scaleRate);
  }
  return scaleRates;
}

function ScaleBuilder(){
  this.usageSpecificScaleFields = new HashMap_0(10);
}

function getUsageSpecificFields(usage){
  var addFieldList, allFields, customizingEngine, entry, fieldList, i_0, iter, rateFieldList, scaleBaseType, scaleDefFields, scaleLevelFielList, scaleLevelFieldMap, scaleLevelFields, usageFields;
  usageFields = new ScaleBuilder$UsageSpecificScaleFields;
  customizingEngine = $getCustomizingEngine(factory_0, usage);
  allFields = customizingEngine.getUsageFields(usage);
  fieldList = new ArrayList;
  rateFieldList = new ArrayList;
  addFieldList = new ArrayList;
  for (i_0 = 0; i_0 < allFields.length; i_0++) {
    if (allFields[i_0].isUsedInScale_0() && allFields[i_0].isFieldInDatabase()) {
      $add_3(fieldList, allFields[i_0]);
      allFields[i_0].isUsedInRateTable()?$add_3(rateFieldList, allFields[i_0].getName_0()):$add_3(addFieldList, allFields[i_0].getName_0());
    }
  }
  usageFields.additionalDataFieldNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, addFieldList.array.length, 4, 1);
  usageFields.scaleRateFieldNames = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, rateFieldList.array.length, 4, 1);
  usageFields.scaleLevelFields = new HashMap;
  scaleLevelFieldMap = customizingEngine.getUsage_1(usage).usageTO.scaleLevelFields;
  for (iter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(scaleLevelFieldMap)).this$01); $hasNext(iter);) {
    entry = (checkStructuralChange(iter.this$01, iter) , checkCriticalElement($hasNext(iter)) , iter.last = iter.current , dynamicCast(iter.current.next(), 25));
    scaleBaseType = dynamicCastToString(entry.getKey());
    scaleLevelFielList = dynamicCast(entry.getValue_1(), 33);
    scaleLevelFields = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, scaleLevelFielList.size_1(), 4, 1);
    scaleLevelFields = dynamicCast(scaleLevelFielList.toArray_0(scaleLevelFields), 10);
    $putStringValue(usageFields.scaleLevelFields, scaleBaseType, scaleLevelFields);
  }
  scaleDefFields = customizingEngine.getUsage_1(usage).usageTO.scaleDefFields;
  if (scaleDefFields) {
    usageFields.scaleDefFields = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, scaleDefFields.array.length, 4, 1);
    $toArray_1(scaleDefFields, usageFields.scaleDefFields);
  }
  $toArray_1(addFieldList, usageFields.additionalDataFieldNames);
  $toArray_1(rateFieldList, usageFields.scaleRateFieldNames);
  return usageFields;
}

defineClass(171, 663, {35:1, 171:1}, ScaleBuilder);
_.createScale = function createScale(scaleDimensions, scaleRates){
  return new Scale(scaleDimensions, scaleRates);
}
;
_.createScaleDefinition = function createScaleDefinition(scaleDefinitionTO, scaleLevels){
  return new ScaleDefinition(scaleDefinitionTO, scaleLevels);
}
;
_.createScaleLevel = function createScaleLevel(scaleDefinition, scaleLevelTO, scaleValues){
  return new ScaleLevel(scaleLevelTO.scaleLineId);
}
;
_.createScaleRate = function createScaleRate(scaleRateTO){
  return new ScaleRate(scaleRateTO);
}
;
var Lcom_sap_spe_condmgnt_masterdata_impl_ScaleBuilder_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ScaleBuilder', 171, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function ScaleBuilder$UsageSpecificScaleFields(){
}

defineClass(230, 1, {230:1, 3:1}, ScaleBuilder$UsageSpecificScaleFields);
var Lcom_sap_spe_condmgnt_masterdata_impl_ScaleBuilder$UsageSpecificScaleFields_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ScaleBuilder/UsageSpecificScaleFields', 230, Ljava_lang_Object_2_classLit);
function ScaleLevelComparator(){
}

defineClass(574, 1, $intern_21, ScaleLevelComparator);
_.compare = function compare_9(obj1, obj2){
  return dynamicCast(obj1, 362).getLineId() - dynamicCast(obj2, 362).getLineId();
}
;
var Lcom_sap_spe_condmgnt_masterdata_impl_ScaleLevelComparator_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'ScaleLevelComparator', 574, Ljava_lang_Object_2_classLit);
function $setApplicationAndUsageData(this$static, data_0){
  this$static.applicationAndUsageData = data_0;
}

function TracingInput(messageNumber, key){
  var length_0, splittedKey;
  this.accessTextNo = messageNumber;
  if (key == null) {
    this.attrValues = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1);
  }
   else {
    splittedKey = getKeys(key);
    length_0 = splittedKey.length - 5;
    this.attrValues = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, length_0, 4, 1);
    arraycopy(splittedKey, 5, this.attrValues, 0, length_0);
  }
}

defineClass(56, 1, {703:1, 56:1, 3:1}, TracingInput);
_.accessTextNo = 0;
var Lcom_sap_spe_condmgnt_masterdata_impl_TracingInput_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.impl', 'TracingInput', 56, Ljava_lang_Object_2_classLit);
function ConditionRecordTO(){
}

defineClass(104, 1, {104:1, 32:1}, ConditionRecordTO);
_.getApplicationAndUsageData_0 = function getApplicationAndUsageData_0(){
  return this.applicationAndUsageData;
}
;
_.getConditionType_1 = function getConditionType_3(){
  return this.conditionType;
}
;
_.getDimensionNumber_0 = function getDimensionNumber(){
  return this.dimensionNumber;
}
;
_.getGroupId_0 = function getGroupId(){
  return this.groupId;
}
;
_.getId_0 = function getId_3(){
  return this.id_0;
}
;
_.getMaintenanceStatus_0 = function getMaintenanceStatus(){
  return this.maintenanceStatus;
}
;
_.getObjectId_0 = function getObjectId(){
  return this.objectId;
}
;
_.getReleaseStatus_0 = function getReleaseStatus_0(){
  return this.releaseStatus;
}
;
_.getSupplementaryConditionId_0 = function getSupplementaryConditionId_0(){
  return this.supplementaryConditionId;
}
;
_.getSupplementaryConditionType_0 = function getSupplementaryConditionType(){
  return this.supplementaryConditionType;
}
;
_.getValidityEnd_0 = function getValidityEnd_0(){
  return this.validityEnd;
}
;
_.getValidityStart_0 = function getValidityStart_0(){
  return this.validityStart;
}
;
_.isIndicatorAdditionalData_0 = function isIndicatorAdditionalData(){
  return this.indicatorAdditionalData;
}
;
_.setApplicationAndUsageData_0 = function setApplicationAndUsageData(applicationAndUsageData){
  this.applicationAndUsageData = applicationAndUsageData;
}
;
_.setConditionType_0 = function setConditionType_1(conditionType){
  this.conditionType = conditionType;
}
;
_.setDimensionNumber_0 = function setDimensionNumber(dimensionNumber){
  this.dimensionNumber = dimensionNumber;
}
;
_.setGroupId_0 = function setGroupId(groupId){
  this.groupId = groupId;
}
;
_.setId_0 = function setId_2(id_0){
  this.id_0 = id_0;
}
;
_.setIndicatorAdditionalData_0 = function setIndicatorAdditionalData(indicatorAdditionalData){
  this.indicatorAdditionalData = indicatorAdditionalData;
}
;
_.setMaintenanceStatus_0 = function setMaintenanceStatus(maintenanceStatus){
  this.maintenanceStatus = maintenanceStatus;
}
;
_.setObjectId_0 = function setObjectId(objectId){
  this.objectId = objectId;
}
;
_.setReleaseStatus_0 = function setReleaseStatus(releaseStatus){
  this.releaseStatus = releaseStatus;
}
;
_.setSupplementaryConditionId_0 = function setSupplementaryConditionId(supplementaryConditionId){
  this.supplementaryConditionId = supplementaryConditionId;
}
;
_.setSupplementaryConditionType_0 = function setSupplementaryConditionType(supplementaryConditionType){
  this.supplementaryConditionType = supplementaryConditionType;
}
;
_.setValidityEnd_0 = function setValidityEnd(validityEnd){
  this.validityEnd = validityEnd;
}
;
_.setValidityStart_0 = function setValidityStart(validityStart){
  this.validityStart = validityStart;
}
;
_.dimensionNumber = 0;
_.indicatorAdditionalData = false;
_.releaseStatus = 0;
_.supplementaryConditionId = 0;
var Lcom_sap_spe_condmgnt_masterdata_to_ConditionRecordTO_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.to', 'ConditionRecordTO', 104, Ljava_lang_Object_2_classLit);
function $export_27(this$static){
  if (!exported_27) {
    exported_27 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_condmgnt_masterdata_to_ConditionRecordTO_2_classLit, this$static);
    $export0_27(this$static);
  }
}

function $export0_27(this$static){
  var pkg = declarePackage('com.sap.spe.condmgnt.masterdata.to.ConditionRecordTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.condmgnt.masterdata.to.ConditionRecordTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new ConditionRecordTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.condmgnt.masterdata.to.ConditionRecordTO.prototype = new Object;
  __0.getApplicationAndUsageData = $entry(function(){
    return this.g.getApplicationAndUsageData_0();
  }
  );
  __0.getConditionType = $entry(function(){
    return this.g.getConditionType_1();
  }
  );
  __0.getDimensionNumber = $entry(function(){
    return this.g.getDimensionNumber_0();
  }
  );
  __0.getGroupId = $entry(function(){
    return this.g.getGroupId_0();
  }
  );
  __0.getId = $entry(function(){
    return this.g.getId_0();
  }
  );
  __0.getMaintenanceStatus = $entry(function(){
    return this.g.getMaintenanceStatus_0();
  }
  );
  __0.getObjectId = $entry(function(){
    return this.g.getObjectId_0();
  }
  );
  __0.getReleaseStatus = $entry(function(){
    return this.g.getReleaseStatus_0();
  }
  );
  __0.getSupplementaryConditionId = $entry(function(){
    return this.g.getSupplementaryConditionId_0();
  }
  );
  __0.getSupplementaryConditionType = $entry(function(){
    return this.g.getSupplementaryConditionType_0();
  }
  );
  __0.getValidityEnd = $entry(function(){
    return this.g.getValidityEnd_0();
  }
  );
  __0.getValidityStart = $entry(function(){
    return this.g.getValidityStart_0();
  }
  );
  __0.isIndicatorAdditionalData = $entry(function(){
    return this.g.isIndicatorAdditionalData_0();
  }
  );
  __0.setApplicationAndUsageData = $entry(function(a0){
    this.g.setApplicationAndUsageData_0(a0);
  }
  );
  __0.setConditionType = $entry(function(a0){
    this.g.setConditionType_0(a0);
  }
  );
  __0.setDimensionNumber = $entry(function(a0){
    this.g.setDimensionNumber_0(a0);
  }
  );
  __0.setGroupId = $entry(function(a0){
    this.g.setGroupId_0(a0);
  }
  );
  __0.setId = $entry(function(a0){
    this.g.setId_0(a0);
  }
  );
  __0.setIndicatorAdditionalData = $entry(function(a0){
    this.g.setIndicatorAdditionalData_0(a0);
  }
  );
  __0.setMaintenanceStatus = $entry(function(a0){
    this.g.setMaintenanceStatus_0(a0);
  }
  );
  __0.setObjectId = $entry(function(a0){
    this.g.setObjectId_0(a0);
  }
  );
  __0.setReleaseStatus = $entry(function(a0){
    this.g.setReleaseStatus_0(a0);
  }
  );
  __0.setSupplementaryConditionId = $entry(function(a0){
    this.g.setSupplementaryConditionId_0(a0);
  }
  );
  __0.setSupplementaryConditionType = $entry(function(a0){
    this.g.setSupplementaryConditionType_0(a0);
  }
  );
  __0.setValidityEnd = $entry(function(a0){
    this.g.setValidityEnd_0(gwtInstance(a0));
  }
  );
  __0.setValidityStart = $entry(function(a0){
    this.g.setValidityStart_0(gwtInstance(a0));
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.condmgnt.masterdata.to.ConditionRecordTO[p] === undefined && ($wnd.com.sap.spe.condmgnt.masterdata.to.ConditionRecordTO[p] = pkg[p]);
}

function ConditionRecordTO_ExporterImpl(){
  $export_27(this);
}

defineClass(408, 1, $intern_18, ConditionRecordTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_27(){
  return $wnd.com.sap.spe.condmgnt.masterdata.to.ConditionRecordTO;
}
;
_.isAssignable = function isAssignable_27(o){
  return o != null && instanceOf(o, 104);
}
;
var exported_27 = false;
var Lcom_sap_spe_condmgnt_masterdata_to_ConditionRecordTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.to', 'ConditionRecordTO_ExporterImpl', 408, Ljava_lang_Object_2_classLit);
function ScaleDefinitionTO(){
}

defineClass(244, 1, {244:1, 3:1}, ScaleDefinitionTO);
var Lcom_sap_spe_condmgnt_masterdata_to_ScaleDefinitionTO_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.to', 'ScaleDefinitionTO', 244, Ljava_lang_Object_2_classLit);
function ScaleDimensionTO(){
}

defineClass(263, 1, {263:1, 3:1}, ScaleDimensionTO);
var Lcom_sap_spe_condmgnt_masterdata_to_ScaleDimensionTO_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.to', 'ScaleDimensionTO', 263, Ljava_lang_Object_2_classLit);
function ScaleLevelTO(){
}

defineClass(243, 1, {243:1, 3:1}, ScaleLevelTO);
_.scaleLineId = 0;
var Lcom_sap_spe_condmgnt_masterdata_to_ScaleLevelTO_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.to', 'ScaleLevelTO', 243, Ljava_lang_Object_2_classLit);
function ScaleRateTO(){
}

defineClass(245, 1, {245:1, 3:1}, ScaleRateTO);
var Lcom_sap_spe_condmgnt_masterdata_to_ScaleRateTO_2_classLit = createForClass('com.sap.spe.condmgnt.masterdata.to', 'ScaleRateTO', 245, Ljava_lang_Object_2_classLit);
function $clinit_ConversionConstants(){
  $clinit_ConversionConstants = emptyMethod;
  getCategory('/AP/PRC/Conversion');
  C_ZERO = new BigDecimal_4('0');
  C_ONE = new BigDecimal_4('1');
  C_ONE_SCALE_5 = $setScale(C_ONE, 5, ($clinit_RoundingMode() , UNNECESSARY));
  new BigDecimal_4('10');
  C_MINUS_ONE = new BigDecimal_4('-1');
  new BigDecimal_4('999');
  C_999999999 = new BigDecimal_4('999999999');
  new BigDecimal_4('-999999999');
  C_MAX_RATE = new BigDecimal_4('999999999999999');
  new BigDecimal_4('100000000000');
  C_OLDEST_DATE = new SAPDate(1800, 1, 1);
  new SAPDate(9999, 12, 31);
}

var C_999999999, C_MAX_RATE, C_MINUS_ONE, C_OLDEST_DATE, C_ONE, C_ONE_SCALE_5, C_ZERO;
defineClass(669, 1, {});
var Lcom_sap_spe_conversion_ConversionEngineFactory_2_classLit = createForClass('com.sap.spe.conversion', 'ConversionEngineFactory', 669, Ljava_lang_Object_2_classLit);
defineClass(667, 1, {});
var factory_3 = null;
var Lcom_sap_spe_conversion_CurrencyConversionTracerFactory_2_classLit = createForClass('com.sap.spe.conversion', 'CurrencyConversionTracerFactory', 667, Ljava_lang_Object_2_classLit);
var Lcom_sap_spe_conversion_IConversionFactor_2_classLit = createForInterface('com.sap.spe.conversion', 'IConversionFactor');
var Lcom_sap_spe_conversion_IDimensionalValue_2_classLit = createForInterface('com.sap.spe.conversion', 'IDimensionalValue');
function $getConversionFactors(this$static, exchangeRateTypeName, fromCurrency, toCurrency){
  var conversionFactor, iterator, list, result, tailSet;
  list = new ArrayList;
  conversionFactor = new ConversionFactorTO;
  conversionFactor.exRateTypeName = exchangeRateTypeName;
  conversionFactor.fromCurrency = fromCurrency;
  conversionFactor.toCurrency = toCurrency;
  conversionFactor.date = parseInvertedYYYYMMDD('00008768');
  conversionFactor.fromFactor = 0;
  conversionFactor.toFactor = 0;
  conversionFactor.altExRateTypeName = null;
  tailSet = $tailSet_0(this$static.conversionFactors, conversionFactor);
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(tailSet.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    result = dynamicCast($next_3(iterator), 124);
    if ($equals_7(result.exRateTypeName, exchangeRateTypeName)) {
      if ($equals_7(result.fromCurrency, fromCurrency)) {
        if ($equals_7(result.toCurrency, toCurrency)) {
          setCheck(list.array, list.array.length, result);
        }
         else {
          break;
        }
      }
    }
  }
  return dynamicCast($toArray_1(list, initDim(Lcom_sap_spe_conversion_to_ConversionFactorTO_2_classLit, {633:1, 3:1, 6:1, 4:1, 5:1}, 124, 0, 0, 1)), 633);
}

function $getEmuCurrencyUnits(this$static){
  var arr;
  if (this$static.currencyUnit.array.length != 0) {
    arr = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, this$static.currencyUnit.array.length, 4, 1);
    $toArray_1(this$static.currencyUnit, arr);
    return arr;
  }
  return null;
}

function $putConversionFactor(this$static, convTO){
  $add_5(this$static.conversionFactors, convTO);
}

function $putCurrencyUnits(this$static, toCurrency){
  $add_3(this$static.currencyUnit, toCurrency);
}

function ConversionFactorDAOImpl(){
  this.currencyUnit = new ArrayList;
  this.conversionFactors = new TreeSet_0(new ConversionFactorDAOImpl$ConversionFactorComparator);
}

defineClass(479, 1, {353:1}, ConversionFactorDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_ConversionFactorDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'ConversionFactorDAOImpl', 479, Ljava_lang_Object_2_classLit);
function ConversionFactorDAOImpl$ConversionFactorComparator(){
}

defineClass(480, 1, {}, ConversionFactorDAOImpl$ConversionFactorComparator);
_.compare = function compare_10(factor1, factor2){
  var cf1, cf2, compare, exRateTypeName1, exRateTypeName2, fromCurrency1, fromCurrency2, toCurrency1, toCurrency2;
  cf1 = dynamicCast(factor1, 124);
  cf2 = dynamicCast(factor2, 124);
  exRateTypeName1 = cf1.exRateTypeName;
  exRateTypeName2 = cf2.exRateTypeName;
  compare = compareTo_7(exRateTypeName1, exRateTypeName2);
  if (compare != 0) {
    return compare;
  }
  fromCurrency1 = cf1.fromCurrency;
  fromCurrency2 = cf2.fromCurrency;
  compare = compareTo_7(fromCurrency1, fromCurrency2);
  if (compare != 0) {
    return compare;
  }
  toCurrency1 = cf1.toCurrency;
  toCurrency2 = cf2.toCurrency;
  compare = compareTo_7(toCurrency1, toCurrency2);
  if (compare != 0) {
    return compare;
  }
  return $compareTo_0(cf2.date, cf1.date);
}
;
var Lcom_sap_spe_conversion_dao_standard_ConversionFactorDAOImpl$ConversionFactorComparator_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'ConversionFactorDAOImpl/ConversionFactorComparator', 480, Ljava_lang_Object_2_classLit);
function $createCurrencyUnitTO(name_0, numberOfDecimals){
  var currencyUnit;
  currencyUnit = new CurrencyUnitTO;
  currencyUnit.name_0 = name_0;
  currencyUnit.isoCode = null;
  currencyUnit.numberOfDecimals = numberOfDecimals;
  currencyUnit.isPrimaryUnitForIsoCodeConversion = false;
  return currencyUnit;
}

function $getCurrencyUnits(this$static){
  var typeArray, typeCollection;
  if (this$static.currencyUnits.size_0 != 0) {
    typeCollection = new AbstractMap$2(this$static.currencyUnits);
    typeArray = initDim(Lcom_sap_spe_conversion_to_CurrencyUnitTO_2_classLit, $intern_24, 194, typeCollection.this$01.size_1(), 0, 1);
    $toArray(typeCollection, typeArray);
    return typeArray;
  }
  return null;
}

function $putCurrencyUnits_0(this$static, cto){
  $putStringValue(this$static.currencyUnits, cto.name_0, cto);
}

function CurrencyUnitDAOImpl(){
  this.currencyUnits = new HashMap;
  $putStringValue(this.currencyUnits, '%', $createCurrencyUnitTO('%', 3));
  $putStringValue(this.currencyUnits, '%7', $createCurrencyUnitTO('%7', 7));
  $putStringValue(this.currencyUnits, '', $createCurrencyUnitTO('', 2));
}

defineClass(318, 1, {619:1}, CurrencyUnitDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_CurrencyUnitDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'CurrencyUnitDAOImpl', 318, Ljava_lang_Object_2_classLit);
function $getDimensions(this$static){
  var arr;
  if (this$static.dimensions.array.length != 0) {
    arr = initDim(Lcom_sap_spe_conversion_to_DimensionTO_2_classLit, $intern_24, 234, this$static.dimensions.array.length, 0, 1);
    $toArray_1(this$static.dimensions, arr);
    return arr;
  }
  return null;
}

function $isDimensionExists(this$static, dimensionTO){
  !!this$static.dimensions && $indexOf_1(this$static.dimensions, dimensionTO, 0) != -1;
  return false;
}

function $putDimension(this$static, dimensionTO){
  $add_3(this$static.dimensions, dimensionTO);
}

function DimensionDAOImpl(){
  this.dimensions = new ArrayList;
}

defineClass(487, 1, {624:1}, DimensionDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_DimensionDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'DimensionDAOImpl', 487, Ljava_lang_Object_2_classLit);
function $getEmuKeys(this$static){
  var arr;
  if (this$static.emuKeys.array.length != 0) {
    arr = initDim(Lcom_sap_spe_conversion_to_EmuKeysTO_2_classLit, $intern_24, 174, this$static.emuKeys.array.length, 0, 1);
    $toArray_1(this$static.emuKeys, arr);
    return arr[0];
  }
  return null;
}

function $putEmuKeys(this$static, emukeysTO){
  $add_3(this$static.emuKeys, emukeysTO);
}

function EmuKeysDAOImpl(){
  this.emuKeys = new ArrayList;
}

defineClass(484, 1, {620:1}, EmuKeysDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_EmuKeysDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'EmuKeysDAOImpl', 484, Ljava_lang_Object_2_classLit);
function $clinit_ExchangeRateDAOImpl(){
  $clinit_ExchangeRateDAOImpl = emptyMethod;
  ZERO_0 = new BigDecimal(0);
}

function $getExchangeRate(this$static, exchangeRateTypeName, fromCurrency, toCurrency, date, exactDate){
  var exchangeRate, result, tailSet;
  exchangeRate = new ExchangeRateTO;
  exchangeRate.name_0 = exchangeRateTypeName;
  exchangeRate.fromCurrency = fromCurrency;
  exchangeRate.toCurrency = toCurrency;
  exchangeRate.date = date;
  exchangeRate.rate = ZERO_0;
  exchangeRate.fromFactor = 0;
  exchangeRate.toFactor = 0;
  tailSet = $tailSet_0(this$static.exchangeRates, exchangeRate);
  if (tailSet.map_0.size_1() > 0) {
    result = dynamicCast(getKeyOrNSE(tailSet.map_0.getFirstEntry()), 145);
    if ($equals_7(result.name_0, exchangeRateTypeName)) {
      if ($equals_7(result.fromCurrency, fromCurrency)) {
        if ($equals_7(result.toCurrency, toCurrency)) {
          if (exactDate && $equalsIgnoreCase(date, result.date)) {
            return result;
          }
           else if (compareTo_7(result.date, date) >= 0) {
            return result;
          }
        }
      }
    }
  }
  return null;
}

function $putExchangeRate_0(this$static, exchangeRateTO){
  $add_5(this$static.exchangeRates, exchangeRateTO);
}

function ExchangeRateDAOImpl(){
  $clinit_ExchangeRateDAOImpl();
  this.exchangeRates = new TreeSet_0(new ExchangeRateDAOImpl$ExchangeRatesComparator);
}

defineClass(481, 1, {621:1}, ExchangeRateDAOImpl);
var ZERO_0;
var Lcom_sap_spe_conversion_dao_standard_ExchangeRateDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'ExchangeRateDAOImpl', 481, Ljava_lang_Object_2_classLit);
function ExchangeRateDAOImpl$ExchangeRatesComparator(){
}

defineClass(482, 1, {}, ExchangeRateDAOImpl$ExchangeRatesComparator);
_.compare = function compare_11(exRate1, exRate2){
  var compare, er1, er2, exRateTypeName1, exRateTypeName2, fromCurrency1, fromCurrency2, toCurrency1, toCurrency2;
  er1 = dynamicCast(exRate1, 145);
  er2 = dynamicCast(exRate2, 145);
  exRateTypeName1 = er1.name_0;
  exRateTypeName2 = er2.name_0;
  compare = compareTo_7(exRateTypeName1, exRateTypeName2);
  if (compare != 0) {
    return compare;
  }
  fromCurrency1 = er1.fromCurrency;
  fromCurrency2 = er2.fromCurrency;
  compare = compareTo_7(fromCurrency1, fromCurrency2);
  if (compare != 0) {
    return compare;
  }
  toCurrency1 = er1.toCurrency;
  toCurrency2 = er2.toCurrency;
  compare = compareTo_7(toCurrency1, toCurrency2);
  if (compare != 0) {
    return compare;
  }
  return compareTo_7(er1.date, er2.date);
}
;
var Lcom_sap_spe_conversion_dao_standard_ExchangeRateDAOImpl$ExchangeRatesComparator_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'ExchangeRateDAOImpl/ExchangeRatesComparator', 482, Ljava_lang_Object_2_classLit);
function $getExchangeRateTypes(this$static){
  if (this$static.exchangeRateTypes.size_0 != 0)
    return new AbstractMap$2(this$static.exchangeRateTypes);
  return null;
}

function $putExchangeRateTypes(this$static, exto){
  $putStringValue(this$static.exchangeRateTypes, exto.name_0, exto);
}

function ExchangeRateTypeDAOImpl(){
  this.exchangeRateTypes = new HashMap;
}

defineClass(483, 1, {622:1}, ExchangeRateTypeDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_ExchangeRateTypeDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'ExchangeRateTypeDAOImpl', 483, Ljava_lang_Object_2_classLit);
function ExpiringCurrencyDAOImpl(){
}

defineClass(485, 1, {354:1}, ExpiringCurrencyDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_ExpiringCurrencyDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'ExpiringCurrencyDAOImpl', 485, Ljava_lang_Object_2_classLit);
function $getNotations(this$static){
  var notationTO;
  if (!this$static.allNotations.isEmpty()) {
    notationTO = new NotationTO;
    notationTO.allNotations = this$static.allNotations;
    return notationTO;
  }
  return null;
}

function $putNotation(this$static, notation){
  $add_5(this$static.allNotations, notation);
}

function NotationDAOImpl(){
  this.allNotations = new TreeSet_0(new NotationDAOImpl$NotationComparator);
}

defineClass(319, 1, {685:1}, NotationDAOImpl);
_.allNotations = null;
var Lcom_sap_spe_conversion_dao_standard_NotationDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'NotationDAOImpl', 319, Ljava_lang_Object_2_classLit);
function NotationDAOImpl$NotationComparator(){
}

defineClass(486, 1, {}, NotationDAOImpl$NotationComparator);
_.compare = function compare_12(notation1, notation2){
  var compare, n1, n2;
  n1 = dynamicCast(notation1, 125);
  n2 = dynamicCast(notation2, 125);
  compare = compareTo_7(n1.m_fromCurrency, n2.m_fromCurrency);
  if (compare != 0) {
    return -compare;
  }
  compare = compareTo_7(n1.m_toCurrency, n2.m_toCurrency);
  if (compare != 0) {
    return -compare;
  }
  return -$compareTo_0(n1.m_date, n2.m_date);
}
;
var Lcom_sap_spe_conversion_dao_standard_NotationDAOImpl$NotationComparator_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'NotationDAOImpl/NotationComparator', 486, Ljava_lang_Object_2_classLit);
function $getNotationPrefixes(this$static){
  var arr;
  if (this$static.notationPrefixes.array.length != 0) {
    arr = initDim(Lcom_sap_spe_conversion_to_NotationPrefixTO_2_classLit, $intern_24, 233, this$static.notationPrefixes.array.length, 0, 1);
    $toArray_1(this$static.notationPrefixes, arr);
    return arr[0];
  }
  return null;
}

function $putNotationPrefix(this$static, notationPrefixTO){
  $add_3(this$static.notationPrefixes, notationPrefixTO);
}

function NotationPrefixDAOImpl(){
  this.notationPrefixes = new ArrayList;
}

defineClass(320, 1, {686:1}, NotationPrefixDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_NotationPrefixDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'NotationPrefixDAOImpl', 320, Ljava_lang_Object_2_classLit);
function $getDescriptions(this$static){
  var typeArray, typeCollection;
  if (this$static.physicalUnitDescriptions.size_0 != 0) {
    typeCollection = new AbstractMap$2(this$static.physicalUnitDescriptions);
    typeArray = initDim(Lcom_sap_spe_conversion_to_PhysicalUnitDescriptionTO_2_classLit, $intern_24, 195, typeCollection.this$01.size_1(), 0, 1);
    $toArray(typeCollection, typeArray);
    return typeArray;
  }
  return null;
}

function $getPhysicalUnits(this$static){
  var typeArray, typeCollection;
  if (this$static.physicalUnits.size_0 != 0) {
    typeCollection = new AbstractMap$2(this$static.physicalUnits);
    typeArray = initDim(Lcom_sap_spe_conversion_to_PhysicalUnitTO_2_classLit, $intern_24, 236, typeCollection.this$01.size_1(), 0, 1);
    $toArray(typeCollection, typeArray);
    return typeArray;
  }
  return null;
}

function $isPhysicalUnitExists(this$static, name_0){
  if (this$static.physicalUnits) {
    return $hasStringValue(this$static.physicalUnits, name_0);
  }
  return false;
}

function $putPhysicalUnitDescriptions(this$static, name_0, physicalUnit){
  $putStringValue(this$static.physicalUnitDescriptions, name_0, physicalUnit);
}

function $putPhysicalUnits(this$static, name_0, physicalUnit){
  $putStringValue(this$static.physicalUnits, name_0, physicalUnit);
}

function PhysicalUnitDAOImpl(){
  this.physicalUnits = new HashMap;
  this.physicalUnitDescriptions = new HashMap;
}

defineClass(235, 1, {623:1}, PhysicalUnitDAOImpl);
var Lcom_sap_spe_conversion_dao_standard_PhysicalUnitDAOImpl_2_classLit = createForClass('com.sap.spe.conversion.dao.standard', 'PhysicalUnitDAOImpl', 235, Ljava_lang_Object_2_classLit);
function $fillMessageDetails(this$static, messageNumber, args){
  var i_0;
  this$static.messageNumber = messageNumber;
  this$static.args = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, args.length, 4, 1);
  for (i_0 = 0; i_0 < args.length; i_0++) {
    this$static.args[i_0] = toString__Ljava_lang_String___devirtual$(args[i_0]);
  }
}

function ConversionException(messageNumber, args){
  BaseException.call(this, valueOf(messageNumber));
  $fillMessageDetails(this, messageNumber, args);
}

defineClass(81, 46, {81:1, 46:1, 3:1, 9:1, 18:1});
_.messageNumber = 0;
var Lcom_sap_spe_conversion_exc_ConversionException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'ConversionException', 81, Lcom_sap_vmc_exception_BaseException_2_classLit);
function ConversionArithmeticException(messageNumber, args){
  ConversionException.call(this, messageNumber, args);
}

defineClass(83, 81, {83:1, 81:1, 46:1, 3:1, 9:1, 18:1}, ConversionArithmeticException);
var Lcom_sap_spe_conversion_exc_ConversionArithmeticException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'ConversionArithmeticException', 83, Lcom_sap_spe_conversion_exc_ConversionException_2_classLit);
function ConversionRuntimeException(messageNumber){
  BaseRuntimeException_0.call(this, valueOf(messageNumber));
}

defineClass(89, 127, $intern_2, ConversionRuntimeException);
var Lcom_sap_spe_conversion_exc_ConversionRuntimeException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'ConversionRuntimeException', 89, Lcom_sap_vmc_exception_BaseRuntimeException_2_classLit);
function ConversionCacheException(){
  ConversionRuntimeException.call(this, 0);
}

defineClass(148, 89, {148:1, 3:1, 9:1, 20:1, 18:1}, ConversionCacheException);
var Lcom_sap_spe_conversion_exc_ConversionCacheException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'ConversionCacheException', 148, Lcom_sap_spe_conversion_exc_ConversionRuntimeException_2_classLit);
function ConversionIllegalArgumentException(messageNumber){
  ConversionRuntimeException.call(this, messageNumber);
}

defineClass(150, 89, $intern_2, ConversionIllegalArgumentException);
var Lcom_sap_spe_conversion_exc_ConversionIllegalArgumentException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'ConversionIllegalArgumentException', 150, Lcom_sap_spe_conversion_exc_ConversionRuntimeException_2_classLit);
function ConversionInconsistentDataException(messageNumber, args){
  ConversionException.call(this, messageNumber, args);
}

defineClass(92, 81, {81:1, 92:1, 46:1, 3:1, 9:1, 18:1}, ConversionInconsistentDataException);
var Lcom_sap_spe_conversion_exc_ConversionInconsistentDataException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'ConversionInconsistentDataException', 92, Lcom_sap_spe_conversion_exc_ConversionException_2_classLit);
function ConversionMissingDataException(messageNumber, args){
  ConversionException.call(this, messageNumber, args);
}

defineClass(17, 81, {81:1, 17:1, 46:1, 3:1, 9:1, 18:1}, ConversionMissingDataException);
var Lcom_sap_spe_conversion_exc_ConversionMissingDataException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'ConversionMissingDataException', 17, Lcom_sap_spe_conversion_exc_ConversionException_2_classLit);
function CurrencyConversionException(messageNumber, args){
  ConversionException.call(this, messageNumber, args);
}

function CurrencyConversionException_0(messageNumber, args){
  BaseException.call(this, valueOf(messageNumber));
  $fillMessageDetails(this, messageNumber, args);
}

defineClass(36, 81, {81:1, 36:1, 46:1, 3:1, 9:1, 18:1}, CurrencyConversionException, CurrencyConversionException_0);
var Lcom_sap_spe_conversion_exc_CurrencyConversionException_2_classLit = createForClass('com.sap.spe.conversion.exc', 'CurrencyConversionException', 36, Lcom_sap_spe_conversion_exc_ConversionException_2_classLit);
function AlternativeUnitFraction(altUnitName, fraction){
  this.m_alternativeUnitName = altUnitName;
  this.m_fraction = fraction;
}

defineClass(254, 1, {711:1, 254:1, 3:1}, AlternativeUnitFraction);
var Lcom_sap_spe_conversion_impl_AlternativeUnitFraction_2_classLit = createForClass('com.sap.spe.conversion.impl', 'AlternativeUnitFraction', 254, Ljava_lang_Object_2_classLit);
function $clinit_ConversionEngine(){
  $clinit_ConversionEngine = emptyMethod;
  getLocation(Lcom_sap_spe_conversion_impl_ConversionEngine_2_classLit);
}

function $checkArg(arg){
  if (arg == null) {
    throw new ConversionIllegalArgumentException(10);
  }
}

function $formatMessage(this$static, text_0, deltasteps){
  var finalMsg, i_0, steps;
  deltasteps >= 0?(steps = this$static.m_minimumWriteStep + deltasteps):(steps = 0);
  finalMsg = new StringBuffer;
  for (i_0 = 0; i_0 < steps; i_0++) {
    finalMsg.string += '   ';
  }
  finalMsg.string += text_0;
  return finalMsg.string;
}

function $getAlternativeUnitFraction(alternativeUnitName, fraction){
  $checkArg(alternativeUnitName);
  $checkArg(fraction);
  return new AlternativeUnitFraction(alternativeUnitName, fraction);
}

function $getCurrencyUnit(this$static, unitName){
  $checkArg(unitName);
  return $getCurrencyUnit_0(this$static.m_currencyUnitObjMgr, unitName);
}

function $getCurrencyValue(value_0, unit){
  $checkArg(value_0);
  $checkArg(unit);
  return new CurrencyValue(value_0, unit);
}

function $getCurrencyValue_0(valueParam, unit, considerFixedPointArithmetic, numberOfDecimalsInDatabase){
  var shift_0, value_0;
  value_0 = valueParam;
  $checkArg(valueParam);
  $checkArg(unit);
  if (considerFixedPointArithmetic) {
    if (unit.getNumberOfDecimals() != numberOfDecimalsInDatabase && round_int(valueParam.scale) == numberOfDecimalsInDatabase) {
      shift_0 = unit.getNumberOfDecimals() - numberOfDecimalsInDatabase;
      value_0 = $movePoint(valueParam, valueParam.scale + shift_0);
    }
  }
  return $getCurrencyValue(value_0, unit);
}

function $getCurrencyValue_1(this$static, value_0, unitName){
  var currencyUnit, currencyValue;
  $checkArg(value_0);
  $checkArg(unitName);
  currencyUnit = ($checkArg(unitName) , $getCurrencyUnit_0(this$static.m_currencyUnitObjMgr, unitName));
  currencyValue = $getCurrencyValue(value_0, currencyUnit);
  return currencyValue;
}

function $getDimension(this$static, dimensionName){
  $checkArg(dimensionName);
  return $getDimension_0(this$static.m_dimensionObjMgr, dimensionName);
}

function $getExchangeRate_0(this$static, exchangeRateTypeName, fromCurrency, toCurrency, date, externalRate){
  var dummyAmount, res, unitOut, valueIn;
  if ($equals_7(fromCurrency, toCurrency)) {
    return $newIdentityExchangeRate(exchangeRateTypeName, fromCurrency, date);
  }
  dummyAmount = ($clinit_ConversionConstants() , C_ONE);
  valueIn = $getCurrencyValue_1(this$static, dummyAmount, fromCurrency);
  unitOut = ($checkArg(toCurrency) , $getCurrencyUnit_0(this$static.m_currencyUnitObjMgr, toCurrency));
  res = $convertToLocalCurrency_0(valueIn, date, unitOut, exchangeRateTypeName, externalRate);
  return res.m_exchangeRate;
}

function $getExchangeRateType(this$static, name_0){
  return $getExchangeRateType_1(this$static.m_exchangeRateTypeObjMgr, name_0);
}

function $getPhysicalUnit(this$static, internalUnitName){
  $checkArg(internalUnitName);
  return $getPhysicalUnit_0(this$static.m_physicalUnitObjMgr, internalUnitName);
}

function $getPhysicalValue(value_0, unit){
  $checkArg(value_0);
  $checkArg(unit);
  return new PhysicalValue(value_0, unit);
}

function $getPhysicalValue_0(value_0, internalUnitName){
  var physicalValue;
  $checkArg(value_0);
  $checkArg(internalUnitName);
  physicalValue = new PhysicalValue_0(value_0, internalUnitName);
  return physicalValue;
}

function $getQuantityUnit(internalUnitName, product){
  $checkArg(internalUnitName);
  $checkArg(product);
  return $getQuantityUnit_0(internalUnitName, product);
}

function $getQuantityValue(value_0, unit){
  $checkArg(unit);
  return new QuantityValue(value_0, unit);
}

function $getQuantityValue_0(value_0, unitName, product){
  var quantityValue;
  $checkArg(value_0);
  $checkArg(unitName);
  $checkArg(product);
  quantityValue = new QuantityValue_0(value_0, unitName, product);
  return quantityValue;
}

function $getZeroExchangeRate(exchangeRateTypeName, fromAndToCurrency){
  return new ExchangeRate_0(exchangeRateTypeName, fromAndToCurrency, fromAndToCurrency, ($clinit_ConversionConstants() , C_OLDEST_DATE), C_ZERO, 1, 1);
}

function $setWriteStep(this$static, newStep){
  this$static.m_minimumWriteStep = newStep;
}

function ConversionEngine(){
  $clinit_ConversionEngine();
  this.m_convFactorObjMgr = new ConversionFactorObjectManager;
  this.m_currencyUnitObjMgr = new CurrencyUnitObjectManager;
  this.m_dimensionObjMgr = new DimensionObjectManager;
  this.m_exchangeRateObjMgr = new ExchangeRateObjectManager;
  this.m_exchangeRateTypeObjMgr = new ExchangeRateTypeObjectManager;
  this.m_notationObjMgr = new NotationObjectManager;
  new NotationPrefixObjectManager;
  this.m_physicalUnitObjMgr = new PhysicalUnitObjectManager;
  this.m_expiringCurrencyObjMgr = new ExpiringCurrencyObjectManager;
  this.m_emuKeysObjMgr = new EmuKeysObjectManager;
  this.m_currencyOverflowCheck = ($clinit_Configuration_1() , !INSTANCE_11 && (INSTANCE_11 = new Configuration) , $clinit_Configuration_1() , INSTANCE_11).currConvOverflowCheckActive;
}

defineClass(449, 1, {159:1, 14:1}, ConversionEngine);
_.m_NumberOfDecimalsForUnitsOfMeasure = 3;
_.m_currencyOverflowCheck = true;
_.m_minimumWriteStep = 0;
var Lcom_sap_spe_conversion_impl_ConversionEngine_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ConversionEngine', 449, Ljava_lang_Object_2_classLit);
function ConversionEngineFactoryImpl(){
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
}

defineClass(440, 669, {}, ConversionEngineFactoryImpl);
var Lcom_sap_spe_conversion_impl_ConversionEngineFactoryImpl_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ConversionEngineFactoryImpl', 440, Lcom_sap_spe_conversion_ConversionEngineFactory_2_classLit);
function ConversionFactor(name_0, date, fromFactor, toFactor, altExRateTypeName){
  this.m_exRateTypeName = name_0;
  this.m_date = date;
  this.m_fromFactor = fromFactor;
  this.m_toFactor = toFactor;
  this.m_altExRateTypeName = altExRateTypeName;
  this.m_altExRateTypeName != null && $equals_7(this.m_altExRateTypeName, '') && (this.m_altExRateTypeName = null);
}

defineClass(256, 1, {683:1, 256:1, 3:1}, ConversionFactor);
_.m_fromFactor = 0;
_.m_toFactor = 0;
var Lcom_sap_spe_conversion_impl_ConversionFactor_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ConversionFactor', 256, Ljava_lang_Object_2_classLit);
function $getConversionFactor(keys_0){
  var array, conversionFactor, conversionFactorTOs, dao, exRateTypeName, fromCurrency, i_0, list, toCurrency;
  exRateTypeName = keys_0[2];
  fromCurrency = keys_0[3];
  toCurrency = keys_0[4];
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ConversionFactor', 'dao.standard'), 353);
  conversionFactorTOs = $getConversionFactors(dao, exRateTypeName, fromCurrency, toCurrency);
  list = new ArrayList;
  for (i_0 = 0; i_0 < conversionFactorTOs.length; i_0++) {
    conversionFactor = new ConversionFactor(exRateTypeName, conversionFactorTOs[i_0].date, conversionFactorTOs[i_0].fromFactor, conversionFactorTOs[i_0].toFactor, conversionFactorTOs[i_0].altExRateTypeName);
    setCheck(list.array, list.array.length, conversionFactor);
  }
  array = initDim(Lcom_sap_spe_conversion_IConversionFactor_2_classLit, {618:1, 3:1, 6:1, 4:1, 5:1}, 683, list.array.length, 0, 1);
  $toArray_1(list, array);
  return array;
}

function ConversionFactorBuilder(){
}

defineClass(450, 663, $intern_22, ConversionFactorBuilder);
_.create_0 = function create_23(keys_0){
  var objectType, convEngine, dao;
  objectType = keys_0[1];
  if ($equals_7(objectType, 'EM')) {
    return convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , $getExRate(convEngine.m_emuKeysObjMgr) , $getCurrency(convEngine.m_emuKeysObjMgr) , dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ConversionFactor', 'dao.standard'), 353) , $getEmuCurrencyUnits(dao);
  }
  if ($equals_7(objectType, 'FA')) {
    return $getConversionFactor(keys_0);
  }
  throw new ConversionRuntimeException(701);
}
;
var Lcom_sap_spe_conversion_impl_ConversionFactorBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ConversionFactorBuilder', 450, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getCacheManger(){
  var mgr;
  mgr = ($clinit_CacheManagerFactory() , new CacheManagerImpl);
  try {
    $applyConfiguration_0(mgr, 'AP_PRC_CNV');
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 80)) {
      throw new ConversionRuntimeException(0);
    }
     else 
      throw unwrap($e0);
  }
  return mgr;
}

function ConversionObjectManager(){
  var cacheManager, region;
  cacheManager = $getCacheManger();
  region = (cacheManager.cacheRegion = new CacheRegionImpl(cacheManager.appName, '/AP/PRC/Conversion') , cacheManager.cacheRegion);
  if (!region) {
    throw new ConversionRuntimeException(700);
  }
  this.cacheFacade = $getCacheFacade(region);
}

defineClass(88, 1, {});
var Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ConversionObjectManager', 88, Ljava_lang_Object_2_classLit);
function $getConversionFactor_0(this$static, exRateTypeName, fromCurrency, toCurrency, date){
  var conversionFactor, conversionFactors, i_0, key;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  conversionFactor = null;
  key = create_7('FA', 'FA', exRateTypeName, fromCurrency, toCurrency);
  conversionFactors = dynamicCast(this$static.cacheFacade.get_3(key, false), 618);
  for (i_0 = 0; i_0 < conversionFactors.length; i_0++) {
    if ($beforeEquals(dynamicCast(conversionFactors[i_0], 256).m_date, date)) {
      conversionFactor = conversionFactors[i_0];
      break;
    }
  }
  return conversionFactor;
}

function $getEMUCurrencyUnitNames(this$static){
  var emuCurrencyUnitNames, i_0, key, set_0;
  set_0 = new TreeSet;
  key = create_4('FA', 'EM');
  emuCurrencyUnitNames = dynamicCast(this$static.cacheFacade.get_3(key, false), 10);
  for (i_0 = 0; i_0 < emuCurrencyUnitNames.length; i_0++) {
    $add_5(set_0, emuCurrencyUnitNames[i_0]);
  }
  return set_0;
}

function ConversionFactorObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(505, 88, {}, ConversionFactorObjectManager);
var Lcom_sap_spe_conversion_impl_ConversionFactorObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ConversionFactorObjectManager', 505, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function $clinit_ConversionProduct(){
  $clinit_ConversionProduct = emptyMethod;
  getLocation(Lcom_sap_spe_conversion_impl_ConversionProduct_2_classLit);
}

function $addAlternativeUoMToFractionMapping(this$static, alternativeUnitName, numerator, denominator, exponent){
  var fraction;
  fraction = new Fraction_0(numerator, denominator, exponent);
  $putStringValue(this$static.m_alternativeUnitToFractionMapping, alternativeUnitName, fraction);
}

function $containsUnit(this$static, unit){
  var convEng, dimension, internalUnitName, physUnit, unitName;
  unitName = unit.getUnitName_0();
  dimension = unit.getDimensionName();
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  if (!$equals_7(dimension, 'AAAADL')) {
    while (null.nullMethod()) {
      internalUnitName = null.nullMethod();
      try {
        physUnit = ($checkArg(internalUnitName) , $getPhysicalUnit_0(convEng.m_physicalUnitObjMgr, internalUnitName));
        if ($equals_7(physUnit.getDimensionName(), dimension)) {
          return true;
        }
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 17)) {
          $clinit_ConversionConstants();
        }
         else 
          throw unwrap($e0);
      }
    }
    return false;
  }
  return $hasStringValue(this$static.m_alternativeUnitToFractionMapping, unitName);
}

function $getAlternativeUnitConversionFraction(this$static, targetUnit){
  var fraction;
  fraction = dynamicCast($getStringValue(this$static.m_alternativeUnitToFractionMapping, targetUnit.m_physicalUnit.getUnitName_0()), 38);
  if (fraction) {
    return fraction;
  }
  return new Fraction(0, 0);
}

function $getAlternativeUnitConversionFractions(this$static){
  var altUnitConvFractions, i_0, unitName;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  altUnitConvFractions = initDim(Lcom_sap_spe_conversion_impl_AlternativeUnitFraction_2_classLit, $intern_24, 254, this$static.m_alternativeUnitToFractionMapping.size_0, 0, 1);
  i_0 = 0;
  while (null.nullMethod()) {
    unitName = null.nullMethod();
    altUnitConvFractions[i_0] = $getAlternativeUnitFraction(unitName, dynamicCast($getStringValue(this$static.m_alternativeUnitToFractionMapping, unitName), 38));
    ++i_0;
  }
  return altUnitConvFractions;
}

function $getBaseUnit(this$static){
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  return $getQuantityUnit(this$static.m_baseUnit.getUnitName_0(), this$static);
}

function ConversionProduct(productID, externalProductId, internalBaseUnitName){
  $clinit_ConversionProduct();
  var convEng;
  this.m_ID = productID;
  this.m_externalId = externalProductId;
  this.m_description = 'description';
  this.m_alternativeUnitToFractionMapping = new HashMap_0(3);
  $addAlternativeUoMToFractionMapping(this, internalBaseUnitName, 1, 1, 0);
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  this.m_baseUnit = ($checkArg(internalBaseUnitName) , $getPhysicalUnit_0(convEng.m_physicalUnitObjMgr, internalBaseUnitName));
}

defineClass(543, 1, $intern_21, ConversionProduct);
_.containsUnit = function containsUnit(unit){
  return $containsUnit(this, unit);
}
;
_.getAlternativeUnitConversionFraction = function getAlternativeUnitConversionFraction(targetUnit){
  return $getAlternativeUnitConversionFraction(this, targetUnit);
}
;
_.getAlternativeUnitConversionFractions = function getAlternativeUnitConversionFractions(){
  return $getAlternativeUnitConversionFractions(this);
}
;
_.getBaseUnit_1 = function getBaseUnit_0(){
  return $getBaseUnit(this);
}
;
_.getExternalId_0 = function getExternalId_0(){
  return this.m_externalId;
}
;
_.getId_0 = function getId_4(){
  return this.m_ID;
}
;
var Lcom_sap_spe_conversion_impl_ConversionProduct_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ConversionProduct', 543, Ljava_lang_Object_2_classLit);
function CurrValConvResult(amount, exchangeRate){
  this.m_amount = amount;
  this.m_exchangeRate = exchangeRate;
}

defineClass(157, 1, {}, CurrValConvResult);
var Lcom_sap_spe_conversion_impl_CurrValConvResult_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrValConvResult', 157, Ljava_lang_Object_2_classLit);
function $setTrace(this$static, foreignCurrency, localCurrency, foreignAmount, localAmount, directAmount){
  this$static.m_CurrencyConversionTraceResult = new CurrencyConversionTraceResult;
  !!directAmount && ($signum(directAmount) < 0?$negate(directAmount):directAmount);
  !!foreignAmount && ($signum(foreignAmount) < 0?$negate(foreignAmount):foreignAmount);
  !!foreignCurrency && $setForeignCurrency(this$static.m_CurrencyConversionTraceResult, foreignCurrency);
  !!localAmount && ($signum(localAmount) < 0?$negate(localAmount):localAmount);
  !!localCurrency && $setLocalCurrency(this$static.m_CurrencyConversionTraceResult, localCurrency);
}

function CurrecyConversionTracer(){
}

defineClass(489, 1, {}, CurrecyConversionTracer);
_.m_CurrencyConversionTraceResult = null;
var Lcom_sap_spe_conversion_impl_CurrecyConversionTracer_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrecyConversionTracer', 489, Ljava_lang_Object_2_classLit);
function $setExchangeRate(this$static, exchangeRate){
  this$static.m_exchangeRate = exchangeRate;
}

function CurrencyConversionResult(value_0){
  this.m_value = value_0;
}

defineClass(337, 1, $intern_21, CurrencyConversionResult);
var Lcom_sap_spe_conversion_impl_CurrencyConversionResult_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyConversionResult', 337, Ljava_lang_Object_2_classLit);
function $setForeignCurrency(this$static, foreignCurrency){
  this$static.m_ForeignCurrency = foreignCurrency;
}

function $setLocalCurrency(this$static, localCurrency){
  this$static.m_LocalCurrency = localCurrency;
}

function CurrencyConversionTraceResult(){
}

defineClass(540, 1, $intern_4, CurrencyConversionTraceResult);
var Lcom_sap_spe_conversion_impl_CurrencyConversionTraceResult_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyConversionTraceResult', 540, Ljava_lang_Object_2_classLit);
function CurrencyConversionTracerFactoryImpl(){
  this.currencyConversionTracer = new CurrecyConversionTracer;
}

defineClass(438, 667, {}, CurrencyConversionTracerFactoryImpl);
var Lcom_sap_spe_conversion_impl_CurrencyConversionTracerFactoryImpl_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyConversionTracerFactoryImpl', 438, Lcom_sap_spe_conversion_CurrencyConversionTracerFactory_2_classLit);
function $hashCode_3(this$static){
  var hash, name_0;
  name_0 = this$static.m_internalName;
  hash = 217 + (null == name_0?0:getHashCode_0(name_0));
  return hash;
}

function DimensionalUnit(internalUnitName, noOfDecimalPlaces, isoCode, isPrimaryUnitForIsoCodeConversion){
  this.m_internalName = internalUnitName;
  this.m_noOfDecimalPlaces = noOfDecimalPlaces;
  this.m_isoCode = isoCode;
  this.m_isPrimaryUnitForIsoCodeConversion = isPrimaryUnitForIsoCodeConversion;
}

defineClass(330, 1, {99:1, 3:1});
_.equals$ = function equals_11(o){
  var unit;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != this.___clazz$) {
    return false;
  }
  unit = dynamicCast(o, 99);
  return $equals_7(this.m_internalName, unit.getUnitName_0());
}
;
_.getIsoCode = function getIsoCode(){
  return this.m_isoCode;
}
;
_.getNumberOfDecimals = function getNumberOfDecimals(){
  return this.m_noOfDecimalPlaces;
}
;
_.getUnitName_0 = function getUnitName_0(){
  return this.m_internalName;
}
;
_.hashCode$ = function hashCode_13(){
  return $hashCode_3(this);
}
;
_.isPrimaryUnitForIsoCodeConversion_0 = function isPrimaryUnitForIsoCodeConversion_0(){
  return this.m_isPrimaryUnitForIsoCodeConversion;
}
;
_.toString$ = function toString_12(){
  return this.m_internalName;
}
;
_.m_isPrimaryUnitForIsoCodeConversion = false;
_.m_noOfDecimalPlaces = 0;
var Lcom_sap_spe_conversion_impl_DimensionalUnit_2_classLit = createForClass('com.sap.spe.conversion.impl', 'DimensionalUnit', 330, Ljava_lang_Object_2_classLit);
function $equals_3(this$static, o){
  var unit;
  if (this$static === o) {
    return true;
  }
  if (o == null || !instanceOf(o, 26)) {
    return false;
  }
  unit = dynamicCast(o, 26);
  return $equals_7(this$static.m_internalName, unit.getUnitName_0());
}

function CurrencyUnit(internalUnitName, noOfDecimalPlaces, isoCode, isPrimaryUnitForIsoCodeConversion){
  DimensionalUnit.call(this, internalUnitName, noOfDecimalPlaces, isoCode, isPrimaryUnitForIsoCodeConversion);
}

defineClass(55, 330, {26:1, 99:1, 55:1, 3:1}, CurrencyUnit);
_.equals$ = function equals_12(o){
  return $equals_3(this, o);
}
;
_.getExternalUnitName = function getExternalUnitName(){
  return this.m_internalName;
}
;
_.getShortDescription = function getShortDescription(){
  var convEng;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  return $getExternalUnitName(convEng.m_currencyUnitObjMgr, this);
}
;
_.hashCode$ = function hashCode_14(){
  return $hashCode_3(this);
}
;
_.isEMUCurrency = function isEMUCurrency(){
  var convEng;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  return $isEMUCurrency(convEng.m_currencyUnitObjMgr, this.m_internalName);
}
;
var Lcom_sap_spe_conversion_impl_CurrencyUnit_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyUnit', 55, Lcom_sap_spe_conversion_impl_DimensionalUnit_2_classLit);
function $getDescriptions_0(){
  var i_0, map_0;
  map_0 = new HashMap;
  new CurrencyUnitDAOImpl;
  for (i_0 = 0; i_0 < null.length; i_0++) {
    $put_0(map_0, null.nullField, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [null.nullField, null.nullField]));
  }
  return map_0;
}

function $getEmuCurrencies(){
  var convEngine, currencyUnit, emuCurrencyUnitNames, iter, map_0, unitName;
  map_0 = new HashMap;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  emuCurrencyUnitNames = $getEMUCurrencyUnitNames(convEngine.m_convFactorObjMgr);
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(emuCurrencyUnitNames.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    unitName = dynamicCastToString($next_3(iter));
    try {
      currencyUnit = ($checkArg(unitName) , $getCurrencyUnit_0(convEngine.m_currencyUnitObjMgr, unitName));
      unitName == null?$put_1(map_0.hashCodeMap, null, currencyUnit):map_0.stringMap.put_1(unitName, currencyUnit);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        continue;
      }
       else 
        throw unwrap($e0);
    }
  }
  return map_0;
}

function $getIsoUnits(){
  var allCurrencyUnits, allIsoUnits, ambiguousIsoUnits, convEngine, isoCode, iterator, iterator0, moreThanOnePrimaryUnits, o, primaryUnit, retval, unambiguousIsoUnits, unit, units, unitsEnum;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  allCurrencyUnits = $getCurrencyUnits_0(convEngine.m_currencyUnitObjMgr);
  allIsoUnits = new HashMap_0(allCurrencyUnits.map_0.size_1());
  for (iterator0 = $iterator_1(new AbstractNavigableMap$NavigableKeySet(allCurrencyUnits.map_0)); $hasNext_0(iterator0.val$entryIterator2.iter);) {
    unit = dynamicCast($next_3(iterator0), 26);
    if (unit.getIsoCode() == null) {
      continue;
    }
    o = $putStringValue(allIsoUnits, unit.getIsoCode(), unit);
    if (o == null) {
      continue;
    }
     else if (instanceOf(o, 26)) {
      units = new Vector_0;
      $add_3(units.arrayList, o);
      $add_3(units.arrayList, unit);
      $putStringValue(allIsoUnits, unit.getIsoCode(), units);
    }
     else if (instanceOf(o, 41)) {
      $add_6(dynamicCast(o, 41), unit);
      $putStringValue(allIsoUnits, unit.getIsoCode(), o);
    }
  }
  unambiguousIsoUnits = new HashMap_0(allIsoUnits.size_0);
  ambiguousIsoUnits = new HashMap_0(10);
  for (iterator = $iterator_0(new AbstractMap$2(allIsoUnits)); iterator.val$outerIter2.hasNext();) {
    o = $next_2(iterator);
    if (instanceOf(o, 26)) {
      $putStringValue(unambiguousIsoUnits, dynamicCast(o, 26).getIsoCode(), o);
    }
     else if (instanceOf(o, 41)) {
      units = dynamicCast(o, 41);
      primaryUnit = null;
      isoCode = null;
      moreThanOnePrimaryUnits = false;
      for (unitsEnum = enumeration(units.arrayList); unitsEnum.val$it1.hasNext();) {
        unit = dynamicCast(unitsEnum.val$it1.next(), 26);
        isoCode == null && (isoCode = unit.getIsoCode());
        unit.isPrimaryUnitForIsoCodeConversion_0() && (!primaryUnit?(primaryUnit = unit):(moreThanOnePrimaryUnits = true));
      }
      !!primaryUnit && !moreThanOnePrimaryUnits?isoCode == null?$put_1(unambiguousIsoUnits.hashCodeMap, null, primaryUnit):unambiguousIsoUnits.stringMap.put_1(isoCode, primaryUnit):$putStringValue(ambiguousIsoUnits, isoCode, ($clinit_Boolean() , TRUE));
    }
  }
  retval = new HashMap;
  retval.stringMap.put_1('UU', unambiguousIsoUnits);
  retval.stringMap.put_1('AU', ambiguousIsoUnits);
  return retval;
}

function $getUnits(){
  var currencyUnit, currencyUnitTOs, currencyUnits, dao, i_0;
  currencyUnits = new HashMap;
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'CurrencyUnit', 'dao.standard'), 619);
  currencyUnitTOs = $getCurrencyUnits(dao);
  $putStringValue(currencyUnits, '%', new CurrencyUnit('%', 3, null, false));
  $putStringValue(currencyUnits, '%7', new CurrencyUnit('%7', 7, null, false));
  $putStringValue(currencyUnits, '%6', new CurrencyUnit('%', 6, null, false));
  $putStringValue(currencyUnits, '', new CurrencyUnit('', 2, null, false));
  for (i_0 = 0; i_0 < currencyUnitTOs.length; i_0++) {
    currencyUnit = new CurrencyUnit(currencyUnitTOs[i_0].name_0, currencyUnitTOs[i_0].numberOfDecimals, currencyUnitTOs[i_0].isoCode, currencyUnitTOs[i_0].isPrimaryUnitForIsoCodeConversion);
    $putStringValue(currencyUnits, currencyUnit.m_internalName, currencyUnit);
  }
  $replaceCurrenyUnitWithExpiringCurrencies(currencyUnits);
  return currencyUnits;
}

function $replaceCurrenyUnitWithExpiringCurrencies(currencyUnits){
  var convEngine, currencyUnit, entryOfTcurE, entryOfTcurY, exCurr, expCurr, expiringCurrencies, expiringCurrenciesTmp, iter, iter0, iterator, warningPeriods;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  warningPeriods = $getWarningDates(convEngine.m_expiringCurrencyObjMgr);
  expiringCurrencies = $getExpiringCurrencies_0(convEngine.m_expiringCurrencyObjMgr).values_0();
  expiringCurrenciesTmp = new HashMap;
  for (iter0 = expiringCurrencies.iterator(); iter0.hasNext();) {
    entryOfTcurE = dynamicCast(iter0.next(), 10);
    currencyUnit = dynamicCast($getStringValue(currencyUnits, entryOfTcurE[0]), 55);
    if (currencyUnit) {
      dynamicCast($getStringValue(currencyUnits, entryOfTcurE[2]), 55);
      exCurr = new ExpiringCurrency(currencyUnit.m_internalName, currencyUnit.m_noOfDecimalPlaces, currencyUnit.m_isoCode, currencyUnit.m_isPrimaryUnitForIsoCodeConversion, entryOfTcurE[1]);
      for (iterator = warningPeriods.iterator(); iterator.i < iterator.this$01.size_1();) {
        entryOfTcurY = (checkCriticalElement(iterator.i < iterator.this$01.size_1()) , dynamicCast(iterator.this$01.get_5(iterator.last = iterator.i++), 10));
        $equalsIgnoreCase(exCurr.m_expiringReason, entryOfTcurY[0]) && $addWarningPeriod_0(exCurr, entryOfTcurY[1], entryOfTcurY[2], entryOfTcurY[3]);
      }
      $putStringValue(expiringCurrenciesTmp, exCurr.m_internalName, exCurr);
    }
  }
  for (iter = $iterator_0(new AbstractMap$2(expiringCurrenciesTmp)); iter.val$outerIter2.hasNext();) {
    expCurr = dynamicCast($next_2(iter), 260);
    if ($getStringValue(currencyUnits, expCurr.m_internalName) != null) {
      $removeStringValue(currencyUnits, expCurr.m_internalName);
      $putStringValue(currencyUnits, expCurr.m_internalName, expCurr);
    }
  }
}

function CurrencyUnitBuilder(){
}

defineClass(451, 663, $intern_22, CurrencyUnitBuilder);
_.create_0 = function create_24(keys_0){
  var objectType;
  objectType = keys_0[1];
  if ($equals_7(objectType, 'UN')) {
    return $getUnits();
  }
  if ($equals_7(objectType, 'IS')) {
    return $getIsoUnits();
  }
  if ($equals_7(objectType, 'EM')) {
    return $getEmuCurrencies();
  }
  if ($equals_7(objectType.substr(0, 2), 'DE')) {
    return $getDescriptions_0();
  }
  throw new ConversionRuntimeException(701);
}
;
var Lcom_sap_spe_conversion_impl_CurrencyUnitBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyUnitBuilder', 451, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function CurrencyUnitComparator(){
}

defineClass(559, 1, $intern_21, CurrencyUnitComparator);
_.compare = function compare_13(currencyUnit1, currencyUnit2){
  var compare, externalUnitName1, externalUnitName2, unit1, unit2, unitName1, unitName2;
  unit1 = dynamicCast(currencyUnit1, 26);
  unit2 = dynamicCast(currencyUnit2, 26);
  unitName1 = unit1.getUnitName_0();
  unitName2 = unit2.getUnitName_0();
  compare = compareTo_7(unitName1, unitName2);
  if (compare != 0) {
    return compare;
  }
  externalUnitName1 = unit1.getExternalUnitName();
  externalUnitName2 = unit2.getExternalUnitName();
  return compareTo_7(externalUnitName1, externalUnitName2);
}
;
var Lcom_sap_spe_conversion_impl_CurrencyUnitComparator_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyUnitComparator', 559, Ljava_lang_Object_2_classLit);
function $getCurrencyUnit_0(this$static, unitName){
  var key, unit, units;
  if (unitName == null) {
    return null;
  }
  key = create_4('CU', 'UN');
  units = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  unit = null;
  units.isEmpty() || (unit = dynamicCast(units.get_4(unitName), 26));
  if (!unit) {
    throw new ConversionMissingDataException(131, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitName]));
  }
  return unit;
}

function $getCurrencyUnits_0(this$static){
  var currencyUnit, currencyUnits, iter, key, map_0;
  key = create_4('CU', 'UN');
  map_0 = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  currencyUnits = new TreeSet_0(new CurrencyUnitComparator);
  for (iter = map_0.values_0().iterator(); iter.hasNext();) {
    currencyUnit = dynamicCast(iter.next(), 26);
    $equals_7(currencyUnit.getUnitName_0(), '') || currencyUnits.map_0.put_0(currencyUnit, ($clinit_Boolean() , FALSE)) == null;
  }
  return currencyUnits;
}

function $getExternalUnitName(this$static, currencyUnit){
  var descriptions, key, language, map_0;
  language = getActiveLanguage();
  key = create_5('CU', 'DE', language);
  map_0 = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  descriptions = dynamicCast(map_0.get_4(currencyUnit.m_internalName), 10);
  if (descriptions == null) {
    return '';
  }
  return descriptions[0];
}

function $isEMUCurrency(this$static, unitName){
  var key, map_0;
  key = create_4('CU', 'EM');
  map_0 = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return map_0.get_4(unitName) != null;
}

function CurrencyUnitObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(506, 88, {}, CurrencyUnitObjectManager);
var Lcom_sap_spe_conversion_impl_CurrencyUnitObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyUnitObjectManager', 506, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function $getValueAsString(this$static){
  var df, i_0, num, pattern;
  num = dynamicCast(this$static.m_unit, 27).getNumberOfDecimals();
  pattern = '#,##0.';
  for (i_0 = 1; i_0 <= num; i_0++) {
    pattern += '0';
  }
  $compareTo_7(this$static.m_value, $setScale(this$static.m_value, 0, valueOf_7(1))) == 0?(df = ($clinit_NumberFormat() , new NumberFormat_0('#,##0', $getDefaultNative()))):(df = ($clinit_NumberFormat() , new NumberFormat_0(pattern, $getDefaultNative())));
  return $format_0(df, __parseAndValidateDouble($toString_6(this$static.m_value)));
}

defineClass(680, 1, $intern_28);
_.equals$ = function equals_13(obj){
  var dimValue;
  if (this === obj) {
    return true;
  }
  if (obj == null || getClass__Ljava_lang_Class___devirtual$(obj) != this.___clazz$) {
    return false;
  }
  dimValue = dynamicCast(obj, 181);
  if ($equals_7(dimValue.getUnitName_0(), this.m_unit.getUnitName_0()) && $equals_8(dimValue.getValue_0(), this.m_value)) {
    return true;
  }
  return false;
}
;
_.getUnit = function getUnit(){
  return this.m_unit;
}
;
_.getUnitName_0 = function getUnitName_1(){
  return this.m_unit.getUnitName_0();
}
;
_.getValue_0 = function getValue_1(){
  return this.m_value;
}
;
_.getValueAsString = function getValueAsString(){
  return $getValueAsString(this);
}
;
_.hashCode$ = function hashCode_15(){
  var hash;
  hash = 217 + this.m_unit.hashCode$();
  hash = 31 * hash + $hashCode_6(this.m_value);
  return hash;
}
;
_.toString$ = function toString_13(){
  return this.getValueAsString() + ' ' + this.m_unit.toString$();
}
;
var Lcom_sap_spe_conversion_impl_DimensionalValue_2_classLit = createForClass('com.sap.spe.conversion.impl', 'DimensionalValue', 680, Ljava_lang_Object_2_classLit);
function $convertToForeignCurrency(this$static, conversionDate, foreignCurrency, exchangeRateTypeName, externalRateParam){
  var externalRate, res, result;
  externalRate = externalRateParam;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  !externalRateParam && (externalRate = ($clinit_ConversionConstants() , C_ZERO));
  res = convertToForeignCurrency(conversionDate, this$static.m_value, dynamicCast(this$static.m_unit, 55), dynamicCast(foreignCurrency, 55), exchangeRateTypeName, externalRate);
  result = new CurrencyConversionResult($getCurrencyValue(res.m_amount, foreignCurrency));
  $setExchangeRate(result, res.m_exchangeRate);
  return result;
}

function $convertToLocalCurrency(this$static, conversionDate, localCurrency, exchangeRateTypeName){
  var rate;
  rate = ($clinit_ConversionConstants() , C_ZERO);
  return $convertToLocalCurrency_0(this$static, conversionDate, localCurrency, exchangeRateTypeName, rate);
}

function $convertToLocalCurrency_0(this$static, convDate, localCurrency, exchangeRateTypeName, externalRateParam){
  var externalRate, res, result;
  externalRate = externalRateParam;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  !externalRateParam && (externalRate = ($clinit_ConversionConstants() , C_ZERO));
  res = convertToLocalCurrency(convDate, this$static.m_value, dynamicCast(this$static.m_unit, 55), dynamicCast(localCurrency, 55), exchangeRateTypeName, externalRate);
  result = new CurrencyConversionResult($getCurrencyValue(res.m_amount, localCurrency));
  $setExchangeRate(result, res.m_exchangeRate);
  return result;
}

function $getValueAsString_0(this$static){
  var df, i_0, num, pattern;
  num = dynamicCast(this$static.m_unit, 55).m_noOfDecimalPlaces;
  if (num > 0) {
    pattern = '#,##0.';
    for (i_0 = 1; i_0 <= num; i_0++) {
      pattern += '0';
    }
    df = ($clinit_NumberFormat() , new NumberFormat_0(pattern, $getDefaultNative()));
  }
   else {
    df = ($clinit_NumberFormat() , new NumberFormat_0('#,##0', $getDefaultNative()));
  }
  return $format_0(df, __parseAndValidateDouble($toString_6(this$static.m_value)));
}

function $toString_2(this$static){
  return $getValueAsString_0(this$static) + ' ' + this$static.m_unit.toString$();
}

function CurrencyValue(value_0, unit){
  this.m_value = value_0;
  this.m_unit = dynamicCast(unit, 55);
  this.m_value = $setScale(this.m_value, this.m_unit.getNumberOfDecimals(), valueOf_7(4));
}

defineClass(545, 680, {209:1, 181:1, 3:1, 4:1}, CurrencyValue);
_.getValueAsString = function getValueAsString_0(){
  return $getValueAsString_0(this);
}
;
_.toString$ = function toString_14(){
  return $toString_2(this);
}
;
var Lcom_sap_spe_conversion_impl_CurrencyValue_2_classLit = createForClass('com.sap.spe.conversion.impl', 'CurrencyValue', 545, Lcom_sap_spe_conversion_impl_DimensionalValue_2_classLit);
function InvertExchangeRate(exchangeRate, convDate){
  var convEng, convFactor1, convFactor2, resRate, shiftDenominator, shiftNominator;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  $setScale(exchangeRate.resultingRate, 11, valueOf_7(4));
  convFactor1 = $getConversionFactor_0(convEng.m_convFactorObjMgr, exchangeRate.name_0, exchangeRate.toCurrency, exchangeRate.fromCurrency, convDate);
  if (!convFactor1) {
    $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
    throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [exchangeRate.toCurrency, exchangeRate.fromCurrency, $getExchangeRateType_0(exchangeRate), convDate.format(null)]));
  }
  convFactor2 = $getConversionFactor_0(convEng.m_convFactorObjMgr, exchangeRate.name_0, exchangeRate.fromCurrency, exchangeRate.toCurrency, convDate);
  if (!convFactor2) {
    $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
    throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [exchangeRate.fromCurrency, exchangeRate.toCurrency, $getExchangeRateType_0(exchangeRate), convDate.format(null)]));
  }
  shiftNominator = dynamicCast($get_12(($clinit_ExchangeRateObjectManager() , C_EXPONENTS), new Long(mul(fromInt(convFactor1.m_fromFactor), fromInt(convFactor2.m_fromFactor)))), 16).value_0;
  shiftDenominator = dynamicCast($get_12(C_EXPONENTS, new Long(mul(fromInt(convFactor1.m_toFactor), fromInt(convFactor2.m_toFactor)))), 16).value_0;
  resRate = $divide($negate(($clinit_ConversionConstants() , C_ONE)), $setScale(exchangeRate.resultingRate, 5, valueOf_7(4)), 5, valueOf_7(4));
  resRate = $movePoint(resRate, resRate.scale - (shiftNominator - shiftDenominator));
  if ($compareTo_7($signum(resRate) < 0?$negate(resRate):resRate, C_999999999) == 1 && $compareTo_7(resRate, C_ZERO) == 0) {
    $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
    throw new CurrencyConversionException(127, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [exchangeRate.fromCurrency, exchangeRate.toCurrency, $getExchangeRateType_0(exchangeRate), convDate.format(null)]));
  }
  return resRate;
}

function checkOverflowForeignCurrency(exRate, foreignCurrency, foreignFactor, faktor1){
  var exRateForTesting, foreignFactorBigDecimal, lengthOfFakto1String, lengthOfFakto2String, result;
  foreignFactorBigDecimal = new BigDecimal_2(fromInt((new Integer(foreignFactor)).value_0));
  lengthOfFakto1String = $toPlainString($signum(faktor1) < 0?$negate(faktor1):faktor1).length - 1;
  round_int(faktor1.scale) != 0 && (lengthOfFakto1String = lengthOfFakto1String - 1);
  if ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), ($clinit_ConversionConstants() , C_ZERO)) == 1) {
    foreignFactor > 1?(lengthOfFakto2String = 16 + $toPlainString(foreignFactorBigDecimal).length - 1):(lengthOfFakto2String = 16);
  }
   else {
    exRateForTesting = $setScale($movePointRight($abs($setScale(exRate.resultingRate, 11, valueOf_7(4))), 11), 0, ($clinit_RoundingMode() , UNNECESSARY));
    lengthOfFakto2String = $toPlainString(exRateForTesting).length - 1;
    foreignFactor > 1?(lengthOfFakto2String = lengthOfFakto2String + $toPlainString(foreignFactorBigDecimal).length - 1 + foreignCurrency.m_noOfDecimalPlaces):(lengthOfFakto2String = lengthOfFakto2String + foreignCurrency.m_noOfDecimalPlaces);
  }
  if ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == 1 && lengthOfFakto1String + lengthOfFakto2String < 29 || $compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) != 1 && lengthOfFakto1String + lengthOfFakto2String < 28) {
    result = initDim(Ljava_math_BigDecimal_2_classLit, $intern_7, 12, 2, 0, 1);
    result[0] = faktor1;
    result[1] = $setScale(exRate.resultingRate, 11, valueOf_7(4));
    return result;
  }
  throw new CurrencyConversionException(2, null);
}

function convertAccordingToEMU(exRateType, fromAmount, fromCurrency, toCurrency, date){
  var baseCurrency, convEng, crossRate1, crossRate2, directConversion, euroAmount, noOfDecimals, result, retCode;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14);
  baseCurrency = exRateType.m_baseCurrency;
  directConversion = false;
  noOfDecimals = 3;
  euroAmount = fromAmount;
  ($equals_7(baseCurrency, fromCurrency) || $equals_7(baseCurrency, toCurrency)) && (directConversion = true);
  if (!$equals_7(baseCurrency, fromCurrency)) {
    retCode = new ReturnCode;
    crossRate1 = $determineCrossRate(exRateType.m_name, fromCurrency, baseCurrency, date, retCode);
    if (retCode.m_returnCode != 0) {
      $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
      if (retCode.m_returnCode == 1) {
        throw new ConversionMissingDataException(105, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, baseCurrency, exRateType.m_name, date.format(null)]));
      }
       else if (retCode.m_returnCode == 2) {
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, baseCurrency, exRateType.m_name, date.format(null)]));
      }
       else if (retCode.m_returnCode == 3) {
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [baseCurrency, fromCurrency, exRateType.m_name, date.format(null)]));
      }
    }
    directConversion && (noOfDecimals = $getCurrencyUnit_0(convEng.m_currencyUnitObjMgr, baseCurrency).getNumberOfDecimals());
    if ($compareTo_7($setScale(crossRate1.resultingRate, 5, valueOf_7(4)), ($clinit_ConversionConstants() , C_ZERO)) == 1) {
      euroAmount = $multiply(fromAmount, $setScale(crossRate1.resultingRate, 11, valueOf_7(4)));
      euroAmount = $multiply(euroAmount, new BigDecimal_2(fromInt((new Integer(crossRate1.toFactor)).value_0)));
      euroAmount = $divide(euroAmount, new BigDecimal_2(fromInt((new Integer(crossRate1.fromFactor)).value_0)), noOfDecimals, valueOf_7(4));
    }
     else {
      euroAmount = $multiply(fromAmount, new BigDecimal_2(fromInt((new Integer(crossRate1.toFactor)).value_0)));
      euroAmount = $negate($divide(euroAmount, $multiply($setScale(crossRate1.resultingRate, 11, valueOf_7(4)), new BigDecimal_2(fromInt((new Integer(crossRate1.fromFactor)).value_0))), noOfDecimals, valueOf_7(4)));
    }
    if (directConversion) {
      return euroAmount;
    }
  }
  if ($equals_7(baseCurrency, toCurrency)) {
    result = $setScale(euroAmount, $getCurrencyUnit_0(convEng.m_currencyUnitObjMgr, toCurrency).getNumberOfDecimals(), valueOf_7(4));
  }
   else {
    retCode = new ReturnCode;
    crossRate2 = $determineCrossRate(exRateType.m_name, toCurrency, baseCurrency, date, retCode);
    if (retCode.m_returnCode != 0) {
      $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
      if (retCode.m_returnCode == 1) {
        throw new ConversionMissingDataException(105, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, baseCurrency, exRateType.m_name, date.format(null)]));
      }
       else if (retCode.m_returnCode == 2) {
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, baseCurrency, exRateType.m_name, date.format(null)]));
      }
       else if (retCode.m_returnCode == 3) {
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [baseCurrency, toCurrency, exRateType.m_name, date.format(null)]));
      }
    }
    noOfDecimals = $getCurrencyUnit_0(convEng.m_currencyUnitObjMgr, toCurrency).getNumberOfDecimals();
    if ($compareTo_7($setScale(crossRate2.resultingRate, 5, valueOf_7(4)), ($clinit_ConversionConstants() , C_ZERO)) == 1) {
      result = $multiply(euroAmount, new BigDecimal_2(fromInt((new Integer(crossRate2.fromFactor)).value_0)));
      result = $divide(result, $multiply($setScale(crossRate2.resultingRate, 11, valueOf_7(4)), new BigDecimal_2(fromInt((new Integer(crossRate2.toFactor)).value_0))), noOfDecimals, valueOf_7(4));
    }
     else {
      result = $negate($multiply(euroAmount, $setScale(crossRate2.resultingRate, 11, valueOf_7(4))));
      result = $multiply(result, new BigDecimal_2(fromInt((new Integer(crossRate2.fromFactor)).value_0)));
      result = $divide(result, new BigDecimal_2(fromInt((new Integer(crossRate2.toFactor)).value_0)), noOfDecimals, valueOf_7(4));
    }
  }
  return result;
}

function convertToForeignCurrency(convDate, localAmount, localCurrency, foreignCurrency, exRateTypeName, externalRateBigDecimal){
  var bigDecArray, convEng, convFactor, exRate, exRateExternal, exRateExternalInverted, exRateForCalculation, exRateType, foreignAmount, foreignCurrencyUnitName, foreignFactor, localCurrencyUnitName, localFactor, result, result0;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14);
  localCurrencyUnitName = localCurrency.m_internalName;
  foreignCurrencyUnitName = foreignCurrency.m_internalName;
  exRateExternal = null;
  if ($equals_3(localCurrency, foreignCurrency)) {
    exRate = new ExchangeRate_0(exRateTypeName, localCurrencyUnitName, foreignCurrencyUnitName, convDate, ($clinit_ConversionConstants() , C_ONE_SCALE_5), 1, 1);
    result0 = new CurrValConvResult(localAmount, exRate);
    return result0;
  }
  exRate = $newExchangeRate(convEng.m_exchangeRateObjMgr, exRateTypeName, foreignCurrencyUnitName, localCurrencyUnitName, convDate);
  exRateType = $getExchangeRateType_0(exRate);
  $compareTo_7(externalRateBigDecimal, ($clinit_ConversionConstants() , C_ZERO)) != 0 && (exRateExternal = new ExchangeRate_0(exRateTypeName, localCurrencyUnitName, foreignCurrencyUnitName, convDate, externalRateBigDecimal, exRate.fromFactor, exRate.toFactor));
  if (exRateType.m_euro) {
    exRateExternalInverted = externalRateBigDecimal;
    $compareTo_7(externalRateBigDecimal, C_ZERO) != 0 && ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == 1 && $compareTo_7(externalRateBigDecimal, C_ZERO) == -1 || $compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == -1 && $compareTo_7(externalRateBigDecimal, C_ZERO) == 1) && (exRateExternalInverted = InvertExchangeRate(exRateExternal, convDate));
    if (!exRateExternal || $compareTo_7(exRateExternalInverted, $setScale(exRate.resultingRate, 5, valueOf_7(4))) == 0 || round_int(exRateExternalInverted.scale) == 11 && $compareTo_7(exRateExternalInverted, $setScale(exRate.resultingRate, 11, valueOf_7(4))) == 0) {
      foreignAmount = convertAccordingToEMU(exRateType, localAmount, localCurrencyUnitName, foreignCurrencyUnitName, convDate);
      result0 = new CurrValConvResult(foreignAmount, exRate);
      return result0;
    }
  }
  if (exRateExternal) {
    $compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), $setScale(exRateExternal.resultingRate, 5, valueOf_7(4))) == 0 && $setResultingRate(exRateExternal, $setScale(exRate.resultingRate, 11, valueOf_7(4)));
    if ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == -1 && $compareTo_7($setScale(exRateExternal.resultingRate, 5, valueOf_7(4)), C_ZERO) == 1) {
      convFactor = $getConversionFactor_0(convEng.m_convFactorObjMgr, exRateTypeName, foreignCurrencyUnitName, localCurrencyUnitName, convDate);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [foreignCurrencyUnitName, localCurrencyUnitName, exRateTypeName, convDate.format(null)]));
      }
      $setFromFactor(exRateExternal, convFactor.m_fromFactor);
      $setToFactor(exRateExternal, convFactor.m_toFactor);
    }
    if ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == 1 && $compareTo_7($setScale(exRateExternal.resultingRate, 5, valueOf_7(4)), C_ZERO) == -1) {
      convFactor = $getConversionFactor_0(convEng.m_convFactorObjMgr, exRateTypeName, localCurrencyUnitName, foreignCurrencyUnitName, convDate);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [localCurrencyUnitName, foreignCurrencyUnitName, exRateTypeName, convDate.format(null)]));
      }
      $setToFactor(exRateExternal, convFactor.m_fromFactor);
      $setFromFactor(exRateExternal, convFactor.m_toFactor);
    }
  }
  !!exRateExternal && (exRate = exRateExternal);
  localFactor = exRate.toFactor;
  foreignFactor = exRate.fromFactor;
  if (convEng.m_currencyOverflowCheck) {
    bigDecArray = checkOverflowForeignCurrency(exRate, foreignCurrency, foreignFactor, localAmount);
    exRateForCalculation = bigDecArray[1];
  }
   else {
    exRateForCalculation = $setScale(exRate.resultingRate, 11, valueOf_7(4));
  }
  if ($compareTo_7(exRate.resultingRate, C_ZERO) == 1) {
    foreignAmount = $divide($multiply(localAmount, new BigDecimal_1(foreignFactor)), $multiply(exRateForCalculation, new BigDecimal_1(localFactor)), foreignCurrency.m_noOfDecimalPlaces, valueOf_7(4));
  }
   else {
    foreignAmount = $negate($multiply(localAmount, exRateForCalculation));
    foreignAmount = $multiply(foreignAmount, new BigDecimal_2(fromInt((new Integer(foreignFactor)).value_0)));
    foreignAmount = $divide(foreignAmount, new BigDecimal_2(fromInt((new Integer(localFactor)).value_0)), foreignCurrency.m_noOfDecimalPlaces, valueOf_7(4));
  }
  result = new CurrValConvResult(foreignAmount, exRate);
  return result;
}

function convertToLocalCurrency(convDate, foreignAmountParam, foreignCurrency, localCurrency, exRateTypeName, externalRateBigDecimal){
  var bigDecArray, convEng, convFactor, exRate, exRateExternal, exRateExternalInverted, exRateForCalculation, exRateType, foreignAmount, foreignCurrencyUnitName, foreignFactor, localAmount, localCurrencyUnitName, localFactor, result, result0;
  foreignAmount = foreignAmountParam;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14);
  foreignCurrencyUnitName = foreignCurrency.m_internalName;
  localCurrencyUnitName = localCurrency.m_internalName;
  exRateExternal = null;
  if ($equals_3(localCurrency, foreignCurrency)) {
    exRate = new ExchangeRate_0(exRateTypeName, foreignCurrencyUnitName, localCurrencyUnitName, convDate, ($clinit_ConversionConstants() , C_ONE_SCALE_5), 1, 1);
    result0 = new CurrValConvResult(foreignAmountParam, exRate);
    return result0;
  }
  exRate = $newExchangeRate(convEng.m_exchangeRateObjMgr, exRateTypeName, foreignCurrencyUnitName, localCurrencyUnitName, convDate);
  exRateType = $getExchangeRateType_0(exRate);
  $compareTo_7(externalRateBigDecimal, ($clinit_ConversionConstants() , C_ZERO)) != 0 && (exRateExternal = new ExchangeRate_0(exRateTypeName, foreignCurrencyUnitName, localCurrencyUnitName, convDate, externalRateBigDecimal, exRate.fromFactor, exRate.toFactor));
  if (exRateType.m_euro) {
    exRateExternalInverted = externalRateBigDecimal;
    $compareTo_7(externalRateBigDecimal, C_ZERO) != 0 && ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == 1 && $compareTo_7(externalRateBigDecimal, C_ZERO) == -1 || $compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == -1 && $compareTo_7(externalRateBigDecimal, C_ZERO) == 1) && (exRateExternalInverted = InvertExchangeRate(exRateExternal, convDate));
    if (!exRateExternal || $compareTo_7(exRateExternalInverted, $setScale(exRate.resultingRate, 5, valueOf_7(4))) == 0 || round_int(exRateExternalInverted.scale) == 11 && $compareTo_7(exRateExternalInverted, $setScale(exRate.resultingRate, 11, valueOf_7(4))) == 0) {
      localAmount = convertAccordingToEMU(exRateType, foreignAmountParam, foreignCurrencyUnitName, localCurrencyUnitName, convDate);
      result0 = new CurrValConvResult(localAmount, exRate);
      return result0;
    }
  }
  if ($compareTo_7(externalRateBigDecimal, C_ZERO) != 0) {
    $compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), $setScale(exRateExternal.resultingRate, 5, valueOf_7(4))) == 0 && $setResultingRate(exRateExternal, $setScale(exRate.resultingRate, 11, valueOf_7(4)));
    if ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == -1 && $compareTo_7($setScale(exRateExternal.resultingRate, 5, valueOf_7(4)), C_ZERO) == 1) {
      convFactor = $getConversionFactor_0(convEng.m_convFactorObjMgr, exRateTypeName, foreignCurrencyUnitName, localCurrencyUnitName, convDate);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [foreignCurrencyUnitName, localCurrencyUnitName, exRateTypeName, convDate.format(null)]));
      }
      $setFromFactor(exRateExternal, convFactor.m_fromFactor);
      $setToFactor(exRateExternal, convFactor.m_toFactor);
    }
    if ($compareTo_7($setScale(exRate.resultingRate, 5, valueOf_7(4)), C_ZERO) == 1 && $compareTo_7($setScale(exRateExternal.resultingRate, 5, valueOf_7(4)), C_ZERO) == -1) {
      convFactor = $getConversionFactor_0(convEng.m_convFactorObjMgr, exRateTypeName, localCurrencyUnitName, foreignCurrencyUnitName, convDate);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [localCurrencyUnitName, foreignCurrencyUnitName, exRateTypeName, convDate.format(null)]));
      }
      $setToFactor(exRateExternal, convFactor.m_fromFactor);
      $setFromFactor(exRateExternal, convFactor.m_toFactor);
    }
  }
  !!exRateExternal && (exRate = exRateExternal);
  localFactor = exRate.toFactor;
  foreignFactor = exRate.fromFactor;
  if (convEng.m_currencyOverflowCheck) {
    bigDecArray = checkOverflowForeignCurrency(exRate, foreignCurrency, foreignFactor, foreignAmountParam);
    foreignAmount = bigDecArray[0];
    exRateForCalculation = bigDecArray[1];
  }
   else {
    exRateForCalculation = $setScale(exRate.resultingRate, 11, valueOf_7(4));
  }
  if ($compareTo_7(exRate.resultingRate, C_ZERO) == 1) {
    localAmount = $multiply(foreignAmount, exRateForCalculation);
    localAmount = $multiply(localAmount, new BigDecimal_2(fromInt((new Integer(localFactor)).value_0)));
    localAmount = $divide(localAmount, new BigDecimal_2(fromInt((new Integer(foreignFactor)).value_0)), localCurrency.m_noOfDecimalPlaces, valueOf_7(4));
  }
   else {
    localAmount = $multiply(foreignAmount, C_MINUS_ONE);
    localAmount = $multiply(localAmount, new BigDecimal_2(fromInt((new Integer(localFactor)).value_0)));
    localAmount = $divide(localAmount, exRateForCalculation, 15, valueOf_7(4));
    localAmount = $divide(localAmount, new BigDecimal_2(fromInt((new Integer(foreignFactor)).value_0)), localCurrency.m_noOfDecimalPlaces, valueOf_7(4));
  }
  result = new CurrValConvResult(localAmount, exRate);
  return result;
}

function Dimension(dimension, lengthExp, massExp, timexExp, ecurrExp, tempExp, molquExp, lightExp){
  this.m_name = dimension;
  this.m_lengthExp = lengthExp;
  this.m_massExp = massExp;
  this.m_timexExp = timexExp;
  this.m_ecurrExp = ecurrExp;
  this.m_tempExp = tempExp;
  this.m_molquExp = molquExp;
  this.m_lightExp = lightExp;
  this.m_lengthExp == 0 && this.m_massExp == 0 && this.m_timexExp == 0 && this.m_ecurrExp == 0 && this.m_tempExp == 0 && this.m_molquExp == 0 && this.m_lightExp == 0 && (this.m_isDimensionLess = true);
}

defineClass(328, 1, {286:1, 3:1}, Dimension);
_.m_ecurrExp = 0;
_.m_isDimensionLess = false;
_.m_lengthExp = 0;
_.m_lightExp = 0;
_.m_massExp = 0;
_.m_molquExp = 0;
_.m_tempExp = 0;
_.m_timexExp = 0;
var Lcom_sap_spe_conversion_impl_Dimension_2_classLit = createForClass('com.sap.spe.conversion.impl', 'Dimension', 328, Ljava_lang_Object_2_classLit);
function $getDimensions_0(){
  var dao, dimension, dimensionTOs, dimensions, i_0;
  dimensions = new HashMap;
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'Dimension', 'dao.standard'), 624);
  dimensionTOs = $getDimensions(dao);
  for (i_0 = 0; i_0 < dimensionTOs.length; i_0++) {
    dimension = new Dimension(dimensionTOs[i_0].name_0, dimensionTOs[i_0].lengthExponent, dimensionTOs[i_0].massExponent, dimensionTOs[i_0].timexExponent, dimensionTOs[i_0].electricCurrentExponent, dimensionTOs[i_0].temperatureExponent, dimensionTOs[i_0].moleQuantityExponent, dimensionTOs[i_0].luminosityExponent);
    $putStringValue(dimensions, dimension.m_name, dimension);
  }
  return dimensions;
}

function DimensionBuilder(){
}

defineClass(459, 663, $intern_22, DimensionBuilder);
_.create_0 = function create_25(keys_0){
  return $getDimensions_0();
}
;
var Lcom_sap_spe_conversion_impl_DimensionBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'DimensionBuilder', 459, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $clinit_DimensionObjectManager(){
  $clinit_DimensionObjectManager = emptyMethod;
  dummyPointsDimension = new Dimension('POINTS', 0, 0, 0, 0, 0, 0, 9);
}

function $getDimension_0(this$static, dimensionName){
  var dimension, dimensions;
  if (dimensionName == null || $equals_7(dimensionName, '')) {
    return null;
  }
  dimensions = dynamicCast(this$static.cacheFacade.get_3('DI', false), 24);
  dimension = null;
  dimensions.isEmpty() || (dimension = dynamicCast(dimensions.get_4(dimensionName), 286));
  if (!dimension) {
    throw new ConversionMissingDataException(123, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [dimensionName]));
  }
  return dimension;
}

function $getMassDimension(this$static){
  var dimension, dimensions, iter;
  dimensions = dynamicCast(this$static.cacheFacade.get_3('DI', false), 24);
  for (iter = dimensions.values_0().iterator(); iter.hasNext();) {
    dimension = dynamicCast(iter.next(), 286);
    if (dimension.m_massExp == 1 && dimension.m_timexExp == 0 && dimension.m_ecurrExp == 0 && dimension.m_lengthExp == 0 && dimension.m_lightExp == 0 && dimension.m_molquExp == 0 && dimension.m_tempExp == 0) {
      return dimension;
    }
  }
  throw new ConversionMissingDataException(124, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, []));
}

function $getPointsDimension(this$static){
  var dimension, dimensions, iter;
  dimensions = dynamicCast(this$static.cacheFacade.get_3('DI', false), 24);
  for (iter = dimensions.values_0().iterator(); iter.hasNext();) {
    dimension = dynamicCast(iter.next(), 286);
    if (dimension.m_massExp == 0 && dimension.m_timexExp == 0 && dimension.m_ecurrExp == 0 && dimension.m_lengthExp == 0 && dimension.m_lightExp == 9 && dimension.m_molquExp == 0 && dimension.m_tempExp == 0) {
      return dimension;
    }
  }
  return dummyPointsDimension;
}

function $getVolumeDimension(this$static){
  var dimension, dimensions, iter;
  dimensions = dynamicCast(this$static.cacheFacade.get_3('DI', false), 24);
  for (iter = dimensions.values_0().iterator(); iter.hasNext();) {
    dimension = dynamicCast(iter.next(), 286);
    if (dimension.m_massExp == 0 && dimension.m_timexExp == 0 && dimension.m_ecurrExp == 0 && dimension.m_lengthExp == 3 && dimension.m_lightExp == 0 && dimension.m_molquExp == 0 && dimension.m_tempExp == 0) {
      return dimension;
    }
  }
  throw new ConversionMissingDataException(125, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, []));
}

function DimensionObjectManager(){
  $clinit_DimensionObjectManager();
  ConversionObjectManager.call(this);
}

defineClass(507, 88, {}, DimensionObjectManager);
var dummyPointsDimension;
var Lcom_sap_spe_conversion_impl_DimensionObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'DimensionObjectManager', 507, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function EmuKeysBuilder(){
}

defineClass(452, 663, $intern_22, EmuKeysBuilder);
_.create_0 = function create_26(keys_0){
  var objectType, dao;
  objectType = keys_0[1];
  if ($equals_7(objectType, 'KE')) {
    return dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'EmuKeys', 'dao.standard'), 620) , $getEmuKeys(dao);
  }
  throw new ConversionRuntimeException(701);
}
;
var Lcom_sap_spe_conversion_impl_EmuKeysBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'EmuKeysBuilder', 452, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getCurrency(this$static){
  var emuKeysTO, key;
  key = create_4('EM', 'KE');
  emuKeysTO = dynamicCast(this$static.cacheFacade.get_3(key, false), 174);
  return !emuKeysTO?'EUR':emuKeysTO.newCurrencyKey;
}

function $getExRate(this$static){
  var emuKeysTO, key;
  key = create_4('EM', 'KE');
  emuKeysTO = dynamicCast(this$static.cacheFacade.get_3(key, false), 174);
  return !emuKeysTO?'EURO':emuKeysTO.exchangeRateTypeFixedRates;
}

function EmuKeysObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(514, 88, {}, EmuKeysObjectManager);
var Lcom_sap_spe_conversion_impl_EmuKeysObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'EmuKeysObjectManager', 514, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function $clinit_ExchangeRate(){
  $clinit_ExchangeRate = emptyMethod;
  getLocation(Lcom_sap_spe_conversion_impl_ExchangeRate_2_classLit);
}

function $getExchangeRateType_0(this$static){
  var convEngine;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  try {
    return $getExchangeRateType(convEngine, this$static.name_0);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 17)) {
      $clinit_ConversionConstants();
      return null;
    }
     else 
      throw unwrap($e0);
  }
}

function $setFromFactor(this$static, factor){
  this$static.fromFactor = factor;
}

function $setResultingRate(this$static, rate){
  this$static.resultingRate = rate;
}

function $setToFactor(this$static, factor){
  this$static.toFactor = factor;
}

function ExchangeRate(exRate){
  $clinit_ExchangeRate();
  this.name_0 = exRate.name_0;
  this.fromCurrency = exRate.fromCurrency;
  this.toCurrency = exRate.toCurrency;
  this.date = exRate.date;
  this.dbRate = exRate.dbRate;
  this.resultingRate = exRate.resultingRate;
  this.fromFactor = exRate.fromFactor;
  this.toFactor = exRate.toFactor;
}

function ExchangeRate_0(name_0, fromCurrency, toCurrency, date, rate, fromFactor, toFactor){
  $clinit_ExchangeRate();
  this.name_0 = name_0;
  this.fromCurrency = fromCurrency;
  this.toCurrency = toCurrency;
  this.date = date;
  this.dbRate = rate;
  this.resultingRate = rate;
  this.fromFactor = fromFactor;
  this.toFactor = toFactor;
}

defineClass(53, 1, {696:1, 53:1, 3:1}, ExchangeRate, ExchangeRate_0);
_.toString$ = function toString_15(){
  return '#[ExchangeRate: ' + this.toCurrency + '/' + this.fromCurrency + ': ' + this.resultingRate + '(internal: ' + this.dbRate + ')  >=' + this.date + ']';
}
;
_.fromFactor = 0;
_.toFactor = 0;
var Lcom_sap_spe_conversion_impl_ExchangeRate_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExchangeRate', 53, Ljava_lang_Object_2_classLit);
function $determineExchangeRate(exRateType, fromCurrency, toCurrency, date, exactDate){
  var convEngine, convFactor, convFactorDirect, convFactorIndirect, crossRate1, crossRate2, exRate, exRate0, exRateTypeName, fromFactor, notation, rate1, rate2, ref, ref1, resDate, resDecimalPlaces, resRate, returnCode1, returnCode2, shiftDenominator, shiftNominator, toFactor;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  exRateTypeName = exRateType.m_name;
  if (exRateType.m_baseCurrency == null) {
    exRate0 = null;
    try {
      exRate0 = $getExchangeRate_1(convEngine.m_exchangeRateObjMgr, exRateTypeName, fromCurrency, toCurrency, date, exactDate);
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 17)) {
        if (exRateType.m_inversionIndicator) {
          try {
            exRate0 = $getExchangeRate_1(convEngine.m_exchangeRateObjMgr, exRateTypeName, toCurrency, fromCurrency, date, exactDate);
          }
           catch ($e0) {
            $e0 = wrap($e0);
            if (instanceOf($e0, 17)) {
              throw new CurrencyConversionException(105, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency, exRateTypeName, date.toString$()]));
            }
             else 
              throw unwrap($e0);
          }
          if ($compareTo_7(exRate0.dbRate, ($clinit_ConversionConstants() , C_ZERO)) == -1) {
            convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, fromCurrency, toCurrency, date);
            if (!convFactor) {
              $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
              throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency, exRateTypeName, date.format(null)]));
            }
            $setToFactor(exRate0, convFactor.m_toFactor);
            $setFromFactor(exRate0, convFactor.m_fromFactor);
            $setResultingRate(exRate0, $negate(exRate0.dbRate));
          }
           else {
            convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, toCurrency, fromCurrency, date);
            if (!convFactor) {
              $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
              throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, fromCurrency, exRateTypeName, date.format(null)]));
            }
            $setToFactor(exRate0, convFactor.m_fromFactor);
            $setFromFactor(exRate0, convFactor.m_toFactor);
            $setResultingRate(exRate0, $negate(exRate0.dbRate));
          }
        }
        if (exRate0)
          return exRate0;
      }
       else 
        throw unwrap($e1);
    }
    if (!exRate0) {
      $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
      throw new CurrencyConversionException(105, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency, exRateTypeName, date.format(null)]));
    }
    if ($compareTo_7(exRate0.dbRate, ($clinit_ConversionConstants() , C_ZERO)) == 1) {
      convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, fromCurrency, toCurrency, date);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency, exRateTypeName, date.format(null)]));
      }
      $setToFactor(exRate0, convFactor.m_toFactor);
      $setFromFactor(exRate0, convFactor.m_fromFactor);
    }
     else {
      convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, toCurrency, fromCurrency, date);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new ConversionMissingDataException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, fromCurrency, exRateTypeName, date.format(null)]));
      }
      $setToFactor(exRate0, convFactor.m_fromFactor);
      $setFromFactor(exRate0, convFactor.m_toFactor);
    }
    return exRate0;
  }
  exRate = null;
  returnCode1 = new ReturnCode;
  returnCode2 = new ReturnCode;
  crossRate1 = $determineCrossRate(exRateType.m_name, fromCurrency, exRateType.m_baseCurrency, date, returnCode1);
  crossRate2 = $determineCrossRate(exRateType.m_name, toCurrency, exRateType.m_baseCurrency, date, returnCode2);
  if (!crossRate1 || !crossRate2) {
    exRate = $getExchangeRate_1(convEngine.m_exchangeRateObjMgr, exRateTypeName, fromCurrency, toCurrency, date, exactDate);
    if (!exRate || $compareTo_7(exRate.resultingRate, ($clinit_ConversionConstants() , C_ZERO)) == 0) {
      if (returnCode1.m_returnCode != 0 || returnCode2.m_returnCode != 0) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        if (returnCode1.m_returnCode == 1) {
          throw new CurrencyConversionException(105, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, exRateType.m_baseCurrency, exRateType.m_name, date.format(null)]));
        }
         else if (returnCode1.m_returnCode == 2) {
          throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, exRateType.m_baseCurrency, exRateType.m_name, date.format(null)]));
        }
         else if (returnCode1.m_returnCode == 3) {
          throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [exRateType.m_baseCurrency, fromCurrency, exRateType.m_name, date.format(null)]));
        }
        if (returnCode2.m_returnCode == 1) {
          throw new CurrencyConversionException(105, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, exRateType.m_baseCurrency, exRateType.m_name, date.format(null)]));
        }
         else if (returnCode2.m_returnCode == 2) {
          throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, exRateType.m_baseCurrency, exRateType.m_name, date.format(null)]));
        }
         else if (returnCode2.m_returnCode == 3) {
          throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [exRateType.m_baseCurrency, toCurrency, exRateType.m_name, date.format(null)]));
        }
      }
    }
  }
  notation = $getNotation(convEngine.m_notationObjMgr, fromCurrency, toCurrency, date);
  if (!!crossRate1 && !!crossRate2) {
    fromFactor = 1;
    toFactor = 1;
    $after(crossRate1.date, crossRate2.date)?(resDate = crossRate1.date):(resDate = crossRate2.date);
    ref = crossRate1.fromFactor * crossRate2.toFactor;
    ref1 = crossRate1.toFactor * crossRate2.fromFactor;
    ref < ref1?(toFactor = ~~(ref1 / ref)):(fromFactor = ~~(ref / ref1));
    exRate = new ExchangeRate_0(exRateType.m_name, fromCurrency, toCurrency, resDate, ($clinit_ConversionConstants() , C_ONE), fromFactor, toFactor);
    rate1 = crossRate1.dbRate;
    rate2 = crossRate2.dbRate;
    resRate = C_ZERO;
    if (notation.m_indirectNotation) {
      convFactorIndirect = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, toCurrency, fromCurrency, date);
      if (!convFactorIndirect) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, fromCurrency, exRateTypeName, date.format(null)]));
      }
      shiftNominator = dynamicCast($get_12(($clinit_ExchangeRateObjectManager() , C_EXPONENTS), new Long(mul(fromInt(exRate.fromFactor), fromInt(convFactorIndirect.m_fromFactor)))), 16).value_0;
      shiftDenominator = dynamicCast($get_12(C_EXPONENTS, new Long(mul(fromInt(exRate.toFactor), fromInt(convFactorIndirect.m_toFactor)))), 16).value_0;
      resDecimalPlaces = 11 + shiftNominator - shiftDenominator;
      if ($compareTo_7(rate1, C_ZERO) == 1 && $compareTo_7(rate2, C_ZERO) == 1) {
        resRate = $divide($negate(rate2), rate1, resDecimalPlaces, valueOf_7(4));
      }
       else if ($compareTo_7(rate1, C_ZERO) == -1 && $compareTo_7(rate2, C_ZERO) == 1) {
        resRate = $setScale($multiply(rate2, rate1), resDecimalPlaces, ($clinit_RoundingMode() , UNNECESSARY));
      }
       else if ($compareTo_7(rate1, C_ZERO) == 1 && $compareTo_7(rate2, C_ZERO) == -1) {
        resRate = $divide(C_ONE, rate1, 31, valueOf_7(4));
        resRate = $divide(resRate, rate2, resDecimalPlaces, valueOf_7(4));
      }
       else 
        $compareTo_7(rate1, C_ZERO) == -1 && $compareTo_7(rate2, C_ZERO) == -1 && (resRate = $divide($negate(rate1), rate2, resDecimalPlaces, valueOf_7(4)));
      resRate = $movePoint(resRate, resRate.scale - (shiftNominator - shiftDenominator));
      $setFromFactor(exRate, convFactorIndirect.m_toFactor);
      $setToFactor(exRate, convFactorIndirect.m_fromFactor);
    }
     else {
      convFactorDirect = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, fromCurrency, toCurrency, date);
      if (!convFactorDirect) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency, exRateTypeName, date.format(null)]));
      }
      shiftNominator = dynamicCast($get_12(($clinit_ExchangeRateObjectManager() , C_EXPONENTS), new Long(mul(fromInt(exRate.toFactor), fromInt(convFactorDirect.m_fromFactor)))), 16).value_0;
      shiftDenominator = dynamicCast($get_12(C_EXPONENTS, new Long(mul(fromInt(exRate.fromFactor), fromInt(convFactorDirect.m_toFactor)))), 16).value_0;
      resDecimalPlaces = 11 + shiftNominator - shiftDenominator;
      if ($compareTo_7(rate1, C_ZERO) == 1 && $compareTo_7(rate2, C_ZERO) == 1) {
        resRate = $divide(rate1, rate2, resDecimalPlaces, valueOf_7(4));
      }
       else if ($compareTo_7(rate1, C_ZERO) == -1 && $compareTo_7(rate2, C_ZERO) == 1) {
        resRate = $divide($negate(C_ONE), rate1, 31, valueOf_7(4));
        resRate = $divide(resRate, rate2, resDecimalPlaces, valueOf_7(4));
        resRate = $setScale(resRate, resDecimalPlaces, ($clinit_RoundingMode() , UNNECESSARY));
      }
       else 
        $compareTo_7(rate1, C_ZERO) == 1 && $compareTo_7(rate2, C_ZERO) == -1?(resRate = $setScale($negate($multiply(rate2, rate1)), resDecimalPlaces, ($clinit_RoundingMode() , UNNECESSARY))):$compareTo_7(rate1, C_ZERO) == -1 && $compareTo_7(rate2, C_ZERO) == -1 && (resRate = $divide(rate2, rate1, resDecimalPlaces, valueOf_7(4)));
      resRate = $movePoint(resRate, resRate.scale - (shiftNominator - shiftDenominator));
      $setFromFactor(exRate, convFactorDirect.m_fromFactor);
      $setToFactor(exRate, convFactorDirect.m_toFactor);
    }
    if ($compareTo_7($signum(resRate) < 0?$negate(resRate):resRate, C_MAX_RATE) == 1) {
      throw new CurrencyConversionException(119, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [$toPlainString(resRate), exRateType.m_baseCurrency, exRateTypeName]));
    }
    exRate.resultingRate = resRate;
  }
   else {
    if (notation.m_directNotation) {
      convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, fromCurrency, toCurrency, date);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency, exRateTypeName, date.format(null)]));
      }
      $setFromFactor(exRate, convFactor.m_fromFactor);
      $setToFactor(exRate, convFactor.m_toFactor);
    }
     else {
      convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, toCurrency, fromCurrency, date);
      if (!convFactor) {
        $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
        throw new CurrencyConversionException(111, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [toCurrency, fromCurrency, exRateTypeName, date.format(null)]));
      }
      $setFromFactor(exRate, convFactor.m_toFactor);
      $setToFactor(exRate, convFactor.m_fromFactor);
    }
  }
  return exRate;
}

function $get_8(keys_0){
  var dao, date, exactDate, exchangeRate, exchangeRate0, exchangeRateTO, exchangeRateTypeName, fromCurrency, toCurrency;
  exchangeRateTypeName = keys_0[1];
  fromCurrency = keys_0[2];
  toCurrency = keys_0[3];
  date = keys_0[4];
  exactDate = $equals_7('X', keys_0[5]);
  if ($equals_7(fromCurrency, toCurrency) && $equals_7(date, ' ')) {
    exchangeRate0 = new ExchangeRate_0(exchangeRateTypeName, fromCurrency, toCurrency, ($clinit_ConversionConstants() , C_OLDEST_DATE), C_ZERO, 1, 1);
    return exchangeRate0;
  }
  if ($equals_7(fromCurrency, toCurrency)) {
    exchangeRate0 = new ExchangeRate_0(exchangeRateTypeName, fromCurrency, toCurrency, parseInvertedYYYYMMDD(date), $setScale(($clinit_ConversionConstants() , C_ONE), 5, ($clinit_RoundingMode() , UNNECESSARY)), 1, 1);
    return exchangeRate0;
  }
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ExchangeRate', 'dao.standard'), 621);
  exchangeRateTO = $getExchangeRate(dao, exchangeRateTypeName, fromCurrency, toCurrency, date, exactDate);
  if (!exchangeRateTO) {
    $getLocaleSettings($getUserInfo((!instance_2 && (instance_2 = new RuntimeInformation) , instance_2)));
    date = parseInvertedYYYYMMDD(date).format(null);
    throw new ConversionMissingDataException(130, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency, exchangeRateTypeName, date]));
  }
  exchangeRate = new ExchangeRate_0(exchangeRateTypeName, fromCurrency, toCurrency, parseInvertedYYYYMMDD(exchangeRateTO.date), exchangeRateTO.rate, exchangeRateTO.fromFactor, exchangeRateTO.toFactor);
  return exchangeRate;
}

function ExchangeRateBuilder(){
}

defineClass(453, 663, $intern_22, ExchangeRateBuilder);
_.create_0 = function create_27(keys_0){
  var convEngine, exchangeRateTypeName, fromCurrency, toCurrency, date, exactDate, exRateType;
  if ($equals_7('determined', keys_0[6])) {
    try {
      return convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , exchangeRateTypeName = keys_0[1] , fromCurrency = keys_0[2] , toCurrency = keys_0[3] , date = keys_0[4] , exactDate = $equals_7('X', keys_0[5]) , exRateType = $getExchangeRateType_1(convEngine.m_exchangeRateTypeObjMgr, exchangeRateTypeName) , $determineExchangeRate(exRateType, fromCurrency, toCurrency, parseInvertedYYYYMMDD(date), exactDate);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        throw new ConversionCacheException;
      }
       else if (instanceOf($e0, 36)) {
        throw new ConversionCacheException;
      }
       else 
        throw unwrap($e0);
    }
  }
  try {
    return $get_8(keys_0);
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 17)) {
      throw new ConversionCacheException;
    }
     else 
      throw unwrap($e1);
  }
}
;
var Lcom_sap_spe_conversion_impl_ExchangeRateBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExchangeRateBuilder', 453, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $clinit_ExchangeRateObjectManager(){
  $clinit_ExchangeRateObjectManager = emptyMethod;
  var factor, i_0;
  C_EXPONENTS = new HashMap_0(20);
  factor = {l:1, m:0, h:0};
  for (i_0 = 0; i_0 < 19; i_0++) {
    $put_0(C_EXPONENTS, new Long(factor), new Integer(i_0));
    factor = mul(factor, {l:10, m:0, h:0});
  }
}

function $determineCrossRate(exRateTypeName, fromCurrency, toCurrency, date, returnCode){
  var convEngine, convFactor, exRate, exRate0;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  if ($equals_7(fromCurrency, toCurrency)) {
    exRate0 = $getExchangeRate_1(convEngine.m_exchangeRateObjMgr, exRateTypeName, fromCurrency, toCurrency, ($clinit_ConversionConstants() , C_OLDEST_DATE), false);
    return exRate0;
  }
  exRate = $getExchangeRate_1(convEngine.m_exchangeRateObjMgr, exRateTypeName, fromCurrency, toCurrency, date, false);
  if ($compareTo_7(exRate.resultingRate, ($clinit_ConversionConstants() , C_ZERO)) == 0) {
    returnCode.m_returnCode = 1;
    return null;
  }
  if ($compareTo_7(exRate.resultingRate, C_ZERO) == 1) {
    convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, fromCurrency, toCurrency, date);
    if (!convFactor) {
      returnCode.m_returnCode = 2;
      return null;
    }
    $setFromFactor(exRate, convFactor.m_fromFactor);
    $setToFactor(exRate, convFactor.m_toFactor);
  }
   else {
    convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, toCurrency, fromCurrency, date);
    if (!convFactor) {
      returnCode.m_returnCode = 3;
      return null;
    }
    $setFromFactor(exRate, convFactor.m_toFactor);
    $setToFactor(exRate, convFactor.m_fromFactor);
  }
  return exRate;
}

function $getExchangeRate_1(this$static, exRateTypeName, fromCurrency, toCurrency, date, exactDate){
  var exchangeRate;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  exchangeRate = $getExchangeRateImpl(this$static, exRateTypeName, fromCurrency, toCurrency, date, exactDate);
  return new ExchangeRate(exchangeRate);
}

function $getExchangeRateImpl(this$static, exRateTypeName, fromCurrency, toCurrency, date, exactDate){
  var d, ex, exchangeRate, x_0;
  d = !date?' ':$formatInvertedYYYYMMDD(date);
  x_0 = exactDate?'X':'_';
  try {
    exchangeRate = dynamicCast(this$static.cacheFacade.get_3(create_9(exRateTypeName, fromCurrency, toCurrency, d, x_0, '_'), false), 53);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 148)) {
      ex = $e0;
      throw ex;
    }
     else 
      throw unwrap($e0);
  }
  return exchangeRate;
}

function $newExchangeRate(this$static, exRateTypeName, fromCurrency, toCurrency, date){
  var convEngine, ex, exRate, exRateType;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  if ($equals_7(fromCurrency, toCurrency)) {
    return $getExchangeRate_1(this$static, exRateTypeName, fromCurrency, toCurrency, date, false);
  }
  exRateType = $getDerivedExchangeRateType(convEngine.m_exchangeRateTypeObjMgr, exRateTypeName, fromCurrency, toCurrency, date);
  if (exRateType.m_euro && exRateType.m_baseCurrency == null) {
    throw new CurrencyConversionException(25, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [exRateTypeName]));
  }
  try {
    exRate = dynamicCast(this$static.cacheFacade.get_2(create_9(exRateType.m_name, fromCurrency, toCurrency, $formatInvertedYYYYMMDD(date), '_', 'determined'), null, false), 53);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 148)) {
      ex = $e0;
      throw ex;
    }
     else 
      throw unwrap($e0);
  }
  return exRate;
}

function $newIdentityExchangeRate(exRateName, fromAndToCurrency, date){
  var exRate, key;
  key = create_5(exRateName, fromAndToCurrency, $formatYYYYMMDD(date));
  if (IDENTITY_EXCHANGE_RATE) {
    exRate = dynamicCast($getStringValue(IDENTITY_EXCHANGE_RATE, key), 53);
    if (!exRate) {
      exRate = new ExchangeRate_0(exRateName, fromAndToCurrency, fromAndToCurrency, date, ($clinit_ConversionConstants() , C_ONE_SCALE_5), 1, 1);
      $putStringValue(IDENTITY_EXCHANGE_RATE, key, exRate);
    }
    return exRate;
  }
   else {
    return new ExchangeRate_0(exRateName, fromAndToCurrency, fromAndToCurrency, date, ($clinit_ConversionConstants() , C_ONE_SCALE_5), 1, 1);
  }
}

function ExchangeRateObjectManager(){
  $clinit_ExchangeRateObjectManager();
  ConversionObjectManager.call(this);
}

defineClass(508, 88, {}, ExchangeRateObjectManager);
var C_EXPONENTS, IDENTITY_EXCHANGE_RATE = null;
var Lcom_sap_spe_conversion_impl_ExchangeRateObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExchangeRateObjectManager', 508, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function ExchangeRateType(name_0, inversionIndicator, baseCurr, euro){
  this.m_name = name_0;
  this.m_inversionIndicator = inversionIndicator;
  this.m_baseCurrency = baseCurr;
  this.m_euro = euro;
}

defineClass(546, 1, {634:1, 3:1}, ExchangeRateType);
_.m_euro = false;
_.m_inversionIndicator = false;
var Lcom_sap_spe_conversion_impl_ExchangeRateType_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExchangeRateType', 546, Ljava_lang_Object_2_classLit);
function $getExchangeRateTypes_0(){
  var dao, exchangeRateType, exchangeRateTypeTO, exchangeRateTypeTOs, exchangeRateTypes, iter;
  exchangeRateTypes = new HashMap;
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ExchangeRateType', 'dao.standard'), 622);
  exchangeRateTypeTOs = $getExchangeRateTypes(dao);
  for (iter = $iterator_0(exchangeRateTypeTOs); iter.val$outerIter2.hasNext();) {
    exchangeRateTypeTO = dynamicCast($next_2(iter), 238);
    exchangeRateType = new ExchangeRateType(exchangeRateTypeTO.name_0, exchangeRateTypeTO.indicatorInvertedCalculationAllowed, exchangeRateTypeTO.baseCurrency, exchangeRateTypeTO.indicatorSpecialTranslationModel);
    $putStringValue(exchangeRateTypes, exchangeRateTypeTO.name_0, exchangeRateType);
  }
  return exchangeRateTypes;
}

function ExchangeRateTypeBuilder(){
}

defineClass(454, 663, $intern_22, ExchangeRateTypeBuilder);
_.create_0 = function create_28(keys_0){
  var objectType;
  objectType = keys_0[1];
  if ($equals_7(objectType, 'TY')) {
    return $getExchangeRateTypes_0();
  }
  throw new ConversionRuntimeException(701);
}
;
var Lcom_sap_spe_conversion_impl_ExchangeRateTypeBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExchangeRateTypeBuilder', 454, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $findDerivedExchangeRateTypeRecursive(this$static, exRateTypeName, fromCurrency, toCurrency, date, oldFromFactorParam, oldToFactorParam, oldExRateTypeNames){
  var convEngine, convFactor, derivedExchangeRateTypeName, exRateType, oldFromFactor, oldToFactor;
  oldFromFactor = oldFromFactorParam;
  oldToFactor = oldToFactorParam;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  exRateType = $getExchangeRateType_1(this$static, exRateTypeName);
  convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, fromCurrency, toCurrency, date);
  !convFactor && (exRateType.m_inversionIndicator || exRateType.m_euro) && (convFactor = $getConversionFactor_0(convEngine.m_convFactorObjMgr, exRateTypeName, toCurrency, fromCurrency, date));
  if (!convFactor) {
    return exRateType;
  }
  if (oldFromFactorParam == 0 && oldToFactorParam == 0) {
    oldFromFactor = convFactor.m_fromFactor;
    oldToFactor = convFactor.m_toFactor;
  }
   else if (convFactor.m_fromFactor != oldFromFactorParam || convFactor.m_toFactor != oldToFactorParam) {
    throw new CurrencyConversionException(28, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [fromCurrency, toCurrency]));
  }
  derivedExchangeRateTypeName = convFactor.m_altExRateTypeName;
  if (derivedExchangeRateTypeName == null || $equals_7(derivedExchangeRateTypeName, convFactor.m_exRateTypeName)) {
    return exRateType;
  }
  if (oldExRateTypeNames.add_0(derivedExchangeRateTypeName)) {
    return $findDerivedExchangeRateTypeRecursive(this$static, derivedExchangeRateTypeName, fromCurrency, toCurrency, date, oldFromFactor, oldToFactor, oldExRateTypeNames);
  }
  throw new CurrencyConversionException(30, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [derivedExchangeRateTypeName, fromCurrency, toCurrency]));
}

function $getDerivedExchangeRateType(this$static, exRateTypeName, fromCurrency, toCurrency, date){
  var exRateTypeNames;
  exRateTypeNames = new TreeSet;
  exRateTypeNames.map_0.put_0(exRateTypeName, ($clinit_Boolean() , FALSE)) == null;
  return $findDerivedExchangeRateTypeRecursive(this$static, exRateTypeName, fromCurrency, toCurrency, date, 0, 0, exRateTypeNames);
}

function $getExchangeRateType_1(this$static, name_0){
  var exRateType, exchangeRateTypes, key;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  key = create_4('ET', 'TY');
  exchangeRateTypes = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  exRateType = null;
  exchangeRateTypes.isEmpty() || (name_0 == null || $equals_7(name_0, '')?(exRateType = dynamicCast(exchangeRateTypes.get_4('M'), 634)):(exRateType = dynamicCast(exchangeRateTypes.get_4(name_0), 634)));
  if (!exRateType) {
    throw new ConversionMissingDataException(128, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [name_0]));
  }
  return exRateType;
}

function ExchangeRateTypeObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(509, 88, {}, ExchangeRateTypeObjectManager);
var Lcom_sap_spe_conversion_impl_ExchangeRateTypeObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExchangeRateTypeObjectManager', 509, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function $clinit_ExpiringCurrency(){
  $clinit_ExpiringCurrency = emptyMethod;
  getLocation(Lcom_sap_spe_conversion_impl_ExpiringCurrency_2_classLit);
  C_INIITIAL_DATE = new SAPDate(0, 0, 0);
}

function $addWarningPeriod(this$static, objectTypeForExpiringCurrency, warningDate, errorDate){
  var warningDates;
  warningDates = initDim(Lcom_sap_sxe_sys_SAPDate_2_classLit, $intern_7, 51, 2, 0, 1);
  if (objectTypeForExpiringCurrency == null) {
    return;
  }
  setCheck(warningDates, 0, warningDate);
  setCheck(warningDates, 1, errorDate);
  $putStringValue(this$static.m_waringPeriods, objectTypeForExpiringCurrency, warningDates);
}

function $addWarningPeriod_0(this$static, objectTypeForExpiringCurrency, warningDateString, errorDateString){
  var errorDate, warningDate;
  warningDate = C_INIITIAL_DATE;
  errorDate = C_INIITIAL_DATE;
  if (objectTypeForExpiringCurrency == null) {
    return;
  }
  if (!$equalsIgnoreCase(warningDateString, '00000000')) {
    try {
      warningDate = parseYYYYMMDD(warningDateString);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 70)) {
        $clinit_ConversionConstants();
      }
       else 
        throw unwrap($e0);
    }
  }
  if (!$equalsIgnoreCase(errorDateString, '00000000')) {
    try {
      errorDate = parseYYYYMMDD(errorDateString);
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 70)) {
        $clinit_ConversionConstants();
      }
       else 
        throw unwrap($e1);
    }
  }
  $addWarningPeriod(this$static, objectTypeForExpiringCurrency, warningDate, errorDate);
}

function ExpiringCurrency(unitName, noOfDecimalPlaces, isoCode, isPrimaryUnitForIsoCodeConversion, expiringReason){
  $clinit_ExpiringCurrency();
  CurrencyUnit.call(this, unitName, noOfDecimalPlaces, isoCode, isPrimaryUnitForIsoCodeConversion);
  this.m_expiringReason = expiringReason;
  this.m_waringPeriods = new HashMap_0(10);
}

defineClass(260, 55, {26:1, 99:1, 55:1, 260:1, 3:1}, ExpiringCurrency);
var C_INIITIAL_DATE;
var Lcom_sap_spe_conversion_impl_ExpiringCurrency_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExpiringCurrency', 260, Lcom_sap_spe_conversion_impl_CurrencyUnit_2_classLit);
function $getExpiringCurrencies(){
  var expiringCurrencies, expiringCurrenciesTOs, expiringCurrency, i_0;
  expiringCurrencies = new HashMap;
  dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ExpiringCurrency', 'dao.standard'), 354);
  expiringCurrenciesTOs = initDim(Lcom_sap_spe_conversion_to_ExpiringCurrencyTO_2_classLit, $intern_24, 742, 0, 0, 1);
  for (i_0 = 0; i_0 < expiringCurrenciesTOs.length; i_0++) {
    expiringCurrency = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 3, 4, 1);
    expiringCurrency[0] = null.nullField;
    expiringCurrency[1] = null.nullField;
    expiringCurrency[2] = null.nullField;
    $putStringValue(expiringCurrencies, expiringCurrency[0], expiringCurrency);
  }
  return expiringCurrencies;
}

function $getObjectTypes(){
  var i_0, objectTypeTOs, objectTypes;
  objectTypes = new HashMap;
  objectTypeTOs = initDim(Lcom_sap_spe_conversion_to_ExpiringCurrenciesObjectTypeTO_2_classLit, $intern_24, 740, 0, 0, 1);
  for (i_0 = 0; i_0 < objectTypeTOs.length; i_0++) {
    $put_0(objectTypes, null.nullField, null.nullField);
  }
  return objectTypes;
}

function $getWarningPeriods(){
  var convEngine, i_0, warningPeriod, warningPeriods, warningPeriodsTOs;
  warningPeriods = new ArrayList;
  dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'ExpiringCurrency', 'dao.standard'), 354);
  warningPeriodsTOs = initDim(Lcom_sap_spe_conversion_to_ExpiringCurrenciesWarningDatesTO_2_classLit, $intern_24, 741, 0, 0, 1);
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  for (i_0 = 0; i_0 < warningPeriodsTOs.length; i_0++) {
    warningPeriod = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 4, 4, 1);
    warningPeriod[0] = null.nullField;
    warningPeriod[1] = null.nullField;
    warningPeriod[2] = null.nullField;
    warningPeriod[3] = null.nullField;
    $isValidObjectType(convEngine.m_expiringCurrencyObjMgr, warningPeriod[1]) && (setCheck(warningPeriods.array, warningPeriods.array.length, warningPeriod) , true);
  }
  return warningPeriods;
}

function ExpiringCurrencyBuilder(){
}

defineClass(455, 663, $intern_22, ExpiringCurrencyBuilder);
_.create_0 = function create_29(keys_0){
  var objectType;
  objectType = keys_0[1];
  if ($equals_7(objectType, 'OT')) {
    return $getObjectTypes();
  }
  if ($equals_7(objectType, 'WP')) {
    return $getWarningPeriods();
  }
  if ($equals_7(objectType, 'EC')) {
    return $getExpiringCurrencies();
  }
  throw new ConversionRuntimeException(701);
}
;
var Lcom_sap_spe_conversion_impl_ExpiringCurrencyBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExpiringCurrencyBuilder', 455, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getExpiringCurrencies_0(this$static){
  var key;
  key = create_4('EC', 'EC');
  return dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
}

function $getWarningDates(this$static){
  var key;
  key = create_4('EC', 'WP');
  return dynamicCast(this$static.cacheFacade.get_3(key, false), 33);
}

function $isValidObjectType(this$static, objectTypeForExpringCurrencies){
  var key, map_0;
  key = create_4('EC', 'OT');
  map_0 = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  if (map_0.isEmpty()) {
    return false;
  }
  return map_0.get_4(objectTypeForExpringCurrencies) != null;
}

function ExpiringCurrencyObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(513, 88, {}, ExpiringCurrencyObjectManager);
var Lcom_sap_spe_conversion_impl_ExpiringCurrencyObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ExpiringCurrencyObjectManager', 513, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function Notation_0(fromCurrency, toCurrency, date, notation){
  this.m_notation = notation;
  this.m_fromCurrency = fromCurrency;
  this.m_toCurrency = toCurrency;
  this.m_date = date;
  if (this.m_notation != null && $equals_7(this.m_notation, '1')) {
    this.m_directNotation = true;
    this.m_indirectNotation = false;
  }
   else if (this.m_notation != null && $equals_7(this.m_notation, '2')) {
    this.m_directNotation = false;
    this.m_indirectNotation = true;
  }
}

defineClass(125, 1, {125:1, 3:1}, Notation_0);
_.m_directNotation = false;
_.m_indirectNotation = false;
var Lcom_sap_spe_conversion_impl_Notation_2_classLit = createForClass('com.sap.spe.conversion.impl', 'Notation', 125, Ljava_lang_Object_2_classLit);
function NotationBuilder(){
}

defineClass(456, 663, $intern_22, NotationBuilder);
_.create_0 = function create_30(keys_0){
  return $getNotations(new NotationDAOImpl);
}
;
var Lcom_sap_spe_conversion_impl_NotationBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'NotationBuilder', 456, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $find(this$static, fromCurrency, toCurrency, date){
  var notation, searchNotation, tailSet;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  searchNotation = new Notation_0(fromCurrency, toCurrency, date, null);
  tailSet = $tailSet(dynamicCast(this$static.cacheFacade.get_3('NO', false), 247).allNotations, searchNotation);
  if (tailSet.map_0.size_1() > 0) {
    notation = dynamicCast(getKeyOrNSE(tailSet.map_0.getFirstEntry()), 125);
    if ($equals_7(notation.m_fromCurrency, fromCurrency) && $equals_7(notation.m_toCurrency, toCurrency)) {
      return notation;
    }
    return null;
  }
  return null;
}

function $getNotation(this$static, fromCurrency, toCurrency, date){
  var notation;
  notation = $find(this$static, fromCurrency, toCurrency, date);
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  if (notation) {
    return notation;
  }
  notation = $find(this$static, '', toCurrency, date);
  if (notation) {
    return notation;
  }
  notation = $find(this$static, fromCurrency, '', date);
  if (notation) {
    return notation;
  }
  notation = $find(this$static, '', '', date);
  if (notation) {
    return notation;
  }
  notation = new Notation_0(fromCurrency, toCurrency, date, '1');
  return notation;
}

function NotationObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(510, 88, {}, NotationObjectManager);
var Lcom_sap_spe_conversion_impl_NotationObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'NotationObjectManager', 510, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function NotationPrefixBuilder(){
}

defineClass(457, 663, $intern_22, NotationPrefixBuilder);
_.create_0 = function create_31(keys_0){
  return $getNotationPrefixes(new NotationPrefixDAOImpl);
}
;
var Lcom_sap_spe_conversion_impl_NotationPrefixBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'NotationPrefixBuilder', 457, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function NotationPrefixObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(511, 88, {}, NotationPrefixObjectManager);
var Lcom_sap_spe_conversion_impl_NotationPrefixObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'NotationPrefixObjectManager', 511, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function PhysValConvResult(value_0, numerator, denominator, fraction5, offset){
  this.m_value = value_0;
  this.m_numerator = numerator;
  this.m_denominator = denominator;
  this.m_fraction5 = fraction5;
  this.m_offset = offset;
}

defineClass(342, 1, $intern_21, PhysValConvResult);
_.m_denominator = 0;
_.m_numerator = 0;
var Lcom_sap_spe_conversion_impl_PhysValConvResult_2_classLit = createForClass('com.sap.spe.conversion.impl', 'PhysValConvResult', 342, Ljava_lang_Object_2_classLit);
function PhysicalUnit(unitOfMeasurement, noOfDecimalPlaces, dimension, fraction, addConst, isoCode, isPrimaryUnitForIsoCodeConversion){
  DimensionalUnit.call(this, unitOfMeasurement, noOfDecimalPlaces, isoCode, isPrimaryUnitForIsoCodeConversion);
  this.m_dimension = dimension;
  this.m_fraction = fraction;
  this.m_addConst = addConst;
}

defineClass(177, 330, {99:1, 27:1, 177:1, 3:1}, PhysicalUnit);
_.equals$ = function equals_14(o){
  var unit;
  if (this === o) {
    return true;
  }
  if (o == null || !instanceOf(o, 27)) {
    return false;
  }
  unit = dynamicCast(o, 27);
  return $equals_7(this.m_internalName, unit.getUnitName_0());
}
;
_.getDimension = function getDimension(){
  var convEngine;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  return $getDimension(convEngine, this.m_dimension);
}
;
_.getDimensionName = function getDimensionName(){
  return this.m_dimension;
}
;
_.getExternalUnitName = function getExternalUnitName_0(){
  var convEng;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  return $getExternalUnitName_0(convEng.m_physicalUnitObjMgr, this, 1);
}
;
_.getFraction = function getFraction(){
  return this.m_fraction;
}
;
_.getOffset = function getOffset(){
  return this.m_addConst;
}
;
_.getShortDescription = function getShortDescription_0(){
  var convEng;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  return $getExternalUnitName_0(convEng.m_physicalUnitObjMgr, this, 3);
}
;
_.hashCode$ = function hashCode_16(){
  return $hashCode_3(this);
}
;
_.m_addConst = 0;
var Lcom_sap_spe_conversion_impl_PhysicalUnit_2_classLit = createForClass('com.sap.spe.conversion.impl', 'PhysicalUnit', 177, Lcom_sap_spe_conversion_impl_DimensionalUnit_2_classLit);
function $getDescriptionsExtKey(){
  var i_0, map_0, physicalUnitDescriptionTOs;
  map_0 = new HashMap;
  physicalUnitDescriptionTOs = $getDescriptions(new PhysicalUnitDAOImpl);
  for (i_0 = 0; i_0 < physicalUnitDescriptionTOs.length; i_0++) {
    $putStringValue(map_0, physicalUnitDescriptionTOs[i_0].externalUnitCommercialFormat, physicalUnitDescriptionTOs[i_0].internalName);
  }
  return map_0;
}

function $getDescriptionsIntKey(){
  var i_0, map_0, physicalUnitDescriptionTOs;
  map_0 = new HashMap;
  physicalUnitDescriptionTOs = $getDescriptions(new PhysicalUnitDAOImpl);
  for (i_0 = 0; i_0 < physicalUnitDescriptionTOs.length; i_0++) {
    $putStringValue(map_0, physicalUnitDescriptionTOs[i_0].internalName, physicalUnitDescriptionTOs[i_0]);
  }
  return map_0;
}

function $getIsoUnits_0(){
  var allIsoUnits, allPhysicalUnits, ambiguousIsoUnits, convEngine, isoCode, iterator, iterator0, moreThanOnePrimaryUnits, obj, old, primaryUnit, retval, unambiguousIsoUnits, unit, units, unitsEnum;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  allPhysicalUnits = $getPhysicalUnits_0(convEngine.m_physicalUnitObjMgr);
  allIsoUnits = new HashMap;
  if (!allPhysicalUnits || allPhysicalUnits.isEmpty()) {
    return null;
  }
  for (iterator0 = allPhysicalUnits.iterator(); iterator0.hasNext();) {
    unit = dynamicCast(iterator0.next(), 99);
    if (unit.getIsoCode() == null) {
      continue;
    }
    old = $putStringValue(allIsoUnits, unit.getIsoCode(), unit);
    if (old == null) {
      continue;
    }
    if (instanceOf(old, 99)) {
      units = new Vector_0;
      $add_3(units.arrayList, old);
      $add_3(units.arrayList, unit);
      $putStringValue(allIsoUnits, unit.getIsoCode(), units);
    }
     else if (instanceOf(old, 41)) {
      $add_6(dynamicCast(old, 41), unit);
      $putStringValue(allIsoUnits, unit.getIsoCode(), old);
    }
  }
  unambiguousIsoUnits = new HashMap;
  ambiguousIsoUnits = new HashMap;
  for (iterator = $iterator_0(new AbstractMap$2(allIsoUnits)); iterator.val$outerIter2.hasNext();) {
    obj = $next_2(iterator);
    if (instanceOf(obj, 99)) {
      $putStringValue(unambiguousIsoUnits, dynamicCast(obj, 99).getIsoCode(), obj);
    }
     else if (instanceOf(obj, 41)) {
      units = dynamicCast(obj, 41);
      primaryUnit = null;
      isoCode = null;
      moreThanOnePrimaryUnits = false;
      for (unitsEnum = enumeration(units.arrayList); unitsEnum.val$it1.hasNext();) {
        unit = dynamicCast(unitsEnum.val$it1.next(), 99);
        isoCode == null && (isoCode = unit.getIsoCode());
        unit.isPrimaryUnitForIsoCodeConversion_0() && (!primaryUnit?(primaryUnit = unit):(moreThanOnePrimaryUnits = true));
      }
      !!primaryUnit && !moreThanOnePrimaryUnits?isoCode == null?$put_1(unambiguousIsoUnits.hashCodeMap, null, primaryUnit):unambiguousIsoUnits.stringMap.put_1(isoCode, primaryUnit):$putStringValue(ambiguousIsoUnits, isoCode, ($clinit_Boolean() , TRUE));
    }
  }
  retval = new HashMap;
  retval.stringMap.put_1('UnambiguousUnits', unambiguousIsoUnits);
  retval.stringMap.put_1('AmbiguousUnits', ambiguousIsoUnits);
  return retval;
}

function $getUnits_0(){
  var convEngine, dao, fraction, i_0, map_0, physicalUnit, physicalUnitTOs;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  map_0 = new HashMap;
  $putStringValue(map_0, '', new PhysicalUnit('', convEngine.m_NumberOfDecimalsForUnitsOfMeasure, 'AAAADL', new Fraction_0(0, 0, 0), 0, null, false));
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.conversion', 'PhysicalUnit', 'dao.standard'), 623);
  physicalUnitTOs = $getPhysicalUnits(dao);
  for (i_0 = 0; i_0 < physicalUnitTOs.length; i_0++) {
    fraction = new Fraction_0(physicalUnitTOs[i_0].fractionNumerator, physicalUnitTOs[i_0].fractionDenominator, physicalUnitTOs[i_0].fractionExponent);
    physicalUnit = new PhysicalUnit(physicalUnitTOs[i_0].name_0, convEngine.m_NumberOfDecimalsForUnitsOfMeasure, physicalUnitTOs[i_0].dimension, fraction, physicalUnitTOs[i_0].offset, physicalUnitTOs[i_0].isoCode, physicalUnitTOs[i_0].isPrimaryUnitForIsoCodeConversion);
    $putStringValue(map_0, physicalUnit.m_internalName, physicalUnit);
  }
  return map_0;
}

function PhysicalUnitBuilder(){
}

defineClass(458, 663, $intern_22, PhysicalUnitBuilder);
_.create_0 = function create_32(keys_0){
  var objectType;
  objectType = keys_0[1];
  if ($equals_7(objectType, 'UN')) {
    return $getUnits_0();
  }
  if ($equals_7(objectType, 'IU')) {
    return $getIsoUnits_0();
  }
  if ($equals_7(objectType.substr(0, 2), 'DI')) {
    return $getDescriptionsIntKey();
  }
  if ($equals_7(objectType.substr(0, 2), 'DE')) {
    return $getDescriptionsExtKey();
  }
  throw new ConversionRuntimeException(701);
}
;
var Lcom_sap_spe_conversion_impl_PhysicalUnitBuilder_2_classLit = createForClass('com.sap.spe.conversion.impl', 'PhysicalUnitBuilder', 458, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getCachedUnits(this$static){
  var key;
  key = create_4('PU', 'UN');
  return dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
}

function $getExternalUnitName_0(this$static, physicalUnit, textType){
  var description, descriptions, internalName, key, language, type_0;
  type_0 = textType - 1;
  language = getActiveLanguage();
  key = create_5('PU', 'DI', language);
  descriptions = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  internalName = physicalUnit.m_internalName;
  description = null;
  descriptions.isEmpty() || (description = dynamicCast(descriptions.get_4(internalName), 195));
  if (!description) {
    return internalName;
  }
  if (type_0 == 0) {
    return description.externalUnitCommercialFormat;
  }
  if (type_0 == 1) {
    return description.externalUnitTechnicalFormat;
  }
  if (type_0 == 2) {
    return description.shortDescription;
  }
  if (type_0 == 3) {
    return description.longDescription;
  }
  return description.externalUnitCommercialFormat;
}

function $getPhysicalUnit_0(this$static, unitName){
  var unit, units;
  if (unitName == null) {
    return null;
  }
  units = $getCachedUnits(this$static);
  unit = dynamicCast(units.get_4(unitName), 27);
  if (!unit) {
    throw new ConversionMissingDataException(132, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitName]));
  }
  return unit;
}

function $getPhysicalUnits_0(this$static){
  var map_0;
  map_0 = $getCachedUnits(this$static);
  return map_0.values_0();
}

function PhysicalUnitObjectManager(){
  ConversionObjectManager.call(this);
}

defineClass(512, 88, {}, PhysicalUnitObjectManager);
var Lcom_sap_spe_conversion_impl_PhysicalUnitObjectManager_2_classLit = createForClass('com.sap.spe.conversion.impl', 'PhysicalUnitObjectManager', 512, Lcom_sap_spe_conversion_impl_ConversionObjectManager_2_classLit);
function $convertTo(this$static, unit){
  var fraction5, res, result;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  result = convert(this$static.m_value, dynamicCast(this$static.m_unit, 27), unit);
  fraction5 = convertToFraction5(result.m_numerator, result.m_denominator);
  res = new QuantityConversionResultSimple($getPhysicalValue(result.m_value, unit));
  $setFraction5(res, new Fraction_0(fraction5.m_numerator, fraction5.m_denominator, result.m_fraction5.m_exponent));
  $setOffset(res, result.m_offset);
  return res;
}

function PhysicalValue(value_0, unit){
  var convEng;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  this.m_value = value_0;
  this.m_unit = unit;
  this.m_value = $setScale(this.m_value, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
}

function PhysicalValue_0(value_0, unitName){
  var convEng;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  this.m_value = value_0;
  this.m_unit = dynamicCast($getPhysicalUnit_0(convEng.m_physicalUnitObjMgr, unitName), 177);
  this.m_value = $setScale(this.m_value, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
}

defineClass(264, 680, $intern_28, PhysicalValue, PhysicalValue_0);
var Lcom_sap_spe_conversion_impl_PhysicalValue_2_classLit = createForClass('com.sap.spe.conversion.impl', 'PhysicalValue', 264, Lcom_sap_spe_conversion_impl_DimensionalValue_2_classLit);
function $clinit_PhysicalValueConverter(){
  $clinit_PhysicalValueConverter = emptyMethod;
  C_LOG10 = log_0(10);
}

function convert(valueIn, unitIn, unitOut){
  $clinit_PhysicalValueConverter();
  var addConst, bdValueOut, convEng, den, denominator, dimIn, dimOut, doubleValueIn, expAll, num, numerator, result, valueOut;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14);
  expAll = 0;
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, 'PhysicalValueConverter.convert  ', 0));
  debugT($formatMessage(convEng, '------------------------------------------------- ', 0));
  debugT($formatMessage(convEng, 'parameters    ', 1));
  debugT($formatMessage(convEng, 'valueIn       ' + valueIn, 2));
  debugT($formatMessage(convEng, 'unitIn        ' + unitIn.getUnitName_0(), 2));
  debugT($formatMessage(convEng, 'unitOut       ' + unitOut.getUnitName_0(), 2));
  debugT($formatMessage(convEng, ' ', 0));
  doubleValueIn = __parseAndValidateDouble($toString_6(valueIn));
  if (!unitIn || !unitOut) {
    throw new ConversionIllegalArgumentException(149);
  }
  dimIn = unitIn.getDimensionName();
  dimOut = unitOut.getDimensionName();
  if (dimIn == null) {
    throw new ConversionIllegalArgumentException(142, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitIn.getUnitName_0()]));
  }
  if (dimOut == null) {
    throw new ConversionIllegalArgumentException(142, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitOut.getUnitName_0()]));
  }
  if (!$equals_7(dimIn, dimOut)) {
    throw new ConversionIllegalArgumentException(135, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitIn.getUnitName_0(), unitOut.getUnitName_0()]));
  }
  if (unitIn.equals$(unitOut)) {
    addConst = 0;
    numerator = 1;
    denominator = 1;
  }
   else {
    if (unitOut.getFraction().m_numerator == 0) {
      throw new ConversionArithmeticException(136, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitOut.getUnitName_0()]));
    }
    addConst = (unitIn.getOffset() - unitOut.getOffset()) * unitOut.getFraction().m_denominator / unitOut.getFraction().m_numerator * exp_1(-unitOut.getFraction().m_exponent * C_LOG10);
    expAll = unitIn.getFraction().m_exponent - unitOut.getFraction().m_exponent;
    if (expAll < 0) {
      num = unitOut.getFraction().m_numerator;
      den = unitIn.getFraction().m_denominator;
      denominator = num * den * exp_1(-expAll * C_LOG10);
      num = unitIn.getFraction().m_numerator;
      den = unitOut.getFraction().m_denominator;
      numerator = num * den;
    }
     else {
      num = unitOut.getFraction().m_numerator;
      den = unitIn.getFraction().m_denominator;
      denominator = num * den;
      num = unitIn.getFraction().m_numerator;
      den = unitOut.getFraction().m_denominator;
      numerator = num * den * exp_1(expAll * C_LOG10);
    }
  }
  if (denominator == 0) {
    throw new ConversionArithmeticException(137, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitOut.getUnitName_0(), unitIn.getUnitName_0()]));
  }
  valueOut = doubleValueIn * (numerator / denominator) + addConst;
  bdValueOut = new BigDecimal(valueOut);
  bdValueOut = $setScale(bdValueOut, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
  debugT($formatMessage(convEng, '==> resulting value:' + $toPlainString(bdValueOut), 0));
  debugT($formatMessage(convEng, 'add.Const: ' + addConst, 3));
  debugT($formatMessage(convEng, 'fraction:  ' + numerator + '/' + denominator, 3));
  debugT($formatMessage(convEng, ' ', 0));
  result = new PhysValConvResult(bdValueOut, toDouble(fromDouble((new Double(numerator)).value_0)), toDouble(fromDouble((new Double(denominator)).value_0)), new Fraction_0(0, 0, expAll), $setScale(new BigDecimal(addConst), 6, valueOf_7(4)));
  return result;
}

function convertToFraction5(num, den){
  $clinit_PhysicalValueConverter();
  var convEng, currentU, currentV, doubleA, doubleX, doubleY, frac1, frac2, fraction5, fraction50, input_0, int0, lastU, lastV, nextU, nextV;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14);
  lastU = 1;
  lastV = 0;
  currentV = 1;
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, 'PhysicalValueConverter.convertToFraction5  ', 0));
  debugT($formatMessage(convEng, '------------------------------------------------- ', 0));
  debugT($formatMessage(convEng, 'parameters', 1));
  debugT($formatMessage(convEng, 'fraction      ' + num + '/' + den, 2));
  debugT($formatMessage(convEng, 'offset        0.0', 2));
  debugT($formatMessage(convEng, ' ', 0));
  if (num != 0 && den != 0) {
    frac1 = frac_0(num);
    frac2 = frac_0(den);
    if (num <= 99999 && den <= 99999 && frac1 == 0 && frac2 == 0) {
      fraction50 = new Fraction(round_int(num), round_int(den));
      debugT($formatMessage(convEng, '==> resulting fraction: ' + fraction50.m_numerator + '/' + fraction50.m_denominator, 0));
      debugT($formatMessage(convEng, ' ', 0));
      return fraction50;
    }
    input_0 = num / den;
  }
   else {
    fraction50 = new Fraction(round_int(num), round_int(den));
    debugT($formatMessage(convEng, '==> fraction: ' + fraction50.m_numerator + '/' + fraction50.m_denominator, 0));
    debugT($formatMessage(convEng, ' ', 0));
    return fraction50;
  }
  if (input_0 <= 1.0E-6 || input_0 >= 100000) {
    debugT($formatMessage(convEng, 'resulting value num/den ' + input_0, 1));
    debugT($formatMessage(convEng, '==> resulting fraction is lower then 1E-6 or higher than 100000\t', 1));
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, '==> !!ERROR', 0));
    throw new ConversionArithmeticException(138, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, ['' + input_0]));
  }
  currentU = round_int(floor_0(input_0));
  doubleX = input_0 - currentU;
  while (doubleX > 2.0E-31) {
    doubleX = 1 / doubleX;
    doubleA = floor_0(doubleX);
    doubleY = doubleA * currentU + lastU;
    if (doubleY > 99999) {
      break;
    }
    doubleY = doubleA * currentV + lastV;
    if (doubleY > 99999) {
      break;
    }
    int0 = round_int(floor_0(doubleX));
    nextU = int0 * currentU + lastU;
    nextV = int0 * currentV + lastV;
    lastU = currentU;
    lastV = currentV;
    currentU = nextU;
    currentV = nextV;
    doubleX = doubleX - int0;
  }
  if (currentU == 0 && currentV == 1 && input_0 != 0) {
    debugT($formatMessage(convEng, 'resulting value num/den ' + input_0, 1));
    debugT($formatMessage(convEng, '==>resulting fraction is lower then 1E-6 or higher than 100000', 1));
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, '==> !!ERROR ', 0));
    throw new ConversionArithmeticException(139, null);
  }
  fraction5 = new Fraction(currentU, currentV);
  debugT($formatMessage(convEng, '==> fraction: ' + fraction5.m_numerator + '/' + fraction5.m_denominator, 0));
  debugT($formatMessage(convEng, ' ', 0));
  return fraction5;
}

function convertWithFactorsAndExponent(valueIn, num, den, exponent){
  $clinit_PhysicalValueConverter();
  var convEng, valueOut;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14);
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, 'PhysicalValueConverter.convertWithFactorsAndExponent  ', 0));
  debugT($formatMessage(convEng, '------------------------------------------------- ', 0));
  debugT($formatMessage(convEng, 'parameters    ', 1));
  debugT($formatMessage(convEng, 'valueIn       ' + valueIn, 2));
  debugT($formatMessage(convEng, 'fraction      ' + num + '/' + den, 2));
  debugT($formatMessage(convEng, 'exponent      ' + exponent, 2));
  debugT($formatMessage(convEng, 'offset        0.0', 2));
  debugT($formatMessage(convEng, ' ', 0));
  if (den == 0) {
    throw new ConversionArithmeticException(29, null);
  }
  valueOut = valueIn * num / den * exp_1(exponent * C_LOG10);
  debugT($formatMessage(convEng, '==> resulting value: ' + valueOut, 0));
  debugT($formatMessage(convEng, ' ', 0));
  return new PhysValConvResult(new BigDecimal(valueOut), num, den, new Fraction_0(0, 0, exponent), new BigDecimal(0));
}

function frac_0(value_0){
  if (value_0 >= 0) {
    return value_0 - floor_0(value_0);
  }
  return value_0 - ceil_0(value_0);
}

var C_LOG10 = 0;
function QuantityConversionResult(value_0, fractionBasToAlt5, offset){
  this.m_value = value_0;
  this.m_fractionBasToAlt5 = fractionBasToAlt5;
  this.m_offset = offset;
}

defineClass(597, 1, $intern_21, QuantityConversionResult);
var Lcom_sap_spe_conversion_impl_QuantityConversionResult_2_classLit = createForClass('com.sap.spe.conversion.impl', 'QuantityConversionResult', 597, Ljava_lang_Object_2_classLit);
function $setFraction5(this$static, fraction5){
  this$static.m_fraction5 = fraction5;
}

function $setOffset(this$static, offset){
  this$static.m_offset = offset;
}

function QuantityConversionResultSimple(value_0){
  this.m_value = value_0;
}

function QuantityConversionResultSimple_0(value_0, fraction5, offset){
  this.m_value = value_0;
  this.m_fraction5 = fraction5;
  this.m_offset = offset;
}

defineClass(268, 1, $intern_21, QuantityConversionResultSimple, QuantityConversionResultSimple_0);
var Lcom_sap_spe_conversion_impl_QuantityConversionResultSimple_2_classLit = createForClass('com.sap.spe.conversion.impl', 'QuantityConversionResultSimple', 268, Ljava_lang_Object_2_classLit);
function QuantityUnit(physicalUnit, product){
  this.m_physicalUnit = physicalUnit;
  this.m_product = product;
}

defineClass(129, 1, {99:1, 27:1, 289:1, 129:1, 3:1}, QuantityUnit);
_.equals$ = function equals_15(o){
  var unit;
  if (this === o) {
    return true;
  }
  if (o == null || !instanceOf(o, 289)) {
    return false;
  }
  unit = dynamicCast(o, 289);
  return $equals_7(this.m_physicalUnit.getUnitName_0(), unit.m_physicalUnit.getUnitName_0()) && $equals_7(this.m_product.getId_0(), unit.m_product.getId_0());
}
;
_.getDimension = function getDimension_0(){
  return this.m_physicalUnit.getDimension();
}
;
_.getDimensionName = function getDimensionName_0(){
  return this.m_physicalUnit.getDimensionName();
}
;
_.getExternalUnitName = function getExternalUnitName_1(){
  return this.m_physicalUnit.getExternalUnitName();
}
;
_.getFraction = function getFraction_0(){
  return this.m_physicalUnit.getFraction();
}
;
_.getIsoCode = function getIsoCode_0(){
  return this.m_physicalUnit.getIsoCode();
}
;
_.getNumberOfDecimals = function getNumberOfDecimals_0(){
  return this.m_physicalUnit.getNumberOfDecimals();
}
;
_.getOffset = function getOffset_0(){
  return this.m_physicalUnit.getOffset();
}
;
_.getShortDescription = function getShortDescription_1(){
  return this.m_physicalUnit.getShortDescription();
}
;
_.getUnitName_0 = function getUnitName_2(){
  return this.m_physicalUnit.getUnitName_0();
}
;
_.hashCode$ = function hashCode_17(){
  var hash, id_0, name_0;
  id_0 = this.m_product.getId_0();
  name_0 = this.m_physicalUnit.getUnitName_0();
  hash = 217 + (null == id_0?0:getHashCode_0(id_0));
  hash = 31 * hash + (null == name_0?0:getHashCode_0(name_0));
  return hash;
}
;
_.isPrimaryUnitForIsoCodeConversion_0 = function isPrimaryUnitForIsoCodeConversion_1(){
  return this.m_physicalUnit.isPrimaryUnitForIsoCodeConversion_0();
}
;
var Lcom_sap_spe_conversion_impl_QuantityUnit_2_classLit = createForClass('com.sap.spe.conversion.impl', 'QuantityUnit', 129, Ljava_lang_Object_2_classLit);
function $getQuantityUnit_0(unitName, product){
  var convEngine, physicalUnit, unit;
  convEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  physicalUnit = ($checkArg(unitName) , $getPhysicalUnit_0(convEngine.m_physicalUnitObjMgr, unitName));
  if ($equals_7(unitName, '') || product.containsUnit(physicalUnit)) {
    unit = new QuantityUnit(physicalUnit, product);
    return unit;
  }
  throw new ConversionInconsistentDataException(141, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitName, product.getExternalId_0()]));
}

function QuantityValConvResult(value_0, fractionBasToAlt5, offset){
  this.m_value = value_0;
  this.m_fractionBasToAlt5 = fractionBasToAlt5;
  this.m_offset = offset;
}

defineClass(344, 1, {}, QuantityValConvResult);
var Lcom_sap_spe_conversion_impl_QuantityValConvResult_2_classLit = createForClass('com.sap.spe.conversion.impl', 'QuantityValConvResult', 344, Ljava_lang_Object_2_classLit);
function QuantityValConvResultSimple(value_0, fraction5, offset){
  this.m_value = value_0;
  this.m_fraction5 = fraction5;
  this.m_offset = offset;
}

defineClass(202, 1, {}, QuantityValConvResultSimple);
var Lcom_sap_spe_conversion_impl_QuantityValConvResultSimple_2_classLit = createForClass('com.sap.spe.conversion.impl', 'QuantityValConvResultSimple', 202, Ljava_lang_Object_2_classLit);
function $convertAlternativeToBaseQuantity(this$static){
  var res;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  res = convertAlternativeToBaseQuantity(dynamicCast(this$static.m_unit, 129).m_product, this$static.m_value, dynamicCast(this$static.m_unit, 129));
  return new QuantityConversionResultSimple_0($getPhysicalValue_0(res.m_value, dynamicCast(this$static.m_unit, 129).m_product.getBaseUnit_1().m_physicalUnit.getUnitName_0()), res.m_fraction5, res.m_offset);
}

function $convertBaseToAlternativeQuantity(this$static, unitOut){
  var res;
  res = $convertTo_0(this$static, unitOut, dynamicCast(this$static.m_unit, 289), this$static.m_value);
  return new QuantityConversionResultSimple_0(res.m_value, res.m_fractionBasToAlt5, res.m_offset);
}

function $convertTo_0(this$static, unitOut, baseUnit, baseValue){
  var res, result;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  result = convert_0(dynamicCast(this$static.m_unit, 129).m_product, dynamicCast(this$static.m_unit, 129), this$static.m_value, unitOut, baseUnit, baseValue);
  res = new QuantityConversionResult($getPhysicalValue_0(result.m_value, unitOut.getUnitName_0()), result.m_fractionBasToAlt5, result.m_offset);
  return res;
}

function QuantityValue(value_0, unit){
  this.m_value = value_0;
  this.m_unit = unit;
  this.m_value = $setScale(this.m_value, 3, valueOf_7(4));
}

function QuantityValue_0(value_0, unitName, product){
  var convEng;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  this.m_value = value_0;
  this.m_unit = $getQuantityUnit_0(unitName, product);
  this.m_value = $setScale(this.m_value, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
}

defineClass(336, 264, $intern_28, QuantityValue, QuantityValue_0);
var Lcom_sap_spe_conversion_impl_QuantityValue_2_classLit = createForClass('com.sap.spe.conversion.impl', 'QuantityValue', 336, Lcom_sap_spe_conversion_impl_PhysicalValue_2_classLit);
function $clinit_QuantityValueConverter(){
  $clinit_QuantityValueConverter = emptyMethod;
  getLocation(Lcom_sap_spe_conversion_impl_QuantityValueConverter_2_classLit);
  log_0(10);
}

function checkArg(arg){
  if (arg == null) {
    throw new ConversionIllegalArgumentException(10);
  }
}

function convert_0(product, unitIn, valueIn, unitOut, baseUnit, baseValue){
  $clinit_QuantityValueConverter();
  var convEng, conversionResult, fractionAltToBas, fractionBasToAlt, offset, result;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14);
  conversionResult = valueIn;
  offset = ($clinit_ConversionConstants() , C_ZERO);
  fractionAltToBas = new Fraction(0, 0);
  fractionBasToAlt = new Fraction(0, 0);
  convEng.m_minimumWriteStep = 0;
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, 'QuantityValueConverter.convert (unitIn -> baseUnit -> unitOut)', 0));
  debugT($formatMessage(convEng, '------------------------------------------------------------- ', 0));
  debugT($formatMessage(convEng, 'parameters          ', 0));
  debugT($formatMessage(convEng, 'product             ' + product.getExternalId_0() + ' ' + product.getId_0(), 1));
  debugT($formatMessage(convEng, 'valueIn             ' + $toPlainString(valueIn), 1));
  debugT($formatMessage(convEng, 'unitIn              ' + unitIn.m_physicalUnit.getUnitName_0(), 1));
  debugT($formatMessage(convEng, 'unitOut             ' + unitOut.getUnitName_0(), 1));
  !!baseUnit && debugT($formatMessage(convEng, 'baseUnit            ' + baseUnit.m_physicalUnit.getUnitName_0(), 1));
  !!baseValue && debugT($formatMessage(convEng, 'baseValue           ' + $toPlainString(baseValue), 1));
  debugT($formatMessage(convEng, ' ', 0));
  checkArg(unitIn);
  checkArg(unitOut);
  if ($equals_7(unitIn.m_physicalUnit.getUnitName_0(), unitOut.getUnitName_0())) {
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, '- unitIn is equal to unitOut', 1));
    debugT($formatMessage(convEng, ' ', 0));
    debugT($formatMessage(convEng, '==> resulting value: ' + $toPlainString(valueIn), 0));
    debugT($formatMessage(convEng, ' ', 0));
    return new QuantityValConvResult(valueIn, new Fraction(1, 1), (new Fraction(1, 1) , offset));
  }
  if (!baseUnit || !$equals_7(unitIn.m_physicalUnit.getUnitName_0(), baseUnit.m_physicalUnit.getUnitName_0())) {
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, '- conversion from unitIn -> baseUnit ', 1));
    debugT($formatMessage(convEng, ' ', 2));
    debugT($formatMessage(convEng, 'no fraction known\t', 2));
    debugT($formatMessage(convEng, '==> call this.productUnitConversion ', 2));
    $setWriteStep(convEng, convEng.m_minimumWriteStep + 4);
    result = productUnitConversion(product, true, valueIn, unitIn);
    conversionResult = $setScale(result.m_value, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
    fractionAltToBas = result.m_fraction5;
    offset = result.m_offset;
    $setWriteStep(convEng, convEng.m_minimumWriteStep - 4);
    debugT($formatMessage(convEng, '==> found conversion from unitIn -> baseUnit', 1));
    debugT($formatMessage(convEng, '==> resulting value = ' + $toPlainString(valueIn), 1));
    debugT($formatMessage(convEng, ' ', 1));
  }
  if (!baseUnit || !$equals_7(baseUnit.m_physicalUnit.getUnitName_0(), unitOut.getUnitName_0())) {
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, '- conversion from baseUnit -> unitOut ', 1));
    debugT($formatMessage(convEng, ' ', 2));
    debugT($formatMessage(convEng, 'no fraction known\t', 2));
    debugT($formatMessage(convEng, '==> call this.productUnitConversion ', 2));
    $setWriteStep(convEng, convEng.m_minimumWriteStep + 4);
    result = productUnitConversion(product, false, conversionResult, unitOut);
    conversionResult = $setScale(result.m_value, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
    fractionBasToAlt = result.m_fraction5;
    offset = result.m_offset;
    $setWriteStep(convEng, convEng.m_minimumWriteStep - 4);
    debugT($formatMessage(convEng, '==> found conversion from baseUnit -> unitOut', 1));
    debugT($formatMessage(convEng, '==> resulting value = ' + $toPlainString(conversionResult), 1));
    debugT($formatMessage(convEng, ' ', 1));
  }
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, '==> resulting value: ' + $toPlainString(conversionResult), 0));
  debugT($formatMessage(convEng, 'fraction unitIn - baseUnit:  ' + fractionAltToBas.m_numerator + '/' + fractionAltToBas.m_denominator, 3));
  debugT($formatMessage(convEng, 'fraction baseUnit - unitOut: ' + fractionBasToAlt.m_numerator + '/' + fractionBasToAlt.m_denominator, 3));
  debugT($formatMessage(convEng, ' ', 0));
  return new QuantityValConvResult(conversionResult, fractionBasToAlt, offset);
}

function convertAlternativeToBaseQuantity(product, valueIn, alternativeQtyUnit){
  $clinit_QuantityValueConverter();
  var convEng, conversionResult, fractionAltToBas, offset, result;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  $clinit_ConversionConstants();
  $setWriteStep(convEng, convEng.m_minimumWriteStep + 2);
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, 'QuantityValueConverter.convertAlternativeToBaseQuantity       ', 0));
  debugT($formatMessage(convEng, '------------------------------------------------------------- ', 0));
  debugT($formatMessage(convEng, 'parameters          ', 1));
  debugT($formatMessage(convEng, 'product             ' + product.getExternalId_0() + ' ' + product.getId_0(), 2));
  debugT($formatMessage(convEng, 'alternativeQtyUnit  ' + alternativeQtyUnit.m_physicalUnit.getUnitName_0(), 2));
  debugT($formatMessage(convEng, 'valueIn             ' + $toPlainString(valueIn), 2));
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, ' ', 2));
  debugT($formatMessage(convEng, 'no fraction known ', 2));
  debugT($formatMessage(convEng, '==> call this.productUnitConversion ', 2));
  $setWriteStep(convEng, convEng.m_minimumWriteStep + 2);
  result = productUnitConversion(product, true, valueIn, alternativeQtyUnit);
  conversionResult = result.m_value;
  fractionAltToBas = result.m_fraction5;
  offset = result.m_offset;
  $setWriteStep(convEng, convEng.m_minimumWriteStep - 2);
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, '==> resulting value: ' + $toPlainString(conversionResult), 0));
  debugT($formatMessage(convEng, 'fraction : ' + fractionAltToBas.m_numerator + '/' + fractionAltToBas.m_denominator, 3));
  debugT($formatMessage(convEng, ' ', 0));
  return new QuantityValConvResultSimple(conversionResult, fractionAltToBas, offset);
}

function productUnitConversion(product, calculationFlag, valueIn, unitIn){
  var altUnit, altUnitFractions, altUnitName, altUnitNames, baseUnitIn, baseUnitName, convEng, conversionFound, dimUnitAlt, dimUnitIn, frac, fraction, i_0, matDen, matNum, physTestValue, quantityUnitIn, res, t006Const, t006Den, t006Num, value_0, valueDouble;
  baseUnitName = null;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  matNum = 0;
  matDen = 0;
  t006Num = 0;
  t006Den = 0;
  t006Const = ($clinit_ConversionConstants() , C_ZERO);
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, 'QuantityValueConverter.productUnitConversion  ', 0));
  calculationFlag?debugT($formatMessage(convEng, '(convert from baseUnit to unitIn of product)', 1)):debugT($formatMessage(convEng, '(convert from unitIn to baseUnit of product)', 1));
  debugT($formatMessage(convEng, '------------------------------------------------- ', 0));
  debugT($formatMessage(convEng, 'parameters          ', 1));
  debugT($formatMessage(convEng, 'unitIn              ' + unitIn.getUnitName_0(), 2));
  debugT($formatMessage(convEng, 'valueIn             ' + $toPlainString(valueIn), 2));
  debugT($formatMessage(convEng, 'baseUnitName        null', 2));
  debugT($formatMessage(convEng, ' ', 0));
  conversionFound = false;
  checkArg(product);
  checkArg(unitIn);
  checkArg(valueIn);
  debugT($formatMessage(convEng, ' ', 1));
  debugT($formatMessage(convEng, '- determine base unit of product ', 1));
  baseUnitIn = product.getBaseUnit_1();
  baseUnitName = baseUnitIn.m_physicalUnit.getUnitName_0();
  debugT($formatMessage(convEng, '==> base unit of product: ' + baseUnitName, 1));
  if (baseUnitName == null) {
    throw new ConversionMissingDataException(150, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, []));
  }
  if ($equals_7(baseUnitName, unitIn.getUnitName_0())) {
    debugT($formatMessage(convEng, ' ', 0));
    debugT($formatMessage(convEng, '- baseUnit = unitIn ', 1));
    debugT($formatMessage(convEng, ' ', 0));
    debugT($formatMessage(convEng, '==> resulting value: ' + $toPlainString(valueIn), 0));
    debugT($formatMessage(convEng, 'fraction: 1/1', 3));
    debugT($formatMessage(convEng, '================================================= ', 0));
    debugT($formatMessage(convEng, ' ', 0));
    return new QuantityValConvResultSimple(valueIn, new Fraction(1, 1), C_ZERO);
  }
  quantityUnitIn = $getQuantityUnit_0(unitIn.getUnitName_0(), product);
  frac = product.getAlternativeUnitConversionFraction(quantityUnitIn);
  if (!!frac && frac.m_numerator != 0 && frac.m_denominator != 0) {
    matNum = frac.m_numerator;
    matDen = frac.m_denominator;
    calculationFlag?(valueDouble = __parseAndValidateDouble($toString_6(valueIn)) * (new Integer(matNum)).value_0 / (new Integer(matDen)).value_0):(valueDouble = __parseAndValidateDouble($toString_6(valueIn)) * (new Integer(matDen)).value_0 / (new Integer(matNum)).value_0);
    value_0 = new BigDecimal(valueDouble);
    value_0 = $setScale(value_0, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, '- ' + unitIn.getUnitName_0() + ' and ' + baseUnitName + ' belong to product => direct conversion', 1));
    debugT($formatMessage(convEng, ' ', 0));
    debugT($formatMessage(convEng, '==> resulting value: ' + $toPlainString(value_0), 0));
    debugT($formatMessage(convEng, 'fraction: ' + matNum + '/' + matDen, 3));
    debugT($formatMessage(convEng, ' ', 0));
    return new QuantityValConvResultSimple(value_0, new Fraction(matNum, matDen), C_ZERO);
  }
  dimUnitIn = $getDimension_0(convEng.m_dimensionObjMgr, unitIn.getDimensionName());
  if (dimUnitIn.m_isDimensionLess) {
    debugT($formatMessage(convEng, ' ', 0));
    debugT($formatMessage(convEng, ' !! unitIn has no dimension ==> error', 0));
    throw new ConversionInconsistentDataException(151, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitIn.getUnitName_0()]));
  }
  if (!product.containsUnit(unitIn)) {
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, 'to product belongs NO UNIT with same dimension as unitIn  ', 1));
    debugT($formatMessage(convEng, ' ', 1));
    debugT($formatMessage(convEng, ' !!ERROR', 0));
    throw new ConversionInconsistentDataException(146, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitIn.getUnitName_0(), product.getExternalId_0()]));
  }
  altUnitFractions = product.getAlternativeUnitConversionFractions();
  altUnitNames = new HashMap_0(10);
  for (i_0 = 0; i_0 < altUnitFractions.length; i_0++) {
    $putStringValue(altUnitNames, altUnitFractions[i_0].m_alternativeUnitName, altUnitFractions[i_0].m_fraction);
  }
  (baseUnitName == null?!!$getEntry(altUnitNames.hashCodeMap, null):!(altUnitNames.stringMap.get_0(baseUnitName) === undefined)) || $putStringValue(altUnitNames, baseUnitName, new Fraction(1, 1));
  debugT($formatMessage(convEng, ' ', 1));
  debugT($formatMessage(convEng, '- try to find a unit belonging to product with same dimension as unitIn', 1));
  debugT($formatMessage(convEng, 'dimension of unitIn', 2));
  debugT($formatMessage(convEng, unitIn.getUnitName_0() + ': ' + unitIn.getDimensionName(), 5));
  debugT($formatMessage(convEng, 'dimension of units belonging to product', 2));
  while (null.nullMethod()) {
    altUnitName = null.nullMethod();
    altUnit = null;
    try {
      altUnit = dynamicCast($getPhysicalUnit_0(convEng.m_physicalUnitObjMgr, altUnitName), 177);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
      }
       else 
        throw unwrap($e0);
    }
    if (altUnit) {
      physTestValue = new PhysicalValue(C_ONE, unitIn);
      dimUnitAlt = $getDimension_0(convEng.m_dimensionObjMgr, altUnit.m_dimension);
      debugT($formatMessage(convEng, altUnit.m_internalName + ': ' + altUnit.m_dimension, 5));
      if ($equals_7(dimUnitAlt.m_name, dimUnitIn.m_name)) {
        debugT($formatMessage(convEng, '==> right dimension', 1));
        debugT($formatMessage(convEng, '==> use phyical conversion to find conversion factors ', 1));
        debugT($formatMessage(convEng, ' ', 1));
        debugT($formatMessage(convEng, '- try to find corresponding factors in T006 ', 1));
        $setWriteStep(convEng, convEng.m_minimumWriteStep + 3);
        res = $convertTo(physTestValue, altUnit);
        t006Den = res.m_fraction5.m_denominator;
        t006Num = res.m_fraction5.m_numerator;
        t006Const = res.m_offset;
        matNum = dynamicCast(getEntryValueOrNull($getEntry(altUnitNames.hashCodeMap, null)), 38).m_numerator;
        matDen = dynamicCast(getEntryValueOrNull($getEntry(altUnitNames.hashCodeMap, null)), 38).m_denominator;
        conversionFound = true;
        $setWriteStep(convEng, convEng.m_minimumWriteStep - 3);
        debugT($formatMessage(convEng, ' ', 1));
        debugT($formatMessage(convEng, '==>fractions from ' + unitIn.getUnitName_0() + ' -> ' + altUnit.m_internalName + ': ' + t006Num + '/' + t006Den, 1));
        debugT($formatMessage(convEng, '==>fractions from ' + altUnit.m_internalName + ' -> ' + baseUnitName + ': ' + matNum + '/' + matDen, 1));
        break;
      }
    }
  }
  if (!conversionFound) {
    throw new ConversionMissingDataException(146, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitIn.getUnitName_0(), product.getExternalId_0()]));
  }
  if (calculationFlag) {
    valueDouble = __parseAndValidateDouble($toString_6(valueIn)) + __parseAndValidateDouble($toString_6(t006Const));
    valueDouble = valueDouble * (new Integer(matNum)).value_0 / (new Integer(matDen)).value_0;
    valueDouble = valueDouble * (new Integer(t006Num)).value_0 / (new Integer(t006Den)).value_0;
  }
   else {
    valueDouble = __parseAndValidateDouble($toString_6(valueIn)) * (new Integer(t006Den)).value_0 / (new Integer(t006Num)).value_0;
    valueDouble = valueDouble * (new Integer(matDen)).value_0 / (new Integer(matNum)).value_0;
    valueDouble = valueDouble - __parseAndValidateDouble($toString_6(t006Const));
  }
  value_0 = new BigDecimal(valueDouble);
  value_0 = $setScale(value_0, convEng.m_NumberOfDecimalsForUnitsOfMeasure, valueOf_7(4));
  try {
    fraction = convertToFraction5(t006Num * matNum, t006Den * matDen);
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 83)) {
      fraction = new Fraction(t006Num * matNum, t006Den * matDen);
    }
     else 
      throw unwrap($e1);
  }
  debugT($formatMessage(convEng, ' ', 0));
  debugT($formatMessage(convEng, '==> resulting value: ' + $toPlainString(value_0), 0));
  debugT($formatMessage(convEng, 'fraction: ' + fraction.m_numerator + '/' + fraction.m_denominator, 3));
  debugT($formatMessage(convEng, ' ', 0));
  return new QuantityValConvResultSimple(value_0, fraction, t006Const);
}

var Lcom_sap_spe_conversion_impl_QuantityValueConverter_2_classLit = createForClass('com.sap.spe.conversion.impl', 'QuantityValueConverter', null, Ljava_lang_Object_2_classLit);
function ReturnCode(){
  this.m_returnCode = 0;
}

defineClass(200, 1, {}, ReturnCode);
_.m_returnCode = 0;
var Lcom_sap_spe_conversion_impl_ReturnCode_2_classLit = createForClass('com.sap.spe.conversion.impl', 'ReturnCode', 200, Ljava_lang_Object_2_classLit);
function ConversionFactorTO(){
}

defineClass(124, 1, {124:1, 3:1}, ConversionFactorTO);
_.fromFactor = 0;
_.toFactor = 0;
var Lcom_sap_spe_conversion_to_ConversionFactorTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'ConversionFactorTO', 124, Ljava_lang_Object_2_classLit);
function CurrencyUnitTO(){
}

defineClass(194, 1, {194:1, 3:1}, CurrencyUnitTO);
_.isPrimaryUnitForIsoCodeConversion = false;
_.numberOfDecimals = 0;
var Lcom_sap_spe_conversion_to_CurrencyUnitTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'CurrencyUnitTO', 194, Ljava_lang_Object_2_classLit);
function DimensionTO(){
}

defineClass(234, 1, {234:1, 3:1}, DimensionTO);
_.electricCurrentExponent = 0;
_.lengthExponent = 0;
_.luminosityExponent = 0;
_.massExponent = 0;
_.moleQuantityExponent = 0;
_.temperatureExponent = 0;
_.timexExponent = 0;
var Lcom_sap_spe_conversion_to_DimensionTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'DimensionTO', 234, Ljava_lang_Object_2_classLit);
function EmuKeysTO(){
}

defineClass(174, 1, {174:1, 3:1}, EmuKeysTO);
var Lcom_sap_spe_conversion_to_EmuKeysTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'EmuKeysTO', 174, Ljava_lang_Object_2_classLit);
function ExchangeRateTO(){
}

defineClass(145, 1, {145:1, 3:1}, ExchangeRateTO);
_.fromFactor = 0;
_.toFactor = 0;
var Lcom_sap_spe_conversion_to_ExchangeRateTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'ExchangeRateTO', 145, Ljava_lang_Object_2_classLit);
function ExchangeRateTypeTO(){
}

defineClass(238, 1, {238:1, 3:1}, ExchangeRateTypeTO);
_.indicatorInvertedCalculationAllowed = false;
_.indicatorSpecialTranslationModel = false;
var Lcom_sap_spe_conversion_to_ExchangeRateTypeTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'ExchangeRateTypeTO', 238, Ljava_lang_Object_2_classLit);
function NotationPrefixTO(){
}

defineClass(233, 1, {233:1, 3:1}, NotationPrefixTO);
var Lcom_sap_spe_conversion_to_NotationPrefixTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'NotationPrefixTO', 233, Ljava_lang_Object_2_classLit);
function NotationTO(){
}

defineClass(247, 1, {247:1, 3:1}, NotationTO);
var Lcom_sap_spe_conversion_to_NotationTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'NotationTO', 247, Ljava_lang_Object_2_classLit);
function PhysicalUnitDescriptionTO(){
}

defineClass(195, 1, {195:1, 3:1}, PhysicalUnitDescriptionTO);
var Lcom_sap_spe_conversion_to_PhysicalUnitDescriptionTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'PhysicalUnitDescriptionTO', 195, Ljava_lang_Object_2_classLit);
function PhysicalUnitTO(){
}

defineClass(236, 1, {236:1, 3:1}, PhysicalUnitTO);
_.fractionDenominator = 0;
_.fractionExponent = 0;
_.fractionNumerator = 0;
_.isPrimaryUnitForIsoCodeConversion = false;
_.offset = 0;
var Lcom_sap_spe_conversion_to_PhysicalUnitTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'PhysicalUnitTO', 236, Ljava_lang_Object_2_classLit);
defineClass(672, 1, {});
var factory_4 = null;
var Lcom_sap_spe_document_DocumentEngineFactory_2_classLit = createForClass('com.sap.spe.document', 'DocumentEngineFactory', 672, Ljava_lang_Object_2_classLit);
function $clinit_Document(){
  $clinit_Document = emptyMethod;
  getLocation(Lcom_sap_spe_document_impl_Document_2_classLit);
  ZERO_1 = new BigDecimal_4('0');
}

function $addPricingProcedure(this$static, pricingProcedure){
  var iter;
  if (!this$static.pricingProcedure && !!pricingProcedure) {
    this$static.pricingProcedure = pricingProcedure;
    this$static.relevantAttributes = new RelevantDocumentAttributes((!factory_4 && (factory_4 = ($clinit_ClassFinder() , $clinit_ClassFinder() , null)) , $getDocumentEngine(factory_4) , this$static.application), this$static.usage, pricingProcedure.pricingProcedureTO.name_0);
    this$static.pricingDocument = new PricingDocument(($getPricingEngine(this$static.usage) , this$static));
    $setAuthority(this$static.pricingDocument, this$static.authorityForDisplay, this$static.authorityForEdit);
    $setAlwaysPerformingGroupConditionProcessing(this$static.pricingDocument, this$static.alwaysPerformGroupConditionProcessing);
    $setPerformTrace_0(this$static.pricingDocument, this$static.performTrace);
    for (iter = $iterator_0(new AbstractMap$2(this$static.items)); iter.val$outerIter2.hasNext();) {
      $updatePricingItem_0(dynamicCast($next_2(iter), 154));
    }
    $addStatusListener(this$static.pricingDocument, this$static);
    new DocumentUserExitAccess(this$static);
  }
}

function $addPricingProcedure_0(this$static, pricingProcedureName){
  var newPricingProcedure;
  newPricingProcedure = $getProcedure_0($getPricingEngine(this$static.usage), this$static.application, pricingProcedureName);
  $addPricingProcedure(this$static, newPricingProcedure);
}

function $clearProtocol(this$static, context){
  $clearLines(this$static.protocol, context);
}

function $createAttributeBinding_0(this$static, attributeName, attributeValues){
  var attributeBinding, attributeValue, attributeValuesCache, field;
  this$static.relevantAttributes?(field = $getRelevantApplicationField_0(this$static.relevantAttributes, attributeName)):(field = $getCustomizingEngine(factory_0, this$static.usage).getApplicationField(this$static.application, attributeName));
  attributeBinding = null;
  if (field) {
    if (attributeValues.length == 1) {
      attributeValue = attributeValues[0];
      attributeValuesCache = dynamicCast($getStringValue(this$static.attributeCache, attributeName), 24);
      if (attributeValuesCache) {
        attributeBinding = dynamicCast(attributeValuesCache.get_4(attributeValue), 115);
        if (!attributeBinding) {
          attributeBinding = $getConditionFindingEngine(factory_1, this$static.usage).createAttributeBinding(field, attributeValues);
          attributeValuesCache.put_0(attributeValue, attributeBinding);
          $putStringValue(this$static.attributeCache, attributeName, attributeValuesCache);
        }
      }
       else {
        attributeValuesCache = new HashMap;
        attributeBinding = $getConditionFindingEngine(factory_1, this$static.usage).createAttributeBinding(field, attributeValues);
        attributeValuesCache.put_0(attributeValue, attributeBinding);
        $putStringValue(this$static.attributeCache, attributeName, attributeValuesCache);
      }
    }
     else {
      attributeBinding = $getConditionFindingEngine(factory_1, this$static.usage).createAttributeBinding(field, attributeValues);
    }
  }
  return attributeBinding;
}

function $createConditionAccessTimestamp(this$static, timestampName, timestampValue){
  var accessTimeStampValueMap, condAccessTimeStamp;
  if (this$static.accessTimestampCache) {
    accessTimeStampValueMap = dynamicCast($getStringValue(this$static.accessTimestampCache, timestampName), 7);
    if (!accessTimeStampValueMap) {
      condAccessTimeStamp = new ConditionAccessTimestamp(($getPricingEngine(this$static.usage) , timestampName), timestampValue);
      accessTimeStampValueMap = new HashMap;
      $put_1(accessTimeStampValueMap.hashCodeMap, timestampValue, condAccessTimeStamp);
      $putStringValue(this$static.accessTimestampCache, timestampName, accessTimeStampValueMap);
    }
     else {
      condAccessTimeStamp = dynamicCast(getEntryValueOrNull($getEntry(accessTimeStampValueMap.hashCodeMap, timestampValue)), 288);
      if (!condAccessTimeStamp) {
        condAccessTimeStamp = new ConditionAccessTimestamp(($getPricingEngine(this$static.usage) , timestampName), timestampValue);
        $put_1(accessTimeStampValueMap.hashCodeMap, timestampValue, condAccessTimeStamp);
        $putStringValue(this$static.accessTimestampCache, timestampName, accessTimeStampValueMap);
      }
    }
  }
   else {
    this$static.accessTimestampCache = new HashMap;
    accessTimeStampValueMap = new HashMap;
    condAccessTimeStamp = new ConditionAccessTimestamp(($getPricingEngine(this$static.usage) , timestampName), timestampValue);
    $put_1(accessTimeStampValueMap.hashCodeMap, timestampValue, condAccessTimeStamp);
    $putStringValue(this$static.accessTimestampCache, timestampName, accessTimeStampValueMap);
  }
  return condAccessTimeStamp;
}

function $getId(this$static){
  this$static.id_0 == null && (this$static.id_0 = uuid_0());
  return this$static.id_0;
}

function $getItems(this$static){
  var itemArray, itemCollection;
  itemCollection = new AbstractMap$2(this$static.items);
  itemArray = initDim(Lcom_sap_spe_document_impl_Item_2_classLit, $intern_24, 154, itemCollection.this$01.size_1(), 0, 1);
  $toArray(itemCollection, itemArray);
  return itemArray;
}

function $getLocalCurrency(this$static){
  !this$static.localCurrency && (this$static.localCurrency = this$static.documentCurrency);
  return this$static.localCurrency;
}

function $getPricingConditions(this$static){
  $updatePricingDocument(this$static.pricingDocumentConnector);
  if (this$static.pricingDocument) {
    return $updatePricingDocument(this$static.pricingDocumentConnector) , $getConditionsInternal(this$static.pricingDocument);
  }
  return initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, 0, 0, 1);
}

function $getPricingDocument(this$static){
  $updatePricingDocument(this$static.pricingDocumentConnector);
  return this$static.pricingDocument;
}

function $replaceItemId(this$static, oldId, newId){
  var item_0;
  item_0 = dynamicCast($getStringValue(this$static.items, oldId), 692);
  $removeStringValue(this$static.items, oldId);
  $putStringValue(this$static.items, newId, item_0);
}

function $setAlwaysPerformGroupConditionProcessing(this$static){
  if (!this$static.alwaysPerformGroupConditionProcessing) {
    this$static.alwaysPerformGroupConditionProcessing = false;
    !!this$static.pricingDocument && $setAlwaysPerformingGroupConditionProcessing(this$static.pricingDocument, true);
    this$static.alwaysPerformGroupConditionProcessing = true;
  }
}

function $setLocalCurrency_0(this$static, localCurrencyUnitName){
  !!this$static.localCurrency && !$equals_7(localCurrencyUnitName, this$static.localCurrency.getUnitName_0()) && (this$static.pricingDocumentConnector.changeLocalCurrency = true);
  this$static.localCurrency = $getCurrencyUnit(dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14), localCurrencyUnitName);
}

function $updateAtrributeUsageTracker(this$static, oldBinding, newBinding){
  var attributeValuesCache, usageCounter;
  usageCounter = 0;
  if (newBinding) {
    if (dynamicCast($get_12(this$static.attributeBindingUsageCounterRegister, newBinding), 16)) {
      usageCounter = dynamicCast($get_12(this$static.attributeBindingUsageCounterRegister, newBinding), 16).value_0;
      ++usageCounter;
      $put_0(this$static.attributeBindingUsageCounterRegister, newBinding, valueOf(__parseAndValidateInt('' + usageCounter)));
    }
     else {
      $put_0(this$static.attributeBindingUsageCounterRegister, newBinding, valueOf(__parseAndValidateInt('1')));
    }
  }
  if (oldBinding) {
    if (dynamicCast($get_12(this$static.attributeBindingUsageCounterRegister, oldBinding), 16)) {
      usageCounter = dynamicCast($get_12(this$static.attributeBindingUsageCounterRegister, oldBinding), 16).value_0;
      --usageCounter;
    }
    if (usageCounter == 0) {
      $remove(this$static.attributeBindingUsageCounterRegister, oldBinding);
      attributeValuesCache = dynamicCast($getStringValue(this$static.attributeCache, oldBinding.getApplicationField_0().fieldTO.name_0), 24);
      oldBinding.getValues().length != 0 && !!attributeValuesCache && attributeValuesCache.remove_0(oldBinding.getValues()[0]);
      $putStringValue(this$static.attributeCache, oldBinding.getApplicationField_0().fieldTO.name_0, attributeValuesCache);
    }
     else {
      $put_0(this$static.attributeBindingUsageCounterRegister, oldBinding, valueOf(__parseAndValidateInt('' + usageCounter)));
    }
  }
}

function $updateTimeStampUsageTracker(this$static, oldTimestamp, newTimestamp){
  var accessTimeStampValueMap, usageCounter;
  if (newTimestamp) {
    if (dynamicCast($get_12(this$static.accessTimestampUsageCounterRegister, newTimestamp), 16)) {
      usageCounter = dynamicCast($get_12(this$static.accessTimestampUsageCounterRegister, newTimestamp), 16).value_0;
      ++usageCounter;
      $put_0(this$static.accessTimestampUsageCounterRegister, newTimestamp, valueOf(__parseAndValidateInt('' + usageCounter)));
    }
     else {
      $put_0(this$static.accessTimestampUsageCounterRegister, newTimestamp, valueOf(__parseAndValidateInt('1')));
    }
  }
  if (oldTimestamp) {
    usageCounter = dynamicCast($get_12(this$static.accessTimestampUsageCounterRegister, oldTimestamp), 16).value_0;
    --usageCounter;
    if (usageCounter == 0) {
      $remove(this$static.accessTimestampUsageCounterRegister, oldTimestamp);
      accessTimeStampValueMap = dynamicCast($getStringValue(this$static.accessTimestampCache, oldTimestamp.name_0), 24);
      accessTimeStampValueMap.remove_0(oldTimestamp.value_0);
      $putStringValue(this$static.accessTimestampCache, oldTimestamp.name_0, accessTimeStampValueMap);
    }
     else {
      $put_0(this$static.accessTimestampUsageCounterRegister, oldTimestamp, valueOf(__parseAndValidateInt('' + usageCounter)));
    }
  }
}

function Document_0(application, documentCurrency){
  $clinit_Document();
  this.attributeCache = new HashMap;
  this.attributeBindingUsageCounterRegister = new HashMap;
  this.accessTimestampUsageCounterRegister = new HashMap;
  this.application = application;
  this.usage = 'A';
  this.documentCurrency = documentCurrency;
  this.attributes = new HashMap;
  this.items = new HashMap;
  this.pricingDocumentConnector = new Document$PricingDocumentConnector(this);
  this.editMode = 65;
  this.protocol = new Protocol;
  this.popupProtocol = new Protocol;
}

defineClass(564, 1, {211:1, 3:1, 702:1}, Document_0);
_.clearStatusMessage = function clearStatusMessage(e){
  $clearProtocol(this, e._context);
}
;
_.setStatusMessage = function setStatusMessage(e){
  var _protocol, message, messageType;
  _protocol = e.popup?this.popupProtocol:this.protocol;
  instanceOf(e, 126)?(messageType = 'E'):instanceOf(e, 44)?(messageType = 'W'):(messageType = 'E');
  if ($equals_7(e.m_messageArea, '')) {
    $appendLine(_protocol, new ProtocolLine_2(messageType, e.m_message, e._context));
  }
   else {
    message = new Message(e.m_messageArea, e.m_messageNumber, e.m_message, e.m_arguments);
    $appendLine(_protocol, new ProtocolLine_1(messageType, message, e._context));
  }
}
;
_.accessTimestampCache = null;
_.alwaysPerformGroupConditionProcessing = false;
_.authorityForDisplay = 0;
_.authorityForEdit = 0;
_.editMode = 0;
_.keepZeroPricesActive = false;
_.lazyItemLoadMode = false;
_.onlySpecifiedUsage = false;
_.optimizedGroupProcessMode = false;
_.partialProcessing = false;
_.performTrace = false;
_.pricingCompleteRequiredDuringLoad = false;
_.returnDocIndicator = false;
_.simulation = false;
_.varcondFieldname = 'VARCOND';
var ZERO_1;
var Lcom_sap_spe_document_impl_Document_2_classLit = createForClass('com.sap.spe.document.impl', 'Document', 564, Ljava_lang_Object_2_classLit);
function getIntRepresentation(l){
  var i_0, len, str, strBuf;
  str = '' + l;
  len = 9 - str.length;
  strBuf = new StringBuffer_0;
  for (i_0 = 0; i_0 < len; i_0++) {
    strBuf.string += '0';
  }
  len < 0 && (str = str.substr(0, 9));
  return (strBuf.string += str , strBuf).string;
}

var counter_0 = 0;
function $appendExceptionToProtocol(this$static){
  var message;
  $clinit_Configuration_0();
  $clinit_Document();
  initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [$getId(this$static.this$01)]);
  message = new Message('PRC_PRI', 451, 'Internal error during pricing', initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1));
  $appendLine(this$static.this$01.protocol, new ProtocolLine_1('E', message, 'spe.pricing.pricingdocument'));
}

function $updatePricingDocument(this$static){
  if (!this$static.this$01.pricingDocument) {
    return;
  }
  if (this$static.isUpdatingPricingDocument) {
    return;
  }
  if (this$static.changeDocumentCurrency) {
    try {
      $setDocumentCurrencyUnit(this$static.this$01.pricingDocument, this$static.this$01.documentCurrency);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $appendExceptionToProtocol(this$static);
      }
       else 
        throw unwrap($e0);
    }
     finally {
      this$static.changeDocumentCurrency = false;
    }
  }
  if (this$static.changeLocalCurrency) {
    try {
      $setLocalCurrencyUnit(this$static.this$01.pricingDocument, this$static.this$01.localCurrency);
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 9)) {
        $appendExceptionToProtocol(this$static);
      }
       else 
        throw unwrap($e1);
    }
     finally {
      this$static.changeLocalCurrency = false;
    }
  }
  this$static.isUpdatingPricingDocument = true;
  try {
    $updatePricingItems(this$static);
  }
   catch ($e2) {
    $e2 = wrap($e2);
    if (instanceOf($e2, 9)) {
      $appendExceptionToProtocol(this$static);
    }
     else 
      throw unwrap($e2);
  }
   finally {
    this$static.isUpdatingPricingDocument = false;
  }
  if (this$static.performPricingComplete) {
    try {
      $pricingComplete(this$static.this$01.pricingDocument);
    }
     catch ($e3) {
      $e3 = wrap($e3);
      if (instanceOf($e3, 9)) {
        $appendExceptionToProtocol(this$static);
      }
       else 
        throw unwrap($e3);
    }
     finally {
      this$static.performPricingComplete = false;
    }
  }
}

function $updatePricingItem(this$static, item_0){
  $indexOf_1(this$static.itemsToBeUpdated, item_0, 0) != -1 || $add_3(this$static.itemsToBeUpdated, item_0);
}

function $updatePricingItems(this$static){
  var iter;
  if (this$static.this$01.pricingDocument) {
    if (this$static.itemsToBeUpdated.array.length > 0) {
      this$static.this$01.alwaysPerformGroupConditionProcessing && $setAlwaysPerformingGroupConditionProcessing(this$static.this$01.pricingDocument, false);
      for (iter = new AbstractList$IteratorImpl(this$static.itemsToBeUpdated); iter.i < iter.this$01.size_1();) {
        $updatePricingItem_1((checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 154)).pricingItemConnector);
      }
      this$static.itemsToBeUpdated.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
      if (this$static.this$01.alwaysPerformGroupConditionProcessing) {
        $setAlwaysPerformingGroupConditionProcessing(this$static.this$01.pricingDocument, true);
        this$static.readPricingDocumentFromDatabase || (this$static.performPricingComplete = true);
      }
    }
  }
}

function Document$PricingDocumentConnector(this$0){
  this.this$01 = this$0;
  this.itemsToBeUpdated = new ArrayList;
}

defineClass(565, 1, $intern_21, Document$PricingDocumentConnector);
_.changeDocumentCurrency = false;
_.changeLocalCurrency = false;
_.isUpdatingPricingDocument = false;
_.performPricingComplete = false;
_.readPricingDocumentFromDatabase = false;
var Lcom_sap_spe_document_impl_Document$PricingDocumentConnector_2_classLit = createForClass('com.sap.spe.document.impl', 'Document/PricingDocumentConnector', 565, Ljava_lang_Object_2_classLit);
function DocumentEngine(){
}

defineClass(517, 1, {}, DocumentEngine);
var Lcom_sap_spe_document_impl_DocumentEngine_2_classLit = createForClass('com.sap.spe.document.impl', 'DocumentEngine', 517, Ljava_lang_Object_2_classLit);
function $getDocumentEngine(this$static){
  !this$static.documentEngine && (this$static.documentEngine = new DocumentEngine);
  return this$static.documentEngine;
}

function DocumentEngineFactoryImpl(){
}

defineClass(443, 672, {}, DocumentEngineFactoryImpl);
_.documentEngine = null;
var Lcom_sap_spe_document_impl_DocumentEngineFactoryImpl_2_classLit = createForClass('com.sap.spe.document.impl', 'DocumentEngineFactoryImpl', 443, Lcom_sap_spe_document_DocumentEngineFactory_2_classLit);
function $clinit_DocumentUserExitAccess(){
  $clinit_DocumentUserExitAccess = emptyMethod;
  getLocation(Lcom_sap_spe_document_impl_DocumentUserExitAccess_2_classLit);
}

function DocumentUserExitAccess(document_0){
  $clinit_DocumentUserExitAccess();
  var c, relevantAttr;
  this.relevantAttributes = new HashSet;
  relevantAttr = null;
  try {
    relevantAttr = $getConditionFindingEngine(factory_1, document_0.usage).getRelevantAttributes(document_0.application, document_0.pricingProcedure.pricingProcedureTO.name_0).attributeNames;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 42)) {
      $clinit_Configuration_0();
    }
     else 
      throw unwrap($e0);
  }
  for (c = 0; c < relevantAttr.length; c++) {
    $add_4(this.relevantAttributes, relevantAttr[c]);
  }
}

defineClass(578, 1, $intern_21, DocumentUserExitAccess);
var Lcom_sap_spe_document_impl_DocumentUserExitAccess_2_classLit = createForClass('com.sap.spe.document.impl', 'DocumentUserExitAccess', 578, Ljava_lang_Object_2_classLit);
function $clinit_Item(){
  $clinit_Item = emptyMethod;
  getLocation(Lcom_sap_spe_document_impl_Item_2_classLit);
}

function $adjustBaseQtyBasedOnExtnlFraction(this$static){
  var baseUnit, res;
  baseUnit = null;
  try {
    baseUnit = $getBaseUnit(this$static.product.conversionProduct);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_ConversionConstants();
    }
     else 
      throw unwrap($e0);
  }
  res = null;
  try {
    res = $convertAlternativeToBaseQuantity($getProductQuantity(this$static));
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 9)) {
      $clinit_ConversionConstants();
      initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [baseUnit.m_physicalUnit.getUnitName_0()]);
    }
     else 
      throw unwrap($e1);
  }
  $setBaseQuantity(this$static, $getQuantityValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , res.m_value.m_value), baseUnit));
  $setSalesToBaseQuantityRatio(this$static, new Fraction(res.m_fraction5.m_numerator, res.m_fraction5.m_denominator));
}

function $clearPopUpProtocol(this$static, context){
  $clearLines(this$static.popupProtocol, context);
}

function $clearProtocol_0(this$static, context){
  $clearLines(this$static.protocol, context);
}

function $getBaseQuantity(this$static){
  if (!this$static.baseQuantity) {
    try {
      this$static.baseQuantity = $getQuantityValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , $clinit_PricingTransactiondataConstants() , ZERO_4), $getBaseUnit(this$static.product.conversionProduct));
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
  }
  return this$static.baseQuantity;
}

function $getConditionAccessTimestampEnvironment(this$static){
  var timestampArray;
  timestampArray = initDim(Lcom_sap_spe_condmgnt_finding_IConditionAccessTimestamp_2_classLit, {641:1, 3:1, 4:1, 5:1}, 288, this$static.accessTimestamps.size_0, 0, 1);
  return dynamicCast($toArray(new AbstractMap$2(this$static.accessTimestamps), timestampArray), 641);
}

function $getExchangeRate_2(this$static){
  if (!this$static.exchangeRate) {
    try {
      $setExchangeRate_1(this$static, (this$static.exchangeRateType == null && (this$static.exchangeRateType = 'M') , this$static.exchangeRateType), (!this$static.exchangeRateDate && (this$static.exchangeRateDate = today()) , this$static.exchangeRateDate), null);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
  }
  return this$static.exchangeRate;
}

function $getExchangeRateDate(this$static){
  !this$static.exchangeRateDate && (this$static.exchangeRateDate = today());
  return this$static.exchangeRateDate;
}

function $getExchangeRateType_2(this$static){
  this$static.exchangeRateType == null && (this$static.exchangeRateType = 'M');
  return this$static.exchangeRateType;
}

function $getExternalDataSource(this$static, pricingConditionType){
  var dataSourceArray, dataSources;
  if (!pricingConditionType) {
    return null;
  }
  dataSources = dynamicCast($getStringValue(this$static.externalDataSources, pricingConditionType.conditionTypeTO.name_0), 33);
  if (!dataSources) {
    return null;
  }
  dataSourceArray = initDim(Lcom_sap_spe_pricing_transactiondata_IExternalDataSource_2_classLit, $intern_15, 782, dataSources.size_1(), 0, 1);
  dataSources.toArray_0(dataSourceArray);
  return dataSourceArray;
}

function $getExternalId(this$static){
  this$static.externalId == null && (this$static.externalId = (counter_0 == $intern_16?(counter_0 = 0):++counter_0 , getIntRepresentation(counter_0)));
  return this$static.externalId;
}

function $getId_0(this$static){
  this$static.id_0 == null && (this$static.id_0 = uuid_0());
  return this$static.id_0;
}

function $getMultiplicity(this$static){
  !this$static.multiplicity && (this$static.multiplicity = ($clinit_PricingTransactiondataConstants() , ONE_0));
  return this$static.multiplicity;
}

function $getNetValue(this$static){
  var pricingItemUpd;
  pricingItemUpd = ($updatePricingItem_1(this$static.pricingItemConnector) , this$static.pricingItem);
  return pricingItemUpd?$getNetValue_0(pricingItemUpd.accumulator):$getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , $clinit_Document() , ZERO_1), this$static.document_0.documentCurrency);
}

function $getPricingConditions_0(this$static){
  $updatePricingItem_1(this$static.pricingItemConnector);
  if (this$static.pricingItem) {
    return $updatePricingItem_1(this$static.pricingItemConnector) , $getPricingConditions_3(this$static.pricingItem, true, false);
  }
  return initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, 0, 0, 1);
}

function $getProductQuantity(this$static){
  if (!this$static.productQuantity) {
    try {
      this$static.productQuantity = $getQuantityValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , $clinit_PricingTransactiondataConstants() , ZERO_4), $getBaseUnit(this$static.product.conversionProduct));
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
  }
  return this$static.productQuantity;
}

function $getProductToBaseQuantityRatio(this$static){
  !this$static.productToBaseQuantityRatio && (this$static.productToBaseQuantityRatio = new Fraction(1, 1));
  return this$static.productToBaseQuantityRatio;
}

function $getSubItems(this$static){
  var itemArray;
  itemArray = initDim(Lcom_sap_spe_document_impl_Item_2_classLit, $intern_24, 154, this$static.subItems.array.length, 0, 1);
  $toArray_1(this$static.subItems, itemArray);
  return itemArray;
}

function $getVariantConditions(this$static){
  var variantConditionArray;
  variantConditionArray = initDim(Lcom_sap_spe_pricing_transactiondata_IVariantCondition_2_classLit, {640:1, 3:1, 4:1, 5:1}, 781, this$static.variantKeys.array.length, 0, 1);
  return dynamicCast($toArray_1(this$static.variantKeys, variantConditionArray), 640);
}

function $setAttributeBinding_0(this$static, attributeName, attributeValues){
  var attrBinding, oldValue;
  attrBinding = $createAttributeBinding_0(this$static.document_0, attributeName, attributeValues);
  if (!attrBinding) {
    return null;
  }
  $add_4(this$static.attributesSetExplicitly, attributeName);
  oldValue = dynamicCast($putStringValue(this$static.attributes, attributeName, attrBinding), 115);
  if (!attrBinding.equals$(oldValue)) {
    $updateAtrributeUsageTracker(this$static.document_0, oldValue, attrBinding);
    $setAction(this$static.pricingItemConnector, 20);
  }
  return oldValue;
}

function $setBaseQuantity(this$static, baseQuantityValue){
  if (!this$static.baseQuantity || $compareTo_7(this$static.baseQuantity.m_value, baseQuantityValue.m_value) != 0 || !$equals_7(this$static.baseQuantity.m_unit.getUnitName_0(), baseQuantityValue.m_unit.getUnitName_0())) {
    this$static.baseQuantity = baseQuantityValue;
    $setAction(this$static.pricingItemConnector, 20);
  }
}

function $setConditionAccessTimestamp(this$static, conditionAccessTimestampName, conditionAccessTimestampValue){
  var oldTimestamp, timestamp;
  timestamp = $createConditionAccessTimestamp(this$static.document_0, conditionAccessTimestampName, conditionAccessTimestampValue);
  oldTimestamp = dynamicCast($putStringValue(this$static.accessTimestamps, conditionAccessTimestampName, timestamp), 288);
  !!oldTimestamp && oldTimestamp != timestamp?$updateTimeStampUsageTracker(this$static.document_0, oldTimestamp, timestamp):!oldTimestamp && $updateTimeStampUsageTracker(this$static.document_0, null, timestamp);
}

function $setExchangeRate_0(this$static, exRate){
  $clearLines(this$static.protocol, 'spe.document.item.exchangerate');
  this$static.exchangeRate = exRate;
  $setAction(this$static.pricingItemConnector, 20);
}

function $setExchangeRate_1(this$static, exchangesRateType, exchangeRateDate, externalExchangeRate){
  var res, valueIn;
  this$static.exchangeRateType = exchangesRateType;
  this$static.exchangeRateDate = exchangeRateDate;
  valueIn = $getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , $clinit_ConversionConstants() , C_ONE), $getLocalCurrency(this$static.document_0));
  res = $convertToForeignCurrency(valueIn, (!this$static.exchangeRateDate && (this$static.exchangeRateDate = today()) , this$static.exchangeRateDate), this$static.document_0.documentCurrency, this$static.exchangeRateType, externalExchangeRate);
  $setExchangeRate_0(this$static, res.m_exchangeRate);
}

function $setExternalId(this$static, externalId){
  this$static.externalId = externalId;
}

function $setId_0(this$static, id_0){
  var oldId;
  oldId = this$static.id_0;
  if (!$equals_7(oldId, id_0)) {
    !!this$static.pricingItem && $setId_1(this$static.pricingItem, id_0);
    this$static.id_0 = id_0;
    $replaceItemId(this$static.document_0, oldId, this$static.id_0);
  }
}

function $setProductQuantity(this$static, productQuantityValue){
  if (!this$static.productQuantity || $compareTo_7(this$static.productQuantity.m_value, productQuantityValue.m_value) != 0 || !$equals_7(this$static.productQuantity.m_unit.getUnitName_0(), productQuantityValue.m_unit.getUnitName_0())) {
    this$static.productQuantity = productQuantityValue;
    $setAction(this$static.pricingItemConnector, 20);
  }
  $adjustBaseQtyBasedOnExtnlFraction(this$static);
}

function $setProductQuantity_0(this$static, salesQuantity, salesQuantityUnit){
  try {
    $setProductQuantity(this$static, $getQuantityValue_0((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , salesQuantity), salesQuantityUnit, this$static.product));
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 92)) {
      $clinit_ConversionConstants();
    }
     else 
      throw unwrap($e0);
  }
}

function $setRelevantPricing(this$static){
  if (!this$static.isRelevantForPricing) {
    this$static.isRelevantForPricing = true;
    $setAction(this$static.pricingItemConnector, 1);
  }
}

function $setSalesToBaseQuantityRatio(this$static, ratio){
  if (!this$static.productToBaseQuantityRatio || this$static.productToBaseQuantityRatio.m_numerator != ratio.m_numerator || this$static.productToBaseQuantityRatio.m_denominator != ratio.m_denominator || this$static.productToBaseQuantityRatio.m_exponent != ratio.m_exponent) {
    this$static.productToBaseQuantityRatio = ratio;
    $setAction(this$static.pricingItemConnector, 20);
  }
}

function $updatePricingItem_0(this$static){
  !this$static.pricingItem && !!$getPricingDocument(this$static.document_0) && $setAction(this$static.pricingItemConnector, 1);
}

function Item(document_0, product){
  var attrBindingArray;
  $clinit_Item();
  var docAttributes, i_0;
  this.document_0 = document_0;
  this.product = product;
  this.attributes = new HashMap_0(30);
  this.attributesSetExplicitly = new HashSet_0(30);
  this.externalDataSources = new HashMap_0(4);
  this.accessTimestamps = new HashMap_0(4);
  this.variantKeys = new ArrayList;
  this.subItems = new ArrayList;
  this.protocol = new Protocol;
  this.popupProtocol = new Protocol;
  this.pricingItemConnector = new Item$PricingItemConnector(this, document_0.pricingDocumentConnector);
  docAttributes = (attrBindingArray = initDim(Lcom_sap_spe_condmgnt_finding_IAttributeBinding_2_classLit, $intern_29, 115, document_0.attributes.size_0, 0, 1) , dynamicCast($toArray(new AbstractMap$2(document_0.attributes), attrBindingArray), 287));
  for (i_0 = 0; i_0 < docAttributes.length; i_0++) {
    $setAttributeBinding_0(this, docAttributes[i_0].getName_0(), docAttributes[i_0].getValues());
  }
  $setRelevantPricing(this);
}

defineClass(154, 1, {211:1, 692:1, 154:1, 704:1, 3:1, 702:1}, Item);
_.clearStatusMessage = function clearStatusMessage_0(e){
  $clearProtocol_0(this, e._context);
  $clearPopUpProtocol(this, e._context);
}
;
_.setStatusMessage = function setStatusMessage_0(e){
  var _protocol, message, messageType;
  _protocol = e.popup?this.popupProtocol:this.protocol;
  instanceOf(e, 126)?(messageType = 'E'):instanceOf(e, 44)?(messageType = 'W'):(messageType = 'E');
  if ($equals_7(e.m_messageArea, '')) {
    $appendLine(_protocol, new ProtocolLine_2(messageType, e.m_message, e._context));
  }
   else {
    message = new Message(e.m_messageArea, e.m_messageNumber, e.m_message, e.m_arguments);
    $appendLine(_protocol, new ProtocolLine_1(messageType, message, e._context));
  }
}
;
_.isRelevantForPricing = false;
_.isReturn = false;
_.isStatistical_0 = false;
_.loadedFromPersistency = false;
_.performPricingAnalysis = false;
_.pricingItemIsUnchangeable = false;
_.pricingTypeName = 0;
var Lcom_sap_spe_document_impl_Item_2_classLit = createForClass('com.sap.spe.document.impl', 'Item', 154, Ljava_lang_Object_2_classLit);
function $setAction(this$static, action){
  if (action != 0 && this$static.action != action) {
    switch (action) {
      case 1:
      case 2:
        if (this$static.item_0.isRelevantForPricing) {
          if (this$static.action == 0 || this$static.action == 1 || this$static.action == 100 || this$static.action == 20 || this$static.action == 10) {
            this$static.action = action;
            $updatePricingItem(this$static.pricingDocumentConnector, this$static.item_0);
          }
        }

        break;
      case 3:
        if (this$static.item_0.isRelevantForPricing) {
          this$static.action = 3;
          $updatePricingItem(this$static.pricingDocumentConnector, this$static.item_0);
        }

        break;
      case 4:
        if (this$static.item_0.isRelevantForPricing) {
          this$static.action = 4;
          $updatePricingItem(this$static.pricingDocumentConnector, this$static.item_0);
        }

        break;
      case 10:
        if (this$static.item_0.isRelevantForPricing) {
          this$static.action = 10;
          $updatePricingItem(this$static.pricingDocumentConnector, this$static.item_0);
        }

        break;
      case 20:
        if (this$static.item_0.isRelevantForPricing && !this$static.this$01.document_0.pricingDocumentConnector.readPricingDocumentFromDatabase) {
          if (this$static.action == 0 || this$static.action == 100) {
            this$static.action = 20;
            $updatePricingItem(this$static.pricingDocumentConnector, this$static.item_0);
          }
        }

        break;
      case 21:
        if (this$static.item_0.isRelevantForPricing && !this$static.this$01.document_0.pricingDocumentConnector.readPricingDocumentFromDatabase) {
          if (this$static.action == 0 || this$static.action == 100 || this$static.action == 20) {
            this$static.action = 21;
            $updatePricingItem(this$static.pricingDocumentConnector, this$static.item_0);
          }
        }

    }
  }
   else 
    action == 0 && (this$static.action = 0);
}

function $setPerformPricingAnalysis(this$static){
  if (this$static.changePerformPricingAnalysis) {
    !!this$static.this$01.pricingItem && $setPerformTrace(this$static.this$01.pricingItem, this$static.this$01.performPricingAnalysis);
    this$static.changePerformPricingAnalysis = false;
  }
}

function $updatePricingItem_1(this$static){
  var message;
  if (this$static.action != 0) {
    $updatePricingDocument(this$static.pricingDocumentConnector);
    try {
      switch (this$static.action) {
        case 1:
          if (this$static.this$01.document_0.pricingDocument) {
            this$static.this$01.pricingItem = $createItem(this$static.this$01.document_0.pricingDocument, this$static.item_0);
            if (this$static.this$01.pricingItem) {
              $addStatusListener_0(this$static.this$01.pricingItem, this$static.item_0);
              $setPerformPricingAnalysis(this$static);
              this$static.this$01.document_0.pricingDocumentConnector.readPricingDocumentFromDatabase || this$static.this$01.document_0.lazyItemLoadMode && this$static.item_0.loadedFromPersistency?$addItemWithoutPricing(this$static.this$01.document_0.pricingDocument, this$static.this$01.pricingItem):$addItem_0(this$static.this$01.document_0.pricingDocument, this$static.this$01.pricingItem);
            }
          }

          break;
        case 2:
          if (this$static.this$01.document_0.pricingDocument) {
            this$static.this$01.pricingItem = $createItem(this$static.this$01.document_0.pricingDocument, this$static.item_0);
            if (this$static.this$01.pricingItem) {
              $addStatusListener_0(this$static.this$01.pricingItem, this$static.item_0);
              $setPerformPricingAnalysis(this$static);
              $loadFromLocalDBWithReference(this$static.this$01.pricingItem, this$static.this$01.sourceDocumentId, this$static.this$01.sourceItemId, this$static.this$01.pricingTypeName);
              $addItemWithoutPricing(this$static.this$01.document_0.pricingDocument, this$static.this$01.pricingItem);
            }
          }

          break;
        case 4:
          if (!this$static.this$01.pricingItem) {
            if (this$static.this$01.document_0.pricingDocument) {
              this$static.this$01.pricingItem = $createItem(this$static.this$01.document_0.pricingDocument, this$static.item_0);
              if (this$static.this$01.pricingItem) {
                $addStatusListener_0(this$static.this$01.pricingItem, this$static.item_0);
                $setPerformPricingAnalysis(this$static);
                $addItemWithoutPricing(this$static.this$01.document_0.pricingDocument, this$static.this$01.pricingItem);
              }
            }
          }

          break;
        case 3:
          if (!this$static.this$01.pricingItem) {
            if (this$static.this$01.document_0.pricingDocument) {
              this$static.this$01.pricingItem = $createItem(this$static.this$01.document_0.pricingDocument, this$static.item_0);
              if (this$static.this$01.pricingItem) {
                $addStatusListener_0(this$static.this$01.pricingItem, this$static.item_0);
                $setPerformPricingAnalysis(this$static);
                $loadFromExternal(this$static.this$01.pricingItem, this$static.this$01.pricingTypeName);
                $addItemWithoutPricing(this$static.this$01.document_0.pricingDocument, this$static.this$01.pricingItem);
              }
            }
          }
           else {
            $loadFromExternal(this$static.this$01.pricingItem, this$static.this$01.pricingTypeName);
          }

          break;
        case 10:
          if (!!this$static.this$01.document_0.pricingDocument && !!this$static.this$01.pricingItem) {
            $removeItem(this$static.this$01.document_0.pricingDocument, this$static.this$01.pricingItem._itemNumber);
            $removeStatusListener(this$static.this$01.pricingItem, this$static.item_0);
            $clearLines(this$static.item_0.protocol, null);
            this$static.this$01.pricingItem = null;
          }

          break;
        case 20:
        case 21:
          if (this$static.this$01.pricingItem) {
            $setPerformPricingAnalysis(this$static);
            $pricing_0(this$static.this$01.pricingItem, this$static.action == 21);
            this$static.this$01.pricingItem._calculationDuringPricingCompleteRequired = false;
          }

      }
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $clinit_Configuration_0();
        $clinit_Item();
        initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [$getId_0(this$static.this$01), $getId(this$static.this$01.document_0)]);
        message = new Message('PRC_PRI', 451, 'Internal error during pricing', initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 0, 4, 1));
        $appendLine(this$static.this$01.protocol, new ProtocolLine_1('E', message, 'spe.pricing.pricingitem'));
      }
       else 
        throw unwrap($e0);
    }
     finally {
      this$static.action = 0;
    }
  }
}

function Item$PricingItemConnector(this$0, pricingDocumentConnector){
  this.this$01 = this$0;
  this.pricingDocumentConnector = pricingDocumentConnector;
  this.item_0 = this$0;
}

defineClass(572, 1, $intern_21, Item$PricingItemConnector);
_.action = 0;
_.changePerformPricingAnalysis = false;
var Lcom_sap_spe_document_impl_Item$PricingItemConnector_2_classLit = createForClass('com.sap.spe.document.impl', 'Item/PricingItemConnector', 572, Ljava_lang_Object_2_classLit);
function $addAlternativeUnitToFractionMapping(this$static, alternativeUnitName, numerator, denominator, exponent){
  $addAlternativeUoMToFractionMapping(this$static.conversionProduct, alternativeUnitName, numerator, denominator, exponent);
}

function PricingProduct(productID, externalProductId, internalBaseUnitName){
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  this.conversionProduct = ($checkArg(productID) , $checkArg(internalBaseUnitName) , new ConversionProduct(productID, externalProductId, internalBaseUnitName));
}

defineClass(515, 1, $intern_21, PricingProduct);
_.containsUnit = function containsUnit_0(unit){
  return $containsUnit(this.conversionProduct, unit);
}
;
_.equals$ = function equals_16(obj){
  return maskUndefined(this.conversionProduct) === maskUndefined(obj);
}
;
_.getAlternativeUnitConversionFraction = function getAlternativeUnitConversionFraction_0(targetUnit){
  return $getAlternativeUnitConversionFraction(this.conversionProduct, targetUnit);
}
;
_.getAlternativeUnitConversionFractions = function getAlternativeUnitConversionFractions_0(){
  return $getAlternativeUnitConversionFractions(this.conversionProduct);
}
;
_.getBaseUnit_1 = function getBaseUnit_1(){
  return $getBaseUnit(this.conversionProduct);
}
;
_.getExternalId_0 = function getExternalId_1(){
  return this.conversionProduct.m_externalId;
}
;
_.getId_0 = function getId_5(){
  return this.conversionProduct.m_ID;
}
;
_.hashCode$ = function hashCode_18(){
  return getHashCode(this.conversionProduct);
}
;
_.toString$ = function toString_16(){
  return $toString(this.conversionProduct);
}
;
var Lcom_sap_spe_document_impl_PricingProduct_2_classLit = createForClass('com.sap.spe.document.impl', 'PricingProduct', 515, Ljava_lang_Object_2_classLit);
function $clinit_RelevantDocumentAttributes(){
  $clinit_RelevantDocumentAttributes = emptyMethod;
  getLocation(Lcom_sap_spe_document_impl_RelevantDocumentAttributes_2_classLit);
}

function $addRelevantAttributeNames(attributeSet, attributeArray){
  var i_0;
  for (i_0 = 0; i_0 < attributeArray.length; i_0++) {
    $contains_1(attributeSet, attributeArray[i_0]) || $add_5(attributeSet, attributeArray[i_0]);
  }
}

function $buildUpCacheForApplicationFieldBOs_0(this$static, customizingEngine, application){
  var applicationField, i_0;
  this$static.applicationFields = new HashMap;
  for (i_0 = 0; i_0 < this$static.attributes.length; i_0++) {
    applicationField = customizingEngine.getApplicationField(application, this$static.attributes[i_0]);
    $putStringValue(this$static.applicationFields, this$static.attributes[i_0], applicationField);
  }
}

function $getRelevantApplicationField_0(this$static, name_0){
  return dynamicCast($getStringValue(this$static.applicationFields, name_0), 359);
}

function RelevantDocumentAttributes(application, usage, pricingProcedure){
  $clinit_RelevantDocumentAttributes();
  var attributeSet, conditionFindingEngine, customizingEngine, relevantPricingAttributes;
  conditionFindingEngine = $getConditionFindingEngine(factory_1, usage);
  relevantPricingAttributes = conditionFindingEngine.getRelevantAttributes(application, pricingProcedure);
  attributeSet = new TreeSet;
  $addRelevantAttributeNames(attributeSet, relevantPricingAttributes.attributeNames);
  customizingEngine = $getCustomizingEngine(factory_0, usage);
  this.attributes = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, attributeSet.map_0.size_1(), 4, 1);
  attributeSet.toArray_0(this.attributes);
  $buildUpCacheForApplicationFieldBOs_0(this, customizingEngine, application);
}

defineClass(577, 1, $intern_21, RelevantDocumentAttributes);
var Lcom_sap_spe_document_impl_RelevantDocumentAttributes_2_classLit = createForClass('com.sap.spe.document.impl', 'RelevantDocumentAttributes', 577, Ljava_lang_Object_2_classLit);
function $clinit_Configuration_0(){
  $clinit_Configuration_0 = emptyMethod;
  getCategory('/AP/PRC/Pricing');
}

var Lcom_sap_spe_pricing_customizing_IExclusionProcedure_2_classLit = createForInterface('com.sap.spe.pricing.customizing', 'IExclusionProcedure');
function $export_28(this$static){
  if (!exported_28) {
    exported_28 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_IExclusionProcedure_2_classLit, this$static);
    $export0_28(this$static);
  }
}

function $export0_28(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.IExclusionProcedure');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.IExclusionProcedure = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0]) && (g = a[0]);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.IExclusionProcedure.prototype = new Object;
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getSteps = $entry(function(){
    return wrap_0(this.g.getSteps_1());
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.IExclusionProcedure[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.IExclusionProcedure[p] = pkg[p]);
}

function IExclusionProcedure_ExporterImpl(){
  $export_28(this);
}

defineClass(393, 1, $intern_18, IExclusionProcedure_ExporterImpl);
_.getJsConstructor = function getJsConstructor_28(){
  return $wnd.com.sap.spe.pricing.customizing.IExclusionProcedure;
}
;
_.isAssignable = function isAssignable_28(o){
  return o != null && instanceOf(o, 616);
}
;
var exported_28 = false;
var Lcom_sap_spe_pricing_customizing_IExclusionProcedure_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing', 'IExclusionProcedure_ExporterImpl', 393, Ljava_lang_Object_2_classLit);
var Lcom_sap_spe_pricing_customizing_IPricingConditionType_2_classLit = createForInterface('com.sap.spe.pricing.customizing', 'IPricingConditionType');
function $clinit_PricingCustomizingConstants$CalculationType(){
  $clinit_PricingCustomizingConstants$CalculationType = emptyMethod;
  _String(initValues(getClassLiteralForArray(C_classLit, 1), $intern_4, 0, 7, [66, 84]));
}

function isFixedAmountOrPercentage(calculationRule){
  $clinit_PricingCustomizingConstants$CalculationType();
  return $clinit_SAPString() , $indexOf('ABHIUW', fromCodePoint(calculationRule)) >= 0;
}

function isFixedAmountOrPercentageOrFormula(calculationRule){
  $clinit_PricingCustomizingConstants$CalculationType();
  return $clinit_SAPString() , $indexOf('ABGHIUW', fromCodePoint(calculationRule)) >= 0;
}

function isPercentage(calculationRule){
  $clinit_PricingCustomizingConstants$CalculationType();
  return $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(calculationRule)) >= 0;
}

function isTimeDependent(calculationRule){
  $clinit_PricingCustomizingConstants$CalculationType();
  return $clinit_SAPString() , $indexOf('MNOP', fromCodePoint(calculationRule)) >= 0;
}

function $clinit_PricingCustomizingConstants$InactiveFlag(){
  $clinit_PricingCustomizingConstants$InactiveFlag = emptyMethod;
  NOT_INACTIVE_OR_INACTIVE_DUE_TO_EXCLUSION_OR_INACTIVE_DUE_TO_SUBSEQUENT_PRICE = _String(initValues(getClassLiteralForArray(C_classLit, 1), $intern_4, 0, 7, [32, 65, 89]));
}

function isNotInactiveOrInactiveDueToExclusionOrInactiveDueToSubsequentPrice(inactiveFlag){
  $clinit_PricingCustomizingConstants$InactiveFlag();
  return $clinit_SAPString() , $indexOf(NOT_INACTIVE_OR_INACTIVE_DUE_TO_EXCLUSION_OR_INACTIVE_DUE_TO_SUBSEQUENT_PRICE, fromCodePoint(inactiveFlag)) >= 0;
}

var NOT_INACTIVE_OR_INACTIVE_DUE_TO_EXCLUSION_OR_INACTIVE_DUE_TO_SUBSEQUENT_PRICE;
function isPhysicalUnitScale(scaleBaseType){
  return scaleBaseType != null && scaleBaseType.length == 1 && ($clinit_SAPString() , 'DEFRL'.indexOf(scaleBaseType) >= 0);
}

function isReservedForISOil(scaleBaseType){
  return scaleBaseType != null && scaleBaseType.length == 1 && ($clinit_SAPString() , 'TX'.indexOf(scaleBaseType) >= 0);
}

function isTimeScale(scaleBaseType){
  return scaleBaseType != null && scaleBaseType.length == 1 && ($clinit_SAPString() , 'MNOP'.indexOf(scaleBaseType) >= 0);
}

function isUnitScale(scaleBaseType){
  return scaleBaseType != null && scaleBaseType.length == 1 && ($clinit_SAPString() , 'CDEF'.indexOf(scaleBaseType) >= 0);
}

function $getPricingCustomizingEngine(usage){
  return dynamicCast($getCustomizingEngine(factory_0, usage), 132);
}

function $putExclusionGroup_0(this$static, exclusionGroupTo){
  var key;
  key = create_4(exclusionGroupTo.application, exclusionGroupTo.name_0);
  $putStringValue(this$static.exclusionGroups, key, exclusionGroupTo);
}

function ExclusionGroupDAOImpl(){
  this.exclusionGroups = new HashMap;
}

defineClass(313, 1, {628:1}, ExclusionGroupDAOImpl);
var Lcom_sap_spe_pricing_customizing_dao_legacy_ExclusionGroupDAOImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.dao.legacy', 'ExclusionGroupDAOImpl', 313, Ljava_lang_Object_2_classLit);
function $getExclusionProcedure(this$static, application, name_0){
  var key;
  key = create_4(application, name_0);
  return dynamicCast($getStringValue(this$static.exclusionProcedure, key), 231);
}

function $putExclusionProcedure(this$static, ExclusionProcedureTO){
  var key;
  key = create_4(ExclusionProcedureTO.application, ExclusionProcedureTO.name_0);
  $putStringValue(this$static.exclusionProcedure, key, ExclusionProcedureTO);
}

function ExclusionProcedureDAOImpl(){
  this.exclusionProcedure = new HashMap;
}

defineClass(314, 1, {629:1}, ExclusionProcedureDAOImpl);
var Lcom_sap_spe_pricing_customizing_dao_legacy_ExclusionProcedureDAOImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.dao.legacy', 'ExclusionProcedureDAOImpl', 314, Ljava_lang_Object_2_classLit);
function $clearBuffer_1(this$static){
  !!this$static.pricingConditionTypes && (this$static.pricingConditionTypes = null);
  !!this$static.pricingConditionLimits && (this$static.pricingConditionLimits = null);
}

function $getPricingConditionType(this$static, application, usage, name_0){
  var key;
  key = create_5(application, usage, name_0);
  return dynamicCast($getStringValue(this$static.pricingConditionTypes, key), 143);
}

function $putPricingConditionLimits(this$static, pricingConditionLimitsTO){
  var key, listConditionLimits;
  key = create_5(pricingConditionLimitsTO.application, 'A', pricingConditionLimitsTO.conditionType);
  listConditionLimits = dynamicCast($getStringValue(this$static.pricingConditionLimits, key), 13);
  !listConditionLimits && (listConditionLimits = new ArrayList);
  setCheck(listConditionLimits.array, listConditionLimits.array.length, pricingConditionLimitsTO);
  $putStringValue(this$static.pricingConditionLimits, key, listConditionLimits);
}

function $putPricingConditionType(this$static, PricingConditionTypeTO){
  var key;
  key = create_5(PricingConditionTypeTO.application, PricingConditionTypeTO.usage, PricingConditionTypeTO.name_0);
  $putStringValue(this$static.pricingConditionTypes, key, PricingConditionTypeTO);
}

function PricingConditionTypeDAOImpl(){
  this.pricingConditionTypes = new HashMap;
  this.pricingConditionLimits = new HashMap;
}

defineClass(322, 1, {347:1}, PricingConditionTypeDAOImpl);
var Lcom_sap_spe_pricing_customizing_dao_legacy_PricingConditionTypeDAOImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.dao.legacy', 'PricingConditionTypeDAOImpl', 322, Ljava_lang_Object_2_classLit);
function $clearBuffer_2(this$static){
  !!this$static.PricingProcedures && (this$static.PricingProcedures = null);
}

function $getAllProcedureNames(this$static, application, usage){
  var iter, key, keyAppli, keyArray, keyName, keyUsage, keys_0, nameArray, names;
  if (!this$static.PricingProcedures)
    return null;
  keys_0 = new AbstractMap$1(this$static.PricingProcedures);
  names = new ArrayList;
  for (iter = $iterator(keys_0); $hasNext(iter.val$outerIter2);) {
    key = dynamicCastToString($next_1(iter));
    keyArray = getKeys(key);
    if (keyArray == null)
      continue;
    keyAppli = keyArray[0];
    keyUsage = keyArray[1];
    keyName = keyArray[2];
    $equalsIgnoreCase(keyAppli, application) && $equalsIgnoreCase(keyUsage, usage) && (setCheck(names.array, names.array.length, keyName) , true);
  }
  nameArray = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, names.array.length, 4, 1);
  $toArray_1(names, nameArray);
  return nameArray;
}

function $getPricingProcedure_0(this$static, application, usage, PricingProcedureName){
  var key;
  key = create_5(application, usage, PricingProcedureName);
  return dynamicCast($getStringValue(this$static.PricingProcedures, key), 141);
}

function $putPricingProcedure(this$static, PricingProcedureTO){
  var key;
  key = create_5(PricingProcedureTO.application, PricingProcedureTO.usage, PricingProcedureTO.name_0);
  $putStringValue(this$static.PricingProcedures, key, PricingProcedureTO);
}

function PricingProcedureDAOImpl(){
  this.PricingProcedures = new HashMap;
}

defineClass(321, 1, {348:1}, PricingProcedureDAOImpl);
var Lcom_sap_spe_pricing_customizing_dao_legacy_PricingProcedureDAOImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.dao.legacy', 'PricingProcedureDAOImpl', 321, Ljava_lang_Object_2_classLit);
function ConditionPurpose(){
}

defineClass(549, 1, {688:1, 3:1}, ConditionPurpose);
var Lcom_sap_spe_pricing_customizing_impl_ConditionPurpose_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ConditionPurpose', 549, Ljava_lang_Object_2_classLit);
function $getConditionPurposes(){
  var bo, purposes;
  null.nullMethod();
  purposes = new HashMap_0(null.nullMethod());
  for (null.nullMethod(); null.nullMethod();) {
    null.nullMethod();
    bo = new ConditionPurpose;
    $put_0(purposes, null.nullField, bo);
  }
  return purposes;
}

function ConditionPurposeBuilder(){
}

defineClass(469, 663, $intern_22, ConditionPurposeBuilder);
_.create_0 = function create_33(keys_0){
  var usage;
  usage = keys_0[1];
  throwClassCastExceptionUnlessNull($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_pricing_customizing_impl_ConditionPurposeBuilder_2_classLit));
  return $getConditionPurposes();
}
;
var Lcom_sap_spe_pricing_customizing_impl_ConditionPurposeBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ConditionPurposeBuilder', 469, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getCacheManager_0(){
  var cacheManager;
  cacheManager = ($clinit_CacheManagerFactory() , new CacheManagerImpl);
  try {
    $applyConfiguration_0(cacheManager, 'AP_PRC_PR');
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 80)) {
      throw new PricingRuntimeException_0(9);
    }
     else 
      throw unwrap($e0);
  }
  return cacheManager;
}

function PricingObjectManager(){
  var cacheManager, region;
  this.usage = 'A';
  cacheManager = $getCacheManager_0();
  region = (cacheManager.cacheRegion = new CacheRegionImpl(cacheManager.appName, '/AP/PRC/Pricing/Customizing') , cacheManager.cacheRegion);
  if (!region) {
    throw new PricingRuntimeException_0(11);
  }
  this.cacheFacade = $getCacheFacade(region);
}

defineClass(144, 1, {});
var Lcom_sap_spe_pricing_customizing_impl_PricingObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingObjectManager', 144, Ljava_lang_Object_2_classLit);
function $getConditionPurpose(this$static, application, purposeName){
  var key, purposes;
  key = create_5('PU', this$static.usage, application);
  purposes = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return dynamicCast(purposes.get_4(purposeName), 688);
}

function ConditionPurposeObjectManager(){
  PricingObjectManager.call(this);
}

defineClass(496, 144, {}, ConditionPurposeObjectManager);
var Lcom_sap_spe_pricing_customizing_impl_ConditionPurposeObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ConditionPurposeObjectManager', 496, Lcom_sap_spe_pricing_customizing_impl_PricingObjectManager_2_classLit);
function CopyType(){
}

defineClass(550, 1, $intern_21, CopyType);
var Lcom_sap_spe_pricing_customizing_impl_CopyType_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'CopyType', 550, Ljava_lang_Object_2_classLit);
function $getCopyTypes(){
  var bo, copyTypes;
  null.nullMethod();
  copyTypes = new HashMap_0(null.nullMethod());
  for (null.nullMethod(); null.nullMethod();) {
    null.nullMethod();
    bo = new CopyType;
    $putStringValue(copyTypes, '' + null.nullField, bo);
  }
  return copyTypes;
}

function CopyTypeBuilder(){
}

defineClass(470, 663, $intern_22, CopyTypeBuilder);
_.create_0 = function create_34(keys_0){
  var object, objectType, usage;
  usage = keys_0[1];
  objectType = keys_0[2];
  throwClassCastExceptionUnlessNull($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_pricing_customizing_impl_CopyTypeBuilder_2_classLit));
  object = null;
  $equals_7(objectType, 'CT')?(object = $getCopyTypes()):$equals_7(objectType, 'DE') && (object = null.nullMethod());
  return object;
}
;
var Lcom_sap_spe_pricing_customizing_impl_CopyTypeBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'CopyTypeBuilder', 470, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function CopyTypeObjectManager(){
  PricingObjectManager.call(this);
}

defineClass(490, 144, {}, CopyTypeObjectManager);
var Lcom_sap_spe_pricing_customizing_impl_CopyTypeObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'CopyTypeObjectManager', 490, Lcom_sap_spe_pricing_customizing_impl_PricingObjectManager_2_classLit);
function ExclusionGroup(exclusionGroupTOParam, conditionTypesParam){
  this.exclusionGroupTO = exclusionGroupTOParam;
  this.conditionTypes = conditionTypesParam;
}

defineClass(197, 1, {284:1, 197:1, 3:1}, ExclusionGroup);
var Lcom_sap_spe_pricing_customizing_impl_ExclusionGroup_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionGroup', 197, Ljava_lang_Object_2_classLit);
function $clinit_ExclusionGroupBuilder(){
  $clinit_ExclusionGroupBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_customizing_impl_ExclusionGroupBuilder_2_classLit);
}

function $getExclusionGroup(dao, application, usage, name_0){
  var condType, conditionTypeArray, conditionTypeName, conditionTypes, custEngine, exclusionGroup, exclusionGroupTO, iter, key;
  exclusionGroupTO = (key = create_4(application, name_0) , dynamicCast($getStringValue(dao.exclusionGroups, key), 242));
  exclusionGroup = null;
  if (exclusionGroupTO) {
    custEngine = dynamicCast($getCustomizingEngine(factory_0, usage), 132);
    conditionTypes = new ArrayList_0(exclusionGroupTO.conditionTypeNames.array.length);
    try {
      for (iter = new AbstractList$IteratorImpl(exclusionGroupTO.conditionTypeNames); iter.i < iter.this$01.size_1();) {
        conditionTypeName = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
        condType = dynamicCast($getConditionType(custEngine, exclusionGroupTO.application, conditionTypeName), 118);
        !!condType && (setCheck(conditionTypes.array, conditionTypes.array.length, condType) , true);
      }
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 42)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
    conditionTypeArray = initDim(Lcom_sap_spe_pricing_customizing_impl_PricingConditionType_2_classLit, $intern_24, 118, conditionTypes.array.length, 0, 1);
    $toArray_1(conditionTypes, conditionTypeArray);
    exclusionGroup = new ExclusionGroup(exclusionGroupTO, conditionTypeArray);
  }
  return exclusionGroup;
}

function ExclusionGroupBuilder(){
  $clinit_ExclusionGroupBuilder();
}

defineClass(309, 663, $intern_22, ExclusionGroupBuilder);
_.create_0 = function create_35(keys_0){
  var dao, usage;
  usage = keys_0[1];
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'ExclusionGroup', 'dao.legacy'), 628);
  if (!dao) {
    dao = new ExclusionGroupDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.pricing.customizing.dao.legacy.ExclusionGroupDAOImpl');
  }
  return $getExclusionGroup(dao, keys_0[2], usage, keys_0[3]);
}
;
var Lcom_sap_spe_pricing_customizing_impl_ExclusionGroupBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionGroupBuilder', 309, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getExclusionGroup_0(this$static, application, name_0){
  var key;
  key = create_6('EG', this$static.usage, application, name_0);
  return dynamicCast(this$static.cacheFacade.get_3(key, false), 284);
}

function ExclusionGroupObjectManager(){
  PricingObjectManager.call(this);
}

defineClass(493, 144, {}, ExclusionGroupObjectManager);
var Lcom_sap_spe_pricing_customizing_impl_ExclusionGroupObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionGroupObjectManager', 493, Lcom_sap_spe_pricing_customizing_impl_PricingObjectManager_2_classLit);
function ExclusionProcedure(exclusionProcedureTO, steps){
  this.exclusionProcedureTO = exclusionProcedureTO;
  this.steps = steps;
}

defineClass(184, 1, {616:1, 184:1, 32:1}, ExclusionProcedure);
_.getName_0 = function getName_9(){
  return this.exclusionProcedureTO.name_0;
}
;
_.getSteps_1 = function getSteps_0(){
  return this.steps;
}
;
var Lcom_sap_spe_pricing_customizing_impl_ExclusionProcedure_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionProcedure', 184, Ljava_lang_Object_2_classLit);
function $clinit_ExclusionProcedureBuilder(){
  $clinit_ExclusionProcedureBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_customizing_impl_ExclusionProcedureBuilder_2_classLit);
}

function $getExclusionProcedure_0(dao, application, usage, name_0){
  var exclusionProcedure, exclusionProcedureTO, iter, step, stepArray, stepTO, steps;
  exclusionProcedureTO = $getExclusionProcedure(dao, application, name_0);
  if (exclusionProcedureTO) {
    steps = new ArrayList_0(exclusionProcedureTO.exclusionSteps.array.length);
    for (iter = new AbstractList$IteratorImpl(exclusionProcedureTO.exclusionSteps); iter.i < iter.this$01.size_1();) {
      stepTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 239));
      step = $getExclusionStep(exclusionProcedureTO, stepTO, usage);
      if (step) {
        setCheck(steps.array, steps.array.length, step);
      }
       else {
        $clinit_Configuration_0();
      }
    }
    if (steps.array.length == 0) {
      return null;
    }
    stepArray = initDim(Lcom_sap_spe_pricing_customizing_impl_ExclusionStep_2_classLit, $intern_24, 78, steps.array.length, 0, 1);
    $toArray_1(steps, stepArray);
    exclusionProcedure = new ExclusionProcedure(exclusionProcedureTO, stepArray);
    return exclusionProcedure;
  }
  return null;
}

function $getExclusionStep(procedureTO, stepTO, usage){
  var customizingEngine, exclusionGroupObjMgr, group1, group2;
  customizingEngine = dynamicCast($getCustomizingEngine(factory_0, usage), 132);
  exclusionGroupObjMgr = customizingEngine.exclusionGroupObjectManager;
  group1 = null;
  if (stepTO.exclusionGroup1 != null) {
    group1 = $getExclusionGroup_0(exclusionGroupObjMgr, procedureTO.application, stepTO.exclusionGroup1);
    if (!group1) {
      $clinit_Configuration_0();
      return null;
    }
  }
  group2 = null;
  if (stepTO.exclusionGroup2 != null) {
    group2 = $getExclusionGroup_0(exclusionGroupObjMgr, procedureTO.application, stepTO.exclusionGroup2);
    if (!group2) {
      $clinit_Configuration_0();
      return null;
    }
  }
  if (!group1) {
    $clinit_Configuration_0();
    initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['1', valueOf_0(stepTO.exlusionType)]);
    return null;
  }
   else if (!group2 && (stepTO.exlusionType == 67 || stepTO.exlusionType == 68 || stepTO.exlusionType == 70)) {
    $clinit_Configuration_0();
    initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['2', valueOf_0(stepTO.exlusionType)]);
    return null;
  }
  return new ExclusionStep(stepTO, group1, group2);
}

function ExclusionProcedureBuilder(){
  $clinit_ExclusionProcedureBuilder();
}

defineClass(310, 663, $intern_22, ExclusionProcedureBuilder);
_.create_0 = function create_36(keys_0){
  var dao, usage;
  usage = keys_0[1];
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'ExclusionProcedure', 'dao.legacy'), 629);
  if (!dao) {
    dao = new ExclusionProcedureDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.pricing.customizing.dao.legacy.ExclusionProcedureDAOImpl');
  }
  return $getExclusionProcedure_0(dao, keys_0[2], usage, keys_0[3]);
}
;
var Lcom_sap_spe_pricing_customizing_impl_ExclusionProcedureBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionProcedureBuilder', 310, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getExclusionProcedure_1(this$static, application, name_0){
  var key;
  key = create_6('EP', this$static.usage, application, name_0);
  return dynamicCast(this$static.cacheFacade.get_3(key, false), 616);
}

function ExclusionProcedureObjectManager(){
  PricingObjectManager.call(this);
}

defineClass(492, 144, {}, ExclusionProcedureObjectManager);
var Lcom_sap_spe_pricing_customizing_impl_ExclusionProcedureObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionProcedureObjectManager', 492, Lcom_sap_spe_pricing_customizing_impl_PricingObjectManager_2_classLit);
function $export_29(this$static){
  if (!exported_29) {
    exported_29 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_impl_ExclusionProcedure_2_classLit, this$static);
    $export0_29(this$static);
  }
}

function $export0_29(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.impl.ExclusionProcedure');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.impl.ExclusionProcedure = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 2 && (g = ___create_1(gwtInstance(a[0]), a[1]));
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.impl.ExclusionProcedure.prototype = new Object;
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getSteps = $entry(function(){
    return wrap_0(this.g.getSteps_1());
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.impl.ExclusionProcedure[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.impl.ExclusionProcedure[p] = pkg[p]);
}

function ExclusionProcedure_ExporterImpl(){
  $export_29(this);
}

function ___create_1(a0, a1){
  return new ExclusionProcedure(a0, a1);
}

defineClass(394, 1, $intern_18, ExclusionProcedure_ExporterImpl);
_.getJsConstructor = function getJsConstructor_29(){
  return $wnd.com.sap.spe.pricing.customizing.impl.ExclusionProcedure;
}
;
_.isAssignable = function isAssignable_29(o){
  return o != null && instanceOf(o, 184);
}
;
var exported_29 = false;
var Lcom_sap_spe_pricing_customizing_impl_ExclusionProcedure_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionProcedure_ExporterImpl', 394, Ljava_lang_Object_2_classLit);
function ExclusionStep(exclusionStepTO, group1, group2){
  this.exclusionStepTO = exclusionStepTO;
  this.group1 = group1;
  this.group2 = group2;
}

defineClass(78, 1, {632:1, 78:1, 3:1}, ExclusionStep);
var Lcom_sap_spe_pricing_customizing_impl_ExclusionStep_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'ExclusionStep', 78, Ljava_lang_Object_2_classLit);
function FixationGroupBuilder(){
}

defineClass(471, 663, $intern_22, FixationGroupBuilder);
_.create_0 = function create_37(keys_0){
  var usage;
  usage = keys_0[1];
  throwClassCastExceptionUnlessNull($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_pricing_customizing_impl_FixationGroupBuilder_2_classLit));
  return null.nullMethod() , null;
}
;
var Lcom_sap_spe_pricing_customizing_impl_FixationGroupBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'FixationGroupBuilder', 471, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function FixationGroupObjectManager(){
  PricingObjectManager.call(this);
}

defineClass(494, 144, {}, FixationGroupObjectManager);
var Lcom_sap_spe_pricing_customizing_impl_FixationGroupObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'FixationGroupObjectManager', 494, Lcom_sap_spe_pricing_customizing_impl_PricingObjectManager_2_classLit);
function PricingConditionLimits(lowerLimit, upperLimit, pricingUnit){
  this.lowerLimit = lowerLimit;
  this.upperLimit = upperLimit;
  this.pricingUnit = pricingUnit;
}

defineClass(566, 1, {687:1, 3:1}, PricingConditionLimits);
var Lcom_sap_spe_pricing_customizing_impl_PricingConditionLimits_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingConditionLimits', 566, Ljava_lang_Object_2_classLit);
function $getGroupConditionKeyFormula(){
  throw new FormulaIsMissingException_0;
}

function $getPricingConditionLimits(this$static, calculationType, conditionCurrencyUnitName){
  return dynamicCast(this$static.limits.get_4(create_4(valueOf_0(calculationType), conditionCurrencyUnitName)), 687);
}

function $getScaleBaseFormula(){
  throw new FormulaIsMissingException_0;
}

function $isVariantCondition(this$static){
  return this$static.pricingConditionTypeTO.variantCondition || this$static.pricingConditionTypeTO.conditionCategory == 79;
}

function PricingConditionType(conditionTypeTO, referenceConditionType, accessSequence, pricingConditionTypeTO, purpose, scaleBaseUnit, limits){
  ConditionType.call(this, conditionTypeTO, referenceConditionType, accessSequence);
  this.pricingConditionTypeTO = pricingConditionTypeTO;
  this.purpose = purpose;
  this.scaleBaseUnit = scaleBaseUnit;
  this.limits = limits;
  this.conditionForCumulation = toUpperCase(pricingConditionTypeTO.structureCondition) == 66;
  this.conditionForDuplication = toUpperCase(pricingConditionTypeTO.structureCondition) == 65;
}

defineClass(118, 137, {630:1, 137:1, 207:1, 118:1, 3:1, 32:1}, PricingConditionType);
_.getCalculationType_0 = function getCalculationType_0(){
  return this.pricingConditionTypeTO.calculationType;
}
;
_.getConditionCategory_0 = function getConditionCategory(){
  return this.pricingConditionTypeTO.conditionCategory;
}
;
_.getConditionClass_0 = function getConditionClass(){
  return this.pricingConditionTypeTO.conditionClass;
}
;
_.getDataSource_0 = function getDataSource(){
  return this.pricingConditionTypeTO.dataSource;
}
;
_.getGroupConditionKeyFormula_0 = function getGroupConditionKeyFormula(){
  return $getGroupConditionKeyFormula();
}
;
_.getGroupConditionKeyFormulaNumber_0 = function getGroupConditionKeyFormulaNumber(){
  return this.pricingConditionTypeTO.groupConditionKeyFormulaNumber;
}
;
_.getManualEntryFlag_0 = function getManualEntryFlag(){
  return this.pricingConditionTypeTO.manualEntryFlag;
}
;
_.getPlusMinus_0 = function getPlusMinus(){
  return this.pricingConditionTypeTO.plusMinus;
}
;
_.getPricingConditionLimits_0 = function getPricingConditionLimits(calculationType, conditionCurrencyUnitName){
  return $getPricingConditionLimits(this, calculationType, conditionCurrencyUnitName);
}
;
_.getPricingDateFlag_0 = function getPricingDateFlag(){
  return this.pricingConditionTypeTO.pricingDateFlag;
}
;
_.getPurpose_0 = function getPurpose(){
  return this.purpose;
}
;
_.getRoundingRule_0 = function getRoundingRule(){
  return this.pricingConditionTypeTO.roundingRule;
}
;
_.getScaleBaseFormula_0 = function getScaleBaseFormula(){
  return $getScaleBaseFormula();
}
;
_.getScaleBaseFormulaNumber_0 = function getScaleBaseFormulaNumber(){
  return this.pricingConditionTypeTO.scaleBaseFormulaNumber;
}
;
_.getScaleBaseType_0 = function getScaleBaseType(){
  return this.pricingConditionTypeTO.scaleBaseType;
}
;
_.getScaleBaseUnit_0 = function getScaleBaseUnit(){
  return this.scaleBaseUnit;
}
;
_.getScaleType_0 = function getScaleType(){
  return this.pricingConditionTypeTO.scaleType;
}
;
_.getStructureCondition_0 = function getStructureCondition(){
  return this.pricingConditionTypeTO.structureCondition;
}
;
_.isAccrual_0 = function isAccrual(){
  return this.pricingConditionTypeTO.accrual;
}
;
_.isChangeOfCalculationTypeAllowed_0 = function isChangeOfCalculationTypeAllowed(){
  return this.pricingConditionTypeTO.changeOfCalculationTypeAllowed;
}
;
_.isChangeOfConversionFactorAllowed_0 = function isChangeOfConversionFactorAllowed(){
  return this.pricingConditionTypeTO.changeOfConversionFactorAllowed;
}
;
_.isChangeOfRateAllowed_0 = function isChangeOfRateAllowed(){
  return this.pricingConditionTypeTO.changeOfRateAllowed;
}
;
_.isChangeOfValueAllowed_0 = function isChangeOfValueAllowed(){
  return this.pricingConditionTypeTO.changeOfValueAllowed;
}
;
_.isConditionForCumulation_0 = function isConditionForCumulation(){
  return this.conditionForCumulation;
}
;
_.isConditionForDuplication_0 = function isConditionForDuplication(){
  return this.conditionForDuplication;
}
;
_.isConditionUpdate_0 = function isConditionUpdate(){
  return this.pricingConditionTypeTO.conditionUpdate;
}
;
_.isCurrencyConversion_0 = function isCurrencyConversion(){
  return this.pricingConditionTypeTO.currencyConversion;
}
;
_.isDeletionAllowed_0 = function isDeletionAllowed(){
  return this.pricingConditionTypeTO.deletionAllowed;
}
;
_.isGroupCondition_0 = function isGroupCondition(){
  return this.pricingConditionTypeTO.groupCondition;
}
;
_.isHeaderCondition_0 = function isHeaderCondition(){
  return this.pricingConditionTypeTO.headerCondition;
}
;
_.isInterCompanyBilling_0 = function isInterCompanyBilling(){
  return this.pricingConditionTypeTO.interCompanyBilling;
}
;
_.isInvoiceList_0 = function isInvoiceList(){
  return this.pricingConditionTypeTO.invoiceList;
}
;
_.isItemCondition_0 = function isItemCondition(){
  return this.pricingConditionTypeTO.itemCondition;
}
;
_.isRoundingDifferenceCalculationRequired_0 = function isRoundingDifferenceCalculationRequired(){
  return this.pricingConditionTypeTO.roundingDifferenceCalculationRequired;
}
;
_.isUsingHolidays_0 = function isUsingHolidays(){
  return this.pricingConditionTypeTO.useHolidays;
}
;
_.isVariantCondition_0 = function isVariantCondition(){
  return $isVariantCondition(this);
}
;
_.conditionForCumulation = false;
_.conditionForDuplication = false;
var Lcom_sap_spe_pricing_customizing_impl_PricingConditionType_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingConditionType', 118, Lcom_sap_spe_condmgnt_customizing_bo_ConditionType_2_classLit);
function $clinit_PricingConditionTypeBuilder(){
  $clinit_PricingConditionTypeBuilder = emptyMethod;
  $clinit_ConditionTypeBuilder();
  getLocation(Lcom_sap_spe_pricing_customizing_impl_PricingConditionTypeBuilder_2_classLit);
}

function $getLimits(dao, usage, application, conditionTypeName){
  var conditionCurrencyUnit, conversionEngine, iter, limits, limitsMap, limitsTO, limitsTOList, lowerLimit, pricingUnit, upperLimit, key;
  conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  limitsTOList = (key = create_5(application, usage, conditionTypeName) , dynamicCast($getStringValue(dao.pricingConditionLimits, key), 33));
  limitsMap = new HashMap_0(10);
  if (limitsTOList) {
    for (iter = limitsTOList.iterator(); iter.i < iter.this$01.size_1();) {
      limitsTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 240));
      try {
        conditionCurrencyUnit = $getCurrencyUnit(conversionEngine, limitsTO.conditionCurrency);
        lowerLimit = convertBigDecimalToCurrencyValue(limitsTO.lowerLimit, limitsTO.calculationType, conditionCurrencyUnit);
        upperLimit = convertBigDecimalToCurrencyValue(limitsTO.upperLimit, limitsTO.calculationType, conditionCurrencyUnit);
        pricingUnit = null;
        $clinit_PricingCustomizingConstants$CalculationType();
        $clinit_SAPString();
        $indexOf('ABHIUW', fromCodePoint(limitsTO.calculationType)) >= 0 || (pricingUnit = $getPhysicalValue_0(limitsTO.pricingUnit, limitsTO.unifOfMeasurement));
        limits = new PricingConditionLimits(lowerLimit, upperLimit, pricingUnit);
        $putStringValue(limitsMap, create_4(valueOf_0(limitsTO.calculationType), limitsTO.conditionCurrency), limits);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 17)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e0);
      }
    }
  }
  return limitsMap;
}

function PricingConditionTypeBuilder(){
  $clinit_PricingConditionTypeBuilder();
}

function convertBigDecimalToCurrencyValue(currencyValue, calculationType, currencyUnit){
  $clinit_PricingConditionTypeBuilder();
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  return $getCurrencyValue_0(currencyValue, currencyUnit, calculationType != 71, 2);
}

defineClass(188, 664, {35:1, 188:1, 32:1}, PricingConditionTypeBuilder);
_.createUsageSpecificConditionType = function createUsageSpecificConditionType_0(conditionTypeTO, referenceConditionType, accessSequence){
  var conversionEngine, customizingEngine, dao, limits, pricingConditionType, pricingConditionTypeTO, purpose, scaleBaseUnit, usage;
  usage = conditionTypeTO.usage;
  dao = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'PricingConditionType', 'dao.legacy'), 347);
  if (!dao) {
    dao = new PricingConditionTypeDAOImpl;
    $putDAO((null , SINGELTON_2), dao, 'com.sap.spe.pricing.customizing.dao.legacy.PricingConditionTypeDAOImpl');
  }
  pricingConditionTypeTO = $getPricingConditionType(dao, conditionTypeTO.application, usage, conditionTypeTO.name_0);
  pricingConditionType = null;
  if (pricingConditionTypeTO) {
    customizingEngine = dynamicCast($getCustomizingEngine(factory_0, usage), 132);
    purpose = null;
    pricingConditionTypeTO.purposeName != null && (purpose = $getConditionPurpose(customizingEngine.conditionPurposeObjectManager, conditionTypeTO.application, pricingConditionTypeTO.purposeName));
    scaleBaseUnit = null;
    if (pricingConditionTypeTO.scaleBaseType != null) {
      conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
      if ($equals_7(pricingConditionTypeTO.scaleBaseType, 'B') || isUnitScale(pricingConditionTypeTO.scaleBaseType) || isTimeScale(pricingConditionTypeTO.scaleBaseType)) {
        if (pricingConditionTypeTO.scaleBaseUnit != null) {
          try {
            scaleBaseUnit = $getPhysicalUnit(conversionEngine, pricingConditionTypeTO.scaleBaseUnit);
          }
           catch ($e0) {
            $e0 = wrap($e0);
            if (instanceOf($e0, 17)) {
              $clinit_Configuration_0();
            }
             else 
              throw unwrap($e0);
          }
        }
      }
       else if ($equals_7(pricingConditionTypeTO.scaleBaseType, 'TC1')) {
        try {
          scaleBaseUnit = ($checkArg('') , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, ''));
        }
         catch ($e1) {
          $e1 = wrap($e1);
          if (instanceOf($e1, 17)) {
            $clinit_Configuration_0();
          }
           else 
            throw unwrap($e1);
        }
      }
    }
    limits = $getLimits(dao, usage, conditionTypeTO.application, conditionTypeTO.name_0);
    if (pricingConditionTypeTO.groupConditionKeyFormulaNumber != 0) {
      try {
        $getUserExitFormulas(customizingEngine, conditionTypeTO.application, 'GRP');
        null.nullMethod();
      }
       catch ($e2) {
        $e2 = wrap($e2);
        if (instanceOf($e2, 52)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e2);
      }
    }
    if (pricingConditionTypeTO.scaleBaseFormulaNumber != 0) {
      try {
        $getUserExitFormulas(customizingEngine, conditionTypeTO.application, 'SCL');
        null.nullMethod();
      }
       catch ($e3) {
        $e3 = wrap($e3);
        if (instanceOf($e3, 52)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e3);
      }
    }
    pricingConditionType = new PricingConditionType(conditionTypeTO, referenceConditionType, accessSequence, pricingConditionTypeTO, purpose, scaleBaseUnit, limits);
  }
  return pricingConditionType;
}
;
var Lcom_sap_spe_pricing_customizing_impl_PricingConditionTypeBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingConditionTypeBuilder', 188, Lcom_sap_spe_condmgnt_customizing_impl_ConditionTypeBuilder_2_classLit);
function $export_30(this$static){
  if (!exported_30) {
    exported_30 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_impl_PricingConditionTypeBuilder_2_classLit, this$static);
    $export0_30(this$static);
  }
}

function $export0_30(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.impl.PricingConditionTypeBuilder');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionTypeBuilder = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new PricingConditionTypeBuilder);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionTypeBuilder.prototype = new Object;
  $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionTypeBuilder.convertBigDecimalToCurrencyValue = $entry(function(a0, a1, a2){
    return convertBigDecimalToCurrencyValue(gwtInstance(a0), a1, a2);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionTypeBuilder[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.impl.PricingConditionTypeBuilder[p] = pkg[p]);
}

function PricingConditionTypeBuilder_ExporterImpl(){
  $export_30(this);
}

defineClass(409, 1, $intern_18, PricingConditionTypeBuilder_ExporterImpl);
_.getJsConstructor = function getJsConstructor_30(){
  return $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionTypeBuilder;
}
;
_.isAssignable = function isAssignable_30(o){
  return o != null && instanceOf(o, 188);
}
;
var exported_30 = false;
var Lcom_sap_spe_pricing_customizing_impl_PricingConditionTypeBuilder_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingConditionTypeBuilder_ExporterImpl', 409, Ljava_lang_Object_2_classLit);
function $export_31(this$static){
  if (!exported_31) {
    exported_31 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_impl_PricingConditionType_2_classLit, this$static);
    $export0_31(this$static);
  }
}

function $export0_31(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.impl.PricingConditionType');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionType = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 9 && (g = ___create_2(a[0] == null?null:a[0].g, a[1], a[2], a[3] == null?null:a[3].g, a[4], a[5], a[6], a[7], a[8]));
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionType.prototype = new Object;
  __0.getAccessSequence = $entry(function(){
    return this.g.getAccessSequence_1();
  }
  );
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getCalculationType = $entry(function(){
    return this.g.getCalculationType_0();
  }
  );
  __0.getConditionAccessTimestampName = $entry(function(){
    return this.g.getConditionAccessTimestampName_0();
  }
  );
  __0.getConditionCategory = $entry(function(){
    return this.g.getConditionCategory_0();
  }
  );
  __0.getConditionClass = $entry(function(){
    return this.g.getConditionClass_0();
  }
  );
  __0.getDataSource = $entry(function(){
    return this.g.getDataSource_0();
  }
  );
  __0.getDescription = $entry(function(){
    return this.g.getDescription_0();
  }
  );
  __0.getGroupConditionKeyFormula = $entry(function(){
    return this.g.getGroupConditionKeyFormula_0();
  }
  );
  __0.getGroupConditionKeyFormulaNumber = $entry(function(){
    return this.g.getGroupConditionKeyFormulaNumber_0();
  }
  );
  __0.getManualEntryFlag = $entry(function(){
    return this.g.getManualEntryFlag_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getPlusMinus = $entry(function(){
    return this.g.getPlusMinus_0();
  }
  );
  __0.getPricingConditionLimits = $entry(function(a0, a1){
    return this.g.getPricingConditionLimits_0(a0, a1);
  }
  );
  __0.getPricingDateFlag = $entry(function(){
    return this.g.getPricingDateFlag_0();
  }
  );
  __0.getPurpose = $entry(function(){
    return this.g.getPurpose_0();
  }
  );
  __0.getReferenceConditionType = $entry(function(){
    return this.g.getReferenceConditionType_0();
  }
  );
  __0.getRoundingRule = $entry(function(){
    return this.g.getRoundingRule_0();
  }
  );
  __0.getScaleBaseFormula = $entry(function(){
    return this.g.getScaleBaseFormula_0();
  }
  );
  __0.getScaleBaseFormulaNumber = $entry(function(){
    return this.g.getScaleBaseFormulaNumber_0();
  }
  );
  __0.getScaleBaseType = $entry(function(){
    return this.g.getScaleBaseType_0();
  }
  );
  __0.getScaleBaseUnit = $entry(function(){
    return this.g.getScaleBaseUnit_0();
  }
  );
  __0.getScaleType = $entry(function(){
    return this.g.getScaleType_0();
  }
  );
  __0.getStructureCondition = $entry(function(){
    return this.g.getStructureCondition_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.isAccrual = $entry(function(){
    return this.g.isAccrual_0();
  }
  );
  __0.isChangeOfCalculationTypeAllowed = $entry(function(){
    return this.g.isChangeOfCalculationTypeAllowed_0();
  }
  );
  __0.isChangeOfConversionFactorAllowed = $entry(function(){
    return this.g.isChangeOfConversionFactorAllowed_0();
  }
  );
  __0.isChangeOfRateAllowed = $entry(function(){
    return this.g.isChangeOfRateAllowed_0();
  }
  );
  __0.isChangeOfValueAllowed = $entry(function(){
    return this.g.isChangeOfValueAllowed_0();
  }
  );
  __0.isConditionForCumulation = $entry(function(){
    return this.g.isConditionForCumulation_0();
  }
  );
  __0.isConditionForDuplication = $entry(function(){
    return this.g.isConditionForDuplication_0();
  }
  );
  __0.isConditionUpdate = $entry(function(){
    return this.g.isConditionUpdate_0();
  }
  );
  __0.isCurrencyConversion = $entry(function(){
    return this.g.isCurrencyConversion_0();
  }
  );
  __0.isDeletionAllowed = $entry(function(){
    return this.g.isDeletionAllowed_0();
  }
  );
  __0.isGroupCondition = $entry(function(){
    return this.g.isGroupCondition_0();
  }
  );
  __0.isHeaderCondition = $entry(function(){
    return this.g.isHeaderCondition_0();
  }
  );
  __0.isInterCompanyBilling = $entry(function(){
    return this.g.isInterCompanyBilling_0();
  }
  );
  __0.isInvoiceList = $entry(function(){
    return this.g.isInvoiceList_0();
  }
  );
  __0.isItemCondition = $entry(function(){
    return this.g.isItemCondition_0();
  }
  );
  __0.isRoundingDifferenceCalculationRequired = $entry(function(){
    return this.g.isRoundingDifferenceCalculationRequired_0();
  }
  );
  __0.isUsingHolidays = $entry(function(){
    return this.g.isUsingHolidays_0();
  }
  );
  __0.isVariantCondition = $entry(function(){
    return this.g.isVariantCondition_0();
  }
  );
  __0.setAccessSequence = $entry(function(a0){
    this.g.setAccessSequence_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionType[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.impl.PricingConditionType[p] = pkg[p]);
}

function PricingConditionType_ExporterImpl(){
  $export_31(this);
}

function ___create_2(a0, a1, a2, a3, a4, a5, a6, a7, a8){
  return new PricingConditionType(a0, a1, a2, a3, a4, a5, a6);
}

defineClass(395, 1, $intern_18, PricingConditionType_ExporterImpl);
_.getJsConstructor = function getJsConstructor_31(){
  return $wnd.com.sap.spe.pricing.customizing.impl.PricingConditionType;
}
;
_.isAssignable = function isAssignable_31(o){
  return o != null && instanceOf(o, 118);
}
;
var exported_31 = false;
var Lcom_sap_spe_pricing_customizing_impl_PricingConditionType_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingConditionType_ExporterImpl', 395, Ljava_lang_Object_2_classLit);
function PricingCustomizingEngine(){
  this.accessSequenceObjectManager = new AccessSequenceObjectManager;
  this.applicationObjectManager = new ApplicationObjectManager;
  new ConditionGroupObjectManager;
  this.conditionTableObjectManager = new ConditionTableObjectManager;
  this.conditionTypeObjectManager = new ConditionTypeObjectManager;
  this.fieldCatalogueObjectManager = new FieldCatalogueObjectManager;
  this.procedureObjectManager = new ProcedureObjectManager;
  new TaskObjectManager;
  this.usageObjectManager = new UsageObjectManager;
  this.userExitFormulaObjectManager = new UserExitObjectManager;
  new ConditionGroupContextObjectManager;
  new CopyTypeObjectManager;
  this.pricingTypeObjectManager = new PricingTypeObjectManager;
  this.exclusionProcedureObjectManager = new ExclusionProcedureObjectManager;
  this.exclusionGroupObjectManager = new ExclusionGroupObjectManager;
  new FixationGroupObjectManager;
  this.pricingProcedureObjectManager = new PricingProcedureObjectManager;
  this.conditionPurposeObjectManager = new ConditionPurposeObjectManager;
}

defineClass(444, 73, {159:1, 349:1, 73:1, 132:1}, PricingCustomizingEngine);
var Lcom_sap_spe_pricing_customizing_impl_PricingCustomizingEngine_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingCustomizingEngine', 444, Lcom_sap_spe_condmgnt_customizing_impl_ConditionCustomizingEngine_2_classLit);
function $determineMandatoryConditions(this$static){
  var i_0, mandatoryConditions, step, steps;
  mandatoryConditions = new HashMap_0(8);
  steps = this$static.pricingSteps;
  for (i_0 = 0; i_0 < steps.length; i_0++) {
    step = steps[i_0];
    step.stepTO.mandatory && !!step.conditionType && $putStringValue(mandatoryConditions, step.conditionType.conditionTypeTO.name_0, step);
  }
  return mandatoryConditions;
}

function $determineStepOfConditionType(this$static, conditionTypeName){
  var i_0;
  for (i_0 = 0; i_0 < this$static.pricingSteps.length; i_0++) {
    if (!!this$static.pricingSteps[i_0].conditionType && $equals_7(this$static.pricingSteps[i_0].conditionType.conditionTypeTO.name_0, conditionTypeName)) {
      return this$static.pricingSteps[i_0];
    }
  }
  return null;
}

function $initSteps(this$static){
  var condTypeList, i_0, subtotalFlag;
  condTypeList = new ArrayList;
  this$static.subtotals = new HashSet;
  for (i_0 = 0; i_0 < this$static.pricingSteps.length; i_0++) {
    $setProcedure(this$static.pricingSteps[i_0], this$static);
    subtotalFlag = this$static.pricingSteps[i_0].stepTO.subtotalFlag;
    subtotalFlag != 32 && $add_4(this$static.subtotals, valueOf_0(subtotalFlag));
  }
  this$static.conditionTypesWithPurpose = initDim(Lcom_sap_spe_pricing_customizing_IPricingConditionType_2_classLit, $intern_24, 207, condTypeList.array.length, 0, 1);
  $toArray_1(condTypeList, this$static.conditionTypesWithPurpose);
}

function PricingProcedure(pricingProcedureTO, pricingSteps, exlusionProcedure){
  this.pricingProcedureTO = pricingProcedureTO;
  this.pricingSteps = pricingSteps;
  this.exlusionProcedure = exlusionProcedure;
  $initSteps(this);
}

defineClass(475, 1, {689:1, 3:1}, PricingProcedure);
var Lcom_sap_spe_pricing_customizing_impl_PricingProcedure_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingProcedure', 475, Ljava_lang_Object_2_classLit);
function $clinit_PricingProcedureBuilder(){
  $clinit_PricingProcedureBuilder = emptyMethod;
  $clinit_ProcedureBuilder();
  getLocation(Lcom_sap_spe_pricing_customizing_impl_PricingProcedureBuilder_2_classLit);
}

function $create(this$static, keys_0){
  var application, object, objectType, procedureDAO, usage;
  usage = keys_0[1];
  objectType = keys_0[2];
  application = keys_0[3];
  procedureDAO = dynamicCast($getDAO_1(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), 'com.sap.spe.pricing.customizing', 'PricingProcedure', 'dao.legacy'), 348);
  if (!procedureDAO) {
    procedureDAO = new PricingProcedureDAOImpl;
    $putDAO((null , SINGELTON_2), procedureDAO, 'com.sap.spe.pricing.customizing.dao.legacy.PricingProcedureDAOImpl');
  }
  object = null;
  try {
    $equals_7(objectType, 'P')?(object = $getPricingProcedure_1(procedureDAO, application, usage, keys_0[4])):$equals_7(objectType, 'PN')?(object = $getAllProcedureNames(procedureDAO, application, usage)):$equals_7(objectType, 'DE')?(object = new HashMap_0(0)):$equals_7(objectType, 'SL') && (object = new HashMap_0(0));
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 42)) {
      throw new ConditionCacheException(203);
    }
     else 
      throw unwrap($e0);
  }
  return object;
}

function $getPricingProcedure_1(dao, application, usage, procedureName){
  var customizingEngine, exclusionProcedure, iter, pricingProcedure, pricingProcedureTO, step, stepArray, stepTO, steps;
  pricingProcedureTO = $getPricingProcedure_0(dao, application, usage, procedureName);
  if (pricingProcedureTO) {
    steps = new ArrayList_0(pricingProcedureTO.steps.size_1());
    for (iter = pricingProcedureTO.steps.iterator(); iter.i < iter.this$01.size_1();) {
      stepTO = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 121));
      step = $getPricingStep_0(pricingProcedureTO, stepTO);
      !!step && (setCheck(steps.array, steps.array.length, step) , true);
    }
    stepArray = initDim(Lcom_sap_spe_pricing_customizing_impl_PricingStep_2_classLit, $intern_24, 105, steps.array.length, 0, 1);
    $toArray_1(steps, stepArray);
    customizingEngine = dynamicCast($getCustomizingEngine(factory_0, usage), 132);
    exclusionProcedure = $getExclusionProcedure_1(customizingEngine.exclusionProcedureObjectManager, pricingProcedureTO.application, pricingProcedureTO.name_0);
    pricingProcedure = new PricingProcedure(pricingProcedureTO, stepArray, exclusionProcedure);
  }
   else {
    $clinit_Configuration_0();
    throw new ConditionInconsistentDBException(29);
  }
  return pricingProcedure;
}

function $getPricingStep_0(pricingProcedureTO, stepTO){
  var conditionType, customizingEngine, step;
  conditionType = null;
  customizingEngine = $getPricingCustomizingEngine(stepTO.usage);
  if (stepTO.conditionType != null) {
    try {
      conditionType = dynamicCast($getConditionType(customizingEngine, pricingProcedureTO.application, stepTO.conditionType), 207);
      if (!conditionType) {
        return null;
      }
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 42)) {
        $clinit_Configuration_0();
        throw new ConditionInconsistentDBException(15);
      }
       else 
        throw unwrap($e0);
    }
  }
  step = new PricingStep(stepTO, conditionType);
  return step;
}

function PricingProcedureBuilder(){
  $clinit_PricingProcedureBuilder();
}

defineClass(189, 665, {35:1, 189:1, 32:1}, PricingProcedureBuilder);
_.create_0 = function create_38(keys_0){
  return $create(this, keys_0);
}
;
_.getPricingProcedure_1 = function getPricingProcedure_0(dao, application, usage, procedureName){
  return $getPricingProcedure_1(dao, application, usage, procedureName);
}
;
var Lcom_sap_spe_pricing_customizing_impl_PricingProcedureBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingProcedureBuilder', 189, Lcom_sap_spe_condmgnt_customizing_impl_ProcedureBuilder_2_classLit);
function $export_32(this$static){
  if (!exported_32) {
    exported_32 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_impl_PricingProcedureBuilder_2_classLit, this$static);
    $export0_32(this$static);
  }
}

function $export0_32(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.impl.PricingProcedureBuilder');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.impl.PricingProcedureBuilder = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new PricingProcedureBuilder);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.impl.PricingProcedureBuilder.prototype = new Object;
  __0.create = $entry(function(a0){
    return __static_wrapper_create(this.g, a0);
  }
  );
  __0.getPricingProcedure = $entry(function(a0, a1, a2, a3){
    return this.g.getPricingProcedure_1(a0, a1, a2, a3);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.impl.PricingProcedureBuilder[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.impl.PricingProcedureBuilder[p] = pkg[p]);
}

function PricingProcedureBuilder_ExporterImpl(){
  $export_32(this);
}

function __static_wrapper_create(instance, a0){
  return $create(instance, ($clinit_ExporterUtil() , $toArrString(a0)));
}

defineClass(410, 1, $intern_18, PricingProcedureBuilder_ExporterImpl);
_.getJsConstructor = function getJsConstructor_32(){
  return $wnd.com.sap.spe.pricing.customizing.impl.PricingProcedureBuilder;
}
;
_.isAssignable = function isAssignable_32(o){
  return o != null && instanceOf(o, 189);
}
;
var exported_32 = false;
var Lcom_sap_spe_pricing_customizing_impl_PricingProcedureBuilder_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingProcedureBuilder_ExporterImpl', 410, Ljava_lang_Object_2_classLit);
function $getSubtotalLineDescription(this$static, application, name_0, stepNumber, counter){
  var descriptions, key, language, subtotalKey;
  language = getActiveLanguage();
  key = create_8(this$static.usage, application, name_0, language);
  descriptions = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  subtotalKey = new SubtotalLineKeyTO;
  subtotalKey.stepNumber = stepNumber;
  subtotalKey.counter = counter;
  return dynamicCastToString(descriptions.get_4(subtotalKey));
}

function PricingProcedureObjectManager(){
  ConditionObjectManager.call(this);
}

defineClass(495, 69, {}, PricingProcedureObjectManager);
var Lcom_sap_spe_pricing_customizing_impl_PricingProcedureObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingProcedureObjectManager', 495, Lcom_sap_spe_condmgnt_customizing_impl_ConditionObjectManager_2_classLit);
function $getBaseFormula(){
  throw new FormulaIsMissingException_0;
}

function $getDescription_2(this$static){
  var customizingEngine;
  if (!this$static.conditionType && !!this$static.procedure) {
    customizingEngine = $getPricingCustomizingEngine(this$static.procedure.pricingProcedureTO.usage);
    return $getSubtotalLineDescription(customizingEngine.pricingProcedureObjectManager, this$static.procedure.pricingProcedureTO.application, this$static.procedure.pricingProcedureTO.name_0, this$static.stepTO.stepNumber, this$static.stepTO.counter);
  }
  return '';
}

function $getValueFormula(){
  throw new FormulaIsMissingException_0;
}

function $setProcedure(this$static, procedure){
  this$static.procedure = procedure;
}

function PricingStep(stepTO, conditionType){
  this.stepTO = stepTO;
  this.conditionType = conditionType;
  !!this.conditionType && ($clinit_SAPString() , $indexOf('1234', fromCodePoint(this.conditionType.pricingConditionTypeTO.conditionCategory)) >= 0) && (this.stepTO.manually = false);
}

defineClass(105, 1, {693:1, 705:1, 105:1, 3:1}, PricingStep);
var Lcom_sap_spe_pricing_customizing_impl_PricingStep_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingStep', 105, Ljava_lang_Object_2_classLit);
function $copyCondition(conditionCategory, conditionClass, scaleType, structureCondition){
  $clinit_SAPString();
  if (!(null.nullMethod(fromCodePoint(conditionCategory)) >= 0 || null.nullMethod(fromCodePoint(conditionClass)) >= 0 || null.nullMethod(fromCodePoint(scaleType)) >= 0 || null.nullMethod(fromCodePoint(structureCondition)) >= 0)) {
    return true;
  }
  if (null.nullMethod(fromCodePoint(conditionCategory)) >= 0) {
    return true;
  }
  if (null.nullMethod(fromCodePoint(structureCondition)) >= 0) {
    return true;
  }
  return false;
}

function $copyCondition_0(conditionType){
  return $copyCondition(conditionType.pricingConditionTypeTO.conditionCategory, conditionType.pricingConditionTypeTO.conditionClass, conditionType.pricingConditionTypeTO.scaleType, conditionType.pricingConditionTypeTO.structureCondition);
}

function PricingType(){
}

defineClass(551, 1, {691:1, 3:1}, PricingType);
var Lcom_sap_spe_pricing_customizing_impl_PricingType_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingType', 551, Ljava_lang_Object_2_classLit);
function $getPricingTypes(){
  var bo, pricingTypes;
  null.nullMethod();
  pricingTypes = new HashMap_0(null.nullMethod());
  for (null.nullMethod(); null.nullMethod();) {
    null.nullMethod();
    bo = new PricingType;
    $putStringValue(pricingTypes, '' + null.nullField, bo);
  }
  return pricingTypes;
}

function PricingTypeBuilder(){
}

defineClass(472, 663, $intern_22, PricingTypeBuilder);
_.create_0 = function create_39(keys_0){
  var usage;
  usage = keys_0[1];
  throwClassCastExceptionUnlessNull($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_pricing_customizing_impl_PricingTypeBuilder_2_classLit));
  return $getPricingTypes();
}
;
var Lcom_sap_spe_pricing_customizing_impl_PricingTypeBuilder_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingTypeBuilder', 472, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function $getPricingType(this$static, pricingTypeName){
  var key, pricingTypes;
  key = create_5('PT', this$static.usage, 'AL');
  pricingTypes = dynamicCast(this$static.cacheFacade.get_3(key, false), 24);
  return dynamicCast(pricingTypes.get_4(valueOf_0(pricingTypeName)), 691);
}

function PricingTypeObjectManager(){
  PricingObjectManager.call(this);
}

defineClass(491, 144, {}, PricingTypeObjectManager);
var Lcom_sap_spe_pricing_customizing_impl_PricingTypeObjectManager_2_classLit = createForClass('com.sap.spe.pricing.customizing.impl', 'PricingTypeObjectManager', 491, Lcom_sap_spe_pricing_customizing_impl_PricingObjectManager_2_classLit);
function ExclusionGroupTO(){
}

defineClass(242, 1, {242:1, 3:1}, ExclusionGroupTO);
var Lcom_sap_spe_pricing_customizing_to_ExclusionGroupTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'ExclusionGroupTO', 242, Ljava_lang_Object_2_classLit);
function ExclusionProcedureTO_0(){
}

defineClass(231, 1, {231:1, 3:1}, ExclusionProcedureTO_0);
var Lcom_sap_spe_pricing_customizing_to_ExclusionProcedureTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'ExclusionProcedureTO', 231, Ljava_lang_Object_2_classLit);
function ExclusionStepTO(){
}

defineClass(239, 1, {239:1, 3:1}, ExclusionStepTO);
_.counter = 0;
_.exlusionType = 0;
var Lcom_sap_spe_pricing_customizing_to_ExclusionStepTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'ExclusionStepTO', 239, Ljava_lang_Object_2_classLit);
function PricingConditionLimitsTO(){
}

defineClass(240, 1, {240:1, 3:1}, PricingConditionLimitsTO);
_.calculationType = 0;
var Lcom_sap_spe_pricing_customizing_to_PricingConditionLimitsTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'PricingConditionLimitsTO', 240, Ljava_lang_Object_2_classLit);
function PricingConditionTypeTO_0(){
}

defineClass(143, 1, {143:1, 32:1}, PricingConditionTypeTO_0);
_.getApplication_0 = function getApplication_9(){
  return this.application;
}
;
_.getCalculationType_0 = function getCalculationType_1(){
  return this.calculationType;
}
;
_.getConditionCategory_0 = function getConditionCategory_0(){
  return this.conditionCategory;
}
;
_.getConditionClass_0 = function getConditionClass_0(){
  return this.conditionClass;
}
;
_.getDataSource_0 = function getDataSource_0(){
  return this.dataSource;
}
;
_.getGroupConditionKeyFormulaNumber_0 = function getGroupConditionKeyFormulaNumber_0(){
  return this.groupConditionKeyFormulaNumber;
}
;
_.getManualEntryFlag_0 = function getManualEntryFlag_0(){
  return this.manualEntryFlag;
}
;
_.getName_0 = function getName_10(){
  return this.name_0;
}
;
_.getPlusMinus_0 = function getPlusMinus_0(){
  return this.plusMinus;
}
;
_.getPricingDateFlag_0 = function getPricingDateFlag_0(){
  return this.pricingDateFlag;
}
;
_.getPurposeName_0 = function getPurposeName(){
  return this.purposeName;
}
;
_.getQuantityConversion_0 = function getQuantityConversion(){
  return this.quantityConversion;
}
;
_.getRoundingRule_0 = function getRoundingRule_0(){
  return this.roundingRule;
}
;
_.getScaleBaseFormulaNumber_0 = function getScaleBaseFormulaNumber_0(){
  return this.scaleBaseFormulaNumber;
}
;
_.getScaleBaseType_0 = function getScaleBaseType_0(){
  return this.scaleBaseType;
}
;
_.getScaleBaseUnit_1 = function getScaleBaseUnit_0(){
  return this.scaleBaseUnit;
}
;
_.getScaleType_0 = function getScaleType_0(){
  return this.scaleType;
}
;
_.getStructureCondition_0 = function getStructureCondition_0(){
  return this.structureCondition;
}
;
_.getUsage_0 = function getUsage_9(){
  return this.usage;
}
;
_.isAccrual_0 = function isAccrual_0(){
  return this.accrual;
}
;
_.isChangeOfCalculationTypeAllowed_0 = function isChangeOfCalculationTypeAllowed_0(){
  return this.changeOfCalculationTypeAllowed;
}
;
_.isChangeOfConversionFactorAllowed_0 = function isChangeOfConversionFactorAllowed_0(){
  return this.changeOfConversionFactorAllowed;
}
;
_.isChangeOfRateAllowed_0 = function isChangeOfRateAllowed_0(){
  return this.changeOfRateAllowed;
}
;
_.isChangeOfValueAllowed_0 = function isChangeOfValueAllowed_0(){
  return this.changeOfValueAllowed;
}
;
_.isConditionUpdate_0 = function isConditionUpdate_0(){
  return this.conditionUpdate;
}
;
_.isCurrencyConversion_0 = function isCurrencyConversion_0(){
  return this.currencyConversion;
}
;
_.isDeletionAllowed_0 = function isDeletionAllowed_0(){
  return this.deletionAllowed;
}
;
_.isGroupCondition_0 = function isGroupCondition_0(){
  return this.groupCondition;
}
;
_.isHeaderCondition_0 = function isHeaderCondition_0(){
  return this.headerCondition;
}
;
_.isInterCompanyBilling_0 = function isInterCompanyBilling_0(){
  return this.interCompanyBilling;
}
;
_.isInvoiceList_0 = function isInvoiceList_0(){
  return this.invoiceList;
}
;
_.isItemCondition_0 = function isItemCondition_0(){
  return this.itemCondition;
}
;
_.isRoundingDifferenceCalculationRequired_0 = function isRoundingDifferenceCalculationRequired_0(){
  return this.roundingDifferenceCalculationRequired;
}
;
_.isUseHolidays_0 = function isUseHolidays(){
  return this.useHolidays;
}
;
_.isVariantCondition_0 = function isVariantCondition_0(){
  return this.variantCondition;
}
;
_.setAccrual_0 = function setAccrual(accrual){
  this.accrual = accrual;
}
;
_.setApplication_0 = function setApplication_6(application){
  this.application = application;
}
;
_.setCalculationType_0 = function setCalculationType_0(calculationType){
  this.calculationType = calculationType;
}
;
_.setChangeOfCalculationTypeAllowed_0 = function setChangeOfCalculationTypeAllowed(changeOfCalculationTypeAllowed){
  this.changeOfCalculationTypeAllowed = changeOfCalculationTypeAllowed;
}
;
_.setChangeOfConversionFactorAllowed_0 = function setChangeOfConversionFactorAllowed(changeOfConversionFactorAllowed){
  this.changeOfConversionFactorAllowed = changeOfConversionFactorAllowed;
}
;
_.setChangeOfRateAllowed_0 = function setChangeOfRateAllowed(changeOfRateAllowed){
  this.changeOfRateAllowed = changeOfRateAllowed;
}
;
_.setChangeOfValueAllowed_0 = function setChangeOfValueAllowed(changeOfValueAllowed){
  this.changeOfValueAllowed = changeOfValueAllowed;
}
;
_.setConditionCategory_0 = function setConditionCategory(conditionCategory){
  this.conditionCategory = conditionCategory;
}
;
_.setConditionClass_0 = function setConditionClass(conditionClass){
  this.conditionClass = conditionClass;
}
;
_.setConditionUpdate_0 = function setConditionUpdate(conditionUpdate){
  this.conditionUpdate = conditionUpdate;
}
;
_.setCurrencyConversion_0 = function setCurrencyConversion(currencyConversion){
  this.currencyConversion = currencyConversion;
}
;
_.setDataSource_0 = function setDataSource(dataSource){
  this.dataSource = dataSource;
}
;
_.setDeletionAllowed_0 = function setDeletionAllowed(deletionAllowed){
  this.deletionAllowed = deletionAllowed;
}
;
_.setGroupCondition_0 = function setGroupCondition(groupCondition){
  this.groupCondition = groupCondition;
}
;
_.setGroupConditionKeyFormulaNumber_0 = function setGroupConditionKeyFormulaNumber(groupConditionKeyFormulaNumber){
  this.groupConditionKeyFormulaNumber = groupConditionKeyFormulaNumber;
}
;
_.setHeaderCondition_0 = function setHeaderCondition(headerCondition){
  this.headerCondition = headerCondition;
}
;
_.setInterCompanyBilling_0 = function setInterCompanyBilling(interCompanyBilling){
  this.interCompanyBilling = interCompanyBilling;
}
;
_.setInvoiceList_0 = function setInvoiceList(invoiceList){
  this.invoiceList = invoiceList;
}
;
_.setItemCondition_0 = function setItemCondition(itemCondition){
  this.itemCondition = itemCondition;
}
;
_.setManualEntryFlag_0 = function setManualEntryFlag(manualEntryFlag){
  this.manualEntryFlag = manualEntryFlag;
}
;
_.setName_0 = function setName_4(name_0){
  this.name_0 = name_0;
}
;
_.setPlusMinus_0 = function setPlusMinus(plusMinus){
  this.plusMinus = plusMinus;
}
;
_.setPricingDateFlag_0 = function setPricingDateFlag(pricingDateFlag){
  this.pricingDateFlag = pricingDateFlag;
}
;
_.setPurposeName_0 = function setPurposeName(purposeName){
  this.purposeName = purposeName;
}
;
_.setQuantityConversion_0 = function setQuantityConversion(quantityConversion){
  this.quantityConversion = quantityConversion;
}
;
_.setRoundingDifferenceCalculationRequired_0 = function setRoundingDifferenceCalculationRequired(roundingDifferenceCalculationRequired){
  this.roundingDifferenceCalculationRequired = roundingDifferenceCalculationRequired;
}
;
_.setRoundingRule_0 = function setRoundingRule(roundingRule){
  this.roundingRule = roundingRule;
}
;
_.setScaleBaseFormulaNumber_0 = function setScaleBaseFormulaNumber(scaleBaseFormulaNumber){
  this.scaleBaseFormulaNumber = scaleBaseFormulaNumber;
}
;
_.setScaleBaseType_0 = function setScaleBaseType(scaleBaseType){
  this.scaleBaseType = scaleBaseType;
}
;
_.setScaleBaseUnit_0 = function setScaleBaseUnit(scaleBaseUnit){
  this.scaleBaseUnit = scaleBaseUnit;
}
;
_.setScaleType_0 = function setScaleType(scaleType){
  this.scaleType = scaleType;
}
;
_.setStructureCondition_0 = function setStructureCondition(structureCondition){
  this.structureCondition = structureCondition;
}
;
_.setUsage_0 = function setUsage_6(usage){
  this.usage = usage;
}
;
_.setUseHolidays_0 = function setUseHolidays(useHolidays){
  this.useHolidays = useHolidays;
}
;
_.setVariantCondition_0 = function setVariantCondition(variantCondition){
  this.variantCondition = variantCondition;
}
;
_.accrual = false;
_.calculationType = 0;
_.changeOfCalculationTypeAllowed = false;
_.changeOfConversionFactorAllowed = false;
_.changeOfRateAllowed = false;
_.changeOfValueAllowed = false;
_.conditionCategory = 0;
_.conditionClass = 0;
_.conditionUpdate = false;
_.currencyConversion = false;
_.deletionAllowed = false;
_.groupCondition = false;
_.groupConditionKeyFormulaNumber = 0;
_.headerCondition = false;
_.interCompanyBilling = false;
_.invoiceList = false;
_.itemCondition = false;
_.manualEntryFlag = 0;
_.plusMinus = 0;
_.pricingDateFlag = 0;
_.quantityConversion = 0;
_.roundingDifferenceCalculationRequired = false;
_.roundingRule = 0;
_.scaleBaseFormulaNumber = 0;
_.scaleType = 0;
_.structureCondition = 0;
_.useHolidays = false;
_.variantCondition = false;
var Lcom_sap_spe_pricing_customizing_to_PricingConditionTypeTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'PricingConditionTypeTO', 143, Ljava_lang_Object_2_classLit);
function $export_33(this$static){
  if (!exported_33) {
    exported_33 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_to_PricingConditionTypeTO_2_classLit, this$static);
    $export0_33(this$static);
  }
}

function $export0_33(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.to.PricingConditionTypeTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.to.PricingConditionTypeTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new PricingConditionTypeTO_0);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.to.PricingConditionTypeTO.prototype = new Object;
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getCalculationType = $entry(function(){
    return this.g.getCalculationType_0();
  }
  );
  __0.getConditionCategory = $entry(function(){
    return this.g.getConditionCategory_0();
  }
  );
  __0.getConditionClass = $entry(function(){
    return this.g.getConditionClass_0();
  }
  );
  __0.getDataSource = $entry(function(){
    return this.g.getDataSource_0();
  }
  );
  __0.getGroupConditionKeyFormulaNumber = $entry(function(){
    return this.g.getGroupConditionKeyFormulaNumber_0();
  }
  );
  __0.getManualEntryFlag = $entry(function(){
    return this.g.getManualEntryFlag_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getPlusMinus = $entry(function(){
    return this.g.getPlusMinus_0();
  }
  );
  __0.getPricingDateFlag = $entry(function(){
    return this.g.getPricingDateFlag_0();
  }
  );
  __0.getPurposeName = $entry(function(){
    return this.g.getPurposeName_0();
  }
  );
  __0.getQuantityConversion = $entry(function(){
    return this.g.getQuantityConversion_0();
  }
  );
  __0.getRoundingRule = $entry(function(){
    return this.g.getRoundingRule_0();
  }
  );
  __0.getScaleBaseFormulaNumber = $entry(function(){
    return this.g.getScaleBaseFormulaNumber_0();
  }
  );
  __0.getScaleBaseType = $entry(function(){
    return this.g.getScaleBaseType_0();
  }
  );
  __0.getScaleBaseUnit = $entry(function(){
    return this.g.getScaleBaseUnit_1();
  }
  );
  __0.getScaleType = $entry(function(){
    return this.g.getScaleType_0();
  }
  );
  __0.getStructureCondition = $entry(function(){
    return this.g.getStructureCondition_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.isAccrual = $entry(function(){
    return this.g.isAccrual_0();
  }
  );
  __0.isChangeOfCalculationTypeAllowed = $entry(function(){
    return this.g.isChangeOfCalculationTypeAllowed_0();
  }
  );
  __0.isChangeOfConversionFactorAllowed = $entry(function(){
    return this.g.isChangeOfConversionFactorAllowed_0();
  }
  );
  __0.isChangeOfRateAllowed = $entry(function(){
    return this.g.isChangeOfRateAllowed_0();
  }
  );
  __0.isChangeOfValueAllowed = $entry(function(){
    return this.g.isChangeOfValueAllowed_0();
  }
  );
  __0.isConditionUpdate = $entry(function(){
    return this.g.isConditionUpdate_0();
  }
  );
  __0.isCurrencyConversion = $entry(function(){
    return this.g.isCurrencyConversion_0();
  }
  );
  __0.isDeletionAllowed = $entry(function(){
    return this.g.isDeletionAllowed_0();
  }
  );
  __0.isGroupCondition = $entry(function(){
    return this.g.isGroupCondition_0();
  }
  );
  __0.isHeaderCondition = $entry(function(){
    return this.g.isHeaderCondition_0();
  }
  );
  __0.isInterCompanyBilling = $entry(function(){
    return this.g.isInterCompanyBilling_0();
  }
  );
  __0.isInvoiceList = $entry(function(){
    return this.g.isInvoiceList_0();
  }
  );
  __0.isItemCondition = $entry(function(){
    return this.g.isItemCondition_0();
  }
  );
  __0.isRoundingDifferenceCalculationRequired = $entry(function(){
    return this.g.isRoundingDifferenceCalculationRequired_0();
  }
  );
  __0.isUseHolidays = $entry(function(){
    return this.g.isUseHolidays_0();
  }
  );
  __0.isVariantCondition = $entry(function(){
    return this.g.isVariantCondition_0();
  }
  );
  __0.setAccrual = $entry(function(a0){
    this.g.setAccrual_0(a0);
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setCalculationType = $entry(function(a0){
    this.g.setCalculationType_0(a0);
  }
  );
  __0.setChangeOfCalculationTypeAllowed = $entry(function(a0){
    this.g.setChangeOfCalculationTypeAllowed_0(a0);
  }
  );
  __0.setChangeOfConversionFactorAllowed = $entry(function(a0){
    this.g.setChangeOfConversionFactorAllowed_0(a0);
  }
  );
  __0.setChangeOfRateAllowed = $entry(function(a0){
    this.g.setChangeOfRateAllowed_0(a0);
  }
  );
  __0.setChangeOfValueAllowed = $entry(function(a0){
    this.g.setChangeOfValueAllowed_0(a0);
  }
  );
  __0.setConditionCategory = $entry(function(a0){
    this.g.setConditionCategory_0(a0);
  }
  );
  __0.setConditionClass = $entry(function(a0){
    this.g.setConditionClass_0(a0);
  }
  );
  __0.setConditionUpdate = $entry(function(a0){
    this.g.setConditionUpdate_0(a0);
  }
  );
  __0.setCurrencyConversion = $entry(function(a0){
    this.g.setCurrencyConversion_0(a0);
  }
  );
  __0.setDataSource = $entry(function(a0){
    this.g.setDataSource_0(a0);
  }
  );
  __0.setDeletionAllowed = $entry(function(a0){
    this.g.setDeletionAllowed_0(a0);
  }
  );
  __0.setGroupCondition = $entry(function(a0){
    this.g.setGroupCondition_0(a0);
  }
  );
  __0.setGroupConditionKeyFormulaNumber = $entry(function(a0){
    this.g.setGroupConditionKeyFormulaNumber_0(a0);
  }
  );
  __0.setHeaderCondition = $entry(function(a0){
    this.g.setHeaderCondition_0(a0);
  }
  );
  __0.setInterCompanyBilling = $entry(function(a0){
    this.g.setInterCompanyBilling_0(a0);
  }
  );
  __0.setInvoiceList = $entry(function(a0){
    this.g.setInvoiceList_0(a0);
  }
  );
  __0.setItemCondition = $entry(function(a0){
    this.g.setItemCondition_0(a0);
  }
  );
  __0.setManualEntryFlag = $entry(function(a0){
    this.g.setManualEntryFlag_0(a0);
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setPlusMinus = $entry(function(a0){
    this.g.setPlusMinus_0(a0);
  }
  );
  __0.setPricingDateFlag = $entry(function(a0){
    this.g.setPricingDateFlag_0(a0);
  }
  );
  __0.setPurposeName = $entry(function(a0){
    this.g.setPurposeName_0(a0);
  }
  );
  __0.setQuantityConversion = $entry(function(a0){
    this.g.setQuantityConversion_0(a0);
  }
  );
  __0.setRoundingDifferenceCalculationRequired = $entry(function(a0){
    this.g.setRoundingDifferenceCalculationRequired_0(a0);
  }
  );
  __0.setRoundingRule = $entry(function(a0){
    this.g.setRoundingRule_0(a0);
  }
  );
  __0.setScaleBaseFormulaNumber = $entry(function(a0){
    this.g.setScaleBaseFormulaNumber_0(a0);
  }
  );
  __0.setScaleBaseType = $entry(function(a0){
    this.g.setScaleBaseType_0(a0);
  }
  );
  __0.setScaleBaseUnit = $entry(function(a0){
    this.g.setScaleBaseUnit_0(a0);
  }
  );
  __0.setScaleType = $entry(function(a0){
    this.g.setScaleType_0(a0);
  }
  );
  __0.setStructureCondition = $entry(function(a0){
    this.g.setStructureCondition_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  __0.setUseHolidays = $entry(function(a0){
    this.g.setUseHolidays_0(a0);
  }
  );
  __0.setVariantCondition = $entry(function(a0){
    this.g.setVariantCondition_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.to.PricingConditionTypeTO[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.to.PricingConditionTypeTO[p] = pkg[p]);
}

function PricingConditionTypeTO_ExporterImpl(){
  $export_33(this);
}

defineClass(411, 1, $intern_18, PricingConditionTypeTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_33(){
  return $wnd.com.sap.spe.pricing.customizing.to.PricingConditionTypeTO;
}
;
_.isAssignable = function isAssignable_33(o){
  return o != null && instanceOf(o, 143);
}
;
var exported_33 = false;
var Lcom_sap_spe_pricing_customizing_to_PricingConditionTypeTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'PricingConditionTypeTO_ExporterImpl', 411, Ljava_lang_Object_2_classLit);
function PricingProcedureTO_0(){
  ProcedureTO.call(this);
}

defineClass(170, 141, {141:1, 170:1, 32:1}, PricingProcedureTO_0);
var Lcom_sap_spe_pricing_customizing_to_PricingProcedureTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'PricingProcedureTO', 170, Lcom_sap_spe_condmgnt_customizing_to_ProcedureTO_2_classLit);
function $export_34(this$static){
  if (!exported_34) {
    exported_34 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_to_PricingProcedureTO_2_classLit, this$static);
    $export0_34(this$static);
  }
}

function $export0_34(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.to.PricingProcedureTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.to.PricingProcedureTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new PricingProcedureTO_0);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.to.PricingProcedureTO.prototype = new Object;
  __0.getApplication = $entry(function(){
    return this.g.getApplication_0();
  }
  );
  __0.getErrorMessage = $entry(function(){
    return this.g.getErrorMessage_0();
  }
  );
  __0.getName = $entry(function(){
    return this.g.getName_0();
  }
  );
  __0.getSteps = $entry(function(){
    return this.g.getSteps_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.setApplication = $entry(function(a0){
    this.g.setApplication_0(a0);
  }
  );
  __0.setErrorMessage = $entry(function(a0){
    this.g.setErrorMessage_0(gwtInstance(a0));
  }
  );
  __0.setName = $entry(function(a0){
    this.g.setName_0(a0);
  }
  );
  __0.setSteps = $entry(function(a0){
    this.g.setSteps_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.to.PricingProcedureTO[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.to.PricingProcedureTO[p] = pkg[p]);
}

function PricingProcedureTO_ExporterImpl(){
  $export_34(this);
}

defineClass(412, 1, $intern_18, PricingProcedureTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_34(){
  return $wnd.com.sap.spe.pricing.customizing.to.PricingProcedureTO;
}
;
_.isAssignable = function isAssignable_34(o){
  return o != null && instanceOf(o, 170);
}
;
var exported_34 = false;
var Lcom_sap_spe_pricing_customizing_to_PricingProcedureTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'PricingProcedureTO_ExporterImpl', 412, Ljava_lang_Object_2_classLit);
function PricingStepTO(){
}

defineClass(121, 187, {187:1, 121:1, 32:1}, PricingStepTO);
_.getAccountKey1_0 = function getAccountKey1(){
  return this.accountKey1;
}
;
_.getAccountKey2_0 = function getAccountKey2(){
  return this.accountKey2;
}
;
_.getAuthorityLevel_0 = function getAuthorityLevel(){
  return this.authorityLevel;
}
;
_.getBaseFormulaNumber_0 = function getBaseFormulaNumber(){
  return this.baseFormulaNumber;
}
;
_.getFromStep_0 = function getFromStep(){
  return this.fromStep;
}
;
_.getMandatoryType_0 = function getMandatoryType(){
  return this.mandatoryType;
}
;
_.getPrintId_0 = function getPrintId(){
  return this.printId;
}
;
_.getSubtotalFlag_0 = function getSubtotalFlag(){
  return this.subtotalFlag;
}
;
_.getToStep_0 = function getToStep(){
  return this.toStep;
}
;
_.getUsage_0 = function getUsage_10(){
  return this.usage;
}
;
_.getValueFormulaNumber_0 = function getValueFormulaNumber(){
  return this.valueFormulaNumber;
}
;
_.isMandatory_0 = function isMandatory(){
  return this.mandatory;
}
;
_.isManually_0 = function isManually(){
  return this.manually;
}
;
_.isStatistical_1 = function isStatistical_0(){
  return this.statistical;
}
;
_.setAccountKey1_0 = function setAccountKey1(accountKey1){
  this.accountKey1 = accountKey1;
}
;
_.setAccountKey2_0 = function setAccountKey2(accountKey2){
  this.accountKey2 = accountKey2;
}
;
_.setAuthorityLevel_0 = function setAuthorityLevel(authorityLevel){
  this.authorityLevel = authorityLevel;
}
;
_.setBaseFormulaNumber_0 = function setBaseFormulaNumber(baseFormulaNumber){
  this.baseFormulaNumber = baseFormulaNumber;
}
;
_.setFromStep_0 = function setFromStep(fromStep){
  this.fromStep = fromStep;
}
;
_.setMandatory_0 = function setMandatory(mandatory){
  this.mandatory = mandatory;
}
;
_.setMandatoryType_0 = function setMandatoryType(mandatoryType){
  this.mandatoryType = mandatoryType;
}
;
_.setManually_0 = function setManually(manually){
  this.manually = manually;
}
;
_.setPrintId_0 = function setPrintId(printId){
  this.printId = printId;
}
;
_.setStatistical_0 = function setStatistical(statistical){
  this.statistical = statistical;
}
;
_.setSubtotalFlag_0 = function setSubtotalFlag(subtotalFlag){
  this.subtotalFlag = subtotalFlag;
}
;
_.setToStep_0 = function setToStep(toStep){
  this.toStep = toStep;
}
;
_.setUsage_0 = function setUsage_7(usage){
  this.usage = usage;
}
;
_.setValueFormulaNumber_0 = function setValueFormulaNumber(valueFormulaNumber){
  this.valueFormulaNumber = valueFormulaNumber;
}
;
_.authorityLevel = 0;
_.baseFormulaNumber = 0;
_.fromStep = 0;
_.mandatory = false;
_.mandatoryType = 0;
_.manually = false;
_.printId = 0;
_.statistical = false;
_.subtotalFlag = 0;
_.toStep = 0;
_.valueFormulaNumber = 0;
var Lcom_sap_spe_pricing_customizing_to_PricingStepTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'PricingStepTO', 121, Lcom_sap_spe_condmgnt_customizing_to_StepTO_2_classLit);
function $export_35(this$static){
  if (!exported_35) {
    exported_35 = true;
    $clinit_ExporterUtil();
    $addExporter(impl, Lcom_sap_spe_pricing_customizing_to_PricingStepTO_2_classLit, this$static);
    $export0_35(this$static);
  }
}

function $export0_35(this$static){
  var pkg = declarePackage('com.sap.spe.pricing.customizing.to.PricingStepTO');
  var __0, __ = this$static;
  $wnd.com.sap.spe.pricing.customizing.to.PricingStepTO = $entry(function(){
    var g, j = this, a = arguments;
    a.length == 1 && __.isAssignable(a[0])?(g = a[0]):a.length == 0 && (g = new PricingStepTO);
    j.g = g;
    setWrapper(g, j);
    return j;
  }
  );
  __0 = $wnd.com.sap.spe.pricing.customizing.to.PricingStepTO.prototype = new Object;
  __0.getAccountKey1 = $entry(function(){
    return this.g.getAccountKey1_0();
  }
  );
  __0.getAccountKey2 = $entry(function(){
    return this.g.getAccountKey2_0();
  }
  );
  __0.getAuthorityLevel = $entry(function(){
    return this.g.getAuthorityLevel_0();
  }
  );
  __0.getBaseFormulaNumber = $entry(function(){
    return this.g.getBaseFormulaNumber_0();
  }
  );
  __0.getConditionType = $entry(function(){
    return this.g.getConditionType_1();
  }
  );
  __0.getCounter = $entry(function(){
    return this.g.getCounter_0();
  }
  );
  __0.getFromStep = $entry(function(){
    return this.g.getFromStep_0();
  }
  );
  __0.getMandatoryType = $entry(function(){
    return this.g.getMandatoryType_0();
  }
  );
  __0.getPrintId = $entry(function(){
    return this.g.getPrintId_0();
  }
  );
  __0.getRequirementNumber = $entry(function(){
    return this.g.getRequirementNumber_0();
  }
  );
  __0.getStepNumber = $entry(function(){
    return this.g.getStepNumber_0();
  }
  );
  __0.getSubtotalFlag = $entry(function(){
    return this.g.getSubtotalFlag_0();
  }
  );
  __0.getToStep = $entry(function(){
    return this.g.getToStep_0();
  }
  );
  __0.getUsage = $entry(function(){
    return this.g.getUsage_0();
  }
  );
  __0.getValueFormulaNumber = $entry(function(){
    return this.g.getValueFormulaNumber_0();
  }
  );
  __0.isMandatory = $entry(function(){
    return this.g.isMandatory_0();
  }
  );
  __0.isManually = $entry(function(){
    return this.g.isManually_0();
  }
  );
  __0.isStatistical = $entry(function(){
    return this.g.isStatistical_1();
  }
  );
  __0.setAccountKey1 = $entry(function(a0){
    this.g.setAccountKey1_0(a0);
  }
  );
  __0.setAccountKey2 = $entry(function(a0){
    this.g.setAccountKey2_0(a0);
  }
  );
  __0.setAuthorityLevel = $entry(function(a0){
    this.g.setAuthorityLevel_0(a0);
  }
  );
  __0.setBaseFormulaNumber = $entry(function(a0){
    this.g.setBaseFormulaNumber_0(a0);
  }
  );
  __0.setConditionType = $entry(function(a0){
    this.g.setConditionType_0(a0);
  }
  );
  __0.setCounter = $entry(function(a0){
    this.g.setCounter_0(a0);
  }
  );
  __0.setFromStep = $entry(function(a0){
    this.g.setFromStep_0(a0);
  }
  );
  __0.setMandatory = $entry(function(a0){
    this.g.setMandatory_0(a0);
  }
  );
  __0.setMandatoryType = $entry(function(a0){
    this.g.setMandatoryType_0(a0);
  }
  );
  __0.setManually = $entry(function(a0){
    this.g.setManually_0(a0);
  }
  );
  __0.setPrintId = $entry(function(a0){
    this.g.setPrintId_0(a0);
  }
  );
  __0.setRequirementNumber = $entry(function(a0){
    this.g.setRequirementNumber_0(a0);
  }
  );
  __0.setStatistical = $entry(function(a0){
    this.g.setStatistical_0(a0);
  }
  );
  __0.setStepNumber = $entry(function(a0){
    this.g.setStepNumber_0(a0);
  }
  );
  __0.setSubtotalFlag = $entry(function(a0){
    this.g.setSubtotalFlag_0(a0);
  }
  );
  __0.setToStep = $entry(function(a0){
    this.g.setToStep_0(a0);
  }
  );
  __0.setUsage = $entry(function(a0){
    this.g.setUsage_0(a0);
  }
  );
  __0.setValueFormulaNumber = $entry(function(a0){
    this.g.setValueFormulaNumber_0(a0);
  }
  );
  if (pkg)
    for (p in pkg)
      $wnd.com.sap.spe.pricing.customizing.to.PricingStepTO[p] === undefined && ($wnd.com.sap.spe.pricing.customizing.to.PricingStepTO[p] = pkg[p]);
}

function PricingStepTO_ExporterImpl(){
  $export_35(this);
}

defineClass(307, 1, $intern_18, PricingStepTO_ExporterImpl);
_.getJsConstructor = function getJsConstructor_35(){
  return $wnd.com.sap.spe.pricing.customizing.to.PricingStepTO;
}
;
_.isAssignable = function isAssignable_35(o){
  return o != null && instanceOf(o, 121);
}
;
var exported_35 = false;
var Lcom_sap_spe_pricing_customizing_to_PricingStepTO_1ExporterImpl_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'PricingStepTO_ExporterImpl', 307, Ljava_lang_Object_2_classLit);
function $toString_3(this$static){
  var buffer;
  buffer = new StringBuffer;
  $append_0(buffer, this$static.stepNumber);
  buffer.string += '|';
  $append_0(buffer, this$static.counter);
  return buffer.string;
}

function SubtotalLineKeyTO(){
}

defineClass(261, 1, {261:1, 3:1}, SubtotalLineKeyTO);
_.equals$ = function equals_17(obj){
  var key;
  key = dynamicCast(obj, 261);
  return this.stepNumber == key.stepNumber && this.counter == key.counter;
}
;
_.hashCode$ = function hashCode_19(){
  return getHashCode_0($toString_3(this));
}
;
_.toString$ = function toString_17(){
  return $toString_3(this);
}
;
_.counter = 0;
_.stepNumber = 0;
var Lcom_sap_spe_pricing_customizing_to_SubtotalLineKeyTO_2_classLit = createForClass('com.sap.spe.pricing.customizing.to', 'SubtotalLineKeyTO', 261, Ljava_lang_Object_2_classLit);
function PricingException(messageNumber, args){
  var i_0;
  BaseException.call(this, valueOf(messageNumber));
  this.messageNumber = messageNumber;
  this.args = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, args.length, 4, 1);
  for (i_0 = 0; i_0 < args.length; i_0++) {
    this.args[i_0] = toString__Ljava_lang_String___devirtual$(args[i_0]);
  }
}

defineClass(531, 46, $intern_20);
_.messageNumber = 0;
var Lcom_sap_spe_pricing_exception_PricingException_2_classLit = createForClass('com.sap.spe.pricing.exception', 'PricingException', 531, Lcom_sap_vmc_exception_BaseException_2_classLit);
function PricingRuntimeException(){
  BaseRuntimeException.call(this);
}

function PricingRuntimeException_0(messageNumber){
  BaseRuntimeException_0.call(this, valueOf(messageNumber));
}

defineClass(90, 127, $intern_2, PricingRuntimeException, PricingRuntimeException_0);
var Lcom_sap_spe_pricing_exception_PricingRuntimeException_2_classLit = createForClass('com.sap.spe.pricing.exception', 'PricingRuntimeException', 90, Lcom_sap_vmc_exception_BaseRuntimeException_2_classLit);
function $clinit_PricingScaleDefinition(){
  $clinit_PricingScaleDefinition = emptyMethod;
  COMPARATOR = new PricingScaleLevelComparator;
}

function PricingScaleDefinition(scaleDefinitionTO, scaleLevels, unit, scaleType){
  ScaleDefinition.call(this, scaleDefinitionTO, scaleLevels);
  this.scaleType = scaleType;
  this.scaleUnit = unit;
}

defineClass(128, 332, $intern_30);
_.getScaleType_0 = function getScaleType_1(){
  return this.scaleType;
}
;
_.getScaleUnit = function getScaleUnit(){
  return this.scaleUnit;
}
;
_.scaleType = 0;
var COMPARATOR;
var Lcom_sap_spe_pricing_masterdata_impl_PricingScaleDefinition_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingScaleDefinition', 128, Lcom_sap_spe_condmgnt_masterdata_bo_ScaleDefinition_2_classLit);
function FromScaleDefinition(scaleDefinitionTO, scaleLevels, scaleUnit){
  $clinit_PricingScaleDefinition();
  PricingScaleDefinition.call(this, scaleDefinitionTO, scaleLevels, scaleUnit, 65);
}

defineClass(575, 128, $intern_30, FromScaleDefinition);
_.determineLevel = function determineLevel(dimensionalValue){
  var dummyLevel, index_0, insertionPoint;
  dummyLevel = new PricingScaleLevel(0, dimensionalValue);
  index_0 = binarySearch(this.scaleLevels, dummyLevel, COMPARATOR);
  if (index_0 >= 0) {
    return dynamicCast(this.scaleLevels[index_0], 100);
  }
  insertionPoint = -index_0 - 1;
  if (insertionPoint > 0) {
    return dynamicCast(this.scaleLevels[insertionPoint - 1], 100);
  }
  return null;
}
;
_.getNextSearchLevel = function getNextSearchLevel(scaleLevel){
  var index_0, insertionPoint;
  index_0 = binarySearch(this.scaleLevels, scaleLevel, COMPARATOR);
  if (index_0 >= 0) {
    if (index_0 > 0) {
      return dynamicCast(this.scaleLevels[index_0 - 1], 100);
    }
    return null;
  }
  insertionPoint = -index_0 - 1;
  if (insertionPoint > 0) {
    return dynamicCast(this.scaleLevels[insertionPoint - 1], 100);
  }
  return null;
}
;
var Lcom_sap_spe_pricing_masterdata_impl_FromScaleDefinition_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'FromScaleDefinition', 575, Lcom_sap_spe_pricing_masterdata_impl_PricingScaleDefinition_2_classLit);
function $clinit_PricingConditionRecord(){
  $clinit_PricingConditionRecord = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_masterdata_impl_PricingConditionRecord_2_classLit);
  ZERO_2 = new BigDecimal_4('0');
}

function $initBaseUnit(this$static){
  var baseUnitString, conversionEngine;
  baseUnitString = dynamicCastToString(this$static.condRecordTO.applicationAndUsageData.get_4('MEINS'));
  if (baseUnitString != null && !$equals_7(baseUnitString, '')) {
    conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    this$static.baseUnit = ($checkArg(baseUnitString) , $getPhysicalUnit_0(conversionEngine.m_physicalUnitObjMgr, baseUnitString));
  }
}

function $initLowerLimit(this$static, applicationAndUsageData){
  var lowerLimitString, lowerLimitValue;
  lowerLimitString = dynamicCastToString(this$static.condRecordTO.applicationAndUsageData.get_4('MXWRT'));
  if (lowerLimitString != null && !$equals_7(lowerLimitString, '')) {
    lowerLimitValue = new BigDecimal_4(lowerLimitString);
    dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    this$static.lowerLimit = $getCurrencyValue_0(lowerLimitValue, dynamicCast(this$static.conditionRate.m_unit, 26), this$static.calculationType != 71, 2);
    applicationAndUsageData.put_0('MXWRT', $toPlainString(this$static.lowerLimit.m_value));
  }
}

function $initPricingUnit(this$static){
  var pricingUnitName, pricingUnitValue, pricingUnitValueBigDecimal;
  if (this$static.calculationType != 66 && this$static.calculationType != 71 && ($clinit_PricingCustomizingConstants$CalculationType() , $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(this$static.calculationType)) < 0)) {
    pricingUnitValue = dynamicCastToString(this$static.condRecordTO.applicationAndUsageData.get_4('KPEIN'));
    pricingUnitValueBigDecimal = ZERO_2;
    pricingUnitValue != null && !$equals_7(pricingUnitValue, '') && (pricingUnitValueBigDecimal = new BigDecimal_4(pricingUnitValue));
    pricingUnitName = dynamicCastToString(this$static.condRecordTO.applicationAndUsageData.get_4('KMEIN'));
    if (pricingUnitName != null && !$equals_7(pricingUnitName, '') && $compareTo_7(pricingUnitValueBigDecimal, ZERO_2) != 0) {
      dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
      this$static.pricingUnit = $getPhysicalValue_0(pricingUnitValueBigDecimal, pricingUnitName);
    }
  }
}

function $initUpperLimit(this$static, applicationAndUsageData){
  var upperLimitString, upperLimitValue;
  upperLimitString = dynamicCastToString(this$static.condRecordTO.applicationAndUsageData.get_4('GKWRT'));
  if (upperLimitString != null && !$equals_7(upperLimitString, '')) {
    upperLimitValue = new BigDecimal_4(upperLimitString);
    dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    this$static.upperLimit = $getCurrencyValue_0(upperLimitValue, dynamicCast(this$static.conditionRate.m_unit, 26), this$static.calculationType != 71, 2);
    applicationAndUsageData.put_0('GKWRT', $toPlainString(this$static.upperLimit.m_value));
  }
}

function PricingConditionRecord(condRecordTO, condTable, condType, scale){
  var calculationTypeString, conditionRateValue, conditionCurrencyUnit, conversionEngine, currencyUnit, currencyValue, numeratorConvertionConditionBaseUnit, denominatorConvertionConditionBaseUnit, baseTenExponentConvertionConditionBaseUnit, exclusionFlagString;
  $clinit_PricingConditionRecord();
  var applicationAndUsageData, e;
  ConditionRecord.call(this, condRecordTO, condTable, condType, scale);
  try {
    applicationAndUsageData = condRecordTO.applicationAndUsageData;
    calculationTypeString = dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('KRECH'));
    calculationTypeString != null && calculationTypeString.length > 0?(this.calculationType = calculationTypeString.charCodeAt(0)):(this.calculationType = 32);
    conditionRateValue = dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('KBETR'));
    conditionCurrencyUnit = dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('KONWA'));
    conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    this.calculationType == 71?(currencyUnit = ($checkArg('') , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, ''))):this.calculationType == 85?(currencyUnit = ($checkArg('%7') , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, '%7'))):this.calculationType == 87?(currencyUnit = ($checkArg('%6') , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, '%6'))):($clinit_PricingCustomizingConstants$CalculationType() , $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(this.calculationType)) >= 0?(currencyUnit = ($checkArg('%') , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, '%'))):(currencyUnit = ($checkArg(conditionCurrencyUnit) , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, conditionCurrencyUnit))));
    currencyValue = new BigDecimal_4(conditionRateValue);
    this.conditionRate = $getCurrencyValue_0(currencyValue, currencyUnit, this.calculationType != 71, 2);
    applicationAndUsageData.put_0('KBETR', $toPlainString(this.conditionRate.m_value));
    $initPricingUnit(this);
    $initBaseUnit(this);
    numeratorConvertionConditionBaseUnit = dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('KUMZA'));
    denominatorConvertionConditionBaseUnit = dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('KUMNE'));
    baseTenExponentConvertionConditionBaseUnit = dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('EXPNT'));
    (baseTenExponentConvertionConditionBaseUnit == null || $equalsIgnoreCase(baseTenExponentConvertionConditionBaseUnit, '')) && (baseTenExponentConvertionConditionBaseUnit = '0');
    numeratorConvertionConditionBaseUnit != null && denominatorConvertionConditionBaseUnit != null?(this.fraction = new Fraction_0((new Integer_0(numeratorConvertionConditionBaseUnit)).value_0, (new Integer_0(denominatorConvertionConditionBaseUnit)).value_0, (new Integer_0(baseTenExponentConvertionConditionBaseUnit)).value_0)):(this.fraction = new Fraction_0(0, 0, 0));
    $initLowerLimit(this, applicationAndUsageData);
    $initUpperLimit(this, applicationAndUsageData);
    exclusionFlagString = dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('KZNEP'));
    exclusionFlagString != null && exclusionFlagString.length > 0 && exclusionFlagString.charCodeAt(0);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      e = $e0;
      $clinit_Configuration_0();
      initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [this.conditionRate?$getValueAsString_0(this.conditionRate):'', this.pricingUnit?$getValueAsString(this.pricingUnit):'', this.baseUnit?this.baseUnit.getShortDescription():'']);
      throw unwrap(e);
    }
     else 
      throw unwrap($e0);
  }
}

defineClass(331, 110, {45:1, 110:1, 114:1, 3:1}, PricingConditionRecord);
_.getCalculationType_0 = function getCalculationType_2(){
  return this.calculationType;
}
;
_.getConditionRate = function getConditionRate(){
  return this.conditionRate;
}
;
_.getFractionForConversionToBaseUnit = function getFractionForConversionToBaseUnit(){
  return this.fraction;
}
;
_.getLowerLimit = function getLowerLimit(){
  return this.lowerLimit;
}
;
_.getPaymentTerm = function getPaymentTerm(){
  return dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('PTERM'));
}
;
_.getPricingUnit = function getPricingUnit(){
  return this.pricingUnit;
}
;
_.getSalesTaxCode = function getSalesTaxCode(){
  return dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('MWSK1'));
}
;
_.getUpperLimit = function getUpperLimit(){
  return this.upperLimit;
}
;
_.getWithholdingTaxCode = function getWithholdingTaxCode(){
  return dynamicCastToString(this.condRecordTO.applicationAndUsageData.get_4('MWSK2'));
}
;
_.isUsingIntervalScales = function isUsingIntervalScales(){
  var i_0, scale, usingIntervalScales;
  usingIntervalScales = true;
  scale = dynamicCast(this.scale, 160);
  for (i_0 = 0; i_0 < (this.scale?this.scale.scaleDimensions.length:0); i_0++) {
    dynamicCast(dynamicCast(scale.scaleDimensions[i_0], 71).scaleDefinition, 66).getScaleType_0() != 68 && (usingIntervalScales = false);
  }
  return usingIntervalScales;
}
;
_.calculationType = 0;
var ZERO_2;
var Lcom_sap_spe_pricing_masterdata_impl_PricingConditionRecord_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingConditionRecord', 331, Lcom_sap_spe_condmgnt_masterdata_bo_ConditionRecord_2_classLit);
function $clinit_PricingConditionRecordBuilder(){
  $clinit_PricingConditionRecordBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_masterdata_impl_PricingConditionRecordBuilder_2_classLit);
}

function PricingConditionRecordBuilder(){
  $clinit_PricingConditionRecordBuilder();
  this.usageFieldsForTable = new HashMap;
}

defineClass(467, 123, $intern_27, PricingConditionRecordBuilder);
_.createConditionRecord = function createConditionRecord_0(condRecordTO, conditionTable, conditionType, scale){
  try {
    return new PricingConditionRecord(condRecordTO, conditionTable, conditionType, scale);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration_0();
      return null;
    }
     else 
      throw unwrap($e0);
  }
}
;
_.createSupplmentaryConditionRecord = function createSupplmentaryConditionRecord_0(mainConditionRecord, supplCondRecordTO, scale, supplCondType){
  try {
    return new SupplementaryPricingConditionRecord(supplCondRecordTO, mainConditionRecord.conditionTable, supplCondType, scale, mainConditionRecord, supplCondRecordTO.supplementaryConditionId);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration_0();
      return null;
    }
     else 
      throw unwrap($e0);
  }
}
;
var Lcom_sap_spe_pricing_masterdata_impl_PricingConditionRecordBuilder_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingConditionRecordBuilder', 467, Lcom_sap_spe_condmgnt_masterdata_impl_ConditionRecordBuilder_2_classLit);
function $getScaleDimensionAmount(this$static, dimensionNumber, value_0){
  var scaleDimension;
  scaleDimension = this$static.scaleDimensions[dimensionNumber];
  return new ScaleDimensionAmount(scaleDimension, dynamicCast(scaleDimension.scaleDefinition, 128).determineLevel(value_0));
}

function $getScaleRate(this$static, scaleLevel){
  var scaleDimensionAmounts;
  scaleDimensionAmounts = initDim(Lcom_sap_spe_condmgnt_masterdata_IScaleDimensionAmount_2_classLit, $intern_24, 358, 1, 0, 1);
  setCheck(scaleDimensionAmounts, 0, new ScaleDimensionAmount(this$static.scaleDimensions[0], scaleLevel));
  return $getScaleRate_0(this$static, scaleDimensionAmounts, false);
}

function $getScaleRate_0(this$static, scaleDimensionAmounts, skipGaps){
  var c, c0, level, newScaleDimensionAmounts, rateKey, scaleDimensionAmount, scaleLevel, scaleRate;
  rateKey = initDim(I_classLit, $intern_4, 0, scaleDimensionAmounts.length, 7, 1);
  for (c0 = 0; c0 < scaleDimensionAmounts.length; c0++) {
    level = dynamicCast(scaleDimensionAmounts[c0], 47).scaleLevel;
    if (!level) {
      return null;
    }
    rateKey[c0] = level.scaleLineId;
  }
  scaleRate = dynamicCast($getStringValue(this$static.scaleRates, create_11(rateKey)), 639);
  newScaleDimensionAmounts = null;
  while (!scaleRate && skipGaps) {
    if (newScaleDimensionAmounts == null) {
      newScaleDimensionAmounts = initDim(Lcom_sap_spe_condmgnt_masterdata_IScaleDimensionAmount_2_classLit, $intern_24, 358, scaleDimensionAmounts.length, 0, 1);
      arraycopy(scaleDimensionAmounts, 0, newScaleDimensionAmounts, 0, scaleDimensionAmounts.length);
    }
    scaleDimensionAmount = newScaleDimensionAmounts[newScaleDimensionAmounts.length - 1];
    scaleLevel = dynamicCast(scaleDimensionAmount.scaleDimension.scaleDefinition, 66).getNextSearchLevel(scaleDimensionAmount.scaleLevel);
    if (!scaleLevel) {
      return null;
    }
    setCheck(newScaleDimensionAmounts, newScaleDimensionAmounts.length - 1, new ScaleDimensionAmount(scaleDimensionAmount.scaleDimension, scaleLevel));
    for (c = 0; c < newScaleDimensionAmounts.length; c++) {
      rateKey[c] = dynamicCast(newScaleDimensionAmounts[c], 47).scaleLevel.scaleLineId;
    }
    scaleRate = dynamicCast($getStringValue(this$static.scaleRates, create_11(rateKey)), 639);
  }
  return scaleRate;
}

function PricingScale(scaleDimensions, scaleRates){
  Scale.call(this, scaleDimensions, scaleRates);
}

defineClass(568, 333, {160:1, 3:1}, PricingScale);
var Lcom_sap_spe_pricing_masterdata_impl_PricingScale_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingScale', 568, Lcom_sap_spe_condmgnt_masterdata_bo_Scale_2_classLit);
function $clinit_PricingScaleBuilder(){
  $clinit_PricingScaleBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_masterdata_impl_PricingScaleBuilder_2_classLit);
}

function $isValueScale(scaleBaseType){
  return $equals_7(scaleBaseType, 'B') || $equals_7(scaleBaseType, 'TC1');
}

function PricingScaleBuilder(){
  $clinit_PricingScaleBuilder();
  ScaleBuilder.call(this);
}

defineClass(468, 171, {35:1, 171:1, 3:1}, PricingScaleBuilder);
_.createScale = function createScale_0(scaleDimensions, scaleRates){
  return new PricingScale(scaleDimensions, scaleRates);
}
;
_.createScaleDefinition = function createScaleDefinition_0(scaleDefinitionTO, scaleLevels){
  var currencyUnit, exc, scaleDefinition, scaleType, unit, unitOfMeasure;
  unit = null;
  if ($isValueScale(scaleDefinitionTO.scaleBaseType)) {
    currencyUnit = dynamicCastToString($getStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_CURRENCY'));
    if (currencyUnit == null) {
      exc = new ConditionInconsistentDBException(6);
      $clinit_Configuration_0();
      throw exc;
    }
    try {
      unit = $getCurrencyUnit(dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14), currencyUnit);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
  }
   else {
    unitOfMeasure = dynamicCastToString($getStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_UNIT'));
    if (unitOfMeasure == null) {
      exc = new ConditionInconsistentDBException(6);
      $clinit_Configuration_0();
      throw exc;
    }
    try {
      unit = $getPhysicalUnit(dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14), unitOfMeasure);
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 17)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e1);
    }
  }
  scaleType = dynamicCastToString($getStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_TYPE')).charCodeAt(0);
  switch (scaleType) {
    case 65:
      scaleDefinition = new FromScaleDefinition(scaleDefinitionTO, scaleLevels, unit);
      break;
    case 66:
      scaleDefinition = new ToScaleDefinition(scaleDefinitionTO, scaleLevels, unit, 66);
      break;
    case 68:
      scaleDefinition = new ToIntervalScaleDefinition(scaleDefinitionTO, scaleLevels, unit);
      break;
    default:scaleDefinition = null;
  }
  return scaleDefinition;
}
;
_.createScaleLevel = function createScaleLevel_0(scaleDefinitionTO, scaleLevelTO, scaleValues){
  var amount, currencyUnit, scaleValue;
  amount = new BigDecimal_4(dynamicCastToString($getStringValue(scaleLevelTO.scaleLevelFields, 'SCALE_AMOUNT')));
  scaleValue = null;
  if ($isValueScale(scaleDefinitionTO.scaleBaseType)) {
    currencyUnit = null;
    try {
      currencyUnit = $getCurrencyUnit(dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14), dynamicCastToString($getStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_CURRENCY')));
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
    scaleValue = $getCurrencyValue_0((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , amount), currencyUnit, true, 2);
  }
   else {
    try {
      scaleValue = $getPhysicalValue_0((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , amount), dynamicCastToString($getStringValue(scaleDefinitionTO.scaleDefFields, 'SCALE_UNIT')));
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 17)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e1);
    }
  }
  return new PricingScaleLevel(scaleLevelTO.scaleLineId, scaleValue);
}
;
_.createScaleRate = function createScaleRate_0(scaleRateTO){
  return new PricingScaleRate(scaleRateTO);
}
;
var Lcom_sap_spe_pricing_masterdata_impl_PricingScaleBuilder_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingScaleBuilder', 468, Lcom_sap_spe_condmgnt_masterdata_impl_ScaleBuilder_2_classLit);
function PricingScaleLevel(scaleLineId, scaleAmount){
  ScaleLevel.call(this, scaleLineId);
  this.scaleAmount = scaleAmount;
}

defineClass(265, 172, {362:1, 172:1, 100:1, 3:1}, PricingScaleLevel);
var Lcom_sap_spe_pricing_masterdata_impl_PricingScaleLevel_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingScaleLevel', 265, Lcom_sap_spe_condmgnt_masterdata_bo_ScaleLevel_2_classLit);
function PricingScaleLevelComparator(){
}

defineClass(583, 1, $intern_21, PricingScaleLevelComparator);
_.compare = function compare_14(obj1, obj2){
  var level1, level2;
  level1 = dynamicCast(obj1, 100);
  level2 = dynamicCast(obj2, 100);
  return $compareTo_7(level1.scaleAmount.getValue_0(), level2.scaleAmount.getValue_0());
}
;
var Lcom_sap_spe_pricing_masterdata_impl_PricingScaleLevelComparator_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingScaleLevelComparator', 583, Ljava_lang_Object_2_classLit);
function $clinit_PricingScaleRate(){
  $clinit_PricingScaleRate = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_masterdata_impl_PricingScaleRate_2_classLit);
  ZERO_3 = new BigDecimal_4('0');
}

function $initPricingUnit_0(this$static){
  var pricingUnitName, pricingUnitValue, pricingUnitValueBigDecimal;
  pricingUnitValue = !this$static.scaleRateTO.usageFields?null:dynamicCastToString($getStringValue(this$static.scaleRateTO.usageFields, 'KPEIN'));
  pricingUnitValueBigDecimal = new BigDecimal_4(pricingUnitValue);
  pricingUnitName = !this$static.scaleRateTO.usageFields?null:dynamicCastToString($getStringValue(this$static.scaleRateTO.usageFields, 'KMEIN'));
  if (pricingUnitName != null && $compareTo_7(pricingUnitValueBigDecimal, ZERO_3) != 0) {
    dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    this$static.pricingUnit = $getPhysicalValue_0(pricingUnitValueBigDecimal, pricingUnitName);
  }
}

function PricingScaleRate(scaleRateTO){
  var conditionRateValue, conditionCurrencyUnit, conversionEngine, currencyUnit, currencyValue;
  $clinit_PricingScaleRate();
  ScaleRate.call(this, scaleRateTO);
  try {
    this.scaleRateTO.evaluationType != null && this.scaleRateTO.evaluationType.length > 0 && this.scaleRateTO.evaluationType.charCodeAt(0);
    conditionRateValue = !this.scaleRateTO.usageFields?null:dynamicCastToString($getStringValue(this.scaleRateTO.usageFields, 'KBETR'));
    conditionCurrencyUnit = !this.scaleRateTO.usageFields?null:dynamicCastToString($getStringValue(this.scaleRateTO.usageFields, 'KONWA'));
    conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    currencyUnit = ($checkArg(conditionCurrencyUnit) , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, conditionCurrencyUnit));
    currencyValue = new BigDecimal_4(conditionRateValue);
    this.conditionRate = $getCurrencyValue_0(currencyValue, currencyUnit, true, 2);
    $initPricingUnit_0(this);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      !this.conditionRate?($clinit_Configuration_0() , initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [scaleRateTO.conditionRecordId])):!this.pricingUnit?($clinit_Configuration_0() , initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [scaleRateTO.conditionRecordId])):($clinit_Configuration_0() , initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [$getValueAsString_0(this.conditionRate), $getValueAsString(this.pricingUnit)]));
    }
     else 
      throw unwrap($e0);
  }
}

defineClass(570, 334, {639:1, 3:1}, PricingScaleRate);
var ZERO_3;
var Lcom_sap_spe_pricing_masterdata_impl_PricingScaleRate_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'PricingScaleRate', 570, Lcom_sap_spe_condmgnt_masterdata_bo_ScaleRate_2_classLit);
function SupplementaryPricingConditionRecord(condRecordTO, condTable, condType, scale, mainConditionRecord, supplementaryConditionId){
  $clinit_PricingConditionRecord();
  PricingConditionRecord.call(this, condRecordTO, condTable, condType, scale);
  this.mainConditionRecord = mainConditionRecord;
  this.supplementaryConditionId = supplementaryConditionId;
}

defineClass(562, 331, {45:1, 133:1, 110:1, 114:1, 357:1, 3:1}, SupplementaryPricingConditionRecord);
_.getMainConditionRecord = function getMainConditionRecord_0(){
  return this.mainConditionRecord;
}
;
_.getSupplementaryConditionId_0 = function getSupplementaryConditionId_1(){
  return this.supplementaryConditionId;
}
;
_.supplementaryConditionId = 0;
var Lcom_sap_spe_pricing_masterdata_impl_SupplementaryPricingConditionRecord_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'SupplementaryPricingConditionRecord', 562, Lcom_sap_spe_pricing_masterdata_impl_PricingConditionRecord_2_classLit);
function ToScaleDefinition(scaleDefinitionTO, scaleLevels, scaleUnit, scaleType){
  $clinit_PricingScaleDefinition();
  PricingScaleDefinition.call(this, scaleDefinitionTO, scaleLevels, scaleUnit, scaleType);
}

defineClass(335, 128, $intern_30, ToScaleDefinition);
_.determineLevel = function determineLevel_0(dimensionalValue){
  var dummyLevel, index_0, insertionPoint;
  dummyLevel = new PricingScaleLevel(0, dimensionalValue);
  index_0 = binarySearch(this.scaleLevels, dummyLevel, COMPARATOR);
  if (index_0 >= 0) {
    return dynamicCast(this.scaleLevels[index_0], 100);
  }
  insertionPoint = -index_0 - 1;
  if (insertionPoint < this.scaleLevels.length) {
    return dynamicCast(this.scaleLevels[insertionPoint], 100);
  }
  return null;
}
;
_.getNextSearchLevel = function getNextSearchLevel_0(scaleLevel){
  var index_0, insertionPoint;
  index_0 = binarySearch(this.scaleLevels, scaleLevel, COMPARATOR);
  if (index_0 >= 0) {
    if (index_0 < this.scaleLevels.length - 1) {
      return dynamicCast(this.scaleLevels[index_0 + 1], 100);
    }
    return null;
  }
  insertionPoint = -index_0 - 1;
  if (insertionPoint < this.scaleLevels.length - 1) {
    return dynamicCast(this.scaleLevels[insertionPoint + 1], 100);
  }
  return null;
}
;
var Lcom_sap_spe_pricing_masterdata_impl_ToScaleDefinition_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'ToScaleDefinition', 335, Lcom_sap_spe_pricing_masterdata_impl_PricingScaleDefinition_2_classLit);
function ToIntervalScaleDefinition(scaleDefinitionTO, scaleLevels, scaleUnit){
  $clinit_PricingScaleDefinition();
  ToScaleDefinition.call(this, scaleDefinitionTO, scaleLevels, scaleUnit, 68);
}

defineClass(576, 335, $intern_30, ToIntervalScaleDefinition);
var Lcom_sap_spe_pricing_masterdata_impl_ToIntervalScaleDefinition_2_classLit = createForClass('com.sap.spe.pricing.masterdata.impl', 'ToIntervalScaleDefinition', 576, Lcom_sap_spe_pricing_masterdata_impl_ToScaleDefinition_2_classLit);
var Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit = createForInterface('com.sap.spe.pricing.transactiondata', 'IPricingCondition');
function $getPricingEngine(usage){
  return dynamicCast($getConditionFindingEngine(factory_1, usage), 351);
}

function $clinit_PricingTransactiondataConstants(){
  $clinit_PricingTransactiondataConstants = emptyMethod;
  new BigDecimal_4('-1');
  ZERO_4 = new BigDecimal_4('0');
  ONE_0 = new BigDecimal_4('1');
  new BigDecimal_4('100');
  new BigDecimal_4('-100');
}

var ONE_0, ZERO_4;
function ExclusionConditionTrace(){
}

defineClass(158, 1, {158:1, 3:1}, ExclusionConditionTrace);
_.counter = 0;
_.pricingStepNumber = 0;
var Lcom_sap_spe_pricing_transactiondata_calctrace_ExclusionConditionTrace_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'ExclusionConditionTrace', 158, Ljava_lang_Object_2_classLit);
function $addExclusionCondition(this$static, exclusionCondition){
  var exclCond, exclCondTrace, exclCondsWithCounter, i_0;
  $setValue(exclusionCondition, exclusionCondition.originalCondValue);
  $add_6(this$static.exclusionConditions, exclusionCondition);
  if (exclusionCondition._count > 1) {
    exclCondsWithCounter = exclusionCondition.exclusionConditionsWithCounter;
    for (i_0 = 0; i_0 < exclCondsWithCounter.arrayList.array.length; i_0++) {
      exclCondTrace = (checkArrayElementIndex(i_0, exclCondsWithCounter.arrayList.array.length) , dynamicCast($get_13(exclCondsWithCounter.arrayList, i_0), 158));
      exclCond = new ExclusionCondition(exclusionCondition._groupName, exclusionCondition._condTypeName, exclCondTrace.pricingStepNumber, exclCondTrace.counter, exclCondTrace.conditionValue);
      $add_6(this$static.exclusionConditions, exclCond);
    }
  }
}

function ExclusionGroupTraceInfo(){
  this.exclusionConditions = new Vector;
}

defineClass(275, 1, $intern_21, ExclusionGroupTraceInfo);
_.exclusionConditions = null;
var Lcom_sap_spe_pricing_transactiondata_calctrace_ExclusionGroupTraceInfo_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'ExclusionGroupTraceInfo', 275, Ljava_lang_Object_2_classLit);
function $setCounter_0(this$static, counter){
  this$static.counter = counter;
}

function $setStepNumber_0(this$static, stepNumber){
  this$static.stepNumber = stepNumber;
}

function ExclusionTraceInfo(){
}

defineClass(113, 1, $intern_21, ExclusionTraceInfo);
_.counter = 0;
_.stepNumber = 0;
var Lcom_sap_spe_pricing_transactiondata_calctrace_ExclusionTraceInfo_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'ExclusionTraceInfo', 113, Ljava_lang_Object_2_classLit);
function $addInfo(this$static, info){
  var key;
  key = info.stepNumber + '_' + info.counter;
  $put_3(this$static.sortedMap, key, info);
}

function ExclusionTracer(){
  this.sortedMap = new TreeMap;
}

defineClass(592, 1, $intern_21, ExclusionTracer);
_.sortedMap = null;
var Lcom_sap_spe_pricing_transactiondata_calctrace_ExclusionTracer_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'ExclusionTracer', 592, Ljava_lang_Object_2_classLit);
function FormulaStepTrace(pricingStep, dynamicCounter){
  this.pricingStep = pricingStep;
  this.dynamicCounter = dynamicCounter;
  new HashMap;
  new HashMap;
}

defineClass(203, 1, {203:1, 3:1}, FormulaStepTrace);
_.equals$ = function equals_18(obj){
  var fst;
  fst = dynamicCast(obj, 203);
  if (this.pricingStep.stepTO.stepNumber == fst.pricingStep.stepTO.stepNumber && this.dynamicCounter == fst.dynamicCounter) {
    return true;
  }
  return false;
}
;
_.dynamicCounter = 1;
_.pricingStep = null;
var Lcom_sap_spe_pricing_transactiondata_calctrace_FormulaStepTrace_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'FormulaStepTrace', 203, Ljava_lang_Object_2_classLit);
function $getFormulaStepTrace(this$static, pricingStep, dynamicCounter){
  var fst, searchKey;
  searchKey = new SearchKey;
  searchKey.stepNumber = pricingStep.stepTO.stepNumber;
  searchKey.dynamicCounter = dynamicCounter;
  fst = dynamicCast(getEntryValueOrNull($getEntry_0(this$static.sortedMap, searchKey)), 203);
  !fst && (fst = new FormulaStepTrace(pricingStep, dynamicCounter));
  return fst;
}

function $overwriteScaleBaseWithTrace(this$static, condition, pricingStep){
  var fst, scaleBaseValue, searchKey;
  !!condition.getConditionScale() && condition.getConditionScale().getValue_0();
  scaleBaseValue = null.nullMethod();
  fst = $getFormulaStepTrace(this$static, pricingStep, condition.getCounter_0());
  searchKey = new SearchKey;
  searchKey.stepNumber = fst.pricingStep.stepTO.stepNumber;
  searchKey.dynamicCounter = fst.dynamicCounter;
  $put_3(this$static.sortedMap, searchKey, fst);
  return scaleBaseValue;
}

function FormulaTracer(){
  this.sortedMap = new TreeMap_0(($clinit_FormulaTracer$FormulaStepTraceComparator() , $clinit_FormulaTracer$FormulaStepTraceComparator() , INSTANCE_8));
}

defineClass(588, 1, $intern_21, FormulaTracer);
_.sortedMap = null;
var Lcom_sap_spe_pricing_transactiondata_calctrace_FormulaTracer_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'FormulaTracer', 588, Ljava_lang_Object_2_classLit);
function $clinit_FormulaTracer$FormulaStepTraceComparator(){
  $clinit_FormulaTracer$FormulaStepTraceComparator = emptyMethod;
  INSTANCE_8 = new FormulaTracer$FormulaStepTraceComparator;
}

function FormulaTracer$FormulaStepTraceComparator(){
}

defineClass(589, 1, $intern_21, FormulaTracer$FormulaStepTraceComparator);
_.compare = function compare_15(obj1, obj2){
  var compare, searchKey1, searchKey2;
  searchKey1 = dynamicCast(obj1, 94);
  searchKey2 = dynamicCast(obj2, 94);
  compare = searchKey1.stepNumber - searchKey2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  return searchKey1.dynamicCounter - searchKey2.dynamicCounter;
}
;
var INSTANCE_8;
var Lcom_sap_spe_pricing_transactiondata_calctrace_FormulaTracer$FormulaStepTraceComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'FormulaTracer/FormulaStepTraceComparator', 589, Ljava_lang_Object_2_classLit);
function ScaleStepTrace(pricingStep, dynamicCounter){
  this.pricingStep = pricingStep;
  this.dynamicCounter = dynamicCounter;
}

defineClass(272, 1, {272:1, 3:1}, ScaleStepTrace);
_.dynamicCounter = 1;
_.pricingStep = null;
var Lcom_sap_spe_pricing_transactiondata_calctrace_ScaleStepTrace_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'ScaleStepTrace', 272, Ljava_lang_Object_2_classLit);
function $addScaleStepTrace(this$static, sst){
  var searchKey;
  searchKey = new SearchKey;
  searchKey.stepNumber = sst.pricingStep.stepTO.stepNumber;
  searchKey.dynamicCounter = sst.dynamicCounter;
  $put_3(this$static.sortedMap, searchKey, sst);
}

function $getScaleStepTrace(this$static, pricingStep, dynamicCounter){
  var fst, searchKey;
  searchKey = new SearchKey;
  searchKey.stepNumber = pricingStep.stepTO.stepNumber;
  searchKey.dynamicCounter = dynamicCounter;
  fst = dynamicCast(getEntryValueOrNull($getEntry_0(this$static.sortedMap, searchKey)), 272);
  !fst && (fst = new ScaleStepTrace(pricingStep, dynamicCounter));
  return fst;
}

function ScaleTracer(){
  this.sortedMap = new TreeMap_0(($clinit_ScaleTracer$ScaleStepTraceComparator() , $clinit_ScaleTracer$ScaleStepTraceComparator() , INSTANCE_9));
}

defineClass(590, 1, $intern_21, ScaleTracer);
_.sortedMap = null;
var Lcom_sap_spe_pricing_transactiondata_calctrace_ScaleTracer_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'ScaleTracer', 590, Ljava_lang_Object_2_classLit);
function $clinit_ScaleTracer$ScaleStepTraceComparator(){
  $clinit_ScaleTracer$ScaleStepTraceComparator = emptyMethod;
  INSTANCE_9 = new ScaleTracer$ScaleStepTraceComparator;
}

function ScaleTracer$ScaleStepTraceComparator(){
}

defineClass(591, 1, $intern_21, ScaleTracer$ScaleStepTraceComparator);
_.compare = function compare_16(obj1, obj2){
  var compare, searchKey1, searchKey2;
  searchKey1 = dynamicCast(obj1, 94);
  searchKey2 = dynamicCast(obj2, 94);
  compare = searchKey1.stepNumber - searchKey2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  return searchKey1.dynamicCounter - searchKey2.dynamicCounter;
}
;
var INSTANCE_9;
var Lcom_sap_spe_pricing_transactiondata_calctrace_ScaleTracer$ScaleStepTraceComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'ScaleTracer/ScaleStepTraceComparator', 591, Ljava_lang_Object_2_classLit);
function SearchKey(){
}

defineClass(94, 1, {94:1, 3:1}, SearchKey);
_.equals$ = function equals_19(arg0){
  var key;
  key = dynamicCast(arg0, 94);
  if (this.stepNumber != key.stepNumber) {
    return false;
  }
  if (this.dynamicCounter != key.dynamicCounter) {
    return false;
  }
  return true;
}
;
_.hashCode$ = function hashCode_20(){
  return getHashCode_0(this.stepNumber + '_' + this.dynamicCounter);
}
;
_.dynamicCounter = 1;
_.stepNumber = 0;
var Lcom_sap_spe_pricing_transactiondata_calctrace_SearchKey_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.calctrace', 'SearchKey', 94, Ljava_lang_Object_2_classLit);
function ManualChangeNotAllowedException(messageNumber, args){
  PricingException.call(this, messageNumber, args);
}

defineClass(34, 531, {34:1, 46:1, 3:1, 9:1, 18:1}, ManualChangeNotAllowedException);
var Lcom_sap_spe_pricing_transactiondata_exc_ManualChangeNotAllowedException_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.exc', 'ManualChangeNotAllowedException', 34, Lcom_sap_spe_pricing_exception_PricingException_2_classLit);
function CumulationConditionComparator(){
}

defineClass(601, 1, $intern_21, CumulationConditionComparator);
_.compare = function compare_17(condition1, condition2){
  var compare, cond1, cond2;
  cond1 = dynamicCast(condition1, 15);
  cond2 = dynamicCast(condition2, 15);
  compare = cond1.stepNumber - cond2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  return cond1.counter - cond2.counter;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_CumulationConditionComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'CumulationConditionComparator', 601, Ljava_lang_Object_2_classLit);
function $clinit_DummyPricingCondition(){
  $clinit_DummyPricingCondition = emptyMethod;
  SINGELTON_4 = new DummyPricingCondition;
}

function $overwriteConditionBase(this$static){
  $overwriteConditionBase_0(this$static.pricingCondition, this$static);
}

function $overwriteScaleBase(this$static){
  $overwriteScaleBase_0(this$static.pricingCondition, this$static);
}

function $processConditionValueFormula(this$static){
  $overwriteConditionValue(this$static.pricingCondition, this$static);
}

function DummyPricingCondition(){
}

defineClass(435, 1, {65:1, 280:1, 279:1, 278:1, 3:1}, DummyPricingCondition);
_.getConditionRecord = function getConditionRecord_0(){
  return $getConditionRecord(this.pricingCondition);
}
;
_.getConditionScale = function getConditionScale(){
  return $getConditionScale(this.pricingCondition);
}
;
_.getConditionTypeName = function getConditionTypeName(){
  return this.pricingCondition.getConditionTypeName();
}
;
_.getCounter_0 = function getCounter_2(){
  return this.pricingCondition.counter;
}
;
_.getManualEntryFlag_0 = function getManualEntryFlag_1(){
  return this.pricingCondition.m_manual;
}
;
_.getOrigin = function getOrigin(){
  return this.pricingCondition.m_origin;
}
;
_.getStep = function getStep_0(){
  return this.pricingCondition.step;
}
;
_.getStepNumber_0 = function getStepNumber_1(){
  return this.pricingCondition.stepNumber;
}
;
_.getStructureConditionFlag = function getStructureConditionFlag(){
  return this.pricingCondition.m_indicatorStructureCondition;
}
;
_.getVariantConditionKey = function getVariantConditionKey(){
  return this.pricingCondition.m_varcondKey;
}
;
_.isManuallyChanged = function isManuallyChanged_0(){
  return this.pricingCondition.m_manuallyChanged;
}
;
_.isVariantCondition_0 = function isVariantCondition_1(){
  return this.pricingCondition.m_variant;
}
;
_.setConditionValue = function setConditionValue(value_0){
}
;
_.setInactive = function setInactive(inactive){
}
;
var SINGELTON_4;
var Lcom_sap_spe_pricing_transactiondata_impl_DummyPricingCondition_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'DummyPricingCondition', 435, Ljava_lang_Object_2_classLit);
function $add(this$static, exclCond){
  var condName1, condName2, exclCondTrace, grName1, grName2;
  grName1 = this$static._groupName;
  grName2 = exclCond._groupName;
  condName1 = this$static._condTypeName;
  condName2 = exclCond._condTypeName;
  grName1 == null && (grName1 = '');
  grName2 == null && (grName2 = '');
  condName1 == null && (condName1 = '');
  condName2 == null && (condName2 = '');
  if ($equals_7(grName1, grName2) && $equals_7(condName1, condName2) && this$static._inactive == exclCond._inactive && this$static._stepNo == exclCond._stepNo) {
    this$static._count = this$static._count + 1;
    this$static._conditionValue = $add_1(this$static._conditionValue, exclCond._conditionValue);
    exclCondTrace = new ExclusionConditionTrace;
    exclCondTrace.pricingStepNumber = exclCond._stepNo;
    exclCondTrace.counter = exclCond.counter;
    exclCondTrace.conditionValue = exclCond._conditionValue;
    $add_6(this$static.exclusionConditionsWithCounter, exclCondTrace);
    return null;
  }
  return exclCond;
}

function $setInactive(this$static, inactive){
  this$static._inactive = inactive;
}

function $setValue(this$static, value_0){
  this$static._conditionValue = value_0;
}

function ExclusionCondition(grName, condName, stepNo, counter, value_0){
  this._groupName = grName == null?'':grName;
  this._condTypeName = condName == null?'':condName;
  this._inactive = 32;
  this._stepNo = stepNo;
  this._conditionValue = value_0;
  this._count = 1;
  this.counter = counter;
  this.exclusionConditionsWithCounter = new Vector;
  this.originalCondValue = value_0;
}

defineClass(31, 1, {642:1, 31:1, 3:1}, ExclusionCondition);
_._count = 0;
_._inactive = 0;
_._stepNo = 0;
_.counter = 0;
_.exclusionConditionsWithCounter = null;
var Lcom_sap_spe_pricing_transactiondata_impl_ExclusionCondition_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ExclusionCondition', 31, Ljava_lang_Object_2_classLit);
function ExclusionConditionComparator(){
}

defineClass(273, 1, $intern_21, ExclusionConditionComparator);
_.compare = function compare_18(cond1, cond2){
  var condTypeName1, condTypeName2, exCond1, exCond2, grName1, grName2, inactive1, inactive2, result;
  exCond1 = dynamicCast(cond1, 31);
  exCond2 = dynamicCast(cond2, 31);
  inactive1 = valueOf_0(exCond1._inactive);
  inactive2 = valueOf_0(exCond2._inactive);
  grName1 = exCond1._groupName == null?'':exCond1._groupName;
  grName2 = exCond2._groupName == null?'':exCond2._groupName;
  condTypeName1 = exCond1._condTypeName == null?'':exCond1._condTypeName;
  condTypeName2 = exCond2._condTypeName == null?'':exCond2._condTypeName;
  result = compareTo_7(grName1, grName2);
  if (result != 0) {
    return result;
  }
  result = compareTo_7(condTypeName1, condTypeName2);
  if (result != 0) {
    return result;
  }
  result = exCond1._stepNo - exCond2._stepNo;
  if (result != 0) {
    return result;
  }
  return compareTo_7(inactive1, inactive2);
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_ExclusionConditionComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ExclusionConditionComparator', 273, Ljava_lang_Object_2_classLit);
function ExclusionGroupComparator(){
}

defineClass(269, 1, $intern_21, ExclusionGroupComparator);
_.compare = function compare_19(group1, group2){
  var exGroup1, exGroup2;
  exGroup1 = dynamicCast(group1, 284);
  exGroup2 = dynamicCast(group2, 284);
  return compareTo_7(exGroup1.exclusionGroupTO.name_0, exGroup2.exclusionGroupTO.name_0);
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_ExclusionGroupComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ExclusionGroupComparator', 269, Ljava_lang_Object_2_classLit);
function $buildExclusionConainers(this$static){
  var condTypeName, condTypes, exGroup, i_0, i0, iterator, steps;
  if (!this$static.exclusionProcedure) {
    return;
  }
  steps = this$static.exclusionProcedure.steps;
  if (steps.length == 0) {
    return;
  }
  this$static.m_exclusionGroups = new TreeSet_0(new ExclusionGroupComparator);
  this$static.m_exclusionCondTypeNames = new TreeSet;
  for (i0 = 0; i0 < steps.length; i0++) {
    $add_5(this$static.m_exclusionGroups, dynamicCast(steps[i0], 78).group1);
    !!dynamicCast(steps[i0], 78).group2 && $add_5(this$static.m_exclusionGroups, dynamicCast(steps[i0], 78).group2);
  }
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_exclusionGroups.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    exGroup = dynamicCast($next_3(iterator), 284);
    condTypes = exGroup.conditionTypes;
    for (i_0 = 0; i_0 < condTypes.length; i_0++) {
      condTypeName = condTypes[i_0].conditionTypeTO.name_0;
      $add_5(this$static.m_exclusionCondTypeNames, condTypeName);
    }
  }
}

function $determineExclusionGroupValue(this$static, exclGroupName, exclConditions, exclGroupValues, exclCondValues, exclGroupTraceInfo){
  var condResult, condTypeName, exclCond, exclCondLowerBound, exclGroup, iterator, result, searchExclCond;
  result = new ExclusionCondition(exclGroupName, null, 0, 0, ($clinit_PricingConstants() , ZERO_5));
  exclGroup = dynamicCast(find_0(exclGroupValues, result), 642);
  if (!!exclGroup && $equals_7(exclGroup._groupName, exclGroupName) && exclGroup._inactive != 32) {
    $setInactive(result, exclGroup._inactive);
    return result;
  }
  result._inactive = 65;
  exclCondLowerBound = new ExclusionCondition(exclGroupName, null, 0, 0, null);
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet((new TreeSet_1(exclCondValues.map_0.tailMap(exclCondLowerBound, true))).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    exclCond = dynamicCast($next_3(iterator), 31);
    if (!!exclCond && $equals_7(exclCond._groupName, exclGroupName)) {
      condTypeName = exclCond._condTypeName;
      searchExclCond = new ExclusionCondition(null, condTypeName, exclCond._stepNo, exclCond.counter, null);
      condResult = dynamicCast(find_0(exclConditions, searchExclCond), 642);
      if (!!condResult && $equals_7(condResult._condTypeName, condTypeName) && condResult._inactive == 32) {
        result._inactive = 32;
        $add(result, new ExclusionCondition(exclGroupName, null, 0, 0, condResult._conditionValue));
        this$static.isCalcTrace && $addExclusionCondition(exclGroupTraceInfo, condResult);
      }
    }
     else {
      break;
    }
  }
  return result;
}

function $exclude(conditionsToBeExcluded, manualInactive, stepNoParam){
  var condition, iter, oldCondTypeName, oldVarcond, oldVarnumh, stepNo;
  stepNo = stepNoParam;
  oldCondTypeName = '';
  oldVarcond = '0';
  oldVarnumh = '0';
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(conditionsToBeExcluded.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    condition = dynamicCast($next_3(iter), 15);
    if ($equals_7(oldCondTypeName, condition.getConditionTypeName()) && (!condition.m_variant || $equals_7(oldVarnumh, condition.m_conditionRecordId) || $equals_7(oldVarcond, condition.m_varcondKey))) {
      if (manualInactive != ($clinit_SAPString() , $indexOf('AF', fromCodePoint(condition.m_origin)) >= 0)) {
        condition.m_inactive = 77;
        condition.stepNumber < stepNo && (stepNo = condition.stepNumber);
      }
    }
     else {
      if (manualInactive == ($clinit_SAPString() , $indexOf('AF', fromCodePoint(condition.m_origin)) >= 0)) {
        oldCondTypeName = condition.getConditionTypeName();
        oldVarnumh = condition.m_conditionRecordId != null?condition.m_conditionRecordId:'0';
        oldVarcond = condition.m_varcondKey != null?condition.m_varcondKey:'0';
      }
    }
  }
  return stepNo;
}

function $excludeConditionGroups(this$static){
  var condTypeName, condTypes, counter, exGr1, exGr2, exSteps, exclCond, exclCondLowerBound, exclCondValue, exclCondValues, exclConditions, exclGroup, exclGroup1, exclGroup2, exclGroupName, exclGroupValue, exclGroupValues, exclGroupsForProcB, exclGroupsForProcE, exclStep, i_0, i0, inactive, iter, iter0, iterator, iterator0, objectAlreadyExists, oldExclCond, oldExclGrValue, prCond, relExclSteps, result, searchExclCond, smallestStepNo, stepNo, value_0;
  smallestStepNo = $intern_31;
  if (this$static.m_exclusionCondTypeNames.map_0.size_1() == 0) {
    return $intern_31;
  }
  exclConditions = new TreeSet_0(new ExclusionConditionComparator);
  for (iterator0 = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator0.val$entryIterator2.iter);) {
    prCond = dynamicCast($next_3(iterator0), 15);
    inactive = prCond.m_inactive;
    if (!prCond.m_conditionType || ($clinit_SAPString() , $indexOf(' ALWY', fromCodePoint(inactive)) < 0)) {
      continue;
    }
    condTypeName = prCond.getConditionTypeName();
    value_0 = prCond.m_conditionValue;
    if ($signum(prCond.m_conditionValue) == 0 && !this$static.m_takeZeroValuesIntoAccountForExclusion) {
      continue;
    }
    if ($contains_1(this$static.m_exclusionCondTypeNames, condTypeName)) {
      this$static.m_isReturn && (value_0 = $negate(value_0));
      exclCond = new ExclusionCondition(null, condTypeName, prCond.stepNumber, prCond.counter, value_0);
      objectAlreadyExists = exclConditions.map_0.put_0(exclCond, ($clinit_Boolean() , FALSE)) != null;
      if (objectAlreadyExists) {
        oldExclCond = dynamicCast(find_0(exclConditions, exclCond), 31);
        $add(oldExclCond, exclCond);
      }
    }
  }
  exclCondValues = new TreeSet_0(new ExclusionConditionComparator);
  exclGroupValues = new TreeSet_0(new ExclusionConditionComparator);
  for (iter0 = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_exclusionGroups.map_0)); $hasNext_0(iter0.val$entryIterator2.iter);) {
    exclGroup = dynamicCast($next_3(iter0), 197);
    condTypes = exclGroup.conditionTypes;
    exclGroupName = exclGroup.exclusionGroupTO.name_0;
    for (i0 = 0; i0 < condTypes.length; i0++) {
      condTypeName = condTypes[i0].conditionTypeTO.name_0;
      exclCondLowerBound = new ExclusionCondition(null, condTypeName, 0, 0, null);
      exclCond = dynamicCast(find_0(exclConditions, exclCondLowerBound), 31);
      stepNo = 0;
      counter = 0;
      value_0 = ($clinit_PricingConstants() , ZERO_5);
      if (exclCond) {
        stepNo = exclCond._stepNo;
        value_0 = exclCond._conditionValue;
        counter = exclCond.counter;
      }
      exclCondValue = new ExclusionCondition(exclGroupName, condTypeName, stepNo, counter, value_0);
      exclGroupValue = new ExclusionCondition(exclGroupName, null, 0, 0, value_0);
      if (!!exclCond && $equals_7(exclCond._condTypeName, condTypeName)) {
        objectAlreadyExists = exclGroupValues.map_0.put_0(exclGroupValue, ($clinit_Boolean() , FALSE)) != null;
        if (objectAlreadyExists) {
          oldExclGrValue = dynamicCast(find_0(exclGroupValues, exclGroupValue), 31);
          $add(oldExclGrValue, exclGroupValue);
        }
      }
       else {
        exclCondValue._inactive = 90;
      }
      exclCondValues.map_0.put_0(exclCondValue, ($clinit_Boolean() , FALSE)) == null;
    }
  }
  exclGroupsForProcB = new TreeSet_0(new ExclusionGroupComparator);
  exclGroupsForProcE = new TreeSet_0(new ExclusionGroupComparator);
  relExclSteps = new TreeSet_0(new ExclusionStepComparator);
  exSteps = this$static.exclusionProcedure.steps;
  for (i_0 = 0; i_0 < exSteps.length; i_0++) {
    exGr1 = dynamicCast(exSteps[i_0], 78).group1;
    exGr2 = dynamicCast(exSteps[i_0], 78).group2;
    exclGroup1 = new ExclusionCondition(exGr1.exclusionGroupTO.name_0, null, 0, 0, null);
    exclGroup2 = null;
    exclGroup1 = dynamicCast(find_0(exclGroupValues, exclGroup1), 31);
    if (!!exclGroup1 && $equals_7(exclGroup1._groupName, exGr1.exclusionGroupTO.name_0)) {
      if (exGr2) {
        exclGroup2 = new ExclusionCondition(exGr2.exclusionGroupTO.name_0, null, 0, 0, null);
        exclGroup2 = dynamicCast(find_0(exclGroupValues, exclGroup2), 31);
      }
      (!exGr2 || !!exGr2 && !!exclGroup2 && $equals_7(exclGroup2._groupName, exGr2.exclusionGroupTO.name_0)) && (dynamicCast(exSteps[i_0], 78).exclusionStepTO.exlusionType == 66?exclGroupsForProcB.map_0.put_0(exGr1, ($clinit_Boolean() , FALSE)) == null:dynamicCast(exSteps[i_0], 78).exclusionStepTO.exlusionType == 69?exclGroupsForProcE.map_0.put_0(exGr1, ($clinit_Boolean() , FALSE)) == null:$add_5(relExclSteps, exSteps[i_0]));
    }
  }
  exclGroupsForProcB.map_0.size_1() > 0 && (smallestStepNo = $processExclusionProcedureBandE(this$static, $intern_31, exclConditions, exclCondValues, exclGroupsForProcB, true));
  exclGroupsForProcE.map_0.size_1() > 0 && (smallestStepNo = $processExclusionProcedureBandE(this$static, smallestStepNo, exclConditions, exclCondValues, exclGroupsForProcE, false));
  if (relExclSteps.map_0.size_1() == 0) {
    return smallestStepNo;
  }
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(relExclSteps.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    exclStep = dynamicCast($next_3(iter), 78);
    switch (exclStep.exclusionStepTO.exlusionType) {
      case 65:
        $exclusionProcedureAandL(this$static, exclStep, exclConditions, exclCondValues, true);
        break;
      case 67:
        $exclusionProcedureCandF(this$static, exclStep, exclConditions, exclGroupValues, exclCondValues, true);
        break;
      case 68:
        $exclusionProcedureD(this$static, exclStep, exclConditions, exclGroupValues, exclCondValues);
        break;
      case 70:
        $exclusionProcedureCandF(this$static, exclStep, exclConditions, exclGroupValues, exclCondValues, false);
        break;
      case 76:
        $exclusionProcedureAandL(this$static, exclStep, exclConditions, exclCondValues, false);
    }
  }
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    prCond = dynamicCast($next_3(iterator), 15);
    inactive = prCond.m_inactive;
    if (!prCond.m_conditionType || ($clinit_SAPString() , $indexOf(' WY', fromCodePoint(inactive)) < 0)) {
      continue;
    }
    condTypeName = prCond.getConditionTypeName();
    searchExclCond = new ExclusionCondition(null, condTypeName, prCond.stepNumber, prCond.counter, null);
    result = dynamicCast(find_0(exclConditions, searchExclCond), 31);
    if (!!result && $equals_7(result._condTypeName, condTypeName) && result._inactive != 32) {
      prCond.m_inactive = 65;
      prCond.stepNumber < smallestStepNo && (smallestStepNo = prCond.stepNumber);
    }
  }
  return smallestStepNo;
}

function $exclusionManualEntry(this$static){
  var condWithAutomaticPriority, condWithAutomaticPriorityExist, condWithManualPriority, condWithManualPriorityExist, condition, iterator, smallestStepNo, stepNo;
  smallestStepNo = $intern_31;
  condWithAutomaticPriorityExist = false;
  condWithManualPriorityExist = false;
  condWithAutomaticPriority = new TreeSet_0(new ManualConditionComparatorB);
  condWithManualPriority = new TreeSet_0(new ManualConditionComparatorC);
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    condition = dynamicCast($next_3(iterator), 15);
    if (!!condition.m_conditionType && ($clinit_SAPString() , $indexOf('KLMXZ', fromCodePoint(condition.m_inactive)) < 0) && ($clinit_SAPString() , $indexOf('BC', fromCodePoint(condition.m_manual)) >= 0)) {
      if (condition.m_manual == 66) {
        condWithAutomaticPriority.map_0.put_0(condition, ($clinit_Boolean() , FALSE)) == null;
        $clinit_SAPString();
        $indexOf('CDG', fromCodePoint(condition.m_origin)) >= 0 && (condWithAutomaticPriorityExist = true);
      }
       else {
        condWithManualPriority.map_0.put_0(condition, ($clinit_Boolean() , FALSE)) == null;
        $clinit_SAPString();
        $indexOf('CDG', fromCodePoint(condition.m_origin)) >= 0 && (condWithManualPriorityExist = true);
      }
    }
  }
  if (condWithManualPriorityExist) {
    stepNo = $exclude(condWithManualPriority, false, $intern_31);
    stepNo < $intern_31 && (smallestStepNo = stepNo);
  }
  if (condWithAutomaticPriorityExist) {
    stepNo = $exclude(condWithAutomaticPriority, true, smallestStepNo);
    stepNo < smallestStepNo && (smallestStepNo = stepNo);
  }
  return smallestStepNo;
}

function $exclusionProcedureAandL(this$static, exclStep, exclConditions, exclCondValues, procedureA){
  var condTypeName, exclCondValue, exclGroup, exclGroupName, iterator, oldExclCondValue, oldResult, result, searchExclCond;
  exclGroupName = exclStep.group1.exclusionGroupTO.name_0;
  oldExclCondValue = null;
  oldResult = null;
  exclGroup = new ExclusionCondition(exclGroupName, null, 0, 0, null);
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet((new TreeSet_1(exclCondValues.map_0.tailMap(exclGroup, true))).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    exclCondValue = dynamicCast($next_3(iterator), 31);
    if (!!exclCondValue && $equals_7(exclCondValue._groupName, exclGroupName)) {
      condTypeName = exclCondValue._condTypeName;
      searchExclCond = new ExclusionCondition(null, condTypeName, exclCondValue._stepNo, exclCondValue.counter, null);
      result = dynamicCast(find_0(exclConditions, searchExclCond), 31);
      if (!!result && $equals_7(result._condTypeName, condTypeName)) {
        $setValue(exclCondValue, result._conditionValue);
        if (result._inactive == 32) {
          if (oldExclCondValue) {
            if (procedureA) {
              if ($compareTo_7(result._conditionValue, oldExclCondValue._conditionValue) > 0) {
                result._inactive = 65;
                $traceExclusionTypeA(this$static, result, oldExclCondValue);
              }
               else {
                oldResult._inactive = 65;
                $traceExclusionTypeA(this$static, oldExclCondValue, result);
                oldExclCondValue = exclCondValue;
                oldResult = result;
              }
            }
             else {
              if ($compareTo_7(result._conditionValue, oldExclCondValue._conditionValue) < 0) {
                result._inactive = 65;
                $traceExclusionTypeL(this$static, result, oldExclCondValue);
              }
               else {
                oldResult._inactive = 65;
                $traceExclusionTypeL(this$static, oldExclCondValue, result);
                oldExclCondValue = exclCondValue;
                oldResult = result;
              }
            }
          }
           else {
            oldExclCondValue = exclCondValue;
            oldResult = result;
          }
        }
      }
    }
     else {
      break;
    }
  }
}

function $exclusionProcedureBandE(this$static, exclCondition, procedureB){
  var condTypeName, exCondTypeName, inactive, iterator, oldCondTypeName, oldPrCond, oldValue, prCond, smallestStepNo, value_0;
  smallestStepNo = $intern_31;
  exCondTypeName = exclCondition._condTypeName;
  oldCondTypeName = null;
  oldValue = null;
  oldPrCond = null;
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    prCond = dynamicCast($next_3(iterator), 15);
    inactive = prCond.m_inactive;
    condTypeName = prCond.getConditionTypeName();
    if (!prCond.m_conditionType || !$equals_7(condTypeName, exCondTypeName) || ($clinit_SAPString() , $indexOf(' WY', fromCodePoint(inactive)) < 0)) {
      continue;
    }
    value_0 = prCond.m_conditionValue;
    if ($signum(value_0) == 0 && !this$static.m_takeZeroValuesIntoAccountForExclusion) {
      continue;
    }
    this$static.m_isReturn && (value_0 = $negate(value_0));
    if (oldCondTypeName == null) {
      oldCondTypeName = condTypeName;
      oldValue = value_0;
      oldPrCond = prCond;
      continue;
    }
    if (procedureB) {
      if ($compareTo_7(value_0, oldValue) > 0) {
        $setValue(exclCondition, $subtract(exclCondition._conditionValue, value_0));
        prCond.m_inactive = 65;
        $traceExclusionTypeB(this$static, prCond, oldPrCond);
        prCond.stepNumber < smallestStepNo && (smallestStepNo = prCond.stepNumber);
      }
       else {
        $setValue(exclCondition, $subtract(exclCondition._conditionValue, oldValue));
        oldPrCond.m_inactive = 65;
        $traceExclusionTypeB(this$static, oldPrCond, prCond);
        oldPrCond.stepNumber < smallestStepNo && (smallestStepNo = prCond.stepNumber);
        oldValue = value_0;
        oldPrCond = prCond;
      }
    }
     else {
      if ($compareTo_7(value_0, oldValue) < 0) {
        $setValue(exclCondition, $subtract(exclCondition._conditionValue, value_0));
        prCond.m_inactive = 65;
        $traceExclusionTypeE(this$static, oldPrCond, prCond);
        prCond.stepNumber < smallestStepNo && (smallestStepNo = prCond.stepNumber);
      }
       else {
        $setValue(exclCondition, $subtract(exclCondition._conditionValue, oldValue));
        oldPrCond.m_inactive = 65;
        $traceExclusionTypeE(this$static, prCond, oldPrCond);
        oldPrCond.stepNumber < smallestStepNo && (smallestStepNo = prCond.stepNumber);
        oldValue = value_0;
        oldPrCond = prCond;
      }
    }
  }
  return smallestStepNo;
}

function $exclusionProcedureCandF(this$static, exclStep, exclConditions, exclGroupValues, exclCondValues, procedureC){
  var exclGroupTraceInfo1, exclGroupTraceInfo2, res1, res2;
  exclGroupTraceInfo1 = null;
  exclGroupTraceInfo2 = null;
  if (this$static.isCalcTrace) {
    exclGroupTraceInfo1 = new ExclusionGroupTraceInfo;
    exclGroupTraceInfo2 = new ExclusionGroupTraceInfo;
  }
  res1 = $determineExclusionGroupValue(this$static, exclStep.group1.exclusionGroupTO.name_0, exclConditions, exclGroupValues, exclCondValues, exclGroupTraceInfo1);
  res2 = null;
  res1._inactive == 32 && (res2 = $determineExclusionGroupValue(this$static, exclStep.group2.exclusionGroupTO.name_0, exclConditions, exclGroupValues, exclCondValues, exclGroupTraceInfo2));
  if (res1._inactive == 32 && res2._inactive == 32) {
    if (procedureC && $compareTo_7(res2._conditionValue, res1._conditionValue) > 0) {
      if (this$static.isCalcTrace) {
        new Message('PRC_PRI', 194, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [exclStep.group1.exclusionGroupTO.name_0]));
        new Message('PRC_PRI', 195, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [res2._groupName, $toString_6(res2._conditionValue), res1._groupName, $toString_6(res1._conditionValue)]));
      }
      $setExclusionGroupInactive(this$static, exclStep.group2.exclusionGroupTO.name_0, exclConditions, exclGroupValues, exclCondValues);
    }
     else if (!procedureC && $compareTo_7(res1._conditionValue, res2._conditionValue) > 0) {
      if (this$static.isCalcTrace) {
        new Message('PRC_PRI', 194, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [exclStep.group1.exclusionGroupTO.name_0]));
        new Message('PRC_PRI', 195, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [res1._groupName, $toString_6(res1._conditionValue), res2._groupName, $toString_6(res2._conditionValue)]));
      }
      $setExclusionGroupInactive(this$static, exclStep.group2.exclusionGroupTO.name_0, exclConditions, exclGroupValues, exclCondValues);
    }
     else {
      if (this$static.isCalcTrace) {
        new Message('PRC_PRI', 194, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [exclStep.group2.exclusionGroupTO.name_0]));
        procedureC?new Message('PRC_PRI', 195, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [res1._groupName, $toString_6(res1._conditionValue), res2._groupName, $toString_6(res2._conditionValue)])):new Message('PRC_PRI', 195, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [res2._groupName, $toString_6(res2._conditionValue), res1._groupName, $toString_6(res1._conditionValue)]));
      }
      $setExclusionGroupInactive(this$static, exclStep.group1.exclusionGroupTO.name_0, exclConditions, exclGroupValues, exclCondValues);
    }
  }
}

function $exclusionProcedureD(this$static, exclStep, exclConditions, exclGroupValues, exclCondValues){
  var exclGroupTraceInfo1, res1;
  exclGroupTraceInfo1 = null;
  this$static.isCalcTrace && (exclGroupTraceInfo1 = new ExclusionGroupTraceInfo);
  res1 = $determineExclusionGroupValue(this$static, exclStep.group1.exclusionGroupTO.name_0, exclConditions, exclGroupValues, exclCondValues, exclGroupTraceInfo1);
  if (res1._inactive == 32) {
    this$static.isCalcTrace && new Message('PRC_PRI', 194, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [exclStep.group1.exclusionGroupTO.name_0]));
    $setExclusionGroupInactive(this$static, exclStep.group2.exclusionGroupTO.name_0, exclConditions, exclGroupValues, exclCondValues);
  }
}

function $processExclusionProcedureBandE(this$static, smallestStepNoParam, exclConditions, exclCondValues, exclGroupsForProc, procedureB){
  var condTypeName, exGr, exclCond, exclCondLowerBound, exclCondValueIter, exclStepNo, iter, result, searchExclCond, smallestStepNo, stepNo;
  smallestStepNo = smallestStepNoParam;
  stepNo = procedureB?99999:0;
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(exclGroupsForProc.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    exGr = dynamicCast($next_3(iter), 197);
    exclCondLowerBound = new ExclusionCondition(exGr.exclusionGroupTO.name_0, null, stepNo, 0, null);
    for (exclCondValueIter = $iterator_1(new AbstractNavigableMap$NavigableKeySet((new TreeSet_1(exclCondValues.map_0.tailMap(exclCondLowerBound, true))).map_0)); $hasNext_0(exclCondValueIter.val$entryIterator2.iter);) {
      exclCond = dynamicCast($next_3(exclCondValueIter), 31);
      if (!!exclCond && $equals_7(exclCond._groupName, exGr.exclusionGroupTO.name_0)) {
        condTypeName = exclCond._condTypeName;
        searchExclCond = new ExclusionCondition(null, condTypeName, exclCond._stepNo, exclCond.counter, null);
        result = dynamicCast(find_0(exclConditions, searchExclCond), 31);
        if (!!result && $equals_7(result._condTypeName, condTypeName) && result._count > 1) {
          exclStepNo = $exclusionProcedureBandE(this$static, result, procedureB);
          smallestStepNo > exclStepNo && (smallestStepNo = exclStepNo);
        }
      }
       else {
        break;
      }
    }
  }
  return smallestStepNo;
}

function $resetExclusion(this$static, pricingType, smallestStepNoParam){
  var condTypeName, inactive, iterator, prCond, smallestStepNo;
  smallestStepNo = smallestStepNoParam;
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    prCond = dynamicCast($next_3(iterator), 15);
    condTypeName = prCond.getConditionTypeName();
    inactive = prCond.m_inactive;
    if (condTypeName != null && ($clinit_SAPString() , $indexOf('XY', fromCodePoint(inactive)) >= 0) && ($clinit_SAPString() , $indexOf('EF', fromCodePoint(prCond.m_control)) < 0 || inactive != 88)) {
      (inactive == 89 || pricingType != 70) && (prCond.m_inactive = 32);
      prCond.stepNumber < smallestStepNo && (smallestStepNo = prCond.stepNumber);
    }
     else {
      continue;
    }
  }
  return smallestStepNo;
}

function $setCalcTrace(this$static, isCalcTrace){
  this$static.isCalcTrace = isCalcTrace;
}

function $setConditions(this$static, conditions){
  this$static.conditions = conditions;
}

function $setExclusionGroupInactive(this$static, exclGroupName, exclConditions, exclGroupValues, exclCondValues){
  var condResult, condTypeName, exclCond, exclGroup, iterator, searchExclCond, searchExclGroup;
  searchExclGroup = new ExclusionCondition(exclGroupName, null, 0, 0, null);
  exclGroup = dynamicCast(find_0(exclGroupValues, searchExclGroup), 31);
  !!exclGroup && $equals_7(exclGroup._groupName, exclGroupName) && (exclGroup._inactive = 65);
  searchExclGroup = new ExclusionCondition(exclGroupName, null, 0, 0, null);
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet((new TreeSet_1(exclCondValues.map_0.tailMap(searchExclGroup, true))).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    exclCond = dynamicCast($next_3(iterator), 31);
    if (!!exclCond && $equals_7(exclCond._groupName, exclGroupName)) {
      condTypeName = exclCond._condTypeName;
      searchExclCond = new ExclusionCondition(null, condTypeName, exclCond._stepNo, exclCond.counter, null);
      condResult = dynamicCast(find_0(exclConditions, searchExclCond), 31);
      if (!!condResult && $equals_7(condResult._condTypeName, condTypeName) && condResult._inactive == 32) {
        condResult._inactive = 65;
        $traceExclusionTypeCorDorF(this$static, condResult);
      }
    }
     else {
      break;
    }
  }
}

function $setExclusionProcedure(this$static, exclusionProcedure){
  this$static.exclusionProcedure = exclusionProcedure;
  $buildExclusionConainers(this$static);
}

function $setExclusionTracer(this$static, exclusionTracer){
  this$static.exclusionTracer = exclusionTracer;
}

function $setItemReturn(this$static, returnItem){
  this$static.m_isReturn = returnItem;
}

function $traceExclusionTypeA(this$static, bigExclCondition, smallExclCondition){
  var exclCondTrace, exclInfo, exclInfo2, exclusionConditionsWithCounter, i_0;
  if (this$static.isCalcTrace) {
    exclInfo = new ExclusionTraceInfo;
    $setStepNumber_0(exclInfo, bigExclCondition._stepNo);
    $setCounter_0(exclInfo, bigExclCondition.counter);
    new Message('PRC_PRI', 190, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [smallExclCondition._condTypeName]));
    new Message('PRC_PRI', 191, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [bigExclCondition._condTypeName, $toString_6(bigExclCondition._conditionValue), smallExclCondition._condTypeName, $toString_6(smallExclCondition._conditionValue)]));
    $addInfo(this$static.exclusionTracer, exclInfo);
    if (bigExclCondition._count > 1) {
      exclusionConditionsWithCounter = bigExclCondition.exclusionConditionsWithCounter;
      for (i_0 = 0; i_0 < exclusionConditionsWithCounter.arrayList.array.length; i_0++) {
        exclCondTrace = (checkArrayElementIndex(i_0, exclusionConditionsWithCounter.arrayList.array.length) , dynamicCast($get_13(exclusionConditionsWithCounter.arrayList, i_0), 158));
        exclInfo2 = new ExclusionTraceInfo;
        $setStepNumber_0(exclInfo2, bigExclCondition._stepNo);
        $setCounter_0(exclInfo2, exclCondTrace.counter);
        new Message('PRC_PRI', 190, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [smallExclCondition._condTypeName]));
        new Message('PRC_PRI', 191, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [bigExclCondition._condTypeName, $toString_6(bigExclCondition._conditionValue), smallExclCondition._condTypeName, $toString_6(smallExclCondition._conditionValue)]));
        $addInfo(this$static.exclusionTracer, exclInfo2);
      }
    }
  }
}

function $traceExclusionTypeB(this$static, bigPrCond, smallPrCond){
  var exclInfo;
  if (this$static.isCalcTrace) {
    exclInfo = new ExclusionTraceInfo;
    bigPrCond.getConditionTypeName();
    $setStepNumber_0(exclInfo, bigPrCond.stepNumber);
    $setCounter_0(exclInfo, bigPrCond.counter);
    'Inactive due to condition ' + smallPrCond.getConditionTypeName() + ' with smaller condition value';
    new Message('PRC_PRI', 192, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [smallPrCond.getConditionTypeName()]));
    'Condition ' + bigPrCond.getConditionTypeName() + ' with value ' + $getConditionValue(bigPrCond).m_value + ' &gt; ' + smallPrCond.getConditionTypeName() + ' with value ' + $getConditionValue(smallPrCond).m_value;
    new Message('PRC_PRI', 193, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [bigPrCond.getConditionTypeName(), $toString_6($getConditionValue(bigPrCond).m_value), smallPrCond.getConditionTypeName(), $toString_6($getConditionValue(smallPrCond).m_value)]));
    $addInfo(this$static.exclusionTracer, exclInfo);
  }
}

function $traceExclusionTypeCorDorF(this$static, condResult){
  var exclCondTrace, exclInfo, exclInfo2, exclusionConditionsWithCounter, i_0;
  if (this$static.isCalcTrace) {
    exclInfo = new ExclusionTraceInfo;
    $setStepNumber_0(exclInfo, condResult._stepNo);
    $setCounter_0(exclInfo, condResult.counter);
    $addInfo(this$static.exclusionTracer, exclInfo);
    if (condResult._count > 1) {
      exclusionConditionsWithCounter = condResult.exclusionConditionsWithCounter;
      for (i_0 = 0; i_0 < exclusionConditionsWithCounter.arrayList.array.length; i_0++) {
        exclCondTrace = (checkArrayElementIndex(i_0, exclusionConditionsWithCounter.arrayList.array.length) , dynamicCast($get_13(exclusionConditionsWithCounter.arrayList, i_0), 158));
        exclInfo2 = new ExclusionTraceInfo;
        $setStepNumber_0(exclInfo2, condResult._stepNo);
        $setCounter_0(exclInfo2, exclCondTrace.counter);
        $addInfo(this$static.exclusionTracer, exclInfo2);
      }
    }
  }
}

function $traceExclusionTypeE(this$static, bigPrCond, smallPrCond){
  var exclInfo;
  if (this$static.isCalcTrace) {
    exclInfo = new ExclusionTraceInfo;
    smallPrCond.getConditionTypeName();
    $setStepNumber_0(exclInfo, smallPrCond.stepNumber);
    $setCounter_0(exclInfo, smallPrCond.counter);
    'Inactive due to condition ' + bigPrCond.getConditionTypeName() + ' with greater condition value';
    new Message('PRC_PRI', 197, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [bigPrCond.getConditionTypeName()]));
    'Condition ' + bigPrCond.getConditionTypeName() + ' with value ' + $getConditionValue(bigPrCond).m_value + ' &gt; ' + smallPrCond.getConditionTypeName() + ' with value ' + $getConditionValue(smallPrCond).m_value;
    new Message('PRC_PRI', 191, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [bigPrCond.getConditionTypeName(), $toString_6($getConditionValue(bigPrCond).m_value), smallPrCond.getConditionTypeName(), $toString_6($getConditionValue(smallPrCond).m_value)]));
    $addInfo(this$static.exclusionTracer, exclInfo);
  }
}

function $traceExclusionTypeL(this$static, bigExclCondition, smallExclCondition){
  var exclCondTrace, exclInfo, exclInfo2, exclusionConditionsWithCounter, i_0;
  if (this$static.isCalcTrace) {
    exclInfo = new ExclusionTraceInfo;
    $setStepNumber_0(exclInfo, bigExclCondition._stepNo);
    $setCounter_0(exclInfo, bigExclCondition.counter);
    new Message('PRC_PRI', 190, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [smallExclCondition._condTypeName]));
    new Message('PRC_PRI', 191, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [bigExclCondition._condTypeName, $toString_6(bigExclCondition._conditionValue), smallExclCondition._condTypeName, $toString_6(smallExclCondition._conditionValue)]));
    $addInfo(this$static.exclusionTracer, exclInfo);
    if (bigExclCondition._count > 1) {
      exclusionConditionsWithCounter = bigExclCondition.exclusionConditionsWithCounter;
      for (i_0 = 0; i_0 < exclusionConditionsWithCounter.arrayList.array.length; i_0++) {
        exclCondTrace = (checkArrayElementIndex(i_0, exclusionConditionsWithCounter.arrayList.array.length) , dynamicCast($get_13(exclusionConditionsWithCounter.arrayList, i_0), 158));
        exclInfo2 = new ExclusionTraceInfo;
        $setStepNumber_0(exclInfo2, bigExclCondition._stepNo);
        $setCounter_0(exclInfo2, exclCondTrace.counter);
        new Message('PRC_PRI', 190, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [smallExclCondition._condTypeName]));
        new Message('PRC_PRI', 191, null, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [bigExclCondition._condTypeName, $toString_6(bigExclCondition._conditionValue), smallExclCondition._condTypeName, $toString_6(smallExclCondition._conditionValue)]));
        $addInfo(this$static.exclusionTracer, exclInfo2);
      }
    }
  }
}

function ExclusionProcessor(){
}

function find_0(set_0, objectToSearchFor){
  var result;
  result = new TreeSet_1(set_0.map_0.tailMap(objectToSearchFor, true));
  if (result.map_0.size_1() > 0) {
    return getKeyOrNSE(result.map_0.getFirstEntry());
  }
  return null;
}

defineClass(585, 1, $intern_21, ExclusionProcessor);
_.exclusionTracer = null;
_.isCalcTrace = false;
_.m_exclusionCondTypeNames = null;
_.m_exclusionGroups = null;
_.m_isReturn = false;
_.m_takeZeroValuesIntoAccountForExclusion = false;
var Lcom_sap_spe_pricing_transactiondata_impl_ExclusionProcessor_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ExclusionProcessor', 585, Ljava_lang_Object_2_classLit);
function ExclusionStepComparator(){
}

defineClass(609, 1, $intern_21, ExclusionStepComparator);
_.compare = function compare_20(proc1, proc2){
  var exStep1, exStep2;
  exStep1 = dynamicCast(proc1, 632);
  exStep2 = dynamicCast(proc2, 632);
  return exStep1.exclusionStepTO.counter - exStep2.exclusionStepTO.counter;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_ExclusionStepComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ExclusionStepComparator', 609, Ljava_lang_Object_2_classLit);
function ExternalPricingConditions(){
  this.conditions = new TreeSet_0(new PricingConditionTOComparator);
}

defineClass(248, 1, {248:1, 3:1}, ExternalPricingConditions);
var Lcom_sap_spe_pricing_transactiondata_impl_ExternalPricingConditions_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ExternalPricingConditions', 248, Ljava_lang_Object_2_classLit);
function $clinit_PricingCondition(){
  $clinit_PricingCondition = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingCondition_2_classLit);
  FACTOR = new PricingConditionFactor;
}

function $$init(this$static){
  this$static._scaleBaseIndicators = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, 1, 4, 1);
  this$static._conditionScales = initDim(Lcom_sap_spe_conversion_IDimensionalValue_2_classLit, $intern_24, 181, 1, 0, 1);
  this$static.m_varFactor = FACTOR;
  this$static.m_factor = FACTOR;
}

function $_determineConversionFactor(this$static, fromUnit, toUnit){
  var factor, phyVal, quaVal, result, tempPrUnit;
  factor = 1;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  if ($indexOf('DEFL', fromCodePoint(this$static.m_calculationType)) >= 0) {
    phyVal = $getPhysicalValue($multiply(fromUnit.m_value, ($clinit_PricingConstants() , TEN_THOUSAND)), dynamicCast(fromUnit.m_unit, 27));
    result = $convertTo(phyVal, dynamicCast(toUnit, 27));
    factor = __parseAndValidateDouble($toString_6(this$static.m_pricingUnit.getValue_0())) * $intern_8 / __parseAndValidateDouble($toString_6(result.m_value.m_value));
  }
   else if (67 == this$static.m_calculationType) {
    quaVal = null;
    tempPrUnit = null;
    try {
      quaVal = $getQuantityValue_0($multiply(fromUnit.m_value, ($clinit_PricingConstants() , TEN_THOUSAND)), fromUnit.m_unit.getUnitName_0(), this$static.m_pricingItem.m_product);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        $clinit_Configuration_0();
      }
       else if (instanceOf($e0, 92)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
    try {
      tempPrUnit = $getQuantityUnit(toUnit.getUnitName_0(), this$static.m_pricingItem.m_product);
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 17)) {
        $clinit_Configuration_0();
      }
       else if (instanceOf($e1, 92)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e1);
    }
    result = $convertTo(quaVal, tempPrUnit);
    factor = __parseAndValidateDouble($toString_6(this$static.m_pricingUnit.getValue_0())) * $intern_8 / __parseAndValidateDouble($toString_6(result.m_value.m_value));
  }
  return factor;
}

function $adaptCalculationTypeForReferenceConditions(this$static){
  var baseCalculationType;
  if (this$static.step.conditionType.referenceConditionType) {
    baseCalculationType = this$static.step.conditionType.pricingConditionTypeTO.calculationType;
    $clinit_PricingCustomizingConstants$CalculationType();
    $clinit_SAPString();
    ($indexOf('AHIUW', fromCodePoint(baseCalculationType)) >= 0 && (null , $indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) >= 0) || baseCalculationType == 66 && this$static.m_calculationType == 66 || (null , ($indexOf('MNOP', fromCodePoint(baseCalculationType)) >= 0 || baseCalculationType == 67) && (null , $indexOf('MNOP', fromCodePoint(this$static.m_calculationType)) >= 0 || this$static.m_calculationType == 67)) || (null , $indexOf('DE', fromCodePoint(baseCalculationType)) >= 0 && (null , $indexOf('DE', fromCodePoint(this$static.m_calculationType)) >= 0))) && (this$static.m_calculationType = baseCalculationType);
  }
}

function $adaptRateAndBaseOfFormulaBasedCondn(this$static){
  !this$static.m_conditionRate?(this$static.m_conditionRate = this$static.m_pricingDocument.m_ZeroRate):(!this$static.m_conditionRate.m_unit || $equals_7(this$static.m_conditionRate.m_unit.getUnitName_0(), '')) && $setConditionRate(this$static, this$static.m_conditionRate.m_value, this$static.m_pricingDocument._documentCurrencyUnit);
  this$static.m_conditionBase = this$static.m_pricingDocument.m_ZeroRate;
  this$static.m_pricingUnit = null;
}

function $adaptRateAndBaseToCalculationType(this$static){
  var conversionEngine;
  conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  switch (this$static.m_calculationType) {
    case 65:
    case 72:
    case 73:
      try {
        !this$static.m_conditionRate?(this$static.m_conditionRate = $getCurrencyValue_1(conversionEngine, ($clinit_PricingConstants() , ZERO_5), '%')):(this$static.m_conditionRate = $getCurrencyValue_1(conversionEngine, this$static.m_conditionRate.m_value, '%'));
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 17)) {
          $clinit_Configuration_0();
          'Call of getCurrencyValue(' + ($clinit_PricingConstants() , ZERO_5) + ', %) failed.';
          initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$toPlainString(ZERO_5) + '%']);
        }
         else 
          throw unwrap($e0);
      }

      this$static.m_pricingUnit = null;
      this$static.m_conditionBase = this$static.m_pricingDocument.m_ZeroRate;
      break;
    case 87:
      try {
        !this$static.m_conditionRate?(this$static.m_conditionRate = $getCurrencyValue_1(conversionEngine, ($clinit_PricingConstants() , ZERO_5), '%6')):(this$static.m_conditionRate = $getCurrencyValue_1(conversionEngine, this$static.m_conditionRate.m_value, '%6'));
      }
       catch ($e1) {
        $e1 = wrap($e1);
        if (instanceOf($e1, 17)) {
          $clinit_Configuration_0();
          'Call of getCurrencyValue(' + ($clinit_PricingConstants() , ZERO_5) + ', %6) failed.';
          initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$toPlainString(ZERO_5) + '%6']);
        }
         else 
          throw unwrap($e1);
      }

      this$static.m_pricingUnit = null;
      this$static.m_conditionBase = this$static.m_pricingDocument.m_ZeroRate;
      break;
    case 85:
      try {
        !this$static.m_conditionRate?(this$static.m_conditionRate = $getCurrencyValue_1(conversionEngine, ($clinit_PricingConstants() , ZERO_5), '%7')):(this$static.m_conditionRate = $getCurrencyValue_1(conversionEngine, this$static.m_conditionRate.m_value, '%7'));
      }
       catch ($e2) {
        $e2 = wrap($e2);
        if (instanceOf($e2, 17)) {
          $clinit_Configuration_0();
          initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$toPlainString(($clinit_PricingConstants() , ZERO_5)) + '%7']);
        }
         else 
          throw unwrap($e2);
      }

      this$static.m_pricingUnit = null;
      this$static.m_conditionBase = this$static.m_pricingDocument.m_ZeroRate;
      break;
    case 66:
      !this$static.m_conditionRate?(this$static.m_conditionRate = this$static.m_pricingDocument.m_ZeroRate):$setConditionRate(this$static, this$static.m_conditionRate.m_value, this$static.m_pricingDocument._documentCurrencyUnit);
      this$static.m_pricingUnit = null;
      this$static.m_conditionBase = this$static.m_pricingDocument.m_ZeroRate;
      break;
    case 71:
      $adaptRateAndBaseOfFormulaBasedCondn(this$static);
      break;
    case 81:
      !this$static.m_conditionRate?(this$static.m_conditionRate = this$static.m_pricingDocument.m_ZeroRate):(!this$static.m_conditionRate.m_unit || $equals_7(this$static.m_conditionRate.m_unit.getUnitName_0(), '')) && $setConditionRate(this$static, this$static.m_conditionRate.m_value, this$static.m_pricingDocument._documentCurrencyUnit);
      this$static.m_pricingUnit = null;
      this$static.m_conditionBase = this$static.m_pricingDocument.m_ZeroRate;
      break;
    case 67:
    case 79:
    case 80:
    case 77:
    case 78:
      !this$static.m_conditionRate?(this$static.m_conditionRate = this$static.m_pricingDocument.m_ZeroRate):$setConditionRate(this$static, this$static.m_conditionRate.m_value, this$static.m_pricingDocument._documentCurrencyUnit);
      !this$static.m_pricingUnit?(this$static.m_pricingUnit = $getPhysicalValue(($clinit_PricingConstants() , ONE_1), dynamicCast(this$static.m_pricingItem.m_salesQuantity.m_unit, 27))):(this$static.m_pricingUnit = $getPhysicalValue(this$static.m_pricingUnit.getValue_0(), dynamicCast(this$static.m_pricingItem.m_salesQuantity.m_unit, 27)));
      this$static.m_conditionBase = $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(this$static.m_pricingUnit.getUnit(), 27));
      break;
    case 69:
    case 70:
    case 76:
    case 68:
      !this$static.m_conditionRate?(this$static.m_conditionRate = this$static.m_pricingDocument.m_ZeroRate):$setConditionRate(this$static, this$static.m_conditionRate.m_value, this$static.m_pricingDocument._documentCurrencyUnit);
      !this$static.m_pricingUnit?(this$static.m_pricingUnit = $getPhysicalValue(($clinit_PricingConstants() , ONE_1), null.nullMethod())):(this$static.m_pricingUnit = $getPhysicalValue(this$static.m_pricingUnit.getValue_0(), null.nullMethod()));
      this$static.m_conditionBase = $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(this$static.m_pricingUnit.getUnit(), 27));
      break;
    case 82:
    case 83:
    case 84:
      this$static.m_inactive = 88;
      $fireSetStatusMessage_0(this$static.m_pricingItem, new WarningStatusEvent($getErrorMessage_0(valueOf_0(this$static.m_calculationType))));
      break;
    default:throw new ManualChangeNotAllowedException(151, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [valueOf_0(this$static.m_calculationType)]));
  }
}

function $basicInitialization(this$static, pricingItem){
  this$static.m_pricingDocument = pricingItem._pricingDocument;
  this$static.m_pricingItem = pricingItem;
  this$static.m_application = pricingItem.application;
  this$static.usage = pricingItem.usage;
}

function $calcAlternativeConditionBase(this$static){
  var contextAlternativeConditionBase, convResult, exc;
  contextAlternativeConditionBase = null;
  contextAlternativeConditionBase = $append_0($append_0(new StringBuffer_1('PricingCondition.calcAlternativeConditionBase'), this$static.stepNumber), this$static.counter).string;
  this$static.clearStatusMessage(new ClearAllStatusEvent(contextAlternativeConditionBase));
  if (!this$static.m_alternativeCurrencyUnit) {
    this$static.m_alternativeConditionBase = null;
    return;
  }
  if (this$static.m_pricingDocument._documentCurrencyUnit.equals$(this$static.m_alternativeCurrencyUnit) || this$static.m_calculationType != 65 && this$static.m_calculationType != 87 && this$static.m_calculationType != 85 && this$static.m_calculationType != 72 && this$static.m_calculationType != 73 && this$static.m_calculationType != 66) {
    this$static.m_alternativeConditionBase = this$static.m_conditionBase;
    return;
  }
  try {
    convResult = convertTo_0(this$static.m_conditionType.conditionTypeTO.name_0, false, dynamicCast(this$static.m_conditionBase, 209), this$static.getConditionFindingTimestamp(), $setScale(this$static.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static.m_pricingDocument._localCurrencyUnit, this$static.m_pricingItem._exchangeRateDate, null, this$static.m_alternativeCurrencyUnit, this$static.m_pricingItem.m_exchangeRateType);
    this$static.m_alternativeConditionBase = convResult.m_value;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      exc = $e0;
      this$static.setStatusMessage(new WarningStatusEvent_2(exc.getMessage_0(), contextAlternativeConditionBase));
    }
     else 
      throw unwrap($e0);
  }
}

function $calcAlternativeConditionValue(this$static){
  var condValue, contextAlternativeConditionValue, exc;
  contextAlternativeConditionValue = null;
  contextAlternativeConditionValue = $append_0($append_0(new StringBuffer_1('PricingCondition.calcAlternativeConditionValue'), this$static.stepNumber), this$static.counter).string;
  this$static.clearStatusMessage(new ClearAllStatusEvent(contextAlternativeConditionValue));
  if (!this$static.m_alternativeCurrencyUnit) {
    this$static.m_alternativeConditionValue = null;
    return;
  }
  if (this$static.m_pricingDocument._documentCurrencyUnit == this$static.m_alternativeCurrencyUnit) {
    this$static.m_alternativeConditionValue = this$static.m_conditionValue;
    return;
  }
  try {
    condValue = $getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , this$static.m_conditionValue), this$static.m_pricingDocument._documentCurrencyUnit);
    this$static.m_alternativeConditionValue = $performCurrencyConversion(this$static, condValue, this$static.m_alternativeCurrencyUnit, true).m_value;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      exc = $e0;
      this$static.setStatusMessage(new WarningStatusEvent_2(exc.getMessage_0(), contextAlternativeConditionValue));
    }
     else 
      throw unwrap($e0);
  }
}

function $calcConditionBase(this$static, calculationType){
  var condBase, contextConditionBase, lastPrice;
  contextConditionBase = $append_0($append_0(new StringBuffer_1('PricingCondition.calcConditionBase'), this$static.stepNumber), this$static.counter).string;
  this$static.clearStatusMessage(new ClearAllStatusEvent(contextConditionBase));
  condBase = null;
  if (!this$static.m_conditionType && this$static.m_calculationType != 65 && this$static.m_calculationType != 87 && this$static.m_calculationType != 85) {
    lastPrice = this$static.m_pricingItem.accumulator.m_lastPrice;
    this$static.m_fromStep != 0 || this$static.m_toStep != 0?(condBase = $determineConditionBase(this$static)):(condBase = lastPrice.m_base);
    this$static.m_pricingUnit = lastPrice.m_pricingUnit;
    this$static.m_fraction = lastPrice.m_fraction;
    this$static.m_calculationType = lastPrice.m_calculationRule;
    return condBase;
  }
  switch (calculationType) {
    case 65:
    case 85:
    case 72:
    case 73:
    case 66:
    case 87:
      this$static.m_fromStep == 0 && this$static.m_toStep == 0 && (condBase = $getSubtotal(this$static.m_pricingItem.accumulator));
      (this$static.m_fromStep != 0 || this$static.m_toStep != 0) && (condBase = $determineConditionBase(this$static));
      break;
    case 71:
    case 81:
      condBase = this$static.m_pricingItem.accumulator.m_lastPrice.m_base;
      this$static.m_pricingUnit = this$static.m_pricingItem.accumulator.m_lastPrice.m_pricingUnit;
      break;
    case 80:
    case 77:
    case 78:
    case 79:
      {
        condBase = $determineQuantityDependentConditionBase(this$static);
        $setFactor(this$static, null);
        break;
      }

    case 67:
      {
        condBase = $determineQuantityDependentConditionBase(this$static);
      }

      break;
    case 69:
    case 70:
    case 76:
    case 68:
      condBase = $determinePhysicalUnitDependentConditionBase(this$static);
      break;
    case 32:
      break;
    default:this$static.m_inactive = 88;
      $clinit_Configuration_0();
      initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [new Character(calculationType)]);
      condBase = $getPhysicalValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , $clinit_PricingConstants() , ZERO_5), dynamicCast(this$static.m_pricingItem.m_salesQuantity.m_unit, 27));
      this$static.m_pricingUnit = $getPhysicalValue((dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14) , ONE_1), dynamicCast(this$static.m_pricingItem.m_salesQuantity.m_unit, 27));
  }
  return condBase;
}

function $calcConditionValue(this$static, forAlternativeCurrency){
  var contextConditionValue, conversionEngine, e, isCurrencyConversionAlreadyPerformed, isCurrencyConversionRequired, key, lastPrice, parameter, pricingUnitOfLastPrice, pricingUnitValueOfLastPrice, quantityOfLastPrice, targetCurrencyUnit, workfield, xkbetr;
  contextConditionValue = null;
  contextConditionValue = forAlternativeCurrency?$append_0($append_0(new StringBuffer_1('PricingCondition.calcAlternativeConditionValue'), this$static.stepNumber), this$static.counter).string:$append_0($append_0(new StringBuffer_1('PricingCondition.calcConditionValue'), this$static.stepNumber), this$static.counter).string;
  this$static.clearStatusMessage(new ClearAllStatusEvent(contextConditionValue));
  if (forAlternativeCurrency && !this$static.m_alternativeCurrencyUnit) {
    return;
  }
  forAlternativeCurrency?(targetCurrencyUnit = this$static.m_alternativeCurrencyUnit):(targetCurrencyUnit = this$static.m_pricingDocument._documentCurrencyUnit);
  conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  if (!!this$static.m_conditionType && this$static.m_indicatorStructureCondition != 66) {
    this$static.isReturn_0() && ($clinit_PricingCustomizingConstants$CalculationType() , $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) < 0)?(xkbetr = $getCurrencyValue($negate(this$static.m_conditionRate.m_value), dynamicCast(this$static.m_conditionRate.m_unit, 26))):(xkbetr = this$static.m_conditionRate);
    isCurrencyConversionRequired = ($clinit_PricingCustomizingConstants$CalculationType() , $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) < 0 && !$equals_7(this$static.m_conditionRate.m_unit.getUnitName_0(), targetCurrencyUnit.getUnitName_0()));
    isCurrencyConversionAlreadyPerformed = false;
    if (isCurrencyConversionRequired && !this$static.m_currencyConversionOfValue && (!(dynamicCast(this$static.m_conditionRate.m_unit, 26).isEMUCurrency() && targetCurrencyUnit.isEMUCurrency()) || this$static.m_pricingDocument.m_takeCurrencyConversionFlagIntoAccount)) {
      isCurrencyConversionAlreadyPerformed = true;
      xkbetr = $performCurrencyConversion(this$static, xkbetr, targetCurrencyUnit, forAlternativeCurrency);
    }
     else {
      if (!!this$static.m_pricingItem && this$static.m_pricingItem._performCalcTrace) {
        key = this$static.stepNumber + '_' + this$static.counter;
        $removeStringValue(this$static.m_pricingItem.m_prCurrConvTraceResult, key);
      }
    }
    switch (this$static.m_calculationType) {
      case 65:
      case 85:
      case 72:
      case 73:
      case 87:
        if (forAlternativeCurrency) {
          if (this$static.m_alternativeConditionBase) {
            workfield = $multiply(this$static.m_alternativeConditionBase.getValue_0(), xkbetr.m_value);
          }
           else {
            this$static.m_alternativeConditionValue = new BigDecimal_4('0');
            this$static.m_inactive = 88;
            this$static.setStatusMessage(new WarningStatusEvent_1(149, null, 'No alternative condition basis available', contextConditionValue, true));
            return;
          }
        }
         else {
          workfield = $multiply(this$static.m_conditionBase.getValue_0(), xkbetr.m_value);
        }

        workfield = $nonZeroMultiply(this$static.m_varFactor, workfield);
        workfield = $nonZeroMultiply(this$static.m_factor, workfield);
        switch (this$static.m_calculationType) {
          case 65:
          case 85:
          case 87:
            workfield = $divide(workfield, ($clinit_PricingConstants() , HUNDRED), $toString_6(workfield).length, valueOf_7(4));
            break;
          case 72:
            workfield = $divide(workfield, $add_1(($clinit_PricingConstants() , HUNDRED), xkbetr.m_value), $toString_6(workfield).length, valueOf_7(4));
            break;
          case 73:
            workfield = $divide(workfield, $subtract(($clinit_PricingConstants() , HUNDRED), xkbetr.m_value), $toString_6(workfield).length, valueOf_7(4));
        }

        workfield = $round(workfield, this$static.m_pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), this$static.m_roundingRule);
        break;
      case 66:
        workfield = xkbetr.m_value;
        workfield = $nonZeroMultiply(this$static.m_varFactor, workfield);
        workfield = $nonZeroMultiply(this$static.m_factor, workfield);
        break;
      case 32:
        workfield = $setScale(($clinit_PricingConstants() , ZERO_5), 2, ($clinit_RoundingMode() , UNNECESSARY));
        break;
      default:if (forAlternativeCurrency) {
          if (this$static.m_alternativeConditionBase) {
            workfield = $multiply(this$static.m_alternativeConditionBase.getValue_0(), xkbetr.m_value);
          }
           else {
            this$static.m_alternativeConditionValue = new BigDecimal_4('0');
            this$static.m_inactive = 88;
            this$static.setStatusMessage(new WarningStatusEvent_1(149, null, 'No alternative condition basis available', contextConditionValue, true));
            return;
          }
        }
         else {
          workfield = $multiply(this$static.m_conditionBase.getValue_0(), xkbetr.m_value);
        }

        workfield = $divide(workfield, this$static.m_pricingUnit.getValue_0(), $toString_6(workfield).length, valueOf_7(4));
        workfield = $nonZeroMultiply(this$static.m_varFactor, workfield);
        workfield = $nonZeroMultiply(this$static.m_factor, workfield);
        isCurrencyConversionAlreadyPerformed?(workfield = $round(workfield, this$static.m_pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), this$static.m_roundingRule)):(workfield = $round(workfield, this$static.m_conditionRate.m_unit.getNumberOfDecimals(), this$static.m_roundingRule));
    }
    if (isCurrencyConversionRequired && !isCurrencyConversionAlreadyPerformed) {
      xkbetr = $getCurrencyValue(workfield, dynamicCast(this$static.m_conditionRate.m_unit, 26));
      workfield = $performCurrencyConversion(this$static, xkbetr, targetCurrencyUnit, forAlternativeCurrency).m_value;
    }
    xkbetr = $getCurrencyValue(workfield, targetCurrencyUnit);
    if ($compareTo_7(xkbetr.m_value, this$static.m_pricingDocument.m_maxDBConditionValue) > 0 || $compareTo_7(xkbetr.m_value, $negate(this$static.m_pricingDocument.m_maxDBConditionValue)) < 0) {
      this$static.m_conditionValue = ($clinit_PricingConstants() , ZERO_5);
      this$static.m_inactive = 88;
      parameter = !this$static.m_conditionType?this$static.m_description:this$static.m_conditionType.conditionTypeTO.name_0;
      this$static.setStatusMessage(new ErrorStatusEvent(initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [parameter]), 802, 'Field overflow while calculating condition ' + parameter, contextConditionValue));
    }
     else {
      forAlternativeCurrency?(this$static.m_alternativeConditionValue = xkbetr.m_value):(this$static.m_conditionValue = xkbetr.m_value);
    }
  }
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  if ($indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) < 0 && (!this$static.m_exchangeRate || $signum($setScale(this$static.m_exchangeRate.resultingRate, 5, valueOf_7(4))) == 0)) {
    try {
      this$static.m_exchangeRate = $getExchangeRate_0(conversionEngine, this$static.getExchangeRateTypeLocalToDocumentCurrency(), this$static.m_conditionRate.m_unit.getUnitName_0(), this$static.m_pricingDocument._localCurrencyUnit.getUnitName_0(), this$static.getExchangeRateDateLocalToDocumentCurrency(), null);
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 9)) {
        e = $e1;
        $handleT100Error_0(this$static, e.getMessage_0(), contextConditionValue);
        try {
          this$static.m_exchangeRate = $newIdentityExchangeRate(this$static.getExchangeRateTypeLocalToDocumentCurrency(), this$static.m_pricingDocument._localCurrencyUnit.getUnitName_0(), this$static.getExchangeRateDateLocalToDocumentCurrency());
        }
         catch ($e0) {
          $e0 = wrap($e0);
          if (!instanceOf($e0, 17))
            throw unwrap($e0);
        }
      }
       else 
        throw unwrap($e1);
    }
  }
  !this$static.m_conditionType && (this$static.m_fromStep != 0?forAlternativeCurrency?(this$static.m_alternativeConditionValue = $determineConditionBase(this$static).m_value):(this$static.m_conditionValue = $determineConditionBase(this$static).m_value):forAlternativeCurrency?(this$static.m_alternativeConditionValue = this$static.m_pricingItem.accumulator.m_subtotal):(this$static.m_conditionValue = this$static.m_pricingItem.accumulator.m_subtotal));
  forAlternativeCurrency || $overwriteConditionValue(this$static, this$static);
  if (!this$static.m_conditionType && !forAlternativeCurrency && this$static.m_calculationType != 65 && this$static.m_calculationType != 87 && this$static.m_calculationType != 85) {
    lastPrice = this$static.m_pricingItem.accumulator.m_lastPrice;
    pricingUnitOfLastPrice = lastPrice.m_pricingUnit;
    quantityOfLastPrice = lastPrice.m_quantity.getValue_0();
    if ($signum(quantityOfLastPrice) != 0) {
      if ($compareTo_7(lastPrice.m_value.m_value, this$static.m_conditionValue) == 0 && $equals_7(lastPrice.m_rate.m_unit.getUnitName_0(), targetCurrencyUnit.getUnitName_0())) {
        workfield = lastPrice.m_rate.m_value;
        $setVariantConditionFactor(this$static, lastPrice.m_variantConditionFactor);
        workfield = $nonZeroMultiply(this$static.m_varFactor, workfield);
      }
       else {
        pricingUnitValueOfLastPrice = pricingUnitOfLastPrice.getValue_0();
        $compareTo_7(pricingUnitValueOfLastPrice, ($clinit_PricingConstants() , ONE_SCALE_3)) != 0?(workfield = $multiply(this$static.m_conditionValue, pricingUnitValueOfLastPrice)):(workfield = this$static.m_conditionValue);
        $compareTo_7(quantityOfLastPrice, ONE_SCALE_3) != 0 && (workfield = $divide(workfield, quantityOfLastPrice, targetCurrencyUnit.getNumberOfDecimals(), valueOf_7(4)));
        this$static.isReturn_0() && (workfield = $negate(workfield));
      }
      ($compareTo_7(workfield, ($clinit_PricingConstants() , MAX_RATE)) > 0 || $compareTo_7(workfield, MIN_RATE) < 0) && (workfield = ZERO_5);
      this$static.m_conditionRate = $getCurrencyValue(workfield, targetCurrencyUnit);
    }
    this$static.m_pricingUnit = pricingUnitOfLastPrice;
    this$static.m_fraction = lastPrice.m_fraction;
    this$static.m_conditionBase = lastPrice.m_base;
    this$static.m_calculationType = lastPrice.m_calculationRule;
  }
}

function $calcScaleBase(this$static){
  var contextScaleBase, conversionEngine, dimsn, e, res, scaleUnitName, targetUnit, unitOut;
  contextScaleBase = null;
  contextScaleBase = $append_0($append_0(new StringBuffer_1('PricingCondition.calcScaleBase'), this$static.stepNumber), this$static.counter).string;
  this$static.clearStatusMessage(new ClearAllStatusEvent(contextScaleBase));
  conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  for (dimsn = 0; dimsn < this$static._conditionScales.length; dimsn++) {
    scaleUnitName = this$static._conditionScales[dimsn].getUnitName_0();
    if ($equals_7(this$static._scaleBaseIndicators[dimsn], 'B')) {
      $clinit_PricingCustomizingConstants$CalculationType();
      $clinit_SAPString();
      $indexOf('ABHIUW', fromCodePoint(this$static.m_calculationType)) >= 0?setCheck(this$static._conditionScales, dimsn, dynamicCast(this$static.m_conditionBase, 209)):setCheck(this$static._conditionScales, dimsn, $calcConditionBase(this$static, 66));
      this$static.m_pricingItem.m_isReturn && setCheck(this$static._conditionScales, dimsn, $getCurrencyValue($multiply(this$static._conditionScales[dimsn].getValue_0(), ($clinit_PricingConstants() , MINUS_ONE)), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 26)));
      try {
        targetUnit = ($checkArg(scaleUnitName) , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, scaleUnitName));
        res = convertTo_0(this$static.getConditionTypeName(), this$static.m_pricingDocument.m_tryDirectCurrencyConversion, dynamicCast(this$static._conditionScales[dimsn], 209), this$static.m_pricingItem._exchangeRateDate, $setScale(this$static.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static.m_pricingDocument._localCurrencyUnit, this$static.m_pricingItem._exchangeRateDate, ($clinit_PricingConstants() , ZERO_5), targetUnit, this$static.m_pricingItem.m_exchangeRateType);
        setCheck(this$static._conditionScales, dimsn, $getCurrencyValue(res.m_value.m_value, targetUnit));
        !!res.m_localExchangeRate && $equals_7(res.m_localExchangeRate.fromCurrency, this$static.m_conditionRate.m_unit.getUnitName_0()) && (this$static.m_exchangeRate = res.m_localExchangeRate);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 17)) {
          this$static.setStatusMessage(new WarningStatusEvent_2('', contextScaleBase));
        }
         else if (instanceOf($e0, 36)) {
          this$static.setStatusMessage(new WarningStatusEvent_2('', contextScaleBase));
        }
         else if (instanceOf($e0, 18)) {
          e = $e0;
          this$static.setStatusMessage(new WarningStatusEvent_2(e.getMessage_0(), contextScaleBase));
        }
         else 
          throw unwrap($e0);
      }
    }
     else if ($equals_7(this$static._scaleBaseIndicators[dimsn], 'C')) {
      if (this$static.m_pricingItem.m_salesQuantity.m_unit.equals$(this$static._conditionScales[dimsn].getUnit())) {
        try {
          setCheck(this$static._conditionScales, dimsn, $getPhysicalValue_0(this$static.m_pricingItem.m_salesQuantity.m_value, this$static.m_pricingItem.m_salesQuantity.m_unit.getUnitName_0()));
        }
         catch ($e1) {
          $e1 = wrap($e1);
          if (instanceOf($e1, 17)) {
            $clinit_Configuration_0();
            initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.m_pricingItem.m_salesQuantity.m_value, this$static.m_pricingItem.m_salesQuantity.m_unit.getUnitName_0()]);
          }
           else 
            throw unwrap($e1);
        }
      }
       else {
        try {
          unitOut = $getQuantityUnit(scaleUnitName, this$static.m_pricingItem.m_product);
          res = $convertBaseToAlternativeQuantity(this$static.m_pricingItem.m_baseQuantity, unitOut);
          setCheck(this$static._conditionScales, dimsn, $getPhysicalValue_0(res.m_value.m_value, scaleUnitName));
        }
         catch ($e2) {
          $e2 = wrap($e2);
          if (instanceOf($e2, 17)) {
            $handleT100Error(this$static, 14, (this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
          }
           else if (instanceOf($e2, 92)) {
            $handleT100Error(this$static, 14, (this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
          }
           else if (instanceOf($e2, 83)) {
            $handleT100Error(this$static, 14, (this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
          }
           else if (instanceOf($e2, 18)) {
            $handleT100Error(this$static, 14, (this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
          }
           else 
            throw unwrap($e2);
        }
      }
    }
     else if ($equals_7(this$static._scaleBaseIndicators[dimsn], 'D')) {
      try {
        setCheck(this$static._conditionScales, dimsn, $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
      }
       catch ($e3) {
        $e3 = wrap($e3);
        if (instanceOf($e3, 9)) {
          $handleT100Error(this$static, 14, (this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
        }
         else 
          throw unwrap($e3);
      }
    }
     else if ($equals_7(this$static._scaleBaseIndicators[dimsn], 'E')) {
      try {
        setCheck(this$static._conditionScales, dimsn, $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
      }
       catch ($e4) {
        $e4 = wrap($e4);
        if (instanceOf($e4, 9)) {
          $handleT100Error(this$static, 14, (this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
        }
         else 
          throw unwrap($e4);
      }
    }
     else if ($equals_7(this$static._scaleBaseIndicators[dimsn], 'F')) {
      try {
        setCheck(this$static._conditionScales, dimsn, $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
      }
       catch ($e5) {
        $e5 = wrap($e5);
        if (instanceOf($e5, 9)) {
          $handleT100Error(this$static, 14, (this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
        }
         else 
          throw unwrap($e5);
      }
    }
     else if ($equals_7(this$static._scaleBaseIndicators[dimsn], 'L')) {
      try {
        setCheck(this$static._conditionScales, dimsn, $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
      }
       catch ($e6) {
        $e6 = wrap($e6);
        if (instanceOf($e6, 9)) {
          $handleT100Error(this$static, 650, (null.nullMethod() , this$static._conditionScales[dimsn].getUnitName_0() , contextScaleBase));
        }
         else 
          throw unwrap($e6);
      }
    }
     else if (isTimeScale(this$static._scaleBaseIndicators[dimsn]) && false) {
      $equals_7(this$static._scaleBaseIndicators[dimsn], 'O') && setCheck(this$static._conditionScales, dimsn, $getPhysicalValue($setScale(new BigDecimal(null.nullMethod()), 3, valueOf_7(4)), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
      $equals_7(this$static._scaleBaseIndicators[dimsn], 'P') && setCheck(this$static._conditionScales, dimsn, $getPhysicalValue($setScale(new BigDecimal(null.nullMethod()), 3, valueOf_7(4)), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
      $equals_7(this$static._scaleBaseIndicators[dimsn], 'M') && setCheck(this$static._conditionScales, dimsn, $getPhysicalValue($setScale(new BigDecimal(null.nullMethod()), 3, valueOf_7(4)), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
      $equals_7(this$static._scaleBaseIndicators[dimsn], 'N') && setCheck(this$static._conditionScales, dimsn, $getPhysicalValue($setScale(new BigDecimal(null.nullMethod()), 3, valueOf_7(4)), dynamicCast(this$static._conditionScales[dimsn].getUnit(), 27)));
    }
     else 
      $equals_7(this$static._scaleBaseIndicators[dimsn], 'TC1') && this$static.m_pricingItem._item.scaleBaseDate;
  }
}

function $calculateConditionValue(this$static, oldScaleBases, secondPricingComplete){
  var determineRateFromScale, i_0;
  if (!this$static.m_rateDeterminedFromGroupCondition && !this$static.m_manuallyChanged && this$static.m_control == 65) {
    determineRateFromScale = false;
    for (i_0 = 0; i_0 < oldScaleBases.length; i_0++) {
      if (!$equals_7(this$static._scaleBaseIndicators[i_0], '') && $compareTo_7(this$static._conditionScales[i_0].getValue_0(), oldScaleBases[i_0]) != 0) {
        determineRateFromScale = true;
        break;
      }
    }
    determineRateFromScale && $determineConditionRateFromScale(this$static, this$static.m_pricingItem.m_pricingItemIsUnchangeable);
  }
  this$static.m_calculationType != 66 || !this$static.m_isGroupCondition?($calcConditionValue(this$static, false) , $calcConditionValue(this$static, true)):(!this$static.m_pricingItem.m_pricingItemIsUnchangeable && !this$static.m_rateDeterminedFromGroupCondition && !secondPricingComplete || !this$static.m_conditionValue) && (this$static.m_conditionValue = ($clinit_PricingConstants() , ZERO_5));
}

function $calculateFactor(this$static){
  $clinit_PricingConstants();
  $clinit_SAPString();
  if ($indexOf('CD', fromCodePoint(this$static._scaleTypes == null?32:this$static._scaleTypes[0])) >= 0 && !$equals_7(this$static._scaleBaseIndicators[0], '')) {
    isTimeScale(this$static._scaleBaseIndicators[0]) || (this$static._conditionScales == null?null:this$static._conditionScales[0]).getValue_0();
    this$static.m_inactive = 88;
  }
}

function $calculateScaleBase(this$static){
  if (!$equals_7(this$static._scaleBaseIndicators[0], '') && this$static.m_conditionRecordId != null && (this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , !!this$static.conditionRecord) && !!(this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , this$static.conditionRecord).getScale()) {
    $calcScaleBase(this$static);
    $overwriteScaleBase_0(this$static, this$static);
  }
}

function $changeCalculationType(this$static, calcType){
  var processMode;
  processMode = this$static.m_pricingDocument.processMode;
  if (this$static.m_pricingItem.m_pricingItemIsUnchangeable) {
    throw new ManualChangeNotAllowedException(129, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, []));
  }
  if (this$static.m_pricingDocument.processMode == 78 && this$static.m_manual == 68) {
    throw new ManualChangeNotAllowedException(205, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
  }
  if (this$static.m_pricingDocument.processMode == 78 && !this$static.m_changeOfCalcTypeAllowed && (this$static.m_manual == 32 || this$static.m_manual == 66 || this$static.m_manual == 67)) {
    throw new ManualChangeNotAllowedException(203, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
  }
  this$static.m_calculationType = calcType;
  if (this$static.m_control != 69) {
    if (processMode != 65) {
      this$static.m_control = 67;
      this$static.m_manuallyChanged = true;
    }
     else {
      this$static.m_manuallyChanged = false;
    }
  }
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  $indexOf('ABHIUW', fromCodePoint(this$static.m_calculationType)) >= 0?(this$static.m_changeOfUnitAllowed = false):(this$static.m_changeOfUnitAllowed = this$static.m_conditionType.pricingConditionTypeTO.changeOfRateAllowed);
  $adaptRateAndBaseToCalculationType(this$static);
  $updatePricingItem_2(this$static.m_pricingDocument, this$static.m_pricingItem, this$static);
}

function $changeConditionRate(this$static, rateParam, unitNameParam, prUnitValueParam, prUnitNameParam){
  var contextConditionRate, conversionEngine, currUnit, dimension, isCreationModeForConditions, massDimension, newPricingUnit, pointsDimension, prUnitName, prUnitValue, pricUnitHasChanged, processMode, rate, unitName, volumeDimension;
  rate = rateParam;
  unitName = unitNameParam;
  prUnitValue = prUnitValueParam;
  prUnitName = prUnitNameParam;
  contextConditionRate = $append_0($append_0(new StringBuffer_1('PricingCondition.changeConditionRate'), this$static.stepNumber), this$static.counter).string;
  this$static.clearStatusMessage(new ClearAllStatusEvent(contextConditionRate));
  isCreationModeForConditions = this$static.m_pricingDocument.creationModeForConditions;
  if (isCreationModeForConditions && (this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , !!this$static.conditionRecord) && !rateParam && unitNameParam == null && !prUnitValueParam && prUnitNameParam == null) {
    return;
  }
  pricUnitHasChanged = false;
  if (!instanceOf(this$static, 74)) {
    if (this$static.m_pricingItem.m_pricingItemIsUnchangeable) {
      throw new ManualChangeNotAllowedException(129, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, []));
    }
  }
  processMode = this$static.m_pricingDocument.processMode;
  if (this$static.m_pricingDocument.processMode == 78 && this$static.m_origin != 68) {
    if (this$static.m_manual == 68 || !isCreationModeForConditions && (!this$static.m_changeOfRateAllowed && (!!rateParam || unitNameParam != null) || !this$static.m_changeOfUnitAllowed && (!!prUnitValueParam || prUnitNameParam != null) || this$static.m_manual == 66 && this$static.m_origin != 67)) {
      throw new ManualChangeNotAllowedException(205, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
    }
    if (this$static.m_fixationGroupFixRate != 32) {
      throw new ManualChangeNotAllowedException(230, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName(), this$static.m_pricingItem.m_fixationGroupName]));
    }
  }
  if (unitNameParam != null) {
    if (!$equals_7(unitNameParam, '%') && !$equals_7(unitNameParam, '%7') && ($clinit_PricingCustomizingConstants$CalculationType() , $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) >= 0)) {
      throw new ManualChangeNotAllowedException(250, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitNameParam, this$static.getConditionTypeName()]));
    }
    if (($equals_7(unitNameParam, '%') || $equals_7(unitNameParam, '%7')) && ($clinit_PricingCustomizingConstants$CalculationType() , $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) < 0)) {
      throw new ManualChangeNotAllowedException(250, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [unitNameParam, this$static.getConditionTypeName()]));
    }
    try {
      conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
      $checkArg(unitNameParam);
      $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, unitNameParam);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        throw new ManualChangeNotAllowedException(0, null);
      }
       else 
        throw unwrap($e0);
    }
  }
  if (!!prUnitValueParam && $compareTo_7(prUnitValueParam, $setScale(prUnitValueParam, 0, valueOf_7(1))) != 0) {
    throw new ManualChangeNotAllowedException(227, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName(), $toPlainString(prUnitValueParam)]));
  }
  this$static.m_pricingDocument.processMode == 78 && this$static.m_origin != 68 && $manualChangeAllowed(this$static);
  try {
    conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    $clinit_PricingCustomizingConstants$CalculationType();
    $clinit_SAPString();
    if ($indexOf('ABHIUW', fromCodePoint(this$static.m_calculationType)) < 0 && (!!prUnitValueParam && !!this$static.m_pricingUnit && $compareTo_7(prUnitValueParam, this$static.m_pricingUnit.getValue_0()) != 0 || prUnitNameParam != null && !!this$static.m_pricingUnit && !$equals_7(prUnitNameParam, this$static.m_pricingUnit.getUnitName_0()))) {
      !prUnitValueParam && (prUnitValue = this$static.m_pricingUnit.getValue_0());
      prUnitNameParam == null && (prUnitName = this$static.m_pricingUnit.getUnitName_0());
      if ($signum(prUnitValue) == 0) {
        this$static.setStatusMessage(new WarningStatusEvent_2($getErrorMessage(), contextConditionRate));
        prUnitValue = ($clinit_PricingConstants() , ONE_1);
      }
      pricUnitHasChanged = true;
      if (67 == this$static.m_calculationType || (null , $indexOf('MNOP', fromCodePoint(this$static.m_calculationType)) >= 0)) {
        this$static.m_pricingUnit = $getPhysicalValue_0(prUnitValue, prUnitName);
      }
       else {
        if ($indexOf('DEFL', fromCodePoint(this$static.m_calculationType)) >= 0) {
          newPricingUnit = $getPhysicalValue_0(prUnitValue, prUnitName);
          switch (this$static.m_calculationType) {
            case 68:
            case 69:
              {
                dimension = dynamicCast(newPricingUnit.m_unit, 27).getDimension();
                massDimension = $getMassDimension(conversionEngine.m_dimensionObjMgr);
                if (!!massDimension && !$equals_7(massDimension.m_name, dimension.m_name)) {
                  throw new ManualChangeNotAllowedException(205, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
                }
                break;
              }

            case 70:
              {
                dimension = dynamicCast(newPricingUnit.m_unit, 27).getDimension();
                volumeDimension = $getVolumeDimension(conversionEngine.m_dimensionObjMgr);
                if (!!volumeDimension && !$equals_7(volumeDimension.m_name, dimension.m_name)) {
                  throw new ManualChangeNotAllowedException(205, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
                }
                break;
              }

            case 76:
              {
                dimension = dynamicCast(newPricingUnit.m_unit, 27).getDimension();
                pointsDimension = $getPointsDimension(conversionEngine.m_dimensionObjMgr);
                if (!!pointsDimension && !$equals_7(pointsDimension.m_name, dimension.m_name)) {
                  throw new ManualChangeNotAllowedException(205, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
                }
                break;
              }

          }
          this$static.m_pricingUnit = newPricingUnit;
        }
      }
      this$static.m_fraction = ($clinit_PricingConstants() , NULL_FRACTION);
    }
    if (!!rateParam && (!this$static.m_conditionRate || rateParam != this$static.m_conditionRate.m_value) || unitNameParam != null && (!this$static.m_conditionRate || !$equals_7(unitNameParam, this$static.m_conditionRate.m_unit.getUnitName_0())) || pricUnitHasChanged || isCreationModeForConditions) {
      (unitNameParam == null || unitNameParam.length == 0) && !!this$static.m_conditionRate && (unitName = this$static.m_conditionRate.m_unit.getUnitName_0());
      currUnit = ($checkArg(unitName) , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, unitName));
      !rateParam && !!this$static.m_conditionRate && (rate = this$static.m_conditionRate.m_value);
      this$static.m_pricingDocument.processMode == 78 && this$static.m_origin != 68 && (rate = $checkConditionRate(this$static, rate, currUnit, this$static.m_pricingUnit, contextConditionRate));
      if (!!this$static.m_conditionRate && $equals_7(unitName, this$static.m_conditionRate.m_unit.getUnitName_0())) {
        this$static.m_conditionRate = $getCurrencyValue((dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14) , rate), dynamicCast(this$static.m_conditionRate.m_unit, 26));
      }
       else {
        this$static.m_conditionRate = $getCurrencyValue((dynamicCast($getEngine((null , SINGELTON_3), 'CNV', 'CNV'), 14) , rate), currUnit);
        this$static.m_exchangeRate = $getZeroExchange(this$static.m_pricingItem, this$static.m_pricingItem._pricingDocument._documentCurrencyUnit.getUnitName_0());
      }
      if (this$static.m_control != 69) {
        if (processMode != 65) {
          this$static.m_control = 67;
          this$static.m_manuallyChanged = true;
        }
         else {
          this$static.m_manuallyChanged = false;
        }
      }
      $updatePricingItem_2(this$static.m_pricingDocument, this$static.m_pricingItem, this$static);
    }
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 17)) {
      throw new ManualChangeNotAllowedException(205, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
    }
     else 
      throw unwrap($e1);
  }
}

function $checkConditionRate(this$static, rateParam, curUnit, prUnit, context){
  var convResult, curRate, factor, lowerLimit, maxValue, minValue, prLimits, rate, upperLimit;
  rate = rateParam;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  curRate = $getCurrencyValue(rateParam, curUnit);
  maxValue = $getCurrencyValue(($clinit_PricingConstants() , POS_INFINITY_FOR_MANUAL_CHANGES), curUnit);
  minValue = $getCurrencyValue(NEG_INFINITY_FOR_MANUAL_CHANGES, curUnit);
  if (this$static.m_calculationType == 71) {
    return rateParam;
  }
  (this$static.m_plusminus == 65 && $signum(rateParam) == -1 || this$static.m_plusminus == 88 && $signum(rateParam) == 1) && (rate = $negate(rateParam));
  $isDocTypeBasedRateNegationRequired(this$static, rate) && (rate = $negate(rate));
  this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static);
  if (this$static.conditionRecord) {
    upperLimit = (this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , dynamicCast(this$static.conditionRecord, 114)).getUpperLimit();
    lowerLimit = (this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , dynamicCast(this$static.conditionRecord, 114)).getLowerLimit();
    if (!!upperLimit && $signum(upperLimit.m_value) != 0 || !!lowerLimit && $signum(lowerLimit.m_value) != 0) {
      (!upperLimit || $signum(upperLimit.m_value) == 0) && (upperLimit = maxValue);
      (!lowerLimit || $signum(lowerLimit.m_value) == 0) && (lowerLimit = minValue);
      $clinit_PricingCustomizingConstants$CalculationType();
      $clinit_SAPString();
      if ($indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) < 0) {
        try {
          factor = $_determineConversionFactor(this$static, (this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , dynamicCast(this$static.conditionRecord, 114)).getPricingUnit(), prUnit);
          upperLimit = $getCurrencyValue($multiply(upperLimit.m_value, new BigDecimal(factor)), dynamicCast(upperLimit.m_unit, 26));
          lowerLimit = $getCurrencyValue($multiply(lowerLimit.m_value, new BigDecimal(factor)), dynamicCast(lowerLimit.m_unit, 26));
        }
         catch ($e0) {
          $e0 = wrap($e0);
          if (instanceOf($e0, 17)) {
            upperLimit = maxValue;
            lowerLimit = minValue;
          }
           else if (instanceOf($e0, 83)) {
            upperLimit = maxValue;
            lowerLimit = minValue;
          }
           else 
            throw unwrap($e0);
        }
      }
      if (!curUnit.equals$((this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , dynamicCast(this$static.conditionRecord, 114)).getConditionRate().m_unit)) {
        try {
          convResult = convertTo_0(this$static.m_conditionType.conditionTypeTO.name_0, this$static.m_pricingDocument.m_tryDirectCurrencyConversion, upperLimit, this$static.conditionFindingTimestamp, ZERO_5, this$static.m_pricingDocument._localCurrencyUnit, this$static.m_pricingItem._exchangeRateDate, ZERO_5, curUnit, this$static.m_pricingItem.m_exchangeRateType);
          upperLimit = convResult.m_value;
          convResult = convertTo_0(this$static.m_conditionType.conditionTypeTO.name_0, this$static.m_pricingDocument.m_tryDirectCurrencyConversion, lowerLimit, this$static.conditionFindingTimestamp, ZERO_5, this$static.m_pricingDocument._localCurrencyUnit, this$static.m_pricingItem._exchangeRateDate, ZERO_5, curUnit, this$static.m_pricingItem.m_exchangeRateType);
          lowerLimit = convResult.m_value;
        }
         catch ($e1) {
          $e1 = wrap($e1);
          if (instanceOf($e1, 36)) {
            upperLimit = maxValue;
            lowerLimit = minValue;
          }
           else 
            throw unwrap($e1);
        }
      }
      if ($compareTo_7(rate, lowerLimit.m_value) < 0) {
        this$static.setStatusMessage(new WarningStatusEvent_1(711, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$getValueAsString_0(curRate), $getValueAsString_0(lowerLimit)]), $getValueAsString_0(curRate) + ' falls below the limit ' + $getValueAsString_0(lowerLimit) + ' in condition record', context, true));
        return rate;
      }
      if ($compareTo_7(rate, upperLimit.m_value) > 0) {
        this$static.setStatusMessage(new WarningStatusEvent_1(712, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$getValueAsString_0(curRate), $getValueAsString_0(upperLimit)]), $getValueAsString_0(curRate) + ' exceeds limit ' + $getValueAsString_0(upperLimit) + ' in condition record', context, true));
        return rate;
      }
    }
  }
  prLimits = $getPricingConditionLimits(this$static.m_conditionType, this$static.m_calculationType, curUnit.getUnitName_0());
  if (!prLimits) {
    return rate;
  }
  lowerLimit = prLimits.lowerLimit;
  upperLimit = prLimits.upperLimit;
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  if ($indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) < 0) {
    try {
      factor = $_determineConversionFactor(this$static, prLimits.pricingUnit, prUnit);
      upperLimit = $getCurrencyValue($multiply(upperLimit.m_value, new BigDecimal(factor)), dynamicCast(upperLimit.m_unit, 26));
      lowerLimit = $getCurrencyValue($multiply(lowerLimit.m_value, new BigDecimal(factor)), dynamicCast(lowerLimit.m_unit, 26));
    }
     catch ($e2) {
      $e2 = wrap($e2);
      if (instanceOf($e2, 17)) {
        upperLimit = maxValue;
        lowerLimit = minValue;
      }
       else if (instanceOf($e2, 83)) {
        upperLimit = maxValue;
        lowerLimit = minValue;
      }
       else 
        throw unwrap($e2);
    }
  }
  if ($compareTo_7(rate, lowerLimit.m_value) < 0) {
    this$static.setStatusMessage(new WarningStatusEvent_1(713, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$getValueAsString_0(curRate), $getValueAsString_0(lowerLimit), this$static.getConditionTypeName()]), $getValueAsString_0(curRate) + ' falls below the l ' + $getValueAsString_0(lowerLimit) + ' for condition type ' + this$static.getConditionTypeName(), context, true));
    this$static.m_inactive = 88;
    return rate;
  }
  if ($compareTo_7(rate, upperLimit.m_value) > 0) {
    this$static.setStatusMessage(new WarningStatusEvent_1(714, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$getValueAsString_0(curRate), $getValueAsString_0(upperLimit), this$static.getConditionTypeName()]), $getValueAsString_0(curRate) + ' exceeds the limit ' + $getValueAsString_0(upperLimit) + ' for condition type ' + this$static.getConditionTypeName(), context, true));
    this$static.m_inactive = 88;
    return rate;
  }
  return rate;
}

function $checkDimensionNumber(this$static, dimNo){
  if (dimNo <= 0 || dimNo > this$static._numScaleDimensions) {
    throw new PricingRuntimeException;
  }
}

function $convertToPricingConditionTransactionData(this$static){
  var to;
  to = new PricingConditionTO;
  to.itemId = this$static.m_pricingItem._itemNumber;
  to.stepNumber = this$static.stepNumber;
  to.counter = this$static.counter;
  to.application = this$static.m_application;
  to.conditionType = this$static.getConditionTypeName();
  to.pricingDate = this$static.conditionFindingTimestamp;
  to.calculationType = this$static.m_calculationType;
  to.conditionBaseValue = this$static.m_conditionBase.getValue_0();
  to.conditionRate = this$static.m_conditionRate.m_value;
  to.conditionCurrency = this$static.m_conditionRate.m_unit.getUnitName_0();
  to.alternativeConditionCurrency = !this$static.m_alternativeCurrencyUnit?null:this$static.m_alternativeCurrencyUnit.getUnitName_0();
  to.alternativeConditionBaseValue = !this$static.m_alternativeCurrencyUnit?null:this$static.m_alternativeConditionBase.getValue_0();
  to.alternativeConditionValue = !this$static.m_alternativeCurrencyUnit?null:this$static.m_alternativeConditionValue;
  to.exchangeRate = !this$static.m_exchangeRate?null:$setScale(this$static.m_exchangeRate.resultingRate, 5, valueOf_7(4));
  to.pricingUnitValue = !this$static.m_pricingUnit?null:this$static.m_pricingUnit.getValue_0();
  to.pricingUnitUnit = !this$static.m_pricingUnit?null:this$static.m_pricingUnit.getUnitName_0();
  to.conversionNumeratorConditionUnit2BaseUnit = this$static.m_fraction.m_numerator;
  to.conversionDenominatorConditionUnit2BaseUnit = this$static.m_fraction.m_denominator;
  to.conversionExponentConditionUnit2BaseUnit = this$static.m_fraction.m_exponent;
  to.category = this$static.m_conditionCategory;
  to.statistical = this$static.m_statistical;
  to.accruals = this$static.m_accruals;
  to.invoiceList = this$static.m_invoiceList;
  to.origin = this$static.m_origin;
  to.groupCondition = this$static.m_isGroupCondition;
  to.conditionUpdate = this$static.m_update;
  to.conditionRecordId = this$static.m_conditionRecordId;
  to.accountKey = this$static.m_accountKey1;
  to.accountKeyAccrualsOrProvisions = this$static.m_accountKey2;
  to.roundingDifference = this$static.m_roundingDifference;
  to.conditionValue = this$static.m_conditionValue;
  to.conditionControl = this$static.m_control;
  to.inactive = this$static.m_inactive;
  to.conditionClass = this$static.m_conditionClass;
  to.headerConditionCounter = this$static.getHeaderCounter();
  to.conditionBaseValueFactor = $getFactor(this$static.m_varFactor);
  to.scaleBaseType = this$static._scaleBaseIndicators[0];
  to.scaleBaseValue = null;
  to.scaleCurrency = null;
  to.scaleUnit = null;
  if (this$static._conditionScales != null && !!this$static._conditionScales[0]) {
    to.scaleBaseValue = this$static._conditionScales[0].getValue_0();
    $equals_7('B', this$static._scaleBaseIndicators[0])?(to.scaleCurrency = this$static._conditionScales[0].getUnitName_0()):(to.scaleUnit = this$static._conditionScales[0].getUnitName_0());
  }
  to.interCompanyBilling = this$static.m_interCompany;
  to.configuration = this$static.m_variant;
  to.changedManually = this$static.m_manuallyChanged;
  to.variantCondition = this$static.m_varcondKey;
  to.conditionBaseValueFactorPeriod = $getFactor(this$static.m_factor);
  to.structureCondition = this$static.m_indicatorStructureCondition;
  to.taxCode = this$static.m_salesTaxCode;
  to.withholdingTaxCode = this$static.m_withholdingTaxCode;
  to.scaleType = this$static._scaleTypes == null?32:this$static._scaleTypes[0];
  to.conditionTable = !this$static.conditionRecord?null:this$static.conditionRecord.getConditionTable_1().conditionTableTO.conditionTable;
  return to;
}

function $copyAttributesFromMainCondition(this$static, conditionToCopy){
  this$static.m_groupCondition = null;
  this$static.m_headerCondition = null;
  this$static.m_rateDeterminedFromGroupCondition = false;
  $setCalculationType(this$static, conditionToCopy.m_calculationType);
  $setConditionRate(this$static, $getConditionRateValue(conditionToCopy), dynamicCast(conditionToCopy.m_conditionRate.m_unit, 26));
  conditionToCopy.m_pricingUnit?$setPricingUnit(this$static, conditionToCopy.m_pricingUnit.getValue_0(), dynamicCast(conditionToCopy.m_pricingUnit.getUnit(), 27)):(this$static.m_pricingUnit = null);
  this$static.m_origin = 66;
  $disableManualChanges(this$static);
  $setManuallyChanged(this$static, conditionToCopy.m_manuallyChanged);
  this$static.m_control = 67;
  if (conditionToCopy.m_conditionRecordId != null) {
    this$static._scaleBaseIndicators[0] = conditionToCopy._scaleBaseIndicators[0];
    this$static._scaleTypes = ((this$static._scaleTypes == null || maskUndefined(this$static._scaleTypes) === maskUndefined(($clinit_PricingConstants() , INITIAL_CHAR_ARRAY))) && (this$static._scaleTypes = initDim(C_classLit, $intern_4, 0, 1, 7, 1)) , this$static._scaleTypes);
    this$static._scaleTypes[0] = conditionToCopy._scaleTypes[0];
    this$static.conditionFindingTimestamp = conditionToCopy.conditionFindingTimestamp;
    this$static.m_accessCounter = conditionToCopy.m_accessCounter;
  }
}

function $copyObject(prcCond){
  var prcCondCopy;
  prcCondCopy = new PricingCondition;
  prcCondCopy.conditionRecord = (prcCond.m_determineConditionRecord == 0 && $determineConditionRecord(prcCond) , prcCond.conditionRecord);
  prcCondCopy.conditionFindingTimestamp = prcCond.getConditionFindingTimestamp();
  $setCounter(prcCondCopy, prcCond.counter);
  prcCondCopy.m_conditionRate = prcCond.m_conditionRate;
  prcCondCopy.m_pricingUnit = prcCond.m_pricingUnit;
  prcCondCopy.stepNumber = prcCond.stepNumber;
  prcCondCopy.m_statistical = prcCond.m_statistical;
  prcCondCopy.m_accruals = prcCond.m_accruals;
  prcCondCopy.m_headerCondition = prcCond.m_headerCondition;
  prcCondCopy.m_inactive = prcCond.m_inactive;
  prcCondCopy.m_calculationType = prcCond.m_calculationType;
  prcCondCopy.m_groupCondition = prcCond.m_groupCondition;
  prcCondCopy.m_isGroupCondition = prcCond.m_isGroupCondition;
  prcCondCopy.m_conditionBase = prcCond.m_conditionBase;
  prcCondCopy.m_pricingItem = prcCond.m_pricingItem;
  $setScaleBaseIndicator(prcCondCopy, prcCond._scaleBaseIndicators[0]);
  prcCondCopy._conditionScales = prcCond._conditionScales;
  prcCondCopy.m_conditionValue = prcCond.m_conditionValue;
  prcCondCopy.m_conditionType = prcCond.m_conditionType;
  prcCondCopy.m_conditionRecordId = prcCond.m_conditionRecordId;
  prcCondCopy.m_pricingDocument = prcCond.m_pricingDocument;
  prcCondCopy.step = prcCond.step;
  prcCondCopy.m_description = prcCond.m_description;
  prcCondCopy.m_manuallyChanged = prcCond.m_manuallyChanged;
  prcCondCopy.m_origin = prcCond.m_origin;
  prcCondCopy.m_conditionClass = prcCond.m_conditionClass;
  return prcCondCopy;
}

function $createIntervalScaleTrace(this$static, scaleBaseType, scaleRate){
  var amount, i_0, scale, scaleLevels, scaleStepTrace;
  if (!this$static.m_pricingItem) {
    return;
  }
  if (!this$static.m_pricingItem._performCalcTrace) {
    return;
  }
  if (this$static.m_inactive != 32) {
    return;
  }
  if ((this$static._scaleTypes == null?32:this$static._scaleTypes[0]) != 68) {
    return;
  }
  scaleStepTrace = $getScaleStepTrace(this$static.m_pricingItem.scaleTracer, this$static.step, this$static.counter);
  amount = null;
  if (!this$static.conditionRecord) {
    this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static);
    if (!this$static.conditionRecord) {
      return;
    }
  }
  scale = dynamicCast(this$static.conditionRecord.getScale(), 160);
  scaleLevels = throwClassCastExceptionUnlessNull(scale.scaleDimensions[0].scaleDefinition.scaleLevels);
  for (i_0 = 0; i_0 < scaleLevels.length; i_0++) {
    if (scaleLevels[i_0].nullMethod().nullMethod().nullMethod()) {
      amount = scaleLevels[i_0].nullMethod();
      break;
    }
  }
  if (!amount) {
    try {
      amount = $getPhysicalValue_0((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , this$static.m_incScaleEnd), (this$static._conditionScales == null?null:this$static._conditionScales[0]).getUnitName_0());
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (!instanceOf($e0, 17))
        throw unwrap($e0);
    }
  }
  if (!scaleRate) {
    'No scale rate maintained for scale base value: ' + ($getValueAsString(amount) + ' ' + amount.m_unit.toString$());
    $addScaleStepTrace(this$static.m_pricingItem.scaleTracer, scaleStepTrace);
    return;
  }
  $getValueAsString(amount) + ' ' + amount.m_unit.toString$() + ' -> ' + ($getValueAsString_0(scaleRate) + ' ' + scaleRate.m_unit.toString$());
  $equals_7(scaleBaseType, 'B')?amount.m_unit.getUnitName_0():amount.m_unit.getUnitName_0();
  scaleRate.m_unit.getUnitName_0();
  $getFactor(this$static.m_factor);
  $addScaleStepTrace(this$static.m_pricingItem.scaleTracer, scaleStepTrace);
}

function $deriveDataFromConditionRecord(this$static, conditionRecord){
  var scale;
  scale = null;
  if (conditionRecord) {
    this$static.m_calculationType = conditionRecord.getCalculationType_0();
    instanceOf(conditionRecord, 357) && (this$static.m_origin = 70);
    this$static.m_fraction = conditionRecord.getFractionForConversionToBaseUnit();
    this$static.m_paymentTerm = conditionRecord.getPaymentTerm();
    this$static.m_conditionRate = conditionRecord.getConditionRate();
    this$static.m_salesTaxCode = conditionRecord.getSalesTaxCode();
    this$static.m_withholdingTaxCode = conditionRecord.getWithholdingTaxCode();
    this$static.m_conditionRecordId = conditionRecord.getId_0();
    this$static.m_conditionTableName = conditionRecord.getConditionTable_1().conditionTableTO.conditionTable;
    this$static.m_conditionRecordDetermined = true;
    scale = dynamicCast(conditionRecord.getScale(), 160);
    this$static.m_pricingUnit = conditionRecord.getPricingUnit();
    $adaptCalculationTypeForReferenceConditions(this$static);
    this$static.m_calculationType == 71 && $adaptRateAndBaseOfFormulaBasedCondn(this$static);
  }
   else {
    this$static.m_fraction = ($clinit_PricingConstants() , NULL_FRACTION);
    try {
      $adaptRateAndBaseToCalculationType(this$static);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 34)) {
        throw new PricingRuntimeException_0(0);
      }
       else 
        throw unwrap($e0);
    }
  }
  $initializeMultiDimensionalScales(this$static, scale);
}

function $deriveDataFromConditionType(this$static, conditionType){
  if (conditionType) {
    this$static.m_conditionType = conditionType;
    this$static.m_calculationType = conditionType.pricingConditionTypeTO.calculationType;
    this$static.m_conditionClass = conditionType.pricingConditionTypeTO.conditionClass;
    this$static.m_conditionCategory = conditionType.pricingConditionTypeTO.conditionCategory;
    this$static.m_isGroupCondition = conditionType.pricingConditionTypeTO.groupCondition;
    this$static.m_interCompany = conditionType.pricingConditionTypeTO.interCompanyBilling;
    this$static.m_variant = conditionType.pricingConditionTypeTO.variantCondition || conditionType.pricingConditionTypeTO.conditionCategory == 79;
    this$static.m_accruals = conditionType.pricingConditionTypeTO.accrual;
    (this$static.m_accruals || conditionType.pricingConditionTypeTO.conditionClass == 71) && (this$static.m_statistical = true);
    this$static.m_invoiceList = conditionType.pricingConditionTypeTO.invoiceList;
    this$static.m_plusminus = conditionType.pricingConditionTypeTO.plusMinus;
    this$static.m_roundingRule = conditionType.pricingConditionTypeTO.roundingRule;
    this$static.m_scaleBaseFormulaNo = conditionType.pricingConditionTypeTO.scaleBaseFormulaNumber;
    this$static.m_deletionAllowed = conditionType.pricingConditionTypeTO.deletionAllowed;
    this$static.m_headerCond = conditionType.pricingConditionTypeTO.headerCondition;
    this$static.m_itemCond = conditionType.pricingConditionTypeTO.itemCondition;
    this$static.m_dataSource = conditionType.pricingConditionTypeTO.dataSource;
    this$static.m_update = conditionType.pricingConditionTypeTO.conditionUpdate;
    this$static.m_roundingDifferenceCalculation = conditionType.pricingConditionTypeTO.roundingDifferenceCalculationRequired;
    this$static.m_indicatorStructureCondition = conditionType.pricingConditionTypeTO.structureCondition;
    this$static.m_currencyConversionOfValue = conditionType.pricingConditionTypeTO.currencyConversion;
    this$static.m_changeOfCalcTypeAllowed = conditionType.pricingConditionTypeTO.changeOfCalculationTypeAllowed;
    this$static.m_description = $getConditionTypeDescription(dynamicCast($getCustomizingEngine(factory_0, conditionType.conditionTypeTO.usage), 73), conditionType.conditionTypeTO.application, conditionType.conditionTypeTO.name_0);
    this$static.m_manual = conditionType.pricingConditionTypeTO.manualEntryFlag;
    this$static.m_changeOfRateAllowed = conditionType.pricingConditionTypeTO.changeOfRateAllowed;
    this$static.m_changeOfUnitAllowed = conditionType.pricingConditionTypeTO.changeOfRateAllowed;
    this$static.m_changeOfValueAllowed = conditionType.pricingConditionTypeTO.changeOfValueAllowed;
    this$static.m_control = 65;
    this$static.m_origin = 65;
  }
   else {
    this$static.m_calculationType = 67;
    this$static.m_conditionClass = 32;
    this$static.m_conditionCategory = 32;
    this$static.m_isGroupCondition = false;
    this$static.m_interCompany = false;
    this$static.m_variant = false;
    this$static.m_accruals = false;
    this$static.m_invoiceList = false;
    this$static.m_plusminus = 32;
    this$static.m_roundingRule = 32;
    this$static.m_scaleBaseFormulaNo = 0;
    this$static.m_deletionAllowed = false;
    this$static.m_headerCond = false;
    this$static.m_itemCond = false;
    this$static.m_dataSource = ($clinit_SAPString() , null);
    this$static.m_update = false;
    this$static.m_roundingDifferenceCalculation = false;
    this$static.m_indicatorStructureCondition = 32;
    this$static.m_currencyConversionOfValue = false;
    this$static.m_changeOfCalcTypeAllowed = false;
    $disableManualChanges(this$static);
    this$static.m_control = 32;
    this$static.m_origin = 32;
  }
  $clinit_SAPString();
  $indexOf('-0m', fromCodePoint(this$static.m_conditionCategory)) >= 0 || $indexOf('FQ', fromCodePoint(this$static.m_conditionClass)) >= 0?(this$static.m_inactive = 88):(this$static.m_inactive = 32);
}

function $deriveDataFromStep(this$static, step){
  if (step) {
    this$static.m_fromStep = step.stepTO.fromStep;
    this$static.m_toStep = step.stepTO.toStep;
    this$static.m_subtotalFlag = step.stepTO.subtotalFlag;
    this$static.m_accountKey1 = step.stepTO.accountKey1;
    this$static.m_accountKey2 = step.stepTO.accountKey2;
    this$static.m_statistical = step.stepTO.statistical;
    this$static.m_baseFormulaNo = step.stepTO.baseFormulaNumber;
    this$static.m_valueFormulaNo = step.stepTO.valueFormulaNumber;
    this$static.stepNumber = step.stepTO.stepNumber;
    !step.conditionType && (this$static.m_description = $getDescription_2(step));
  }
}

function $determineConditionBase(this$static){
  var base, condition, fromStep, iterator, toStep;
  base = ($clinit_PricingConstants() , ZERO_5);
  if (this$static.m_fromStep >= this$static.stepNumber || this$static.m_toStep > this$static.stepNumber) {
    this$static.m_inactive = 88;
  }
   else {
    fromStep = this$static.m_fromStep;
    toStep = this$static.m_toStep;
    toStep <= fromStep && (toStep = fromStep);
    toStep == 0?(toStep = this$static.stepNumber - 1):toStep == this$static.stepNumber && (toStep = toStep - 1);
    for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet($getConditions(this$static.m_pricingItem, fromStep, toStep).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
      condition = dynamicCast($next_3(iterator), 15);
      if (condition.stepNumber < this$static.stepNumber) {
        $clinit_SAPString();
        $indexOf('AMXZ', fromCodePoint(condition.m_inactive)) >= 0 || (base = $add_1(base, condition.m_conditionValue));
      }
    }
  }
  return $getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , base), this$static.m_pricingDocument._documentCurrencyUnit);
}

function $determineConditionRateFromScale(this$static, itemIsUnchangeable){
  var dimsn, prScaleRate, pricingConditionRecord, recordExist, scale, scaleDimensionAmounts, value_0;
  recordExist = (this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , !!this$static.conditionRecord);
  if (this$static.m_conditionRecordId != null && ($clinit_SAPString() , $indexOf(' AB', fromCodePoint(this$static._scaleTypes == null?32:this$static._scaleTypes[0])) >= 0) && !itemIsUnchangeable && recordExist && !!(this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , this$static.conditionRecord).getScale() && this$static.m_fixationGroupFixRate == 32) {
    value_0 = ($clinit_PricingConstants() , ZERO_5);
    pricingConditionRecord = (this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static) , dynamicCast(this$static.conditionRecord, 114));
    !!pricingConditionRecord && !!pricingConditionRecord.getScale() && (this$static._numScaleDimensions = pricingConditionRecord.getScale().scaleDimensions.length);
    scale = dynamicCast(pricingConditionRecord.getScale(), 160);
    if (dynamicCast(dynamicCast(scale.scaleDimensions[0], 71).scaleDefinition, 66).getScaleType_0() == 65 || dynamicCast(dynamicCast(scale.scaleDimensions[0], 71).scaleDefinition, 66).getScaleType_0() == 66) {
      scaleDimensionAmounts = initDim(Lcom_sap_spe_condmgnt_masterdata_IScaleDimensionAmount_2_classLit, $intern_24, 358, this$static._numScaleDimensions, 0, 1);
      for (dimsn = 0; dimsn < this$static._numScaleDimensions; dimsn++) {
        setCheck(scaleDimensionAmounts, dimsn, $getScaleDimensionAmount(scale, dimsn, this$static._conditionScales[dimsn]));
      }
      prScaleRate = $getScaleRate_0(scale, scaleDimensionAmounts, true);
      !prScaleRate?(value_0 = ZERO_5):(value_0 = prScaleRate.conditionRate.m_value);
      this$static.createScaleTrace(scale, scaleDimensionAmounts, prScaleRate);
    }
    this$static.m_conditionRate = $getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , value_0), dynamicCast(this$static.m_conditionRate.m_unit, 26));
  }
}

function $determineConditionRecord(this$static){
  var accesses, conditionRecords, conditionTable, cr, customizingEngine, i_0, i0, ids, j, k_0, mainCondType, mainCondTypeAccesses, mainConditionRecord, masterDataEngine, prConds, save, scr;
  if (this$static.m_determineConditionRecord != 0 || this$static.m_conditionRecordId == null) {
    return;
  }
  this$static.m_determineConditionRecord = 3;
  cr = null;
  masterDataEngine = $getMasterDataEngine(factory_2, this$static.usage);
  if (this$static.m_conditionTableName != null) {
    customizingEngine = $getPricingCustomizingEngine(this$static.usage);
    conditionTable = $getConditionTableByName(customizingEngine, this$static.m_application, this$static.m_conditionTableName);
    if (conditionTable) {
      ids = new ArrayList_0(1);
      $add_3(ids, this$static.m_conditionRecordId);
      conditionRecords = $createConditionRecords_0(masterDataEngine.conditionRecordObjectManager, conditionTable, ids);
      conditionRecords.length == 1 && (cr = conditionRecords[0]);
    }
  }
   else {
    if (!!this$static.m_conditionType && !!this$static.m_conditionType.accessSequence) {
      accesses = this$static.m_conditionType.accessSequence.accesses;
      for (i0 = 0; i0 < accesses.length; i0++) {
        ids = new ArrayList_0(1);
        $add_3(ids, this$static.m_conditionRecordId);
        conditionRecords = $getConditionRecords(masterDataEngine, accesses[i0].conditionTable, ids);
        conditionRecords.length == 1 && (cr = conditionRecords[0]);
        if (cr) {
          break;
        }
      }
      if (!cr) {
        if (this$static.m_pricingItem) {
          prConds = $getPricingConditions_3(this$static.m_pricingItem, true, false);
          for (i_0 = 0; i_0 < prConds.length && !cr; i_0++) {
            if (prConds[i_0] == this$static) {
              continue;
            }
            mainConditionRecord = prConds[i_0].getConditionRecord();
            if (mainConditionRecord) {
              for (j = 0; j < mainConditionRecord.getSupplementaryConditionRecords().length; j++) {
                if ($equals_7(mainConditionRecord.getSupplementaryConditionRecords()[j].getId_0(), this$static.m_conditionRecordId)) {
                  cr = dynamicCast(mainConditionRecord.getSupplementaryConditionRecords()[j], 357);
                  mainCondType = dynamicCast(cr, 357).getMainConditionRecord().conditionType;
                  if (mainCondType.getAccessSequence_1()) {
                    mainCondTypeAccesses = mainCondType.getAccessSequence_1().accesses;
                    for (k_0 = 0; k_0 < mainCondTypeAccesses.length; k_0++) {
                      ids = new ArrayList_0(1);
                      $add_3(ids, this$static.m_conditionRecordId);
                      conditionRecords = $getConditionRecords(masterDataEngine, mainCondTypeAccesses[k_0].conditionTable, ids);
                      scr = null;
                      conditionRecords.length == 1 && (scr = conditionRecords[0]);
                      if (scr) {
                        break;
                      }
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  if (cr) {
    this$static.conditionRecord = cr;
    this$static.m_conditionTableName = cr.getConditionTable_1().conditionTableTO.conditionTable;
    if (this$static.conditionRecord.getScale()) {
      save = this$static._conditionScales;
      $initializeMultiDimensionalScales(this$static, dynamicCast(this$static.conditionRecord.getScale(), 160));
      !!save[0] && setCheck(this$static._conditionScales, 0, save[0]);
    }
    this$static.m_determineConditionRecord = 1;
  }
   else {
    this$static.m_determineConditionRecord = 2;
  }
}

function $determineExchangeRate_0(this$static, prItem){
  var contextExchangeRate, conversionEngine, exRateDate, exRateTimestamp;
  contextExchangeRate = null;
  contextExchangeRate = $append_0($append_0(new StringBuffer_1('PricingCondition.determineExchangeRate'), this$static.stepNumber), this$static.counter).string;
  this$static.clearStatusMessage(new ClearAllStatusEvent(contextExchangeRate));
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  if ($indexOf('AHIUW', fromCodePoint(this$static.m_calculationType)) < 0 && !this$static.m_exchangeRate) {
    exRateTimestamp = this$static.getConditionFindingTimestamp();
    exRateDate = exRateTimestamp;
    if ($equals_7(this$static.m_conditionRate.m_unit.getUnitName_0(), prItem._pricingDocument._documentCurrencyUnit.getUnitName_0())) {
      this$static.m_exchangeRate = prItem.m_exchangeRate;
    }
     else {
      conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
      try {
        this$static.m_exchangeRate = $getExchangeRate_0(conversionEngine, prItem.m_exchangeRateType, this$static.m_conditionRate.m_unit.getUnitName_0(), prItem._pricingDocument._localCurrencyUnit.getUnitName_0(), exRateTimestamp, null);
      }
       catch ($e1) {
        $e1 = wrap($e1);
        if (instanceOf($e1, 9)) {
          try {
            this$static.m_exchangeRate = $newIdentityExchangeRate(prItem.m_exchangeRateType, this$static.m_conditionRate.m_unit.getUnitName_0(), exRateDate);
          }
           catch ($e0) {
            $e0 = wrap($e0);
            if (!instanceOf($e0, 17))
              throw unwrap($e0);
          }
          $handleT100Error(this$static, 208, (this$static.m_conditionRate.m_unit.getUnitName_0() , prItem._pricingDocument._localCurrencyUnit.getUnitName_0() , contextExchangeRate));
        }
         else 
          throw unwrap($e1);
      }
    }
  }
}

function $determinePhysicalUnitDependentConditionBase(this$static){
  var condBase, contextConditionBase;
  try {
    null.nullMethod(dynamicCast(this$static.m_pricingUnit.getUnit(), 27));
    condBase = null.nullField;
    this$static.m_fraction = null.nullField;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      this$static.m_fraction = ($clinit_PricingConstants() , NULL_FRACTION);
      condBase = $getPhysicalValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , ZERO_5), null.nullMethod());
      contextConditionBase = $append_0($append_0(new StringBuffer_1('PricingCondition.calcConditionBase'), this$static.stepNumber), this$static.counter).string;
      $handleT100Error(this$static, 14, (this$static.m_pricingUnit.getUnitName_0() , contextConditionBase));
    }
     else 
      throw unwrap($e0);
  }
  return condBase;
}

function $determineQuantityDependentConditionBase(this$static){
  var condBase, contextConditionBase, convResult, res, unitOut;
  if ($equals_7(this$static.m_pricingItem.m_salesQuantity.m_unit.getUnitName_0(), this$static.m_pricingUnit.getUnitName_0())) {
    condBase = this$static.m_pricingItem.m_salesQuantity;
    this$static.m_fraction = this$static.m_pricingItem._salesFraction;
  }
   else {
    dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    try {
      if (this$static.m_fraction.m_denominator == 0 || this$static.m_fraction.m_numerator == 0) {
        unitOut = $getQuantityUnit(this$static.m_pricingUnit.getUnitName_0(), this$static.m_pricingItem.m_product);
        res = $convertBaseToAlternativeQuantity(this$static.m_pricingItem.m_baseQuantity, unitOut);
        condBase = res.m_value;
        this$static.m_fraction = res.m_fraction5;
      }
       else {
        convResult = convertWithFactorsAndExponent(__parseAndValidateDouble($toString_6(this$static.m_pricingItem.m_baseQuantity.m_value)), this$static.m_fraction.m_denominator, this$static.m_fraction.m_numerator, -this$static.m_fraction.m_exponent);
        condBase = $getPhysicalValue_0(convResult.m_value, this$static.m_pricingItem.m_baseQuantity.m_unit.getUnitName_0());
      }
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        this$static.m_fraction = ($clinit_PricingConstants() , NULL_FRACTION);
        condBase = $getPhysicalValue(ZERO_5, dynamicCast(this$static.m_pricingItem.m_baseQuantity.m_unit, 27));
        contextConditionBase = $append_0($append_0(new StringBuffer_1('PricingCondition.calcConditionBase'), this$static.stepNumber), this$static.counter).string;
        $handleT100Error(this$static, 14, (this$static.m_pricingUnit.getUnitName_0() , contextConditionBase));
      }
       else 
        throw unwrap($e0);
    }
  }
  return condBase;
}

function $disableManualChanges(this$static){
  this$static.m_manual = 68;
  this$static.m_changeOfRateAllowed = false;
  this$static.m_changeOfUnitAllowed = false;
  this$static.m_changeOfValueAllowed = false;
  this$static.m_changeOfCalcTypeAllowed = false;
  this$static.m_deletionAllowed = false;
}

function $formatAppend(str, s){
  var spaces;
  if (s != null && s.length < 20) {
    spaces = $toCharArray('                    ');
    str.string += s;
    $append_2(str, spaces, 20 - s.length);
    str.string += '| ';
  }
}

function $getConditionBaseValue(this$static){
  if (!this$static.m_conditionBase) {
    return $clinit_PricingConstants() , ZERO_5;
  }
  return this$static.m_conditionBase.getValue_0();
}

function $getConditionRateUnitName(this$static){
  if (!this$static.m_conditionRate) {
    return null;
  }
  return this$static.m_conditionRate.m_unit.getUnitName_0();
}

function $getConditionRateValue(this$static){
  if (!this$static.m_conditionRate) {
    return $clinit_PricingConstants() , ZERO_5;
  }
  return this$static.m_conditionRate.m_value;
}

function $getConditionRecord(this$static){
  this$static.m_determineConditionRecord == 0 && $determineConditionRecord(this$static);
  return this$static.conditionRecord;
}

function $getConditionScale(this$static){
  return this$static._conditionScales == null?null:this$static._conditionScales[0];
}

function $getConditionScale_0(this$static, dimNo){
  $checkDimensionNumber(this$static, dimNo);
  dimNo -= 1;
  return this$static._conditionScales[dimNo];
}

function $getConditionValue(this$static){
  if (!this$static.m_conditionValue) {
    return null;
  }
  return $getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , this$static.m_conditionValue), this$static.m_pricingDocument._documentCurrencyUnit);
}

function $getDummyCondition(this$static){
  var dummyCondition;
  dummyCondition = ($clinit_DummyPricingCondition() , $clinit_DummyPricingCondition() , SINGELTON_4);
  dummyCondition.pricingCondition = this$static;
  return dummyCondition;
}

function $getErrorMessage(){
  try {
    return $getMessage($getMessageResource($getMessageResourceManager((!instance_1 && (instance_1 = new ResourceManagerFactory) , 'PRC_PRI')), (getActiveISOLanguage() , $clinit_LocaleInfo())), 0);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration_0();
      return '';
    }
     else 
      throw unwrap($e0);
  }
}

function $getErrorMessage_0(){
  try {
    return $getMessage_0($getMessageResource($getMessageResourceManager((!instance_1 && (instance_1 = new ResourceManagerFactory) , 'PRC_PRI')), (getActiveISOLanguage() , $clinit_LocaleInfo())), 150);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration_0();
      return '';
    }
     else 
      throw unwrap($e0);
  }
}

function $getErrorMessage_1(msgNo){
  try {
    return $getMessage_0($getMessageResource($getMessageResourceManager((!instance_1 && (instance_1 = new ResourceManagerFactory) , 'PRC_PRI')), (getActiveISOLanguage() , $clinit_LocaleInfo())), msgNo);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration_0();
      return '';
    }
     else 
      throw unwrap($e0);
  }
}

function $getGroupCondIndex(this$static){
  if (this$static.m_groupCondition) {
    return this$static.m_groupCondition.m_index;
  }
  return -1;
}

function $handleT100Error(this$static, errMsgNo, context){
  $handleT100Error_0(this$static, $getErrorMessage_1(errMsgNo), context);
}

function $handleT100Error_0(this$static, message, context){
  this$static.m_inactive = 88;
  this$static.setStatusMessage(new WarningStatusEvent_2(message, context));
}

function $hashCode_4(this$static){
  var hash;
  hash = 217 + $hashCode_4(this$static);
  return hash;
}

function $independentInitialization(this$static){
  this$static.m_roundingDifference = ($clinit_PricingConstants() , ZERO_5);
  this$static.m_manuallyChanged = false;
  this$static.m_rateDeterminedFromGroupCondition = false;
}

function $initializeConditionBase(this$static){
  this$static.m_conditionBase = null;
  this$static.m_alternativeConditionBase = null;
}

function $initializeMultiDimensionalScales(this$static, scale){
  var dimsn, dimsn0, prCondRecord;
  if (scale) {
    this$static._numScaleDimensions = scale.scaleDimensions.length;
    this$static._scaleTypes = initDim(C_classLit, $intern_4, 0, this$static._numScaleDimensions, 7, 1);
    this$static._conditionScales = initDim(Lcom_sap_spe_conversion_IDimensionalValue_2_classLit, $intern_24, 181, this$static._numScaleDimensions, 0, 1);
    this$static._scaleBaseIndicators = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, this$static._numScaleDimensions, 4, 1);
    for (dimsn0 = 0; dimsn0 < this$static._numScaleDimensions; dimsn0++) {
      this$static._scaleBaseIndicators[dimsn0] = '';
    }
    this$static._numScaleDimensions > 1 && (this$static.m_isGroupCondition = false , this$static.m_groupCondition = null);
    this$static._scaleBaseIndicators[0] = scale.scaleDimensions[0].scaleDefinition.scaleDefinitionTO.scaleBaseType;
    for (dimsn = 0; dimsn < scale.scaleDimensions.length; dimsn++) {
      this$static._scaleBaseIndicators[dimsn] = scale.scaleDimensions[dimsn].scaleDefinition.scaleDefinitionTO.scaleBaseType;
      if (!$equals_7(this$static._scaleBaseIndicators[dimsn], '')) {
        dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
        $equals_7(this$static._scaleBaseIndicators[dimsn], 'B')?setCheck(this$static._conditionScales, dimsn, $getCurrencyValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(dynamicCast(dynamicCast(scale.scaleDimensions[dimsn], 71).scaleDefinition, 66).getScaleUnit(), 26))):$equals_7(this$static._scaleBaseIndicators[dimsn], 'C')?setCheck(this$static._conditionScales, dimsn, $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(dynamicCast(dynamicCast(scale.scaleDimensions[dimsn], 71).scaleDefinition, 66).getScaleUnit(), 27))):isTimeScale(this$static._scaleBaseIndicators[dimsn])?setCheck(this$static._conditionScales, dimsn, $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(dynamicCast(dynamicCast(scale.scaleDimensions[dimsn], 71).scaleDefinition, 66).getScaleUnit(), 27))):$equals_7(this$static._scaleBaseIndicators[dimsn], 'TC1')?setCheck(this$static._conditionScales, dimsn, $getCurrencyValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(dynamicCast(dynamicCast(scale.scaleDimensions[dimsn], 71).scaleDefinition, 66).getScaleUnit(), 26))):setCheck(this$static._conditionScales, dimsn, $getPhysicalValue(($clinit_PricingConstants() , ZERO_5), dynamicCast(dynamicCast(dynamicCast(scale.scaleDimensions[dimsn], 71).scaleDefinition, 66).getScaleUnit(), 27)));
      }
      this$static._scaleTypes[dimsn] = dynamicCast(dynamicCast(scale.scaleDimensions[dimsn], 71).scaleDefinition, 66).getScaleType_0();
      prCondRecord = dynamicCast(this$static.conditionRecord, 114);
      $clinit_SAPString();
      $indexOf('CD', fromCodePoint(this$static._scaleTypes[dimsn])) >= 0 && !!prCondRecord && !prCondRecord.isUsingIntervalScales() && (this$static._scaleTypes[dimsn] = 66);
    }
  }
   else {
    this$static._numScaleDimensions = 0;
    this$static._scaleTypes = ($clinit_PricingConstants() , INITIAL_CHAR_ARRAY);
    this$static._scaleTypes[0] = 32;
    this$static._scaleBaseIndicators[0] = '';
  }
}

function $isDeletionAllowed(this$static){
  return this$static.m_origin == 67 || this$static.m_deletionAllowed;
}

function $isDocTypeBasedRateNegationRequired(this$static, rate){
  if (this$static.m_pricingDocument.document_0.returnDocIndicator && instanceOf(this$static, 74) && this$static.m_isGroupCondition && this$static.m_calculationType == 66) {
    if (this$static.m_plusminus == 65 && $signum(rate) == 1 || this$static.m_plusminus == 88 && $signum(rate) == -1) {
      return true;
    }
  }
  return false;
}

function $manualChangeAllowed(this$static){
  if (!$isAuthorizedForEdit(this$static.m_pricingDocument, this$static.step)) {
    throw new ManualChangeNotAllowedException(207, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
  }
  if (!instanceOf(this$static, 74) && !this$static.m_itemCond) {
    throw new ManualChangeNotAllowedException(214, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
  }
  if (instanceOf(this$static, 74) && !this$static.m_headerCond) {
    throw new ManualChangeNotAllowedException(213, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [this$static.getConditionTypeName()]));
  }
}

function $overwriteConditionBase_0(this$static, condition){
  if (this$static.m_baseFormulaNo != 0) {
    try {
      $getBaseFormula();
      null.nullMethod();
      try {
        this$static.m_pricingItem._performCalcTrace && instanceOf(condition, 15)?null:null.nullMethod();
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          null.nullMethod($clinit_Configuration_0());
          condition.setInactive(88);
        }
         else 
          throw unwrap($e0);
      }
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (!instanceOf($e1, 52))
        throw unwrap($e1);
    }
  }
}

function $overwriteConditionValue(this$static, condition){
  var conditionValue;
  conditionValue = null;
  if (this$static.m_valueFormulaNo != 0) {
    try {
      $getValueFormula();
      null.nullMethod();
      try {
        this$static.m_pricingItem?this$static.m_pricingItem._performCalcTrace && instanceOf(condition, 15)?(conditionValue = null):(conditionValue = null.nullMethod()):(conditionValue = null.nullMethod(dynamicCast(condition, 690)));
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          null.nullMethod($clinit_Configuration_0());
          condition.setInactive(88);
        }
         else 
          throw unwrap($e0);
      }
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (!instanceOf($e1, 52))
        throw unwrap($e1);
    }
  }
  if (conditionValue) {
    conditionValue = $setScale(conditionValue, this$static.m_pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), valueOf_7(4));
    condition.setConditionValue(conditionValue);
  }
}

function $overwriteScaleBase_0(this$static, condition){
  if (this$static.m_scaleBaseFormulaNo != 0) {
    try {
      $getScaleBaseFormula();
      null.nullMethod();
      try {
        this$static.m_pricingItem._performCalcTrace && instanceOf(condition, 15)?$overwriteScaleBaseWithTrace(this$static.m_pricingItem.formulaTracer, condition, this$static.step):null.nullMethod();
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          null.nullMethod($clinit_Configuration_0());
          condition.setInactive(88);
        }
         else 
          throw unwrap($e0);
      }
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (!instanceOf($e1, 52))
        throw unwrap($e1);
    }
  }
}

function $performCurrencyConversion(this$static, currencyValueParam, targetCurrencyUnit, forAlternativeCurrency){
  var contextConditionValue, convResult, currencyValue, e, key;
  try {
    if (!!this$static.m_pricingItem && this$static.m_pricingItem._performCalcTrace) {
      convResult = convertTo(this$static, this$static.m_pricingDocument.m_tryDirectCurrencyConversion, currencyValueParam, this$static.getConditionFindingTimestamp(), $setScale(this$static.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static.m_pricingDocument._localCurrencyUnit, this$static.getExchangeRateDateLocalToDocumentCurrency(), forAlternativeCurrency?null:$setScale(this$static.getExchangeRateLocalToDocumentCurrency().resultingRate, 5, valueOf_7(4)), targetCurrencyUnit, this$static.getExchangeRateTypeLocalToDocumentCurrency());
      key = this$static.stepNumber + '_' + this$static.counter;
      $clinit_PricingConverter();
      $put_0(this$static.m_pricingItem.m_prCurrConvTraceResult, key, null);
    }
     else {
      convResult = convertTo_0(this$static.m_conditionType.conditionTypeTO.name_0, this$static.m_pricingDocument.m_tryDirectCurrencyConversion, currencyValueParam, this$static.getConditionFindingTimestamp(), $setScale(this$static.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static.m_pricingDocument._localCurrencyUnit, this$static.getExchangeRateDateLocalToDocumentCurrency(), forAlternativeCurrency?null:$setScale(this$static.getExchangeRateLocalToDocumentCurrency().resultingRate, 5, valueOf_7(4)), targetCurrencyUnit, this$static.getExchangeRateTypeLocalToDocumentCurrency());
    }
    !!convResult.m_localExchangeRate && (this$static.m_exchangeRate = convResult.m_localExchangeRate);
    !!convResult.m_foreignExchangeRate && !!this$static.m_pricingItem && $setExchangeRate_3(this$static.m_pricingItem, convResult.m_foreignExchangeRate);
    !!convResult.m_directExchangeRate && (this$static.m_directExchangeRate = convResult.m_directExchangeRate);
    currencyValue = convResult.m_value;
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 9)) {
      e = $e1;
      contextConditionValue = forAlternativeCurrency?$append_0($append_0(new StringBuffer_1('PricingCondition.calcAlternativeConditionValue'), this$static.stepNumber), this$static.counter).string:$append_0($append_0(new StringBuffer_1('PricingCondition.calcConditionValue'), this$static.stepNumber), this$static.counter).string;
      $handleT100Error_0(this$static, e.getMessage_0(), contextConditionValue);
      dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
      try {
        this$static.m_exchangeRate = $newIdentityExchangeRate(this$static.getExchangeRateTypeLocalToDocumentCurrency(), this$static.m_pricingDocument._localCurrencyUnit.getUnitName_0(), this$static.getExchangeRateDateLocalToDocumentCurrency());
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (!instanceOf($e0, 17))
          throw unwrap($e0);
      }
      currencyValue = $getCurrencyValue(currencyValueParam.m_value, this$static.m_pricingDocument._documentCurrencyUnit);
    }
     else 
      throw unwrap($e1);
  }
  return currencyValue;
}

function $round(x_0, decimals, roundingRule){
  var result;
  switch (roundingRule) {
    case 32:
      result = $setScale(x_0, decimals, valueOf_7(4));
      break;
    case 65:
      $signum(x_0) == 1?(result = $setScale(x_0, decimals, valueOf_7(2))):(result = $setScale(x_0, decimals, valueOf_7(3)));
      break;
    case 66:
      $signum(x_0) == 1?(result = $setScale(x_0, decimals, valueOf_7(3))):(result = $setScale(x_0, decimals, valueOf_7(2)));
      break;
    default:throw new PricingRuntimeException_0(152, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [valueOf_0(roundingRule)]));
  }
  return result;
}

function $setAlternativeCurrencyUnit(this$static, alternativeCurrencyUnit){
  try {
    this$static.m_alternativeCurrencyUnit = $getCurrencyUnit(dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14), alternativeCurrencyUnit);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 17)) {
      $clinit_Configuration_0();
    }
     else 
      throw unwrap($e0);
  }
}

function $setCalculationType(this$static, calcType){
  this$static.m_calculationType = calcType;
}

function $setChangeOfCalculationTypeAllowed(this$static, b){
  this$static.m_changeOfCalcTypeAllowed = b;
}

function $setChangeOfRateAllowed(this$static, b){
  this$static.m_changeOfRateAllowed = b;
}

function $setChangeOfUnitAllowed(this$static, b){
  this$static.m_changeOfUnitAllowed = b;
}

function $setChangeOfValueAllowed(this$static, b){
  this$static.m_changeOfValueAllowed = b;
}

function $setConditionBase(this$static, baseValue, baseUnit){
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  if ($indexOf('ABHIUW', fromCodePoint(this$static.m_calculationType)) >= 0) {
    this$static.m_conditionBase = $getCurrencyValue(baseValue, dynamicCast(baseUnit, 26));
  }
   else if (this$static.m_calculationType == 71) {
    instanceOf(baseUnit, 26)?(this$static.m_conditionBase = $getCurrencyValue(baseValue, dynamicCast(baseUnit, 26))):(this$static.m_conditionBase = $getPhysicalValue(baseValue, dynamicCast(baseUnit, 27)));
  }
   else if (this$static.m_calculationType == 67 || (null , $indexOf('MNOP', fromCodePoint(this$static.m_calculationType)) >= 0)) {
    try {
      this$static.m_conditionBase = $getPhysicalValue_0(baseValue, baseUnit.getUnitName_0());
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        $clinit_Configuration_0();
        initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [baseValue, baseUnit.getUnitName_0()]);
      }
       else 
        throw unwrap($e0);
    }
  }
   else {
    $indexOf('DEFL', fromCodePoint(this$static.m_calculationType)) >= 0 && (this$static.m_conditionBase = $getPhysicalValue(baseValue, dynamicCast(baseUnit, 27)));
  }
}

function $setConditionBaseValue(this$static, baseValue){
  $setConditionBase(this$static, baseValue, this$static.m_conditionBase.getUnit());
}

function $setConditionRate(this$static, rate, curUnit){
  this$static.m_conditionRate = $getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , rate), curUnit);
}

function $setConditionValue(this$static, value_0){
  this$static.m_conditionValue = value_0;
}

function $setDeletionAllowed(this$static, deletionAllowed){
  this$static.m_deletionAllowed = deletionAllowed;
}

function $setExchangeRate_2(this$static, exchangeRate){
  this$static.m_exchangeRate = exchangeRate;
}

function $setFactor(this$static, factor){
  if (!this$static.mfactorNonInitialValueSet) {
    this$static.m_factor = new PricingConditionFactor;
    this$static.mfactorNonInitialValueSet = true;
  }
  $setFactor_1(this$static.m_factor, factor);
}

function $setFraction(this$static, fraction){
  this$static.m_fraction = fraction;
}

function $setGroupConditionIndicator(this$static, b){
  this$static.m_isGroupCondition = b;
  b || (this$static.m_groupCondition = null);
}

function $setHeaderCondition(this$static, headerCondition){
  this$static.m_headerCondition = headerCondition;
  this$static.m_origin = 68;
  this$static.m_control = 65;
  $disableManualChanges(this$static);
}

function $setManualEntryFlag(this$static, manual){
  this$static.m_manual = manual;
}

function $setManuallyChanged(this$static, isManuallyChanged){
  this$static.m_manuallyChanged = isManuallyChanged;
}

function $setOrigin(this$static, origin){
  this$static.m_origin = origin;
}

function $setPricingUnit(this$static, prUnitValue, prUnit){
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  $indexOf('ABHIUW', fromCodePoint(this$static.m_calculationType)) >= 0?(this$static.m_pricingUnit = null):(this$static.m_pricingUnit = $getPhysicalValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , prUnitValue), prUnit));
}

function $setRoundingDifference(this$static, roundingDifference){
  this$static.m_roundingDifference = roundingDifference;
}

function $setRoundingDifferenceCalculation(this$static, b){
  this$static.m_roundingDifferenceCalculation = b;
}

function $setScaleBase(this$static, scaleBaseValue, scaleBaseUnit){
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  if ($equals_7(this$static._scaleBaseIndicators[0], 'B') || $equals_7(this$static._scaleBaseIndicators[0], 'TC1')) {
    setCheck(this$static._conditionScales, 0, $getCurrencyValue(scaleBaseValue, dynamicCast(scaleBaseUnit, 26)));
    setCheck(this$static._conditionScales, 0, this$static._conditionScales[0]);
  }
   else if ($equals_7(this$static._scaleBaseIndicators[0], 'C')) {
    try {
      setCheck(this$static._conditionScales, 0, $getPhysicalValue_0(scaleBaseValue, scaleBaseUnit.getUnitName_0()));
      setCheck(this$static._conditionScales, 0, this$static._conditionScales[0]);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
  }
   else 
    (isPhysicalUnitScale(this$static._scaleBaseIndicators[0]) || isTimeScale(this$static._scaleBaseIndicators[0])) && setCheck(this$static._conditionScales, 0, $getPhysicalValue(scaleBaseValue, dynamicCast(scaleBaseUnit, 27)));
}

function $setScaleBaseIndicator(this$static, scaleBaseIndicator){
  this$static._scaleBaseIndicators[0] = scaleBaseIndicator;
}

function $setScaleBaseValue(this$static, scaleBaseValue){
  !!scaleBaseValue && this$static._conditionScales != null && !!this$static._conditionScales[0]?$setScaleBase(this$static, scaleBaseValue, this$static._conditionScales[0].getUnit()):setCheck(this$static._conditionScales, 0, null);
}

function $setVariantConditionFactor(this$static, factor){
  if (!this$static.varfactorNonInitialValueSet) {
    this$static.m_varFactor = new PricingConditionFactor;
    this$static.varfactorNonInitialValueSet = true;
  }
  $setFactor_1(this$static.m_varFactor, factor);
}

function $setVarnumh(this$static, conditionRecordId, tableName){
  if (conditionRecordId != null && !$equals_7(conditionRecordId, '')) {
    this$static.m_conditionRecordId = conditionRecordId;
    tableName != null && !$equals_7(tableName, '') && (this$static.m_conditionTableName = tableName);
    this$static.m_determineConditionRecord = 0;
  }
   else {
    this$static.m_conditionRecordId = null;
    this$static.m_conditionTableName = null;
    this$static.m_determineConditionRecord = 1;
  }
}

function $toString_4(this$static){
  var str;
  str = new StringBuffer_0;
  $formatAppend(str, this$static.m_conditionType?this$static.m_conditionType.conditionTypeTO.name_0:this$static.m_description);
  $formatAppend(str, $toString_2(this$static.m_conditionRate));
  $formatAppend(str, this$static.m_conditionBase?this$static.m_conditionBase.toString$():' ');
  $formatAppend(str, this$static.m_conditionValue + ' ' + this$static.m_pricingDocument._documentCurrencyUnit);
  this$static.m_inactive != 32 && $formatAppend(str, ' inactive ' + charToString(this$static.m_inactive));
  return (str.string += '\n' , str).string;
}

function PricingCondition(){
  $clinit_PricingCondition();
  Condition_0.call(this, null, null, null);
  $$init(this);
}

function PricingCondition_0(pricingItem, step){
  $clinit_PricingCondition();
  PricingCondition_2.call(this, pricingItem, step, null, null, null, null);
  this.conditionFindingTimestamp = $getTimestamp_1(pricingItem.accumulator.m_lastPrice);
}

function PricingCondition_1(pricingItem, step, access, ct, prConditionRecord, pricingTimestamp){
  Condition_0.call(this, step, prConditionRecord, pricingTimestamp);
  $$init(this);
  $basicInitialization(this, pricingItem);
  $deriveDataFromStep(this, this.step);
  $deriveDataFromConditionType(this, ct);
  this.m_accessCounter = access?access.accessTO.accessNumber:0;
  $deriveDataFromConditionRecord(this, prConditionRecord);
  $clinit_PricingCustomizingConstants$CalculationType();
  $clinit_SAPString();
  $indexOf('ABHIUW', fromCodePoint(this.m_calculationType)) >= 0 && (this.m_changeOfUnitAllowed = false);
  $independentInitialization(this);
  this.m_conditionValue = ($clinit_PricingConstants() , ZERO_5);
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  this.m_exchangeRate = $getZeroExchange(pricingItem, this.m_conditionRate.m_unit.getUnitName_0());
  this.m_directExchangeRate = this.m_exchangeRate;
}

function PricingCondition_2(pricingItem, step, access, ct, prConditionRecord, pricingTimestamp){
  $clinit_PricingCondition();
  PricingCondition_1.call(this, pricingItem, step, access, ct, prConditionRecord, pricingTimestamp);
}

function PricingCondition_3(pricingItem, step, conditionType){
  $clinit_PricingCondition();
  PricingCondition_2.call(this, pricingItem, step, null, conditionType, null, getConditionFindingTimestamp_0(conditionType, pricingItem));
}

function PricingCondition_4(pricingItem, step, conditionType){
  $clinit_PricingCondition();
  PricingCondition_1.call(this, pricingItem, step, null, conditionType, null, getConditionFindingTimestamp_0(conditionType, pricingItem));
  this.m_updateConditionFromExternalDataSource && this.m_dataSource != null && !$equals_7(this.m_dataSource, ($clinit_SAPString() , null)) && !$equals_7(this.m_dataSource, 'A');
}

function PricingCondition_5(pricingItem, step, conditionType, isStatistical, pricingTimestamp){
  Condition_0.call(this, step, null, pricingTimestamp);
  $$init(this);
  $basicInitialization(this, pricingItem);
  if (step) {
    this.m_fromStep = 0;
    this.m_toStep = 0;
    this.m_subtotalFlag = 32;
    this.m_accountKey1 = null;
    this.m_accountKey2 = null;
    this.m_statistical = isStatistical;
    this.m_baseFormulaNo = 0;
    this.m_valueFormulaNo = 0;
    this.stepNumber = step.stepTO.stepNumber;
  }
  $deriveDataFromConditionType(this, conditionType);
  this.m_accessCounter = 0;
  $deriveDataFromConditionRecord(this, null);
  this.m_origin = 74;
  dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  this.m_exchangeRate = $getZeroExchange(pricingItem, pricingItem._pricingDocument._documentCurrencyUnit.getUnitName_0());
  this.m_directExchangeRate = this.m_exchangeRate;
  $independentInitialization(this);
  this.m_conditionValue = null;
  this.m_description = null;
}

function getConditionFindingTimestamp_0(conditionType, pricingItem){
  var conditionAccessTimestamp, timestamp, timestampName;
  timestampName = conditionType.conditionTypeTO.accessTimestamp;
  timestamp = null;
  if (timestampName != null) {
    conditionAccessTimestamp = $getTimestamp_0(pricingItem.timestamps, timestampName);
    !!conditionAccessTimestamp && (timestamp = conditionAccessTimestamp.value_0);
  }
  !timestamp && (timestamp = today_0());
  return timestamp;
}

function getPricingStep_0(usage, condTypeName, steps, stepNo, application, statistical, accountKey1, accountKey2, origin){
  var conditionType, customizingEngine, i_0, i0, i1, pricingStepTO, selectedSteps, step;
  if (origin == 74) {
    for (i0 = 0; i0 < steps.length; i0++) {
      if (steps[i0].stepTO.stepNumber == stepNo) {
        return steps[i0];
      }
    }
  }
  selectedSteps = new Vector;
  for (i1 = 0; i1 < steps.length; i1++) {
    !steps[i1].conditionType?($clinit_SAPString() , null == condTypeName && $addElement(selectedSteps, steps[i1])):$equals_7(steps[i1].conditionType.conditionTypeTO.name_0, condTypeName) && $addElement(selectedSteps, steps[i1]);
  }
  if (selectedSteps.arrayList.array.length == 1) {
    step = (checkArrayElementIndex(0, selectedSteps.arrayList.array.length) , dynamicCast($get_13(selectedSteps.arrayList, 0), 105));
  }
   else {
    for (i_0 = 0; i_0 < selectedSteps.arrayList.array.length; i_0++) {
      if ((checkArrayElementIndex(i_0, selectedSteps.arrayList.array.length) , dynamicCast($get_13(selectedSteps.arrayList, i_0), 105)).stepTO.stepNumber == stepNo) {
        return checkArrayElementIndex(i_0, selectedSteps.arrayList.array.length) , dynamicCast($get_13(selectedSteps.arrayList, i_0), 105);
      }
    }
    customizingEngine = dynamicCast($getCustomizingEngine(factory_0, usage), 132);
    conditionType = null;
    if (condTypeName != null) {
      try {
        conditionType = dynamicCast($createConditionType(customizingEngine.conditionTypeObjectManager, application, condTypeName), 207);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 42)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e0);
      }
    }
    pricingStepTO = new PricingStepTO;
    pricingStepTO.accountKey1 = accountKey1;
    pricingStepTO.accountKey2 = accountKey2;
    pricingStepTO.authorityLevel = 0;
    pricingStepTO.baseFormulaNumber = 0;
    pricingStepTO.conditionType = condTypeName;
    pricingStepTO.counter = 0;
    pricingStepTO.fromStep = 0;
    pricingStepTO.mandatory = false;
    pricingStepTO.mandatoryType = 32;
    pricingStepTO.manually = false;
    pricingStepTO.printId = 32;
    pricingStepTO.requirementNumber = 0;
    pricingStepTO.statistical = statistical;
    pricingStepTO.stepNumber = stepNo;
    pricingStepTO.subtotalFlag = 32;
    pricingStepTO.usage = usage;
    pricingStepTO.valueFormulaNumber = 0;
    return new PricingStep(pricingStepTO, conditionType);
  }
  return step;
}

function loadAttributes(prDoc, prCond, data_0){
  var condBaseUnitName, condBaseVal, conditionRateUnitName, contextExchangeRate, convEng, currencyUnit, exchangeRateType, headerCondition, headerCounter, pricingUnitName, pricingUnitVal, scaleBaseValue, scaleCurrencyName;
  contextExchangeRate = $append_0($append_0(new StringBuffer_1('PricingCondition.determineExchangeRate'), prCond.stepNumber), prCond.counter).string;
  prCond.clearStatusMessage(new ClearAllStatusEvent(contextExchangeRate));
  convEng = $getConversionEngine();
  prCond.counter = data_0.counter;
  prCond.m_application = data_0.application;
  !!data_0.pricingDate && (prCond.conditionFindingTimestamp = new SAPTimestamp_2(data_0.pricingDate));
  prCond.m_calculationType = data_0.calculationType;
  condBaseVal = data_0.conditionBaseValue;
  condBaseUnitName = prDoc._documentCurrencyUnit.getUnitName_0();
  pricingUnitVal = data_0.pricingUnitValue;
  pricingUnitName = data_0.pricingUnitUnit;
  try {
    currencyUnit = $getCurrencyUnit(convEng, data_0.conditionCurrency);
    prCond.m_conditionRate = $getCurrencyValue(data_0.conditionRate, currencyUnit);
    $clinit_PricingCustomizingConstants$CalculationType();
    $clinit_SAPString();
    if ($indexOf('ABHIUW', fromCodePoint(prCond.m_calculationType)) >= 0) {
      prCond.m_conditionBase = $getCurrencyValue_1(convEng, condBaseVal, condBaseUnitName);
    }
     else if (prCond.m_calculationType == 67 || (null , $indexOf('DEFL', fromCodePoint(prCond.m_calculationType)) >= 0) || (null , $indexOf('MNOP', fromCodePoint(prCond.m_calculationType)) >= 0)) {
      prCond.m_pricingUnit = $getPhysicalValue_0(pricingUnitVal, pricingUnitName);
      prCond.m_conditionBase = $getPhysicalValue_0(condBaseVal, pricingUnitName);
    }
     else if (prCond.m_calculationType == 71) {
      if (pricingUnitName != null && !$equals_7(pricingUnitName, '')) {
        prCond.m_conditionBase = $getPhysicalValue_0(condBaseVal, pricingUnitName);
        prCond.m_pricingUnit = $getPhysicalValue_0(pricingUnitVal, pricingUnitName);
      }
       else {
        prCond.m_conditionBase = $getCurrencyValue_1(convEng, condBaseVal, condBaseUnitName);
        prCond.m_pricingUnit = null;
      }
    }
     else if (prCond.m_calculationType == 81) {
      prCond.m_conditionBase = $getPhysicalValue_0(condBaseVal, pricingUnitName);
      prCond.m_pricingUnit = $getPhysicalValue_0(pricingUnitVal, pricingUnitName);
      prCond.m_conditionRecordId = null;
    }
     else {
      throw new PricingRuntimeException_0(151, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [valueOf_0(prCond.m_calculationType)]));
    }
    if (data_0.alternativeConditionCurrency != null && $trim(data_0.alternativeConditionCurrency).length != 0) {
      $setAlternativeCurrencyUnit(prCond, $trim(data_0.alternativeConditionCurrency));
      prCond.m_alternativeConditionValue = data_0.alternativeConditionValue;
      $indexOf('ABHIUW', fromCodePoint(data_0.calculationType)) >= 0 && !$equals_7(data_0.alternativeConditionCurrency, data_0.conditionCurrency)?(prCond.m_alternativeConditionBase = $getCurrencyValue_1(convEng, data_0.alternativeConditionBaseValue, data_0.alternativeConditionCurrency)):(prCond.m_alternativeConditionBase = prCond.m_conditionBase);
    }
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 17)) {
      $clinit_Configuration_0();
    }
     else 
      throw unwrap($e0);
  }
  if (!prCond.m_pricingItem) {
    prCond.m_exchangeRate = null;
  }
   else {
    exchangeRateType = prCond.m_pricingItem.m_exchangeRateType;
    conditionRateUnitName = $getConditionRateUnitName(prCond);
    $clinit_PricingCustomizingConstants$CalculationType();
    $clinit_SAPString();
    if ($indexOf('AHIUW', fromCodePoint(prCond.m_calculationType)) >= 0 || $equals_7(conditionRateUnitName, '%') || $equals_7(conditionRateUnitName, '%7')) {
      prCond.m_directExchangeRate = $getZeroExchange(prCond.m_pricingItem, prCond.m_pricingItem._pricingDocument._documentCurrencyUnit.getExternalUnitName());
      prCond.m_exchangeRate = prCond.m_directExchangeRate;
    }
     else {
      prCond.m_directExchangeRate = $getZeroExchange(prCond.m_pricingItem, prCond.m_pricingItem._pricingDocument._documentCurrencyUnit.getUnitName_0());
      try {
        prCond.m_exchangeRate = $getExchangeRate_0(convEng, exchangeRateType, conditionRateUnitName, prDoc._localCurrencyUnit.getUnitName_0(), data_0.pricingDate, data_0.exchangeRate);
      }
       catch ($e1) {
        $e1 = wrap($e1);
        if (instanceOf($e1, 17)) {
          $clinit_Configuration_0();
        }
         else if (instanceOf($e1, 36)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e1);
      }
    }
  }
  prCond.m_fraction = new Fraction_0(data_0.conversionNumeratorConditionUnit2BaseUnit, data_0.conversionDenominatorConditionUnit2BaseUnit, data_0.conversionExponentConditionUnit2BaseUnit);
  prCond.m_conditionCategory = data_0.category;
  prCond.m_statistical = data_0.statistical;
  if (data_0.scaleBaseType != null && !$equals_7(data_0.scaleBaseType, '') && !isReservedForISOil(data_0.scaleBaseType) && prCond.m_conditionRecordId != null) {
    prCond._scaleTypes = ((prCond._scaleTypes == null || maskUndefined(prCond._scaleTypes) === maskUndefined(($clinit_PricingConstants() , INITIAL_CHAR_ARRAY))) && (prCond._scaleTypes = initDim(C_classLit, $intern_4, 0, 1, 7, 1)) , prCond._scaleTypes);
    prCond._scaleTypes[0] = data_0.scaleType;
    prCond._scaleBaseIndicators[0] = data_0.scaleBaseType;
    scaleBaseValue = data_0.scaleBaseValue;
    try {
      if ($equals_7(prCond._scaleBaseIndicators[0], 'B') || $equals_7(prCond._scaleBaseIndicators[0], 'TC1')) {
        scaleCurrencyName = data_0.scaleCurrency;
        scaleCurrencyName == null && (scaleCurrencyName = '');
        setCheck(prCond._conditionScales, 0, $getCurrencyValue_1(convEng, scaleBaseValue, scaleCurrencyName));
      }
       else {
        setCheck(prCond._conditionScales, 0, $getPhysicalValue_0(data_0.scaleBaseValue, data_0.scaleUnit));
      }
    }
     catch ($e2) {
      $e2 = wrap($e2);
      if (instanceOf($e2, 17)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e2);
    }
  }
   else {
    prCond._scaleTypes = ((prCond._scaleTypes == null || maskUndefined(prCond._scaleTypes) === maskUndefined(($clinit_PricingConstants() , INITIAL_CHAR_ARRAY))) && (prCond._scaleTypes = initDim(C_classLit, $intern_4, 0, 1, 7, 1)) , prCond._scaleTypes);
    prCond._scaleTypes[0] = 32;
    prCond._scaleBaseIndicators[0] = '';
    isReservedForISOil(data_0.scaleBaseType) && (prCond.m_conditionRecordId = null);
  }
  data_0.scaleBaseType != null && ($equals_7(data_0.scaleBaseType, 'B') && data_0.scaleCurrency == null || !$equals_7(data_0.scaleBaseType, 'B') && !$equals_7(data_0.scaleBaseType, 'TC1') && data_0.scaleUnit == null) && (prCond._scaleBaseIndicators[0] = '');
  prCond.m_accruals = data_0.accruals;
  prCond.m_invoiceList = data_0.invoiceList;
  prCond.m_origin = data_0.origin;
  prCond.m_isGroupCondition = data_0.groupCondition;
  prCond.m_update = data_0.conditionUpdate;
  prCond.m_accountKey1 = data_0.accountKey;
  prCond.m_accountKey2 = data_0.accountKeyAccrualsOrProvisions;
  prCond.m_roundingDifference = data_0.roundingDifference;
  prCond.m_conditionValue = data_0.conditionValue;
  prCond.m_control = data_0.conditionControl;
  prCond.m_inactive = data_0.inactive;
  prCond.m_conditionClass = data_0.conditionClass;
  prCond.m_indicatorStructureCondition = data_0.structureCondition;
  headerCounter = data_0.headerConditionCounter;
  if (headerCounter != 0 && !!prCond.m_pricingItem) {
    headerCondition = $findHeaderCondition(prDoc, prCond.stepNumber, headerCounter);
    if (headerCondition) {
      $addPricingCondition(headerCondition, prCond);
      prCond.m_headerCondition = headerCondition;
    }
     else {
      if (prCond.m_calculationType == 66 || ($clinit_SAPString() , $indexOf('EFH', fromCodePoint(prCond.m_control)) >= 0)) {
        prCond.m_isGroupCondition = false;
        $clinit_SAPString();
        $indexOf('FH', fromCodePoint(prCond.m_control)) >= 0 || (prCond.m_control = 69);
      }
      prCond.m_origin = 71;
      headerCounter = 0;
    }
  }
  if (prCond.m_origin == 66) {
    $disableManualChanges(prCond);
  }
   else if (prCond.m_origin == 68) {
    if (headerCounter == 0) {
      prCond.m_changeOfRateAllowed = false;
      prCond.m_changeOfValueAllowed = false;
    }
     else {
      $disableManualChanges(prCond);
    }
  }
   else if (prCond.m_origin == 71) {
    prCond.m_changeOfRateAllowed = false;
    prCond.m_changeOfValueAllowed = false;
  }
  $setFactor(prCond, data_0.conditionBaseValueFactorPeriod);
  $setVariantConditionFactor(prCond, data_0.conditionBaseValueFactor);
  prCond.m_interCompany = data_0.interCompanyBilling;
  prCond.m_variant = data_0.configuration;
  prCond.m_manuallyChanged = data_0.changedManually;
  prCond.m_varcondKey = data_0.variantCondition;
  prCond.m_salesTaxCode = data_0.taxCode;
  prCond.m_withholdingTaxCode = data_0.withholdingTaxCode;
  prCond.m_varcondKey != null && $equals_7(prCond.m_varcondKey, '') && (prCond.m_varcondKey = null);
}

function loadFromLocalDB(prDoc, prItem, data_0){
  $clinit_PricingCondition();
  var accountKey1, accountKey2, application, condType, condTypeName, customizingEngine, extDataSource, i_0, isExternalDataSource, origin, prCond, prProcedure, statistical, step, stepNo, structureCondition;
  stepNo = data_0.stepNumber;
  condTypeName = data_0.conditionType;
  condTypeName != null && $equals_7(condTypeName, '') && (condTypeName = null);
  application = data_0.application;
  statistical = data_0.statistical;
  accountKey1 = data_0.accountKey;
  accountKey2 = data_0.accountKeyAccrualsOrProvisions;
  structureCondition = data_0.structureCondition;
  origin = data_0.origin;
  prProcedure = prDoc._pricingProcedure;
  step = getPricingStep_0(prDoc._usage, condTypeName, prProcedure.pricingSteps, stepNo, application, statistical, accountKey1, accountKey2, origin);
  prCond = null;
  if (condTypeName == null) {
    prCond = new PricingCondition_0(prItem, step);
  }
   else if (origin == 74) {
    condType = createTaxPricingConditionType(condTypeName, data_0.calculationType);
    prCond = new PricingCondition_5(prItem, step, condType, statistical, new SAPTimestamp_2(data_0.pricingDate));
  }
   else if (data_0.conditionRecordId == null || $equals_7(data_0.conditionRecordId, '') || $equals_7(data_0.conditionRecordId, '00000000000000000000000000000000')) {
    structureCondition == 65 && origin != 66?(prCond = new MainConditionToCopy_0(prItem, step, step.conditionType)):(prCond = new PricingCondition_3(prItem, step, step.conditionType));
  }
   else {
    condType = step.conditionType;
    if (!condType) {
      customizingEngine = $getPricingCustomizingEngine(prDoc._usage);
      try {
        condType = dynamicCast($getConditionType(customizingEngine, prItem.application, condTypeName), 207);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 42)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e0);
      }
    }
    structureCondition == 65 && origin != 66?(prCond = new MainConditionToCopy_1(prItem, step, condType, null, new SAPTimestamp_2(data_0.pricingDate))):!condType?$fireSetStatusMessage_0(prItem, new WarningStatusEvent_0(801, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [condTypeName]), 'Pricing error: Mandatory condition ' + condTypeName + 'is missing', 'loadFromLocalDB')):(prCond = $createPricingCondition($getPricingEngine(prDoc._usage), prItem, step, null, condType, null, new SAPTimestamp_2(data_0.pricingDate)));
    !!prCond && $setVarnumh(prCond, data_0.conditionRecordId, data_0.conditionTable);
  }
  if (prCond) {
    prCond.m_pricingItem = prItem;
    loadAttributes(prDoc, prCond, data_0);
    if (prCond.m_conditionType) {
      isExternalDataSource = prCond.m_conditionType.pricingConditionTypeTO.dataSource != null && !$equals_7(prCond.m_conditionType.pricingConditionTypeTO.dataSource, '') && !$equals_7(prCond.m_conditionType.pricingConditionTypeTO.dataSource, 'A');
      extDataSource = null;
      isExternalDataSource && (extDataSource = $getExternalDataSource_0(prItem, prCond.m_conditionType));
      if (extDataSource != null && extDataSource.length != 0) {
        for (i_0 = 0; i_0 < extDataSource.length; i_0++) {
          null.nullMethod();
          continue;
        }
      }
    }
    $modifyConditionsDueToUnchangeableItems(prItem, prCond);
  }
  return prCond;
}

defineClass(15, 79, {65:1, 79:1, 76:1, 280:1, 15:1, 279:1, 278:1, 3:1, 4:1}, PricingCondition, PricingCondition_0, PricingCondition_2, PricingCondition_3, PricingCondition_4, PricingCondition_5);
_.changeCalculationType = function changeCalculationType(calcType){
  $changeCalculationType(this, calcType);
}
;
_.changeConditionRate = function changeConditionRate(rateParam, unitNameParam, prUnitValueParam, prUnitNameParam){
  $changeConditionRate(this, rateParam, unitNameParam, prUnitValueParam, prUnitNameParam);
}
;
_.clearStatusMessage = function clearStatusMessage_1(s){
  $fireClearStatusMessage_0(this.m_pricingItem, s);
}
;
_.createScaleTrace = function createScaleTrace(scale, scaleDimensionAmounts, prScaleRate){
  var scaleStepTrace;
  if (!this.m_pricingItem) {
    return;
  }
  if (!this.m_pricingItem._performCalcTrace) {
    return;
  }
  if (!dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel) {
    return;
  }
  scaleStepTrace = $getScaleStepTrace(this.m_pricingItem.scaleTracer, this.step, this.counter);
  dynamicCast(dynamicCast(scale.scaleDimensions[0], 71).scaleDefinition, 66).getScaleType_0();
  if (!prScaleRate) {
    'No scale rate maintained for scale base value: ' + dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.toString$();
  }
   else {
    dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.toString$() + ' -> ' + $toString_2(prScaleRate.conditionRate);
    if ($equals_7(scale.scaleDimensions[0].scaleDefinition.scaleDefinitionTO.scaleBaseType, 'B')) {
      dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getValue_0();
      dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getUnitName_0();
    }
     else {
      dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getValue_0();
      dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getUnitName_0();
    }
    prScaleRate.conditionRate.m_unit.getUnitName_0();
  }
  $addScaleStepTrace(this.m_pricingItem.scaleTracer, scaleStepTrace);
}
;
_.equals$ = function equals_20(o){
  var cond;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != this.___clazz$) {
    return false;
  }
  cond = dynamicCast(o, 65);
  return this == cond;
}
;
_.getConditionRecord = function getConditionRecord_1(){
  return $getConditionRecord(this);
}
;
_.getConditionScale = function getConditionScale_0(){
  return $getConditionScale(this);
}
;
_.getConditionTypeName = function getConditionTypeName_0(){
  return this.m_conditionType?this.m_conditionType.conditionTypeTO.name_0:null;
}
;
_.getExchangeRateDateLocalToDocumentCurrency = function getExchangeRateDateLocalToDocumentCurrency(){
  return this.m_pricingItem._exchangeRateDate;
}
;
_.getExchangeRateLocalToDocumentCurrency = function getExchangeRateLocalToDocumentCurrency(){
  return this.m_pricingItem.m_exchangeRate;
}
;
_.getExchangeRateTypeLocalToDocumentCurrency = function getExchangeRateTypeLocalToDocumentCurrency(){
  return this.m_pricingItem.m_exchangeRateType;
}
;
_.getHeaderCounter = function getHeaderCounter(){
  return !this.m_headerCondition?0:this.m_headerCondition.m_headerCounter;
}
;
_.getItemId_0 = function getItemId_1(){
  if (!this.m_pricingItem) {
    return '00000000000000000000000000000000';
  }
  return this.m_pricingItem._itemNumber;
}
;
_.getManualEntryFlag_0 = function getManualEntryFlag_2(){
  return this.m_manual;
}
;
_.getOrigin = function getOrigin_0(){
  return this.m_origin;
}
;
_.getStepNumber_0 = function getStepNumber_2(){
  return this.stepNumber;
}
;
_.getStructureConditionFlag = function getStructureConditionFlag_0(){
  return this.m_indicatorStructureCondition;
}
;
_.getVariantConditionKey = function getVariantConditionKey_0(){
  return this.m_varcondKey;
}
;
_.hashCode$ = function hashCode_21(){
  return $hashCode_4(this);
}
;
_.isManuallyChanged = function isManuallyChanged_1(){
  return this.m_manuallyChanged;
}
;
_.isReturn_0 = function isReturn_0(){
  return this.m_pricingItem.m_isReturn;
}
;
_.isVariantCondition_0 = function isVariantCondition_2(){
  return this.m_variant;
}
;
_.setConditionValue = function setConditionValue_0(value_0){
  $setConditionValue(this, value_0);
}
;
_.setInactive = function setInactive_0(inactive){
  this.m_inactive = inactive;
}
;
_.setStatusMessage = function setStatusMessage_1(s){
  $fireSetStatusMessage_0(this.m_pricingItem, s);
}
;
_.toString$ = function toString_18(){
  return $toString_4(this);
}
;
_._numScaleDimensions = 0;
_.m_accessCounter = 0;
_.m_accruals = false;
_.m_baseFormulaNo = 0;
_.m_calculationType = 0;
_.m_changeOfCalcTypeAllowed = false;
_.m_changeOfRateAllowed = false;
_.m_changeOfUnitAllowed = false;
_.m_changeOfValueAllowed = false;
_.m_conditionCategory = 0;
_.m_conditionClass = 0;
_.m_conditionRecordDetermined = false;
_.m_control = 0;
_.m_currencyConversionOfValue = false;
_.m_deletionAllowed = false;
_.m_determineConditionRecord = 1;
_.m_fixationGroupFixRate = 32;
_.m_fromStep = 0;
_.m_headerCond = false;
_.m_inactive = 0;
_.m_indicatorStructureCondition = 0;
_.m_interCompany = false;
_.m_invoiceList = false;
_.m_isGroupCondition = false;
_.m_itemCond = false;
_.m_manual = 0;
_.m_manuallyChanged = false;
_.m_origin = 0;
_.m_plusminus = 0;
_.m_rateDeterminedFromGroupCondition = false;
_.m_roundingDifferenceCalculation = false;
_.m_roundingRule = 0;
_.m_scaleBaseFormulaNo = 0;
_.m_statistical = false;
_.m_subtotalFlag = 0;
_.m_toStep = 0;
_.m_update = false;
_.m_updateConditionFromExternalDataSource = true;
_.m_valueFormulaNo = 0;
_.m_variant = false;
_.mfactorNonInitialValueSet = false;
_.sourceForGrpModeItemCalc = false;
_.varfactorNonInitialValueSet = false;
var FACTOR;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingCondition_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingCondition', 15, Lcom_sap_spe_condmgnt_finding_bo_Condition_2_classLit);
function $calculate(this$static){
  if ($equals_7(this$static.m_varKey, '') || this$static.m_roundingDifferenceCalculation || this$static.m_calculationType == 66 && !$equals_7(this$static.m_varKey, '')) {
    this$static.m_control == 65 && !$equals_7(this$static._scaleBaseIndicators[0], '') && $determineConditionRateFromScale(this$static, false);
    !!this$static.m_headerCondition && $setConditionBaseValue(this$static.m_headerCondition, $getConditionBaseValue(this$static));
    $calcConditionValue(this$static, false);
    $calcConditionValue(this$static, true);
  }
}

function $initRoundingDifferenceCompensation(this$static){
  var maxConditionValue;
  if (this$static.m_pricingConditionWithRoundingDiff.m_pricingItem.m_pricingItemIsUnchangeable || $compareTo_7($getMultiplicity(this$static.m_pricingConditionWithRoundingDiff.m_pricingItem._item), ($clinit_PricingConstants() , ONE_1)) != 0) {
    maxConditionValue = ($clinit_PricingConstants() , NEG_INFINITY);
    this$static.m_pricingConditionWithRoundingDiff = null;
  }
   else {
    this$static.m_pricingConditionWithRoundingDiff.m_calculationType == 66?(maxConditionValue = this$static.m_pricingConditionWithRoundingDiff.m_conditionBase.getValue_0()):(maxConditionValue = this$static.m_pricingConditionWithRoundingDiff.m_conditionValue);
    $signum(maxConditionValue) < 0 && (maxConditionValue = $multiply(maxConditionValue, ($clinit_PricingConstants() , MINUS_ONE)));
  }
  this$static.m_maxConditionValue = maxConditionValue;
}

function $keysAreEqual(this$static, grCond){
  var condRateUnitName1, condRateUnitName2, condScaleUnitName1, condScaleUnitName2, id1, id2;
  condScaleUnitName1 = '';
  condScaleUnitName2 = '';
  id1 = '';
  id2 = '';
  condRateUnitName1 = '';
  condRateUnitName2 = '';
  !!this$static.m_conditionRate && (condRateUnitName1 = this$static.m_conditionRate.m_unit.getUnitName_0());
  !!grCond.m_conditionRate && (condRateUnitName2 = grCond.m_conditionRate.m_unit.getUnitName_0());
  this$static.m_conditionRecordId != null && (id1 = this$static.m_conditionRecordId);
  grCond.m_conditionRecordId != null && (id2 = grCond.m_conditionRecordId);
  !!this$static._conditionScales[0] && (condScaleUnitName1 = this$static._conditionScales[0].getUnitName_0());
  !!(grCond._conditionScales == null?null:grCond._conditionScales[0]) && (condScaleUnitName2 = grCond._conditionScales == null?null:!grCond._conditionScales[0]?null:grCond._conditionScales[0].getUnitName_0());
  return $equals_7(this$static.m_conditionTypeName, grCond.m_conditionTypeName) && $equals_7(this$static.m_varKey, grCond.m_varKey) && $equals_7(id1, id2) && this$static.m_headerCondition == grCond.m_headerCondition && this$static.m_calculationType == grCond.m_calculationType && $equals_7(condRateUnitName1, condRateUnitName2) && this$static.m_conditionCategory == grCond.m_conditionCategory && this$static.m_origin == grCond.m_origin && this$static.m_control == grCond.m_control && this$static.m_valueFormulaNo == grCond.m_valueFormulaNo && this$static.m_scaleBaseFormulaNo == grCond.m_scaleBaseFormulaNo && $equals_7(this$static._scaleBaseIndicators[0], grCond._scaleBaseIndicators[0]) && this$static._scaleTypes[0] == (grCond._scaleTypes == null?32:grCond._scaleTypes[0]) && this$static.m_roundingRule == grCond.m_roundingRule && this$static.m_currencyConversionOfValue == grCond.m_currencyConversionOfValue && $equals_7(condScaleUnitName1, condScaleUnitName2) && $compareTo_7(this$static.m_keyConditionRate, grCond.m_keyConditionRate) == 0;
}

function $setCurrentItemNumber(this$static, itemNumber){
  this$static.m_currentItemNumber = itemNumber;
}

function $setGroupConditionKeyRateValue(this$static, keyConditionRate){
  this$static.m_keyConditionRate = keyConditionRate;
}

function $setGroupConditionValueSum(this$static, condValueSum){
  this$static.m_conditionValueSum = condValueSum;
}

function $setIndex(this$static, index_0){
  this$static.m_index = index_0;
}

function $setIsReturn(this$static, isReturn){
  this$static.m_isReturn = isReturn;
}

function $setItemsExchangeRate(this$static, exRate){
  this$static.m_itemsExchangeRate = exRate;
}

function $setItemsExchangeRateDate(this$static, exRateDate){
  this$static.m_itemsExchangeRateDate = exRateDate;
}

function $setItemsExchangeRateType(this$static, exRateType){
  this$static.m_itemsExchangeRateType = exRateType;
}

function $setMaxConditionValue(this$static, maxConditionValue){
  this$static.m_maxConditionValue = maxConditionValue;
}

function $setPricingTimeStamp(this$static, timestamp){
  this$static.conditionFindingTimestamp = timestamp;
}

function $setVarKey(this$static, varKey){
  this$static.m_varKey = varKey;
}

function GroupCondition(prDoc, condScaleUnit, pricingCondition){
  $clinit_PricingCondition();
  PricingCondition.call(this);
  this.m_correspondingGroupCondition = null;
  this.contributingItemCondns = new ArrayList;
  this.m_pricingDocument = prDoc;
  this.m_application = prDoc._application;
  this.m_conditionType = pricingCondition.m_conditionType;
  this.m_conditionTypeName = pricingCondition.getConditionTypeName();
  this.usage = pricingCondition.usage;
  if (pricingCondition.m_conditionRecordId != null) {
    this.m_conditionRecordId = pricingCondition.m_conditionRecordId;
    pricingCondition.m_determineConditionRecord == 1?(this.conditionRecord = (pricingCondition.m_determineConditionRecord == 0 && $determineConditionRecord(pricingCondition) , pricingCondition.conditionRecord)):(this.m_determineConditionRecord = 0);
  }
  this.m_indicatorStructureCondition = pricingCondition.m_indicatorStructureCondition;
  this.m_calculationType = pricingCondition.m_calculationType;
  this.m_conditionCategory = pricingCondition.m_conditionCategory;
  this.m_origin = pricingCondition.m_origin;
  this.m_control = pricingCondition.m_control;
  this.m_valueFormulaNo = pricingCondition.m_valueFormulaNo;
  this.m_scaleBaseFormulaNo = pricingCondition.m_scaleBaseFormulaNo;
  this.m_currencyConversionOfValue = pricingCondition.m_currencyConversionOfValue;
  this._scaleBaseIndicators[0] = pricingCondition._scaleBaseIndicators[0];
  this._scaleTypes == null && (this._scaleTypes = ($clinit_PricingConstants() , INITIAL_CHAR_ARRAY));
  this._scaleTypes[0] = pricingCondition._scaleTypes == null?32:pricingCondition._scaleTypes[0];
  this.m_roundingRule = pricingCondition.m_roundingRule;
  this.m_pricingConditionWithRoundingDiff = pricingCondition;
  this.m_conditionRate = pricingCondition.m_conditionRate;
  this.m_varKey = '';
  $setRoundingDifferenceCalculation(this, pricingCondition.m_roundingDifferenceCalculation);
  this.m_headerCondition = pricingCondition.m_headerCondition;
  this.stepNumber = pricingCondition.stepNumber;
  this.step = pricingCondition.step;
  !!condScaleUnit && ($equals_7(this._scaleBaseIndicators[0], 'B') || $equals_7(this._scaleBaseIndicators[0], 'TC1')?setCheck(this._conditionScales, 0, $getCurrencyValue(($getConversionEngine() , $clinit_PricingConstants() , ZERO_5), dynamicCast(condScaleUnit, 26))):setCheck(this._conditionScales, 0, $getPhysicalValue(($getConversionEngine() , $clinit_PricingConstants() , ZERO_5), dynamicCast(condScaleUnit, 27))));
  this.m_conditionBase = pricingCondition.m_conditionBase;
  this.m_conditionValue = ($clinit_PricingConstants() , ZERO_5);
  this.m_conditionValueSum = ZERO_5;
  this.m_currentItemNumber = pricingCondition.getItemId_0();
  $initRoundingDifferenceCompensation(this);
}

defineClass(111, 15, {65:1, 79:1, 76:1, 280:1, 111:1, 15:1, 690:1, 279:1, 278:1, 3:1, 4:1}, GroupCondition);
_.clearStatusMessage = function clearStatusMessage_2(s){
  $fireClearStatusMessage(this.m_pricingDocument, s);
}
;
_.createScaleTrace = function createScaleTrace_0(scale, scaleDimensionAmounts, prScaleRate){
  var i_0, item_0, scaleStepTrace;
  if (!this.m_pricingDocument._performCalcTrace) {
    return;
  }
  for (i_0 = 0; i_0 < $getItemsInternal(this.m_pricingDocument).length; i_0++) {
    item_0 = $getItemsInternal(this.m_pricingDocument)[i_0];
    scaleStepTrace = $getScaleStepTrace(item_0.scaleTracer, this.step, this.counter);
    dynamicCast(dynamicCast(scale.scaleDimensions[0], 71).scaleDefinition, 66).getScaleType_0();
    if (!prScaleRate) {
      'No scale rate maintained for scale base value: ' + dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.toString$();
    }
     else {
      dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.toString$() + ' -> ' + $toString_2(prScaleRate.conditionRate);
      if ($equals_7(scale.scaleDimensions[0].scaleDefinition.scaleDefinitionTO.scaleBaseType, 'B')) {
        dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getValue_0();
        dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getUnitName_0();
      }
       else {
        dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getValue_0();
        dynamicCast(scaleDimensionAmounts[0], 47).scaleLevel.scaleAmount.getUnitName_0();
      }
    }
    $addScaleStepTrace(item_0.scaleTracer, scaleStepTrace);
  }
}
;
_.getConditionTypeName = function getConditionTypeName_1(){
  return this.m_conditionTypeName;
}
;
_.getExchangeRateDateLocalToDocumentCurrency = function getExchangeRateDateLocalToDocumentCurrency_0(){
  return this.m_itemsExchangeRateDate;
}
;
_.getExchangeRateLocalToDocumentCurrency = function getExchangeRateLocalToDocumentCurrency_0(){
  return this.m_itemsExchangeRate;
}
;
_.getExchangeRateTypeLocalToDocumentCurrency = function getExchangeRateTypeLocalToDocumentCurrency_0(){
  return this.m_itemsExchangeRateType;
}
;
_.isReturn_0 = function isReturn_1(){
  return this.m_isReturn;
}
;
_.setStatusMessage = function setStatusMessage_2(s){
  $fireSetStatusMessage(this.m_pricingDocument, s);
}
;
_.m_index = 0;
_.m_isReturn = false;
var Lcom_sap_spe_pricing_transactiondata_impl_GroupCondition_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'GroupCondition', 111, Lcom_sap_spe_pricing_transactiondata_impl_PricingCondition_2_classLit);
function GroupConditionComparator(){
}

defineClass(340, 1, $intern_21, GroupConditionComparator);
_.compare = function compare_21(grCondition1, grCondition2){
  var compare, condRateUnitName1, condRateUnitName2, conditionRecordId1, conditionRecordId2, grCond1, grCond2, headerCondCounter1, headerCondCounter2, scaleBaseUnit1, scaleBaseUnit2;
  grCond1 = dynamicCast(grCondition1, 111);
  grCond2 = dynamicCast(grCondition2, 111);
  compare = compareTo_7(grCond1.m_conditionTypeName, grCond2.m_conditionTypeName);
  if (compare != 0) {
    return compare;
  }
  compare = compareTo_7(grCond1.m_varKey, grCond2.m_varKey);
  if (compare != 0) {
    return compare;
  }
  conditionRecordId1 = grCond1.m_conditionRecordId == null?'':grCond1.m_conditionRecordId;
  conditionRecordId2 = grCond2.m_conditionRecordId == null?'':grCond2.m_conditionRecordId;
  compare = compareTo_7(conditionRecordId1, conditionRecordId2);
  if (compare != 0) {
    return compare;
  }
  headerCondCounter1 = !grCond1.m_headerCondition?0:grCond1.m_headerCondition.m_headerCounter;
  headerCondCounter2 = !grCond2.m_headerCondition?0:grCond2.m_headerCondition.m_headerCounter;
  compare = headerCondCounter1 - headerCondCounter2;
  if (compare != 0) {
    return compare;
  }
  compare = grCond1.m_calculationType - grCond2.m_calculationType;
  if (compare != 0) {
    return compare;
  }
  condRateUnitName1 = !grCond1.m_conditionRate?'':grCond1.m_conditionRate.m_unit.getUnitName_0();
  condRateUnitName2 = !grCond2.m_conditionRate?'':grCond2.m_conditionRate.m_unit.getUnitName_0();
  compare = compareTo_7(condRateUnitName1, condRateUnitName2);
  if (compare != 0) {
    return compare;
  }
  compare = grCond1.m_conditionCategory - grCond2.m_conditionCategory;
  if (compare != 0) {
    return compare;
  }
  compare = grCond1.m_origin - grCond2.m_origin;
  if (compare != 0) {
    return compare;
  }
  compare = grCond1.m_control - grCond2.m_control;
  if (compare != 0) {
    return compare;
  }
  compare = grCond1.m_valueFormulaNo - grCond2.m_valueFormulaNo;
  if (compare != 0) {
    return compare;
  }
  compare = grCond1.m_scaleBaseFormulaNo - grCond2.m_scaleBaseFormulaNo;
  if (compare != 0) {
    return compare;
  }
  compare = compareTo_7(grCond1._scaleBaseIndicators[0], grCond2._scaleBaseIndicators[0]);
  if (compare != 0) {
    return compare;
  }
  compare = (grCond1._scaleTypes == null?32:grCond1._scaleTypes[0]) - (grCond2._scaleTypes == null?32:grCond2._scaleTypes[0]);
  if (compare != 0) {
    return compare;
  }
  compare = grCond1.m_roundingRule - grCond2.m_roundingRule;
  if (compare != 0) {
    return compare;
  }
  if (grCond1.m_currencyConversionOfValue != grCond2.m_currencyConversionOfValue) {
    return grCond1.m_currencyConversionOfValue?1:-1;
  }
  scaleBaseUnit1 = !(grCond1._conditionScales == null?null:grCond1._conditionScales[0])?'':grCond1._conditionScales == null?null:!grCond1._conditionScales[0]?null:grCond1._conditionScales[0].getUnitName_0();
  scaleBaseUnit2 = !(grCond2._conditionScales == null?null:grCond2._conditionScales[0])?'':grCond2._conditionScales == null?null:!grCond2._conditionScales[0]?null:grCond2._conditionScales[0].getUnitName_0();
  compare = compareTo_7(scaleBaseUnit1, scaleBaseUnit2);
  if (compare != 0) {
    return compare;
  }
  compare = $compareTo_7(grCond1.m_keyConditionRate, grCond2.m_keyConditionRate);
  if (compare != 0) {
    return compare;
  }
  if (grCond1.m_origin == 67 || grCond1.m_control == 67 && grCond1.m_origin != 68 && grCond1.m_origin != 71) {
    compare = compareTo_7(grCond1.m_currentItemNumber, grCond2.m_currentItemNumber);
    if (compare != 0) {
      return compare;
    }
    compare = grCond1.counter - grCond2.counter;
  }
  return compare;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_GroupConditionComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'GroupConditionComparator', 340, Ljava_lang_Object_2_classLit);
function $clinit_HeaderCondition(){
  $clinit_HeaderCondition = emptyMethod;
  $clinit_PricingCondition();
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_HeaderCondition_2_classLit);
}

function $addPricingCondition(this$static, prCond){
  var prUnitName, prUnitValue, pricingOnDocumentLevel, pricingUnit;
  null.nullMethod();
  null.nullMethod();
  if (!prCond.m_pricingItem._pricingDocument.loadFromDatabase) {
    pricingUnit = this$static.m_pricingUnit;
    pricingOnDocumentLevel = this$static.m_pricingDocument._pricingOnDocumentLevelIsProcessed;
    $setPricingOnDocumentLevelIsProcessed(this$static.m_pricingDocument, true);
    if (!pricingUnit) {
      prUnitValue = null;
      prUnitName = null;
    }
     else {
      prUnitValue = pricingUnit.getValue_0();
      prUnitName = pricingUnit.getUnitName_0();
    }
    if (this$static.m_calculationType != this$static.m_conditionType.pricingConditionTypeTO.calculationType) {
      try {
        prCond.changeCalculationType(this$static.m_calculationType);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 34)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e0);
      }
    }
    $compareTo_7($getConditionRateValue(this$static), ($clinit_PricingConstants() , ZERO_5)) != 0 && (prCond.m_control != 65?$updatePricingConditionRate($getConditionRateValue(this$static), $getConditionRateUnitName(this$static), prUnitValue, prUnitName, prCond):prCond.m_origin == 68 && $updatePricingConditionRate($getConditionRateValue(this$static), $getConditionRateUnitName(this$static), prUnitValue, prUnitName, prCond));
    $setPricingOnDocumentLevelIsProcessed(this$static.m_pricingDocument, pricingOnDocumentLevel);
  }
}

function $changeConditionRate_0(this$static, rateParam, unitNameParam, prUnitValueParam, prUnitNameParam){
  var prUnitName, prUnitValue, pricingCondition, pricingUnit, processMode, rate, unitName;
  $setPricingOnDocumentLevelIsProcessed(this$static.m_pricingDocument, true);
  $changeConditionRate(this$static, rateParam, unitNameParam, prUnitValueParam, prUnitNameParam);
  rate = $getConditionRateValue(this$static);
  unitName = $getConditionRateUnitName(this$static);
  pricingUnit = this$static.m_pricingUnit;
  if (!pricingUnit) {
    prUnitValue = prUnitValueParam;
    prUnitName = null;
  }
   else {
    prUnitValue = pricingUnit.getValue_0();
    prUnitName = pricingUnit.getUnitName_0();
  }
  processMode = this$static.m_pricingDocument.processMode;
  $setProcessMode(this$static.m_pricingDocument, 89);
  for (null.nullMethod(); null.nullMethod();) {
    pricingCondition = null.nullMethod();
    $updatePricingConditionRate(rate, unitName, prUnitValue, prUnitName, pricingCondition);
  }
  $setProcessMode(this$static.m_pricingDocument, processMode);
  $setPricingOnDocumentLevelIsProcessed(this$static.m_pricingDocument, false);
  this$static.m_pricingDocument.alwaysPerformingCalculation && $calculate_0(this$static.m_pricingDocument);
}

function $removePricingCondition(prCondition){
  if (null.nullMethod()) {
    prCondition.m_headerCondition = null;
    null.nullMethod();
  }
}

function $updatePricingConditionRate(rate, unitName, prUnitValue, prUnitName, pricingCondition){
  try {
    pricingCondition.changeConditionRate(rate, unitName, prUnitValue, prUnitName);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 34)) {
      $clinit_Configuration_0();
    }
     else 
      throw unwrap($e0);
  }
}

function HeaderCondition(stepNo, headerCounter){
  $clinit_HeaderCondition();
  Condition.call(this, stepNo);
  $$init(this);
  this.m_headerCounter = headerCounter;
}

defineClass(74, 15, {65:1, 79:1, 76:1, 280:1, 74:1, 15:1, 279:1, 278:1, 3:1, 4:1}, HeaderCondition);
_.changeCalculationType = function changeCalculationType_0(calcType){
  var processMode;
  $setPricingOnDocumentLevelIsProcessed(this.m_pricingDocument, true);
  $changeCalculationType(this, calcType);
  processMode = this.m_pricingDocument.processMode;
  $setProcessMode(this.m_pricingDocument, 89);
  for (null.nullMethod(); null.nullMethod();) {
    null.nullMethod();
    null.nullMethod();
  }
  $setProcessMode(this.m_pricingDocument, processMode);
  $setPricingOnDocumentLevelIsProcessed(this.m_pricingDocument, false);
  $calculate_0(this.m_pricingDocument);
}
;
_.changeConditionRate = function changeConditionRate_0(rateParam, unitNameParam, prUnitValueParam, prUnitNameParam){
  $changeConditionRate_0(this, rateParam, unitNameParam, prUnitValueParam, prUnitNameParam);
}
;
_.clearStatusMessage = function clearStatusMessage_3(s){
  $fireClearStatusMessage(this.m_pricingDocument, s);
}
;
_.getConditionFindingTimestamp = function getConditionFindingTimestamp_1(){
  return this.conditionFindingTimestamp;
}
;
_.getHeaderCounter = function getHeaderCounter_0(){
  return this.m_headerCounter;
}
;
_.getItemId_0 = function getItemId_2(){
  return '00000000000000000000000000000000';
}
;
_.setStatusMessage = function setStatusMessage_3(s){
  $fireSetStatusMessage(this.m_pricingDocument, s);
}
;
_.m_headerCounter = 0;
var Lcom_sap_spe_pricing_transactiondata_impl_HeaderCondition_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'HeaderCondition', 74, Lcom_sap_spe_pricing_transactiondata_impl_PricingCondition_2_classLit);
function HeaderConditionComparator(){
}

defineClass(584, 1, $intern_21, HeaderConditionComparator);
_.compare = function compare_22(condition1, condition2){
  var compare, cond1, cond2;
  cond1 = dynamicCast(condition1, 74);
  cond2 = dynamicCast(condition2, 74);
  compare = cond1.stepNumber - cond2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  return cond1.m_headerCounter - cond2.m_headerCounter;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_HeaderConditionComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'HeaderConditionComparator', 584, Ljava_lang_Object_2_classLit);
function $getTimestamp_1(this$static){
  !this$static.m_timestamp && (this$static.m_timestamp = today_0());
  return this$static.m_timestamp;
}

function $setBase(this$static, base){
  this$static.m_base = base;
}

function $setCalculationType_0(this$static, calcRule){
  this$static.m_calculationRule = calcRule;
}

function $setConditionControl(this$static, control){
  this$static.m_control = control;
}

function $setCounter_1(this$static, count){
  this$static.m_counter = count;
}

function $setFactor_0(this$static, factor){
  this$static.m_factor = factor;
}

function $setFraction_0(this$static, fraction){
  this$static.m_fraction = fraction;
}

function $setPricingUnit_0(this$static, pricingUnit){
  this$static.m_pricingUnit = pricingUnit;
}

function $setQuantity(this$static, quantity){
  this$static.m_quantity = quantity;
}

function $setRate(this$static, rate){
  this$static.m_rate = rate;
}

function $setStepNo(this$static, stepNo){
  this$static.m_stepNo = stepNo;
}

function $setTimestamp_0(this$static, timestamp){
  this$static.m_timestamp = timestamp;
}

function $setValue_0(this$static, value_0){
  this$static.m_value = value_0;
}

function $setVariantConditionFactor_0(this$static, variantConditionFactor){
  this$static.m_variantConditionFactor = variantConditionFactor;
}

function LastPrice(){
}

defineClass(607, 1, $intern_21, LastPrice);
_.m_calculationRule = 0;
_.m_control = 0;
_.m_counter = 0;
_.m_stepNo = 0;
var Lcom_sap_spe_pricing_transactiondata_impl_LastPrice_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'LastPrice', 607, Ljava_lang_Object_2_classLit);
function $clinit_MainConditionToCopy(){
  $clinit_MainConditionToCopy = emptyMethod;
  $clinit_PricingCondition();
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_MainConditionToCopy_2_classLit);
}

function $$init_0(this$static){
  this$static.duplicatedConditions = new HashMap;
}

function $delete(this$static){
  var iter, prItem, pricingCondition;
  for (iter = $iterator_0(new AbstractMap$2(this$static.duplicatedConditions)); iter.val$outerIter2.hasNext();) {
    pricingCondition = dynamicCast($next_2(iter), 15);
    prItem = pricingCondition.m_pricingItem;
    prItem.m_pricingItemIsUnchangeable || ($removePricingCondition_0(prItem, pricingCondition) , $updatePricingItem_2(prItem._pricingDocument, prItem, pricingCondition));
  }
  $reset(this$static.duplicatedConditions);
}

function MainConditionToCopy(stepNo){
  $clinit_MainConditionToCopy();
  PricingCondition.call(this);
  $$init_0(this);
  this.stepNumber = stepNo;
}

function MainConditionToCopy_0(pricingItem, step, conditionType){
  $clinit_MainConditionToCopy();
  PricingCondition_3.call(this, pricingItem, step, conditionType);
  $$init_0(this);
}

function MainConditionToCopy_1(pricingItem, step, ct, prCondRecord, pricingTimestamp){
  $clinit_MainConditionToCopy();
  PricingCondition_2.call(this, pricingItem, step, null, ct, prCondRecord, pricingTimestamp);
  $$init_0(this);
}

defineClass(61, 15, {65:1, 79:1, 76:1, 280:1, 61:1, 15:1, 279:1, 278:1, 3:1, 4:1}, MainConditionToCopy, MainConditionToCopy_0, MainConditionToCopy_1);
_.changeConditionRate = function changeConditionRate_1(rateParam, unitNameParam, prUnitValueParam, prUnitNameParam){
  var iter, prUnitName, prUnitValue, pricingCondition, pricingUnit, processMode, rate, unitName;
  rate = rateParam;
  unitName = unitNameParam;
  prUnitValue = prUnitValueParam;
  prUnitName = prUnitNameParam;
  $setPricingOnDocumentLevelIsProcessed(this.m_pricingDocument, true);
  $changeConditionRate(this, rateParam, unitNameParam, prUnitValueParam, prUnitNameParam);
  this.m_pricingDocument.m_pricingCompleteRequired = true;
  rate = $getConditionRateValue(this);
  unitName = $getConditionRateUnitName(this);
  pricingUnit = this.m_pricingUnit;
  if (!pricingUnit) {
    prUnitValue = null;
    prUnitName = null;
  }
   else {
    prUnitValue = pricingUnit.getValue_0();
    prUnitName = pricingUnit.getUnitName_0();
  }
  processMode = this.m_pricingDocument.processMode;
  $setProcessMode(this.m_pricingDocument, 89);
  for (iter = $iterator_0(new AbstractMap$2(this.duplicatedConditions)); iter.val$outerIter2.hasNext();) {
    pricingCondition = dynamicCast($next_2(iter), 15);
    try {
      pricingCondition.changeConditionRate(rate, unitName, prUnitValue, prUnitName);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 34)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
  }
  $setProcessMode(this.m_pricingDocument, processMode);
  $setPricingOnDocumentLevelIsProcessed(this.m_pricingDocument, false);
  $calculate_0(this.m_pricingDocument);
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_MainConditionToCopy_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'MainConditionToCopy', 61, Lcom_sap_spe_pricing_transactiondata_impl_PricingCondition_2_classLit);
function MainConditionToCopyComparator(){
}

defineClass(600, 1, $intern_21, MainConditionToCopyComparator);
_.compare = function compare_23(condition1, condition2){
  var compare, cond1, cond2;
  cond1 = dynamicCast(condition1, 61);
  cond2 = dynamicCast(condition2, 61);
  compare = cond1.stepNumber - cond2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  return cond1.counter - cond2.counter;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_MainConditionToCopyComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'MainConditionToCopyComparator', 600, Ljava_lang_Object_2_classLit);
function $compare(prcond1, prcond2){
  var compare, cond1, cond2, counter1, counter2, origin1, origin2, varcond1, varcond2, varnumh1, varnumh2;
  cond1 = dynamicCast(prcond1, 15);
  cond2 = dynamicCast(prcond2, 15);
  compare = compareTo_7(cond1.getConditionTypeName(), cond2.getConditionTypeName());
  if (compare != 0) {
    return compare;
  }
  varcond1 = cond1.m_variant && cond1.m_varcondKey != null?cond1.m_varcondKey:'0';
  varcond2 = cond2.m_variant && cond2.m_varcondKey != null?cond2.m_varcondKey:'0';
  compare = compareTo_7(varcond1, varcond2);
  if (compare != 0) {
    return compare;
  }
  varnumh1 = cond1.m_variant && cond1.m_conditionRecordId != null?cond1.m_conditionRecordId:'0';
  varnumh2 = cond2.m_variant && cond2.m_conditionRecordId != null?cond2.m_conditionRecordId:'0';
  compare = compareTo_7(varnumh1, varnumh2);
  if (compare != 0) {
    return compare;
  }
  origin1 = valueOf_0(cond1.m_origin == 70?65:cond1.m_origin);
  origin2 = valueOf_0(cond2.m_origin == 70?65:cond2.m_origin);
  compare = compareTo_7(origin1, origin2);
  if (compare != 0) {
    return compare;
  }
  counter1 = cond1.counter;
  counter2 = cond2.counter;
  return counter1 - counter2;
}

function ManualConditionComparatorB(){
}

defineClass(345, 1, $intern_21, ManualConditionComparatorB);
_.compare = function compare_24(prcond1, prcond2){
  return $compare(prcond1, prcond2);
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_ManualConditionComparatorB_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ManualConditionComparatorB', 345, Ljava_lang_Object_2_classLit);
function ManualConditionComparatorC(){
  this.comparatorB = new ManualConditionComparatorB;
}

defineClass(608, 1, $intern_21, ManualConditionComparatorC);
_.compare = function compare_25(prcond1, prcond2){
  return -$compare(prcond1, prcond2);
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_ManualConditionComparatorC_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ManualConditionComparatorC', 608, Ljava_lang_Object_2_classLit);
function $clinit_PricingAccumulator(){
  $clinit_PricingAccumulator = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingAccumulator_2_classLit);
}

function $accumulateValues(this$static, condition){
  var conditionValueValue, oldPTermNewDetermined, pterm, ptermNewDetermined, subtotalFlag, subtotalString;
  conditionValueValue = condition.m_conditionValue;
  $clinit_SAPString();
  if ($indexOf('AKLMXZ', fromCodePoint(condition.m_inactive)) < 0) {
    if (this$static.m_yInactive == 32 && condition.m_inactive == 32 && condition.m_conditionClass != 32) {
      this$static.m_netValue = this$static.ZERO;
      this$static.m_netValueWithoutFreight = this$static.ZERO;
      this$static.m_taxValue = this$static.ZERO;
      this$static.m_yInactive = 88;
    }
    if (condition.m_conditionClass == 66) {
      this$static.m_subtotal = conditionValueValue;
      if (condition.m_statistical) {
        if (!isFixedAmountOrPercentage(condition.m_calculationType) && this$static.m_lastPrice.m_fraction.m_numerator == 0) {
          $signum(condition.m_conditionBase.getValue_0()) != 0 && $setQuantity(this$static.m_lastPrice, condition.m_conditionBase);
          $setPricingUnit_0(this$static.m_lastPrice, condition.m_pricingUnit);
          $setFraction_0(this$static.m_lastPrice, condition.m_fraction);
          $setBase(this$static.m_lastPrice, condition.m_conditionBase);
          $setCalculationType_0(this$static.m_lastPrice, condition.m_calculationType);
          $setRate(this$static.m_lastPrice, condition.m_conditionRate);
          $setValue_0(this$static.m_lastPrice, $getConditionValue(condition));
          $setFactor_0(this$static.m_lastPrice, $getFactor(condition.m_factor));
        }
      }
       else {
        $setStepNo(this$static.m_lastPrice, condition.stepNumber);
        $setCounter_1(this$static.m_lastPrice, condition.counter);
        condition.getConditionTypeName();
        this$static.m_netValue = conditionValueValue;
        condition.m_conditionCategory != 70 && (this$static.m_netValueWithoutFreight = conditionValueValue);
        if (!isFixedAmountOrPercentage(condition.m_calculationType)) {
          $signum(condition.m_conditionBase.getValue_0()) != 0 && $setQuantity(this$static.m_lastPrice, condition.m_conditionBase);
          $setPricingUnit_0(this$static.m_lastPrice, condition.m_pricingUnit);
          $setFraction_0(this$static.m_lastPrice, condition.m_fraction);
          $setBase(this$static.m_lastPrice, condition.m_conditionBase);
          $setCalculationType_0(this$static.m_lastPrice, condition.m_calculationType);
          $setRate(this$static.m_lastPrice, condition.m_conditionRate);
          $setValue_0(this$static.m_lastPrice, $getConditionValue(condition));
          $setFactor_0(this$static.m_lastPrice, $getFactor(condition.m_factor));
        }
      }
      $setConditionControl(this$static.m_lastPrice, condition.m_control);
      $setTimestamp_0(this$static.m_lastPrice, condition.getConditionFindingTimestamp());
      condition.m_varcondKey != null && $setVariantConditionFactor_0(this$static.m_lastPrice, $getFactor(condition.m_varFactor));
    }
     else {
      if (condition.m_conditionClass == 32)
      ;
      else {
        if ($signum(conditionValueValue) != 0) {
          this$static.m_subtotal = $add_1(this$static.m_subtotal, conditionValueValue);
          if (!condition.m_statistical) {
            if (condition.m_conditionClass == 68) {
              this$static.m_taxValue = $add_1(this$static.m_taxValue, conditionValueValue);
            }
             else {
              if (condition.m_conditionCategory != 103) {
                this$static.m_netValue = $add_1(this$static.m_netValue, conditionValueValue);
                condition.m_conditionCategory != 70 && (this$static.m_netValueWithoutFreight = $add_1(this$static.m_netValueWithoutFreight, conditionValueValue));
              }
            }
          }
        }
      }
    }
    subtotalFlag = condition.m_subtotalFlag;
    switch (subtotalFlag) {
      case 32:
        break;
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 55:
      case 56:
      case 83:
        {
          if ($signum(conditionValueValue) != 0) {
            subtotalString = (condition.m_subtotalFlagAsString == null && (condition.m_subtotalFlagAsString = valueOf_0(condition.m_subtotalFlag)) , condition.m_subtotalFlagAsString);
            $putStringValue(this$static.m_subtotals, subtotalString, $add_1(dynamicCast($getStringValue(this$static.m_subtotals, subtotalString), 12), conditionValueValue));
          }
        }

        break;
      case 57:
      case 66:
      case 67:
        {
          subtotalString = (condition.m_subtotalFlagAsString == null && (condition.m_subtotalFlagAsString = valueOf_0(condition.m_subtotalFlag)) , condition.m_subtotalFlagAsString);
          condition.m_conditionClass == 66?$putStringValue(this$static.m_subtotals, subtotalString, conditionValueValue):$signum(conditionValueValue) != 0 && $putStringValue(this$static.m_subtotals, subtotalString, $add_1(dynamicCast($getStringValue(this$static.m_subtotals, subtotalString), 12), conditionValueValue));
        }

        break;
      case 75:
      case 76:
      case 77:
        {
          if ($signum(conditionValueValue) != 0) {
            subtotalString = (condition.m_subtotalFlagAsString == null && (condition.m_subtotalFlagAsString = valueOf_0(condition.m_subtotalFlag)) , condition.m_subtotalFlagAsString);
            $putStringValue(this$static.m_subtotals, subtotalString, $add_1(dynamicCast($getStringValue(this$static.m_subtotals, subtotalString), 12), condition.m_conditionRate.m_value));
          }
        }

        break;
      case 65:
        $signum(condition.m_pricingItem.m_salesQuantity.m_value) != 0 && $putStringValue(this$static.m_subtotals, (condition.m_subtotalFlagAsString == null && (condition.m_subtotalFlagAsString = valueOf_0(condition.m_subtotalFlag)) , condition.m_subtotalFlagAsString), $divide(conditionValueValue, condition.m_pricingItem.m_salesQuantity.m_value, condition.m_pricingItem._pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), valueOf_7(4)));
        break;
      case 81:
      case 89:
      case 90:
        break;
      default:throw new PricingRuntimeException_0(158, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [valueOf_0(subtotalFlag)]));
    }
    if (condition.m_conditionCategory == 69 && condition.m_inactive == 32) {
      $signum(conditionValueValue) != 0 && (this$static.m_skonto = $add_1(this$static.m_skonto, conditionValueValue));
      (condition.m_calculationType == 65 || condition.m_calculationType == 87 || condition.m_calculationType == 85) && condition.m_conditionBase.getValue_0();
    }
  }
  condition.m_conditionCategory == 70 && condition.m_inactive == 32 && $signum(conditionValueValue) != 0 && (this$static.m_freight = $add_1(this$static.m_freight, conditionValueValue));
  this$static.m_netPrice = null;
  pterm = condition.m_paymentTerm;
  if (pterm != null && !$equals_7(pterm, '') && condition.m_inactive == 32) {
    ptermNewDetermined = condition.m_conditionRecordDetermined;
    oldPTermNewDetermined = '';
    $hasStringValue(this$static.m_dynamicReturnValues, 'PTERM_NEW') && (oldPTermNewDetermined = dynamicCastToString($getStringValue(this$static.m_dynamicReturnValues, 'PTERM_NEW')));
    if (ptermNewDetermined) {
      $putStringValue(this$static.m_dynamicReturnValues, 'PTERM', pterm);
      $putStringValue(this$static.m_dynamicReturnValues, 'PTERM_NEW', 'X');
    }
     else if (!$equals_7(oldPTermNewDetermined, 'X')) {
      $putStringValue(this$static.m_dynamicReturnValues, 'PTERM', pterm);
      $putStringValue(this$static.m_dynamicReturnValues, 'PTERM_NEW', '');
    }
  }
}

function $calculateNetPrice(this$static){
  var convResult, netPriceAlreadyDetermined;
  netPriceAlreadyDetermined = false;
  if ($compareTo_7(this$static.m_netValue, this$static.m_lastPrice.m_value.m_value) == 0 && $signum(this$static.m_lastPrice.m_value.m_value) != 0 && this$static.m_lastPrice.m_control != 69 && (!this$static.m_lastPrice.m_variantConditionFactor || $compareTo_7(this$static.m_lastPrice.m_variantConditionFactor, ($clinit_PricingConstants() , ONE_1)) == 0)) {
    if (this$static.m_lastPrice.m_rate.m_unit.equals$(this$static.pricingDocument._documentCurrencyUnit)) {
      this$static.m_netPrice = this$static.m_lastPrice.m_rate.m_value;
      netPriceAlreadyDetermined = true;
    }
     else {
      try {
        convResult = convertTo_0('', this$static.pricingDocument.m_tryDirectCurrencyConversion, this$static.m_lastPrice.m_rate, $getTimestamp_1(this$static.m_lastPrice), this$static.ZERO, this$static.pricingDocument._localCurrencyUnit, this$static.pricingItem._exchangeRateDate, $setScale(this$static.pricingItem.m_exchangeRate.resultingRate, 5, valueOf_7(4)), this$static.pricingDocument._documentCurrencyUnit, this$static.pricingItem.m_exchangeRateType);
        this$static.m_netPrice = convResult.m_value.m_value;
        netPriceAlreadyDetermined = true;
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          $clinit_Configuration_0();
        }
         else 
          throw unwrap($e0);
      }
    }
    this$static.pricingItem.m_isReturn && !!this$static.m_netPrice && (this$static.m_netPrice = $negate(this$static.m_netPrice));
  }
  netPriceAlreadyDetermined || (!!this$static.m_lastPrice.m_base && $signum(this$static.m_lastPrice.m_base.getValue_0()) != 0?isTimeDependent(this$static.m_lastPrice.m_calculationRule)?!!this$static.m_lastPrice.m_factor && $signum(this$static.m_lastPrice.m_factor) != 0?(this$static.m_netPrice = $divide($multiply(this$static.m_netValue, this$static.m_lastPrice.m_pricingUnit.getValue_0()), $multiply(this$static.m_lastPrice.m_base.getValue_0(), this$static.m_lastPrice.m_factor), this$static.pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), valueOf_7(4))):(this$static.m_netPrice = $divide($multiply(this$static.m_netValue, this$static.m_lastPrice.m_pricingUnit.getValue_0()), this$static.m_lastPrice.m_base.getValue_0(), this$static.pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), valueOf_7(4))):(this$static.m_netPrice = $divide($multiply(this$static.m_netValue, this$static.m_lastPrice.m_pricingUnit.getValue_0()), this$static.m_lastPrice.m_base.getValue_0(), this$static.pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), valueOf_7(4))):(this$static.m_netPrice = this$static.ZERO));
}

function $getNetPrice(this$static){
  !this$static.m_netPrice && $calculateNetPrice(this$static);
  return $getCurrencyValue(($getConversionEngine() , this$static.m_netPrice), this$static.pricingDocument._documentCurrencyUnit);
}

function $getNetValue_0(this$static){
  return $getCurrencyValue(($getConversionEngine() , this$static.m_netValue), this$static.pricingDocument._documentCurrencyUnit);
}

function $getSubtotal(this$static){
  return $getCurrencyValue(($getConversionEngine() , this$static.m_subtotal), this$static.pricingDocument._documentCurrencyUnit);
}

function $init_0(this$static, pricingItem){
  var condTypes, i_0, iterator, pricingProcedure, subtotals;
  this$static.pricingDocument = pricingItem._pricingDocument;
  this$static.pricingItem = pricingItem;
  $getConversionEngine();
  this$static.zeroCurrencyValue = $getCurrencyValue(($clinit_PricingConstants() , ZERO_5), this$static.pricingDocument._documentCurrencyUnit);
  this$static.ZERO = this$static.zeroCurrencyValue.m_value;
  this$static.m_netValue = this$static.ZERO;
  this$static.m_taxValue = this$static.ZERO;
  this$static.m_subtotal = this$static.ZERO;
  pricingProcedure = this$static.pricingDocument._pricingProcedure;
  subtotals = pricingProcedure.subtotals;
  !this$static.m_subtotals?(this$static.m_subtotals = new HashMap):$reset(this$static.m_subtotals);
  for (iterator = $iterator(new AbstractMap$1(subtotals.map_0)); $hasNext(iterator.val$outerIter2);) {
    $putStringValue(this$static.m_subtotals, dynamicCastToString($next_1(iterator)), this$static.ZERO);
  }
  this$static.m_skonto = this$static.ZERO;
  this$static.m_freight = this$static.ZERO;
  this$static.m_netValueWithoutFreight = this$static.ZERO;
  condTypes = this$static.pricingDocument._pricingProcedure.conditionTypesWithPurpose;
  condTypes != null && condTypes.length > 0 && (!this$static.m_accumulatedValues?(this$static.m_accumulatedValues = new HashMap_0(condTypes.length)):$reset(this$static.m_accumulatedValues));
  for (i_0 = 0; i_0 < condTypes.length; i_0++) {
    $put_0(this$static.m_accumulatedValues, null.nullField, this$static.ZERO);
  }
  this$static.m_dynamicReturnValues?$reset(this$static.m_dynamicReturnValues):(this$static.m_dynamicReturnValues = new HashMap);
  this$static.m_yInactive = 32;
  this$static.m_lastPrice = new LastPrice;
  $setCalculationType_0(this$static.m_lastPrice, 67);
  $setFraction_0(this$static.m_lastPrice, new Fraction(0, 0));
  try {
    $getZeroExchangeRate(($getConversionEngine() , pricingItem.m_exchangeRateType), this$static.pricingDocument._documentCurrencyUnit.getUnitName_0());
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 17))
      throw unwrap($e0);
  }
  $setStepNo(this$static.m_lastPrice, 0);
  $setCounter_1(this$static.m_lastPrice, 1);
  $setBase(this$static.m_lastPrice, pricingItem.m_baseQuantity);
  $setQuantity(this$static.m_lastPrice, pricingItem.m_baseQuantity);
  $setRate(this$static.m_lastPrice, this$static.pricingDocument.m_ZeroRate);
  $setValue_0(this$static.m_lastPrice, this$static.pricingDocument.m_ZeroRate);
  $setPricingUnit_0(this$static.m_lastPrice, $getQuantityValue(($getConversionEngine() , ONE_1), dynamicCast(pricingItem.m_baseQuantity.m_unit, 289)));
  $setConditionControl(this$static.m_lastPrice, 32);
}

function PricingAccumulator(){
  $clinit_PricingAccumulator();
}

defineClass(593, 1, $intern_21, PricingAccumulator);
_.m_yInactive = 0;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingAccumulator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingAccumulator', 593, Ljava_lang_Object_2_classLit);
function $clinit_PricingConditionBuilder(){
  $clinit_PricingConditionBuilder = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionBuilder_2_classLit);
}

function $getPricingConditions_1(documentCurrencyName){
  var conditionCurrency, conditionTO, conditions, conversionEngine, documentCurrency, unit;
  conditions = new ExternalPricingConditions;
  try {
    conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    documentCurrency = ($checkArg(documentCurrencyName) , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, documentCurrencyName));
    for (null.nullMethod(); null.nullMethod();) {
      conditionTO = null.nullMethod();
      null.nullField != 71 && (85 == null.nullField?'%7':($clinit_PricingCustomizingConstants$CalculationType() , $clinit_SAPString() , $indexOf('AHIUW', fromCodePoint(null.nullField)) >= 0 && '%'));
      conditionCurrency = $getCurrencyUnit(conversionEngine, null.nullField);
      $getCurrencyValue_0(null.nullField, conditionCurrency, true, 2);
      $clinit_PricingCustomizingConstants$CalculationType();
      $clinit_SAPString();
      $indexOf('ABHIUW', fromCodePoint(null.nullField)) >= 0 && $getCurrencyValue_0(null.nullField, documentCurrency, true, 5).m_value;
      $getCurrencyValue_0(null.nullField, documentCurrency, true, 2);
      $getCurrencyValue_0(null.nullField, documentCurrency, true, 2);
      if (null.nullMethod()) {
        unit = ($checkArg('') , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, ''));
        $getCurrencyValue_0(null.nullField, unit, true, 7);
      }
       else if (null.nullMethod()) {
        unit = $getCurrencyUnit(conversionEngine, null.nullField);
        $getCurrencyValue_0(null.nullField, unit, true, 5);
      }
      $equals_7('00000000000000000000000000000000', null.nullField) && null;
      $add_5(conditions.conditions, conditionTO);
    }
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      $clinit_Configuration_0();
    }
     else 
      throw unwrap($e0);
  }
  return conditions;
}

function PricingConditionBuilder(){
  $clinit_PricingConditionBuilder();
}

defineClass(473, 663, $intern_22, PricingConditionBuilder);
_.create_0 = function create_40(keys_0){
  var object, objectType, usage, numberOfItems, documentIds;
  usage = keys_0[1];
  objectType = keys_0[2];
  throwClassCastExceptionUnlessNull($getDAO_0(($clinit_DAOManager() , $clinit_DAOManager() , SINGELTON_2), usage, Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionBuilder_2_classLit));
  object = null;
  $equals_7(objectType, 'DO')?(object = (null.nullMethod() , $getPricingConditions_1(keys_0[4]))):$equals_7(objectType, 'IT') && (object = (numberOfItems = __parseAndValidateInt(keys_0[3]) , documentIds = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, numberOfItems, 4, 1) , arraycopy(keys_0, 4, documentIds, 0, numberOfItems) , arraycopy(keys_0, 4 + numberOfItems, documentIds, 0, numberOfItems) , null.nullMethod() , $getPricingConditions_1(keys_0[keys_0.length - 1])));
  return object;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionBuilder_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConditionBuilder', 473, Lcom_sap_spe_base_cache_BuilderAdapter_2_classLit);
function PricingConditionComparator(){
}

defineClass(602, 1, $intern_21, PricingConditionComparator);
_.compare = function compare_26(condition1, condition2){
  var accr1, accr2, calcType1, calcType2, compare, cond1, cond2, condTypeName1, condTypeName2, groupCondFlag1, groupCondFlag2, headerCond1, headerCond2, headerCondCounter1, headerCondCounter2, inactive1, inactive2, origin1, origin2, rate1, rate2, stat1, stat2, tax1, tax2, varnumh1, varnumh2;
  if (condition1 == null) {
    if (condition2 == null) {
      return 0;
    }
    return -1;
  }
   else if (condition2 == null) {
    return 1;
  }
  cond1 = dynamicCast(condition1, 15);
  cond2 = dynamicCast(condition2, 15);
  compare = cond1.stepNumber - cond2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  headerCond1 = cond1.m_headerCondition;
  headerCond2 = cond2.m_headerCondition;
  headerCondCounter1 = !headerCond1?0:headerCond1.m_headerCounter;
  headerCondCounter2 = !headerCond2?0:headerCond2.m_headerCounter;
  compare = headerCondCounter1 - headerCondCounter2;
  if (compare != 0) {
    return compare;
  }
  condTypeName1 = cond1.getConditionTypeName();
  condTypeName1 == null && (condTypeName1 = '');
  condTypeName2 = cond2.getConditionTypeName();
  condTypeName2 == null && (condTypeName2 = '');
  compare = compareTo_7(condTypeName1, condTypeName2);
  if (compare != 0) {
    return compare;
  }
  tax1 = (cond1.m_salesTaxCode == null && (cond1.m_salesTaxCode = '') , cond1.m_salesTaxCode);
  tax1 == null && (tax1 = '');
  tax2 = (cond2.m_salesTaxCode == null && (cond2.m_salesTaxCode = '') , cond2.m_salesTaxCode);
  tax2 == null && (tax2 = '');
  compare = compareTo_7(tax1, tax2);
  if (compare != 0) {
    return compare;
  }
  stat1 = cond1.m_statistical;
  stat2 = cond2.m_statistical;
  if (stat1 != stat2) {
    return stat1?1:-1;
  }
  accr1 = cond1.m_accruals;
  accr2 = cond2.m_accruals;
  if (accr1 != accr2) {
    return accr1?1:-1;
  }
  origin1 = cond1.m_origin;
  origin2 = cond2.m_origin;
  if (origin1 != origin2) {
    return origin1 - origin2;
  }
  calcType1 = cond1.m_calculationType;
  calcType2 = cond2.m_calculationType;
  if (calcType1 != calcType2) {
    return calcType1 - calcType2;
  }
  groupCondFlag1 = cond1.m_isGroupCondition;
  groupCondFlag2 = cond2.m_isGroupCondition;
  if (groupCondFlag1 != groupCondFlag2) {
    return groupCondFlag1?1:-1;
  }
  compare = $getGroupCondIndex(cond1) - $getGroupCondIndex(cond2);
  if (compare != 0) {
    return compare;
  }
  inactive1 = cond1.m_inactive;
  inactive2 = cond2.m_inactive;
  if (inactive1 != inactive2) {
    return inactive1 - inactive2;
  }
  rate1 = cond1.m_conditionRate.m_value;
  rate2 = cond2.m_conditionRate.m_value;
  compare = $compareTo_7(rate1, rate2);
  if (compare != 0) {
    return compare;
  }
  varnumh1 = cond1.m_conditionRecordId == null?'':cond1.m_conditionRecordId;
  varnumh2 = cond2.m_conditionRecordId == null?'':cond2.m_conditionRecordId;
  compare = compareTo_7(varnumh1, varnumh2);
  if (compare != 0) {
    return compare;
  }
  compare = compareTo_7(cond1.getItemId_0(), cond2.getItemId_0());
  if (compare != 0) {
    return compare;
  }
  compare = cond1.counter - cond2.counter;
  return compare;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConditionComparator', 602, Ljava_lang_Object_2_classLit);
function $getFactor(this$static){
  return !this$static.f?($clinit_PricingConstants() , ZERO_5):this$static.f;
}

function $nonZeroMultiply(this$static, bd){
  return !this$static.f?bd:$multiply(bd, this$static.f);
}

function $setFactor_1(this$static, f){
  !f || $compareTo_7(($clinit_PricingConstants() , ZERO_5), f) == 0?(this$static.f = null):(this$static.f = f);
}

function PricingConditionFactor(){
}

defineClass(270, 1, $intern_21, PricingConditionFactor);
_.toString$ = function toString_19(){
  return $toPlainString(!this.f?($clinit_PricingConstants() , ZERO_5):this.f);
}
;
_.f = null;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionFactor_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConditionFactor', 270, Ljava_lang_Object_2_classLit);
function $getCacheManager_1(){
  var cacheManager;
  cacheManager = ($clinit_CacheManagerFactory() , new CacheManagerImpl);
  try {
    $applyConfiguration_0(cacheManager, 'AP_PRC_PR');
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 80)) {
      throw new PricingRuntimeException_0(9);
    }
     else 
      throw unwrap($e0);
  }
  return cacheManager;
}

function PricingObjectManager_0(){
  var cacheManager, region;
  this.usage = 'A';
  cacheManager = $getCacheManager_1();
  region = (cacheManager.cacheRegion = new CacheRegionImpl(cacheManager.appName, '/AP/PRC/Pricing/Transactiondata') , cacheManager.cacheRegion);
  if (!region) {
    throw new PricingRuntimeException_0(11);
  }
  this.cacheFacade = $getCacheFacade(region);
}

defineClass(499, 1, {});
var Lcom_sap_spe_pricing_transactiondata_impl_PricingObjectManager_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingObjectManager', 499, Ljava_lang_Object_2_classLit);
function $getPricingConditions_2(this$static, documentIds, itemIds, documentCurrency){
  var key, numberOfItems, pricingConditions;
  numberOfItems = documentIds.length;
  key = create_10(this$static.usage, '' + numberOfItems, documentIds, itemIds, documentCurrency);
  pricingConditions = dynamicCast(this$static.cacheFacade.get_3(key, false), 248);
  return pricingConditions;
}

function PricingConditionObjectManager(){
  PricingObjectManager_0.call(this);
}

defineClass(500, 499, {}, PricingConditionObjectManager);
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionObjectManager_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConditionObjectManager', 500, Lcom_sap_spe_pricing_transactiondata_impl_PricingObjectManager_2_classLit);
function PricingConditionPointerComparator(){
}

defineClass(341, 1, $intern_21, PricingConditionPointerComparator);
_.compare = function compare_27(pricingCondition1, pricingCondition2){
  var compare, groupCond1, groupCond2, prCond1, prCond2;
  prCond1 = dynamicCast(pricingCondition1, 15);
  prCond2 = dynamicCast(pricingCondition2, 15);
  groupCond1 = prCond1.m_groupCondition;
  groupCond2 = prCond2.m_groupCondition;
  if (prCond1 == prCond2) {
    return 0;
  }
  compare = prCond1.stepNumber - prCond2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  compare = groupCond1.m_index - groupCond2.m_index;
  if (compare != 0) {
    return compare;
  }
  if (groupCond1.m_pricingConditionWithRoundingDiff == prCond1) {
    return 1;
  }
  if (groupCond2.m_pricingConditionWithRoundingDiff == prCond2) {
    return -1;
  }
  compare = compareTo_7(prCond1.getItemId_0(), prCond2.getItemId_0());
  if (compare != 0) {
    return compare;
  }
  compare = prCond1.counter - prCond2.counter;
  return compare;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionPointerComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConditionPointerComparator', 341, Ljava_lang_Object_2_classLit);
function $clinit_PricingConditionSearchCritera(){
  $clinit_PricingConditionSearchCritera = emptyMethod;
  SINGELTON_5 = new PricingConditionSearchCritera;
}

function PricingConditionSearchCritera(){
}

defineClass(606, 1, {65:1, 3:1}, PricingConditionSearchCritera);
_.getConditionRecord = function getConditionRecord_2(){
  return null;
}
;
_.getCounter_0 = function getCounter_3(){
  return this.counter;
}
;
_.getStep = function getStep_1(){
  return null;
}
;
_.getStepNumber_0 = function getStepNumber_3(){
  return this.stepNumber;
}
;
_.counter = 0;
_.stepNumber = 0;
var SINGELTON_5;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionSearchCritera_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConditionSearchCritera', 606, Ljava_lang_Object_2_classLit);
function PricingConditionTOComparator(){
}

defineClass(567, 1, $intern_21, PricingConditionTOComparator);
_.compare = function compare_28(o1, o2){
  var compare, to1, to2;
  to1 = dynamicCast(o1, 98);
  to2 = dynamicCast(o2, 98);
  compare = compareTo_7(to1.itemId, to2.itemId);
  if (compare != 0) {
    return compare;
  }
  compare = to1.stepNumber - to2.stepNumber;
  if (compare != 0) {
    return compare;
  }
  return to1.counter - to2.counter;
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConditionTOComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConditionTOComparator', 567, Ljava_lang_Object_2_classLit);
function $clinit_PricingConstants(){
  $clinit_PricingConstants = emptyMethod;
  MINUS_ONE = new BigDecimal_4('-1');
  ZERO_5 = new BigDecimal_4('0');
  ONE_1 = new BigDecimal_4('1');
  ONE_SCALE_3 = $setScale(ONE_1, 3, ($clinit_RoundingMode() , UNNECESSARY));
  HUNDRED = new BigDecimal_4('100');
  new BigDecimal_4('-100');
  new BigDecimal_4('1000');
  TEN_THOUSAND = new BigDecimal_4('10000');
  POS_INFINITY_FOR_MANUAL_CHANGES = new BigDecimal_4('999999999999');
  NEG_INFINITY_FOR_MANUAL_CHANGES = new BigDecimal_4('-999999999999');
  NEG_INFINITY = new BigDecimal_4('-999999999999');
  MAX_RATE = new BigDecimal_4('99999999999');
  MIN_RATE = new BigDecimal_4('-99999999999');
  NULL_FRACTION = new Fraction(0, 0);
  new SAPTimestamp(1, 1, 1);
  INITIAL_CHAR_ARRAY = initDim(C_classLit, $intern_4, 0, 1, 7, 1);
}

var HUNDRED, INITIAL_CHAR_ARRAY, MAX_RATE, MINUS_ONE, MIN_RATE, NEG_INFINITY, NEG_INFINITY_FOR_MANUAL_CHANGES, NULL_FRACTION, ONE_1, ONE_SCALE_3, POS_INFINITY_FOR_MANUAL_CHANGES, TEN_THOUSAND, ZERO_5;
function $clinit_PricingConverter(){
  $clinit_PricingConverter = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingConverter_2_classLit);
  prCurrConvTracer = new PricingCurrencyConversionTracer;
}

function convertTo(pricingCondition, directConversionParam, fromCurrencyValue, fromConvDate, fromExRate, localCurrency, toConvDate, toExRate, toCurrency, exRateTypeName){
  $clinit_PricingConverter();
  var directAmount, foreignAmount, localAmount, prCurrResult;
  try {
    prCurrResult = convertTo_0(pricingCondition.getConditionTypeName(), directConversionParam, fromCurrencyValue, fromConvDate, fromExRate, localCurrency, toConvDate, toExRate, toCurrency, exRateTypeName);
    localAmount = intermediateLocalCurrencyValue;
    foreignAmount = prCurrResult.m_value.m_value;
    directAmount = prCurrResult.m_value.m_value;
    prCurrResult.m_foreignExchangeRate?$setScale(prCurrResult.m_foreignExchangeRate.resultingRate, 5, valueOf_7(4)):!!prCurrResult.m_directExchangeRate && $setScale(prCurrResult.m_directExchangeRate.resultingRate, 5, valueOf_7(4));
    $setTrace_0(prCurrConvTracer, fromCurrencyValue, localCurrency, toCurrency, localAmount, foreignAmount, directAmount);
    return prCurrResult;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      throw new CurrencyConversionException_0(778, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [pricingCondition.getConditionTypeName(), fromCurrencyValue.m_unit.getUnitName_0(), toCurrency.getUnitName_0()]));
    }
     else 
      throw unwrap($e0);
  }
}

function convertTo_0(condTypeName, directConversionParam, fromCurrencyValue, fromConvDate, fromExRate, localCurrency, toConvDate, toExRate, toCurrency, exRateTypeName){
  $clinit_PricingConverter();
  var convEng, currResult, currValue, directConversion, e, fromCurrency, fromCurrencyDiffersFromLocalCurrency, localCurrencyDiffersFromToCurrency, prCurrResult;
  directConversion = directConversionParam;
  convEng = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  prCurrResult = null;
  currValue = null;
  fromCurrency = dynamicCast(fromCurrencyValue.m_unit, 26);
  if ($equals_7(toCurrency.getUnitName_0(), fromCurrency.getUnitName_0())) {
    prCurrResult = new PricingCurrencyConversionResult(fromCurrencyValue);
    try {
      $setLocalExchangeRate(prCurrResult, $newIdentityExchangeRate(exRateTypeName, fromCurrency.getUnitName_0(), toConvDate));
      $setForeignExchangeRate(prCurrResult, $newIdentityExchangeRate(exRateTypeName, fromCurrency.getUnitName_0(), toConvDate));
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (!instanceOf($e0, 17))
        throw unwrap($e0);
    }
    return prCurrResult;
  }
  if (fromCurrency.isEMUCurrency() && toCurrency.isEMUCurrency()) {
    try {
      currResult = $convertToLocalCurrency(fromCurrencyValue, toConvDate, toCurrency, exRateTypeName);
      prCurrResult = new PricingCurrencyConversionResult(currResult.m_value);
      prCurrResult.m_foreignExchangeRate = null;
      $setDirectExchangeRate(prCurrResult, currResult.m_exchangeRate);
      prCurrResult.m_localExchangeRate = null;
      return prCurrResult;
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 9)) {
        throw new CurrencyConversionException_0(778, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condTypeName, fromCurrency.getUnitName_0(), toCurrency.getUnitName_0()]));
      }
       else 
        throw unwrap($e1);
    }
  }
   else {
    fromCurrencyDiffersFromLocalCurrency = !$equals_7(fromCurrency.getUnitName_0(), localCurrency.getUnitName_0());
    localCurrencyDiffersFromToCurrency = !$equals_7(localCurrency.getUnitName_0(), toCurrency.getUnitName_0());
    if (directConversionParam && fromCurrencyDiffersFromLocalCurrency && localCurrencyDiffersFromToCurrency) {
      try {
        currResult = $convertToLocalCurrency(fromCurrencyValue, toConvDate, toCurrency, exRateTypeName);
        prCurrResult = new PricingCurrencyConversionResult(currResult.m_value);
        prCurrResult.m_foreignExchangeRate = null;
        $setDirectExchangeRate(prCurrResult, currResult.m_exchangeRate);
        prCurrResult.m_localExchangeRate = null;
        return prCurrResult;
      }
       catch ($e2) {
        $e2 = wrap($e2);
        if (instanceOf($e2, 9)) {
          directConversion = false;
        }
         else 
          throw unwrap($e2);
      }
    }
    if (!directConversion || !fromCurrencyDiffersFromLocalCurrency || !localCurrencyDiffersFromToCurrency) {
      if (fromCurrencyDiffersFromLocalCurrency) {
        try {
          currResult = $convertToLocalCurrency_0(fromCurrencyValue, fromConvDate, localCurrency, exRateTypeName, fromExRate);
          prCurrResult = new PricingCurrencyConversionResult(currResult.m_value);
          $setLocalExchangeRate(prCurrResult, currResult.m_exchangeRate);
        }
         catch ($e3) {
          $e3 = wrap($e3);
          if (instanceOf($e3, 9)) {
            e = $e3;
            throw new CurrencyConversionException_0(208, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condTypeName, fromCurrency.getUnitName_0(), localCurrency.getUnitName_0() + ': ' + e.getMessage_0()]));
          }
           else 
            throw unwrap($e3);
        }
      }
       else {
        prCurrResult = new PricingCurrencyConversionResult(fromCurrencyValue);
        try {
          $setLocalExchangeRate(prCurrResult, $newIdentityExchangeRate(exRateTypeName, fromCurrency.getUnitName_0(), toConvDate));
        }
         catch ($e4) {
          $e4 = wrap($e4);
          if (!instanceOf($e4, 17))
            throw unwrap($e4);
        }
      }
      try {
        currValue = $getCurrencyValue_1(convEng, prCurrResult.m_value.m_value, prCurrResult.m_value.m_unit.getUnitName_0());
      }
       catch ($e5) {
        $e5 = wrap($e5);
        if (instanceOf($e5, 17)) {
          $clinit_Configuration_0();
          initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [prCurrResult.m_value.m_value, prCurrResult.m_value.m_unit.getUnitName_0()]);
        }
         else 
          throw unwrap($e5);
      }
      if (localCurrencyDiffersFromToCurrency) {
        try {
          currResult = $convertToForeignCurrency(currValue, toConvDate, toCurrency, exRateTypeName, toExRate);
          $setValue_1(prCurrResult, currResult.m_value);
          $setForeignExchangeRate(prCurrResult, currResult.m_exchangeRate);
        }
         catch ($e6) {
          $e6 = wrap($e6);
          if (instanceOf($e6, 9)) {
            e = $e6;
            throw new CurrencyConversionException_0(208, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condTypeName, localCurrency.getUnitName_0(), toCurrency.getUnitName_0() + ': ' + e.getMessage_0()]));
          }
           else 
            throw unwrap($e6);
        }
      }
       else {
        try {
          $setForeignExchangeRate(prCurrResult, $newIdentityExchangeRate(exRateTypeName, fromCurrency.getUnitName_0(), toConvDate));
        }
         catch ($e7) {
          $e7 = wrap($e7);
          if (!instanceOf($e7, 17))
            throw unwrap($e7);
        }
      }
    }
  }
  !!currValue && (intermediateLocalCurrencyValue = currValue.m_value);
  return prCurrResult;
}

function convertTo_1(condTypeName, directConversion, convDate, fromCurrencyValue, localCurrency, toCurrency, exRateTypeName){
  $clinit_PricingConverter();
  return convertTo_0(condTypeName, directConversion, fromCurrencyValue, convDate, ($clinit_PricingConstants() , ZERO_5), localCurrency, convDate, ZERO_5, toCurrency, exRateTypeName);
}

var intermediateLocalCurrencyValue = null, prCurrConvTracer;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingConverter_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingConverter', null, Ljava_lang_Object_2_classLit);
function $setDirectExchangeRate(this$static, directExchangeRate){
  this$static.m_directExchangeRate = directExchangeRate;
}

function $setForeignExchangeRate(this$static, foreignExchangeRate){
  this$static.m_foreignExchangeRate = foreignExchangeRate;
}

function $setLocalExchangeRate(this$static, localExchangeRate){
  this$static.m_localExchangeRate = localExchangeRate;
}

function $setValue_1(this$static, value_0){
  this$static.m_value = value_0;
}

function PricingCurrencyConversionResult(value_0){
  this.m_value = value_0;
}

defineClass(180, 1, $intern_21, PricingCurrencyConversionResult);
var Lcom_sap_spe_pricing_transactiondata_impl_PricingCurrencyConversionResult_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingCurrencyConversionResult', 180, Ljava_lang_Object_2_classLit);
function $setTrace_0(this$static, fromCurrencyValue, localCurrency, foreignCurrency, localAmount, foreignAmount, directAmount){
  $setTrace(this$static.m_CurrencyConversionTracer, foreignCurrency, localCurrency, foreignAmount, localAmount, directAmount);
  this$static.m_CurrencyConversionTracer.m_CurrencyConversionTraceResult.m_LocalCurrency.isEMUCurrency();
  this$static.m_CurrencyConversionTracer.m_CurrencyConversionTraceResult.m_ForeignCurrency.isEMUCurrency();
  dynamicCast(fromCurrencyValue.m_unit, 26).isEMUCurrency();
}

function PricingCurrencyConversionTracer(){
  this.m_CurrencyConversionTracer = factory_3.currencyConversionTracer;
}

defineClass(594, 1, {}, PricingCurrencyConversionTracer);
var Lcom_sap_spe_pricing_transactiondata_impl_PricingCurrencyConversionTracer_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingCurrencyConversionTracer', 594, Ljava_lang_Object_2_classLit);
function $clinit_PricingDocument(){
  $clinit_PricingDocument = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingDocument_2_classLit);
}

function $_findPricingConditions(this$static, sourceDocumentId, sourceItemId){
  var conditions, data_0, itemConditions, iter, j, lowerBoundData, prConditions, pricingCondition, pricingConditions, pricingItem;
  if ($equals_7(this$static._id, sourceDocumentId)) {
    pricingItem = dynamicCast($get_12(this$static.items, sourceItemId), 210);
    conditions = new ArrayList;
    if (pricingItem) {
      prConditions = $getPricingConditions_3(pricingItem, true, false);
      for (j = 0; j < prConditions.length; j++) {
        pricingCondition = dynamicCast(prConditions[j], 15);
        $add_3(conditions, $convertToPricingConditionTransactionData(pricingCondition));
      }
    }
    pricingConditions = new AbstractList$IteratorImpl(conditions);
  }
   else {
    itemConditions = new ArrayList;
    if (this$static._sourcePricingConditions) {
      lowerBoundData = new PricingConditionTO;
      lowerBoundData.itemId = sourceItemId;
      lowerBoundData.stepNumber = 0;
      lowerBoundData.counter = 0;
      for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet($tailSet(this$static._sourcePricingConditions, lowerBoundData).map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
        data_0 = dynamicCast($next_3(iter), 98);
        if ($equals_7(data_0.itemId, sourceItemId)) {
          setCheck(itemConditions.array, itemConditions.array.length, data_0);
        }
         else if (compareTo_7(data_0.itemId, sourceItemId) > 0) {
          break;
        }
      }
    }
    pricingConditions = new AbstractList$IteratorImpl(itemConditions);
  }
  return pricingConditions;
}

function $_readPricingConditionsFromDatabase(this$static){
  var documentIds, documentIdsToBeReadFromDatabase, i_0, itemIds, itemIdsToBeReadFromDatabase, iter, sourceDocumentId, sourceItemId;
  documentIdsToBeReadFromDatabase = new ArrayList;
  itemIdsToBeReadFromDatabase = new ArrayList;
  i_0 = 0;
  for (iter = new AbstractList$IteratorImpl(this$static._sourceDocumentIds); iter.i < iter.this$01.size_1(); i_0++) {
    sourceDocumentId = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCastToString(iter.this$01.get_5(iter.last = iter.i++)));
    if (!$equals_7(this$static._id, sourceDocumentId)) {
      sourceItemId = dynamicCastToString($get_13(this$static._sourceItemIds, i_0));
      if ($indexOf_1(itemIdsToBeReadFromDatabase, sourceItemId, 0) == -1) {
        setCheck(documentIdsToBeReadFromDatabase.array, documentIdsToBeReadFromDatabase.array.length, sourceDocumentId);
        setCheck(itemIdsToBeReadFromDatabase.array, itemIdsToBeReadFromDatabase.array.length, sourceItemId);
      }
    }
  }
  if (documentIdsToBeReadFromDatabase.array.length > 0) {
    documentIds = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, documentIdsToBeReadFromDatabase.array.length, 4, 1);
    $toArray_1(documentIdsToBeReadFromDatabase, documentIds);
    itemIds = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, itemIdsToBeReadFromDatabase.array.length, 4, 1);
    $toArray_1(itemIdsToBeReadFromDatabase, itemIds);
    this$static._sourcePricingConditions = $getPricingConditions_2($getPricingEngine(this$static._usage).pricingConditionObjectManager, documentIds, itemIds, this$static._documentCurrencyUnit.getUnitName_0()).conditions;
  }
}

function $_removeItem(this$static, itemNumber){
  var prItem;
  prItem = dynamicCast($getStringValue(this$static.items, itemNumber), 210);
  if (!prItem) {
    return false;
  }
  return $removePricingItem(this$static, prItem);
}

function $accumulateGroupConditionsI(this$static, item_0, prCondition, grCondition, scaleBaseValue, scaleBaseUnit){
  var groupCondition, groupConditionExists, maxConditionValue, prUnit;
  groupConditionExists = false;
  if (prCondition.m_control != 67 || ($clinit_SAPString() , $indexOf('AC', fromCodePoint(prCondition.m_origin)) < 0) || 66 != prCondition.m_calculationType) {
    groupCondition = dynamicCast(find_1(this$static.m_groupConditionsI, grCondition), 111);
    if (!!groupCondition && $keysAreEqual(groupCondition, grCondition)) {
      if (!$equals_7(groupCondition.m_currentItemNumber, item_0._itemNumber) || ($clinit_SAPString() , $indexOf('CD', fromCodePoint(prCondition._scaleTypes == null?32:prCondition._scaleTypes[0])) >= 0)) {
        $setConditionBaseValue(groupCondition, $add_1($getConditionBaseValue(groupCondition), $multiply(prCondition.m_conditionBase.getValue_0(), $getMultiplicity(prCondition.m_pricingItem._item))));
        $setConditionValue(groupCondition, $add_1(groupCondition.m_conditionValue, $multiply(prCondition.m_conditionValue, $getMultiplicity(prCondition.m_pricingItem._item))));
        $setGroupConditionValueSum(groupCondition, $add_1(groupCondition.m_conditionValueSum, $multiply(prCondition.m_conditionValue, $getMultiplicity(prCondition.m_pricingItem._item))));
        !!scaleBaseUnit && (item_0.m_isReturn?$setScaleBaseValue(groupCondition, $subtract(groupCondition._conditionScales == null?null:!groupCondition._conditionScales[0]?null:groupCondition._conditionScales[0].getValue_0(), scaleBaseValue)):$setScaleBaseValue(groupCondition, $add_1(groupCondition._conditionScales == null?null:!groupCondition._conditionScales[0]?null:groupCondition._conditionScales[0].getValue_0(), scaleBaseValue)));
      }
       else {
        $setConditionValue(groupCondition, $add_1(groupCondition.m_conditionValue, $multiply(prCondition.m_conditionValue, $getMultiplicity(prCondition.m_pricingItem._item))));
        $setGroupConditionValueSum(groupCondition, $add_1(groupCondition.m_conditionValueSum, $multiply(prCondition.m_conditionValue, $getMultiplicity(prCondition.m_pricingItem._item))));
        prCondition.m_calculationType == 66 && $setConditionBaseValue(groupCondition, $add_1($getConditionBaseValue(groupCondition), $multiply(prCondition.m_conditionBase.getValue_0(), $getMultiplicity(prCondition.m_pricingItem._item))));
      }
      $setCurrentItemNumber(groupCondition, item_0._itemNumber);
      groupConditionExists = true;
      item_0.m_isReturn || (groupCondition.m_isReturn = false);
      prCondition.m_groupCondition = groupCondition;
      $add_3(groupCondition.contributingItemCondns, prCondition);
      if (!prCondition.m_pricingItem.m_pricingItemIsUnchangeable && $compareTo_7($getMultiplicity(prCondition.m_pricingItem._item), ($clinit_PricingConstants() , ONE_1)) == 0) {
        prCondition.m_calculationType == 66?(maxConditionValue = prCondition.m_conditionBase.getValue_0()):(maxConditionValue = prCondition.m_conditionValue);
        $signum(maxConditionValue) < 0 && (maxConditionValue = $multiply(maxConditionValue, ($clinit_PricingConstants() , MINUS_ONE)));
        if ($compareTo_7(maxConditionValue, groupCondition.m_maxConditionValue) >= 0) {
          groupCondition.m_maxConditionValue = maxConditionValue;
          groupCondition.m_pricingConditionWithRoundingDiff = prCondition;
        }
      }
    }
  }
  if (!groupConditionExists) {
    $setCurrentItemNumber(grCondition, item_0._itemNumber);
    $setExchangeRate_2(grCondition, prCondition.m_exchangeRate);
    $setItemsExchangeRate(grCondition, item_0.m_exchangeRate);
    $setItemsExchangeRateDate(grCondition, item_0._exchangeRateDate);
    $setItemsExchangeRateType(grCondition, item_0.m_exchangeRateType);
    $setPricingTimeStamp(grCondition, prCondition.getConditionFindingTimestamp());
    $setIsReturn(grCondition, item_0.m_isReturn);
    prCondition.m_origin == 68 && (grCondition.m_isReturn = false);
    prUnit = prCondition.m_pricingUnit;
    !!prUnit && $setPricingUnit(grCondition, prUnit.getValue_0(), dynamicCast(prUnit.getUnit(), 27));
    $setFraction(grCondition, prCondition.m_fraction);
    $setConditionBase(grCondition, $multiply(prCondition.m_conditionBase.getValue_0(), $getMultiplicity(prCondition.m_pricingItem._item)), prCondition.m_conditionBase.getUnit());
    $setConditionValue(grCondition, $multiply(prCondition.m_conditionValue, $getMultiplicity(prCondition.m_pricingItem._item)));
    $setGroupConditionValueSum(grCondition, $multiply(prCondition.m_conditionValue, $getMultiplicity(prCondition.m_pricingItem._item)));
    if (scaleBaseUnit) {
      !!scaleBaseValue && grCondition._conditionScales != null && !!grCondition._conditionScales[0]?$setScaleBase(grCondition, scaleBaseValue, grCondition._conditionScales[0].getUnit()):setCheck(grCondition._conditionScales, 0, null);
      item_0.m_isReturn && $setScaleBaseValue(grCondition, $multiply(scaleBaseValue, ($clinit_PricingConstants() , MINUS_ONE)));
    }
    $setCounter(grCondition, prCondition.counter);
    prCondition.m_groupCondition = grCondition;
    $add_3(grCondition.contributingItemCondns, prCondition);
    $setIndex(grCondition, this$static.m_groupConditionsI.map_0.size_1());
    $add_5(this$static.m_groupConditionsI, grCondition);
  }
}

function $accumulateGroupConditionsII(this$static, item_0, prCondition, grCondition, scaleBaseValue, scaleBaseUnit){
  var groupCondition, groupConditionExists;
  null.nullMethod();
  groupConditionExists = false;
  if (prCondition.m_control != 67 || ($clinit_SAPString() , $indexOf('AC', fromCodePoint(prCondition.m_origin)) < 0) || 66 != prCondition.m_calculationType) {
    groupCondition = dynamicCast(find_1(this$static.m_groupConditionsII, null), 111);
    if (!!groupCondition && $keysAreEqual(groupCondition, null)) {
      (!$equals_7(groupCondition.m_currentItemNumber, item_0._itemNumber) || ($clinit_SAPString() , $indexOf('CD', fromCodePoint(prCondition._scaleTypes == null?32:prCondition._scaleTypes[0])) >= 0)) && !!scaleBaseUnit && (item_0.m_isReturn?$setScaleBaseValue(groupCondition, $subtract(groupCondition._conditionScales == null?null:!groupCondition._conditionScales[0]?null:groupCondition._conditionScales[0].getValue_0(), scaleBaseValue)):$setScaleBaseValue(groupCondition, $add_1(groupCondition._conditionScales == null?null:!groupCondition._conditionScales[0]?null:groupCondition._conditionScales[0].getValue_0(), scaleBaseValue)));
      groupConditionExists = true;
      grCondition.m_correspondingGroupCondition = groupCondition;
    }
  }
  if (!groupConditionExists) {
    if (scaleBaseUnit) {
      null.nullField[0] = null;
      item_0.m_isReturn && null.nullMethod($multiply(scaleBaseValue, ($clinit_PricingConstants() , MINUS_ONE)));
    }
    grCondition.m_correspondingGroupCondition = null;
    $add_5(this$static.m_groupConditionsII, null);
  }
}

function $addItem_0(this$static, item_0){
  if (item_0) {
    $putStringValue(this$static.items, item_0._itemNumber, item_0);
    $pricing_1(item_0);
  }
}

function $addItemWithoutPricing(this$static, item_0){
  !!item_0 && $putStringValue(this$static.items, item_0._itemNumber, item_0);
}

function $addStatusListener(this$static, l){
  $contains_2(this$static._statusListeners, l) || $add_6(this$static._statusListeners, l);
}

function $calculate_0(this$static){
  var iter, pricingItem;
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.pricingItemsToBeCalcuated.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    pricingItem = dynamicCast($next_3(iter), 48);
    $calculate_1(pricingItem);
    pricingItem._calculationDuringPricingCompleteRequired = false;
  }
  this$static.pricingItemsToBeCalcuated.map_0.clear_0();
  this$static.creationModeForConditions = false;
  this$static._alwaysPerformGroupConditionProcessing && (this$static._doSecondPricingComplete = false , this$static.creationModeForConditions = false , $pricingComplete_0(this$static, false) , this$static._secondPricingComplete = false , undefined);
}

function $createItem(this$static, item_0){
  var prItem;
  if ($equals_7((item_0.id_0 == null && (item_0.id_0 = uuid_0()) , item_0.id_0), '0')) {
    throw new PricingRuntimeException_0(155);
  }
  prItem = new PricingItem(this$static, item_0);
  this$static.document_0.lazyItemLoadMode && $doLazyCondnLoadFromExternalForItem(this$static, prItem);
  $setPerformTrace(prItem, this$static._performTrace);
  $setPerformCalcTrace(prItem, this$static._performCalcTrace);
  return prItem;
}

function $doLazyCondnLoadFromExternalForItem(this$static, prItem){
  if (prItem._pricingDocument.document_0.lazyItemLoadMode && prItem._item.loadedFromPersistency) {
    this$static.loadFromDatabase = true;
    !this$static.itemTxnDataForLazyLoad && (this$static.itemTxnDataForLazyLoad = new ArrayList);
    $loadFromExternal_0(prItem, new AbstractList$IteratorImpl(this$static.itemTxnDataForLazyLoad), null, false);
    this$static.loadFromDatabase = false;
  }
}

function $findHeaderCondition(this$static, stepNo, headerCounter){
  var headerCondition, headerConditionToSearchFor;
  headerConditionToSearchFor = new HeaderCondition(stepNo, headerCounter);
  headerCondition = dynamicCast(find_1(this$static.m_headerConditions, headerConditionToSearchFor), 74);
  return !!headerCondition && headerCondition.stepNumber == stepNo && headerCondition.m_headerCounter == headerCounter?headerCondition:null;
}

function $findItem(this$static, itemNumber){
  return dynamicCast($getStringValue(this$static.items, itemNumber), 210);
}

function $fireClearStatusMessage(this$static, event_0){
  var i_0, size_0;
  size_0 = this$static._statusListeners.arrayList.array.length;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    dynamicCast($get_14(this$static._statusListeners, i_0), 211).clearStatusMessage(event_0);
  }
}

function $fireSetStatusMessage(this$static, event_0){
  var i_0, size_0;
  size_0 = this$static._statusListeners.arrayList.array.length;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    dynamicCast($get_14(this$static._statusListeners, i_0), 211).setStatusMessage(event_0);
  }
}

function $getConditionsInternal(this$static){
  var conditionArray, conditions, iterator, prCond;
  conditions = new ArrayList;
  $sumUpConditionsFromItems(this$static);
  for (iterator = new AbstractList$IteratorImpl(this$static.m_sumConditions); iterator.i < iterator.this$01.size_1();) {
    prCond = (checkCriticalElement(iterator.i < iterator.this$01.size_1()) , dynamicCast(iterator.this$01.get_5(iterator.last = iterator.i++), 15));
    $isAuthorizedForDisplay(this$static, prCond.step) && (setCheck(conditions.array, conditions.array.length, prCond) , true);
  }
  conditionArray = initDim(Lcom_sap_spe_pricing_transactiondata_impl_PricingCondition_2_classLit, {75:1, 3:1, 6:1, 4:1, 5:1}, 15, conditions.array.length, 0, 1);
  $toArray_1(conditions, conditionArray);
  return conditionArray;
}

function $getConversionEngine(){
  var conversionEngine;
  conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
  $clinit_ExchangeRateObjectManager();
  IDENTITY_EXCHANGE_RATE = new HashMap_0(4);
  return conversionEngine;
}

function $getItemsInternal(this$static){
  var itemArray, items;
  items = $getItemsSortedByExternalId(this$static);
  itemArray = initDim(Lcom_sap_spe_pricing_transactiondata_impl_PricingItem_2_classLit, $intern_24, 48, items.map_0.size_1(), 0, 1);
  items.toArray_0(itemArray);
  return itemArray;
}

function $getItemsSortedByExternalId(this$static){
  var itemsSortedByExternalId;
  itemsSortedByExternalId = new TreeSet_0(new PricingItemComparator);
  itemsSortedByExternalId.addAll(new AbstractMap$2(this$static.items));
  return itemsSortedByExternalId;
}

function $getItemsTreeSorted(this$static){
  var item_0, itemList, iter;
  itemList = new ArrayList;
  for (iter = $iterator_0(new AbstractMap$2(this$static.items)); iter.val$outerIter2.hasNext();) {
    item_0 = dynamicCast($next_2(iter), 48);
    setCheck(itemList.array, itemList.array.length, item_0);
    addSubItemsRecursive(item_0, itemList);
  }
  return itemList;
}

function $getNetValue_1(this$static){
  var item_0, itemIterator, netValue, result;
  result = ($clinit_PricingConstants() , ZERO_5);
  for (itemIterator = $iterator_0(new AbstractMap$2(this$static.items)); itemIterator.val$outerIter2.hasNext();) {
    item_0 = dynamicCast($next_2(itemIterator), 48);
    if (!item_0.m_isStatistical) {
      netValue = item_0.accumulator.m_netValue;
      !!item_0.multiplicityOrNull && (netValue = $multiply(netValue, item_0.multiplicityOrNull));
      result = $add_1(result, netValue);
    }
  }
  return $getCurrencyValue(($getConversionEngine() , result), this$static._documentCurrencyUnit);
}

function $getSourcePricingConditons(this$static, sourceDocumentId, sourceItemId){
  var pricingConditions;
  pricingConditions = null;
  if ($indexOf_1(this$static._sourceItemIds, sourceItemId, 0) != -1) {
    !this$static._sourcePricingConditions && $_readPricingConditionsFromDatabase(this$static);
    pricingConditions = $_findPricingConditions(this$static, sourceDocumentId, sourceItemId);
    $remove_3(this$static._sourceItemIds, sourceItemId);
    $remove_3(this$static._sourceDocumentIds, sourceDocumentId);
    this$static._sourceItemIds.array.length == 0 && (this$static._sourcePricingConditions = null);
  }
  return pricingConditions;
}

function $isAuthorizedForDisplay(this$static, prStep){
  var authorityGranted, authorityNeeded;
  authorityNeeded = prStep.stepTO.authorityLevel;
  authorityGranted = this$static._authorityForDisplay;
  return authorityGranted >= authorityNeeded;
}

function $isAuthorizedForEdit(this$static, prStep){
  var authorityGranted, authorityNeeded;
  authorityNeeded = prStep.stepTO.authorityLevel;
  authorityGranted = this$static._authorityForEdit;
  return authorityGranted >= authorityNeeded;
}

function $isConditionDeletableViaSummedUpCondn(this$static, prCondition){
  if (!prCondition.m_pricingItem.m_pricingItemIsUnchangeable && prCondition.m_origin != 66) {
    if (this$static.processMode != 78 || prCondition.m_manual != 68 && (prCondition.m_origin == 67 || prCondition.m_deletionAllowed || prCondition.m_origin == 67) && prCondition.m_fixationGroupFixRate == 32 || prCondition.m_origin == 68 && prCondition.m_headerCondition.m_manual != 68 && ($isDeletionAllowed(prCondition.m_headerCondition) || prCondition.m_headerCondition.m_origin == 67)) {
      return true;
    }
  }
  return false;
}

function $isSourcePricingItemAvailable(this$static, sourceItemId){
  return $indexOf_1(this$static._sourceItemIds, sourceItemId, 0) != -1;
}

function $modifyHeaderConditionsDueToUnchangeableItems(this$static){
  var e, finalHeaderConditionRate, headerCondition, headerConditionIterator, itemIterator, iter, modifyHeaderConditionRate, prCondition, prUnitName, prUnitValue, pricingConditions, pricingConditionsToBeRemoved, pricingItem, result;
  if (this$static.m_headerConditions.map_0.size_1() == 0 || this$static.document_0.editMode == 66 || this$static.document_0.partialProcessing) {
    return;
  }
  pricingConditionsToBeRemoved = new ArrayList;
  for (headerConditionIterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_headerConditions.map_0)); $hasNext_0(headerConditionIterator.val$entryIterator2.iter);) {
    headerCondition = dynamicCast($next_3(headerConditionIterator), 74);
    pricingConditions = enumeration(headerCondition.m_pricingConditions);
    finalHeaderConditionRate = ($clinit_PricingConstants() , ZERO_5);
    modifyHeaderConditionRate = false;
    pricingConditionsToBeRemoved.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
    while (pricingConditions.val$it1.hasNext()) {
      prCondition = dynamicCast(pricingConditions.val$it1.next(), 15);
      pricingItem = prCondition.m_pricingItem;
      if (pricingItem.m_pricingItemIsUnchangeable) {
        if (prCondition.m_calculationType == 66 && prCondition.m_isGroupCondition) {
          prCondition.m_isGroupCondition = false;
          prCondition.m_groupCondition = null;
          try {
            result = convertTo_1(prCondition.getConditionTypeName(), this$static.m_tryDirectCurrencyConversion, pricingItem._exchangeRateDate, $getConditionValue(prCondition), this$static._localCurrencyUnit, dynamicCast(prCondition.m_conditionRate.m_unit, 26), pricingItem.m_exchangeRateType);
            $setConditionRate(prCondition, result.m_value.m_value, dynamicCast(result.m_value.m_unit, 26));
            finalHeaderConditionRate = $add_1(finalHeaderConditionRate, result.m_value.m_value);
            modifyHeaderConditionRate = true;
          }
           catch ($e0) {
            $e0 = wrap($e0);
            if (instanceOf($e0, 9)) {
              e = $e0;
              $handleT100Error_0(prCondition, e.getMessage_0(), 'PricingDocument.modifyHeaderConditionsDueToUnchangeableItems');
            }
             else 
              throw unwrap($e0);
          }
        }
        setCheck(pricingConditionsToBeRemoved.array, pricingConditionsToBeRemoved.array.length, prCondition);
        prCondition.m_origin = 71;
        prCondition.m_calculationType == 66?(prCondition.m_control = 69):(prCondition.m_control = 68);
      }
    }
    for (iter = new AbstractList$IteratorImpl(pricingConditionsToBeRemoved); iter.i < iter.this$01.size_1();) {
      $removePricingCondition((checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 15)));
    }
    for (itemIterator = $iterator_0(new AbstractMap$2(this$static.items)); itemIterator.val$outerIter2.hasNext();) {
      pricingItem = dynamicCast($next_2(itemIterator), 48);
      if (!pricingItem.m_pricingItemIsUnchangeable) {
        prCondition = $findPricingCondition_0(pricingItem, headerCondition.stepNumber, headerCondition.m_conditionType?headerCondition.m_conditionType.conditionTypeTO.name_0:null, $getConditionRateUnitName(headerCondition));
        if (!!prCondition && prCondition.m_origin == 71) {
          if (headerCondition.m_calculationType == 66 && headerCondition.m_isGroupCondition) {
            try {
              result = convertTo_1(prCondition.getConditionTypeName(), this$static.m_tryDirectCurrencyConversion, pricingItem._exchangeRateDate, $getConditionValue(prCondition), this$static._localCurrencyUnit, dynamicCast(prCondition.m_conditionRate.m_unit, 26), pricingItem.m_exchangeRateType);
              finalHeaderConditionRate = $subtract(finalHeaderConditionRate, result.m_value.m_value);
              modifyHeaderConditionRate = true;
            }
             catch ($e1) {
              $e1 = wrap($e1);
              if (instanceOf($e1, 9)) {
                e = $e1;
                $handleT100Error_0(prCondition, e.getMessage_0(), 'PricingDocument.modifyHeaderConditionsDueToUnchangeableItems');
              }
               else 
                throw unwrap($e1);
            }
          }
          $setGroupConditionIndicator(prCondition, headerCondition.m_isGroupCondition);
          $setHeaderCondition(prCondition, headerCondition);
          prCondition.m_origin = 68;
          prCondition.m_control = 67;
          $addPricingCondition(headerCondition, prCondition);
        }
      }
    }
    try {
      if (modifyHeaderConditionRate) {
        finalHeaderConditionRate = $subtract(headerCondition.m_conditionRate.m_value, finalHeaderConditionRate);
        prUnitValue = !headerCondition.m_pricingUnit?null:headerCondition.m_pricingUnit.getValue_0();
        prUnitName = !headerCondition.m_pricingUnit?null:headerCondition.m_pricingUnit.getUnitName_0();
        try {
          $changeConditionRate_0(headerCondition, finalHeaderConditionRate, headerCondition.m_conditionRate.m_unit.getUnitName_0(), prUnitValue, prUnitName);
        }
         catch ($e2) {
          $e2 = wrap($e2);
          if (instanceOf($e2, 34)) {
            $clinit_Configuration_0();
          }
           else 
            throw unwrap($e2);
        }
      }
    }
     catch ($e3) {
      $e3 = wrap($e3);
      if (instanceOf($e3, 9)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e3);
    }
  }
}

function $pricing(this$static){
  var i_0, itemBaseArray, prItem;
  this$static._pricingOnDocumentLevelIsProcessed = true;
  itemBaseArray = $getItems(this$static.document_0);
  for (i_0 = 0; i_0 < itemBaseArray.length; i_0++) {
    prItem = $findItem(this$static, $getId_0(itemBaseArray[i_0]));
    !!prItem && $pricing_0(prItem, false);
  }
  this$static._pricingOnDocumentLevelIsProcessed = false;
  this$static._alwaysPerformGroupConditionProcessing && (this$static._doSecondPricingComplete = false , this$static.creationModeForConditions = false , $pricingComplete_0(this$static, false) , this$static._secondPricingComplete = false , undefined);
}

function $pricingComplete(this$static){
  this$static._doSecondPricingComplete = false;
  this$static.creationModeForConditions = false;
  $pricingComplete_0(this$static, false);
  this$static._secondPricingComplete = false;
}

function $pricingComplete_0(this$static, secondPricingComplete){
  var addedCondition, condType, conditionsToCopy, copyCondStepNo, diff, entry, fromStepGrpCondContainer, fromStepNo, fromStepPrCond, grCondition, groupCond, groupCondition, groupConditionI, groupConditionII, groupNo, headerCond, headerCondIterator, inactiveFlag, item_0, itemIterator, itemIterator0, itemStepNo, itemsSortedByExternalId, itemsSortedByHierarchy, iter, iter0, iterator, iteratorGroupConditionI, iteratorGroupConditionI0, oldConditionRate, prCond, prCondPtr, prCondition, prItem, prStepNo, prSubItem, res, scaleBaseUnit, scaleBaseUnitName, scaleBaseValue, smallestStepNo, stepNo, subItems, subPricingItems, unitOut, valueIn;
  $clinit_Location();
  diff = {l:0, m:0, h:0};
  diff = fromDouble(now_1());
  this$static._secondPricingComplete = secondPricingComplete;
  if (this$static.document_0.editMode == 66 && !this$static.document_0.pricingCompleteRequiredDuringLoad || this$static.document_0.partialProcessing || this$static.items.size_0 == 0 || this$static._pricingOnDocumentLevelIsProcessed) {
    return;
  }
  $fireClearStatusMessage(this$static, new ClearAllStatusEvent('PricingDocument.pricingComplete'));
  itemsSortedByHierarchy = $getItemsTreeSorted(this$static);
  itemStepNo = new HashMap;
  for (itemIterator0 = new AbstractList$IteratorImpl(itemsSortedByHierarchy); itemIterator0.i < itemIterator0.this$01.size_1();) {
    item_0 = (checkCriticalElement(itemIterator0.i < itemIterator0.this$01.size_1()) , dynamicCast(itemIterator0.this$01.get_5(itemIterator0.last = itemIterator0.i++), 48));
    if (!item_0.m_pricingItemIsUnchangeable) {
      smallestStepNo = $hasStringValue(itemStepNo, item_0._itemNumber)?dynamicCast($getStringValue(itemStepNo, item_0._itemNumber), 16).value_0:$intern_32;
      if (!secondPricingComplete) {
        for (headerCondIterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_headerConditions.map_0)); $hasNext_0(headerCondIterator.val$entryIterator2.iter);) {
          headerCond = dynamicCast($next_3(headerCondIterator), 74);
          addedCondition = $addHeaderCondition(item_0, headerCond);
          !!addedCondition && addedCondition.stepNumber < smallestStepNo && (smallestStepNo = addedCondition.stepNumber);
        }
        if ($conditionsToCopyExist(item_0) && $subItemsExist(item_0)) {
          item_0.m_isStatistical && $conditionForCumulationExist(item_0) && (this$static._doSecondPricingComplete = true);
          subItems = $getSubPricingItemsRecursive(item_0);
          subPricingItems = new AbstractList$IteratorImpl(subItems);
          conditionsToCopy = item_0._pricingConditionsToCopy;
          while (subPricingItems.i < subPricingItems.this$01.size_1()) {
            prSubItem = (checkCriticalElement(subPricingItems.i < subPricingItems.this$01.size_1()) , dynamicCast(subPricingItems.this$01.get_5(subPricingItems.last = subPricingItems.i++), 48));
            copyCondStepNo = $addPricingConditionsToCopy(prSubItem, conditionsToCopy);
            copyCondStepNo < $intern_32 && $putStringValue(itemStepNo, prSubItem._itemNumber, new Integer(copyCondStepNo));
          }
        }
      }
      (item_0._calculationDuringPricingCompleteRequired || secondPricingComplete) && (smallestStepNo = 0);
      if (smallestStepNo <= $intern_31) {
        stepNo = $initializeConditions(item_0, 65, false);
        stepNo < smallestStepNo && (smallestStepNo = stepNo);
        smallestStepNo = $calculate_2(item_0, smallestStepNo, 65, false, false, null);
        $exclusion(item_0, smallestStepNo, 65, false, null);
        item_0._calculationDuringPricingCompleteRequired = false;
        $checkMandatoryConditions(item_0);
      }
    }
  }
  if (!secondPricingComplete && !this$static.m_pricingCompleteRequired) {
    return;
  }
  this$static.m_pricingCompleteRequired = false;
  this$static.m_groupConditionsI = new TreeSet_0(new GroupConditionComparator);
  this$static.m_groupConditionsII = new TreeSet_0(new GroupConditionComparator);
  this$static.m_pricingConditionPointersI = new TreeSet_0(new PricingConditionPointerComparator);
  if (!this$static.valueDependGrpHndlr) {
    if (this$static.document_0.optimizedGroupProcessMode) {
      this$static.valueDependGrpHndlr = getValueDependGroupHandler(79);
    }
     else {
      this$static.valueDependGrpHndlr = getValueDependGroupHandler(67);
    }
  }
  this$static.valueDependGrpHndlr.valueDependpricingConditionPointers.map_0.clear_0();
  itemsSortedByExternalId = $getItemsSortedByExternalId(this$static);
  for (itemIterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(itemsSortedByExternalId.map_0)); $hasNext_0(itemIterator.val$entryIterator2.iter);) {
    item_0 = dynamicCast($next_3(itemIterator), 48);
    if (!item_0.m_isStatistical) {
      for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(item_0.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
        prCondition = dynamicCast($next_3(iterator), 15);
        inactiveFlag = prCondition.m_inactive;
        if (inactiveFlag != 75 && inactiveFlag != 77 && inactiveFlag != 88 && inactiveFlag != 90 && prCondition.m_isGroupCondition) {
          scaleBaseUnit = null;
          condType = prCondition.m_conditionType;
          if (!$equals_7(prCondition._scaleBaseIndicators[0], '')) {
            if ($equals_7(prCondition._scaleBaseIndicators[0], 'B')) {
              scaleBaseUnit = dynamicCast((prCondition._conditionScales == null?null:prCondition._conditionScales[0]).getUnit(), 26);
            }
             else {
              scaleBaseUnit = dynamicCast((prCondition._conditionScales == null?null:prCondition._conditionScales[0]).getUnit(), 27);
              !!condType && !!condType.scaleBaseUnit && condType.pricingConditionTypeTO.groupConditionKeyFormulaNumber != 0 && (scaleBaseUnit = condType.scaleBaseUnit);
            }
          }
          grCondition = new GroupCondition(this$static, scaleBaseUnit, prCondition);
          $clinit_SAPString();
          $indexOf('FGH', fromCodePoint(prCondition.m_control)) >= 0 && (grCondition.m_control = 65);
          $indexOf('AFGH', fromCodePoint(prCondition.m_control)) >= 0?$setGroupConditionKeyRateValue(grCondition, ($clinit_PricingConstants() , ZERO_5)):$setGroupConditionKeyRateValue(grCondition, prCondition.m_conditionRate.m_value);
          groupNo = condType.pricingConditionTypeTO.groupConditionKeyFormulaNumber;
          if (groupNo != 0) {
            try {
              $getGroupConditionKeyFormula();
              null.nullMethod();
              try {
                $setVarKey(grCondition, null.nullMethod());
              }
               catch ($e0) {
                $e0 = wrap($e0);
                if (instanceOf($e0, 9)) {
                  null.nullMethod($clinit_Configuration_0());
                }
                 else 
                  throw unwrap($e0);
              }
            }
             catch ($e1) {
              $e1 = wrap($e1);
              if (!instanceOf($e1, 52))
                throw unwrap($e1);
            }
          }
          !$equals_7(grCondition.m_varKey, '') && grCondition.m_calculationType != 66 && !grCondition.m_roundingDifferenceCalculation && (grCondition.m_conditionRecordId = null , grCondition.conditionRecord = null , grCondition.m_determineConditionRecord = 1 , grCondition.m_conditionRate = null , grCondition.m_calculationType = 32);
          scaleBaseValue = null;
          (prCondition._conditionScales == null?null:prCondition._conditionScales[0])?(scaleBaseValue = (prCondition._conditionScales == null?null:prCondition._conditionScales[0]).getValue_0()):(scaleBaseValue = ($clinit_PricingConstants() , ZERO_5));
          if (!!scaleBaseUnit && !$equals_7(grCondition.m_varKey, '')) {
            if ($indexOf('B ', prCondition._scaleBaseIndicators[0]) < 0 && !!(prCondition._conditionScales == null?null:prCondition._conditionScales[0]) && !$equals_7(grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0(), (prCondition._conditionScales == null?null:prCondition._conditionScales[0]).getUnitName_0())) {
              scaleBaseUnitName = null;
              if ($equals_7(grCondition._scaleBaseIndicators[0], 'C') && !$equals_7(grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0(), item_0.m_baseQuantity.m_unit.getUnitName_0())) {
                scaleBaseValue = item_0.m_baseQuantity.m_value;
                scaleBaseUnitName = item_0.m_baseQuantity.m_unit.getUnitName_0();
              }
               else if ($equals_7(grCondition._scaleBaseIndicators[0], 'D') && !$equals_7(grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0(), null.nullMethod())) {
                scaleBaseValue = null.nullMethod();
                scaleBaseUnitName = null.nullMethod();
              }
               else if ($equals_7(grCondition._scaleBaseIndicators[0], 'E') && !$equals_7(grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0(), null.nullMethod())) {
                scaleBaseValue = null.nullMethod();
                scaleBaseUnitName = null.nullMethod();
              }
               else if ($equals_7(grCondition._scaleBaseIndicators[0], 'F') && !$equals_7(grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0(), null.nullMethod())) {
                scaleBaseValue = null.nullMethod();
                scaleBaseUnitName = null.nullMethod();
              }
              if (scaleBaseUnitName != null) {
                try {
                  if ($equals_7(grCondition._scaleBaseIndicators[0], 'C')) {
                    valueIn = $getQuantityValue_0(($getConversionEngine() , scaleBaseValue), scaleBaseUnitName, item_0.m_product);
                    unitOut = $getPhysicalUnit($getConversionEngine(), grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0());
                    res = $convertBaseToAlternativeQuantity(valueIn, unitOut);
                    scaleBaseValue = res.m_value.m_value;
                  }
                   else {
                    valueIn = $getPhysicalValue_0(($getConversionEngine() , scaleBaseValue), scaleBaseUnitName);
                    unitOut = $getPhysicalUnit($getConversionEngine(), grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0());
                    res = $convertTo(valueIn, unitOut);
                    scaleBaseValue = res.m_value.m_value;
                  }
                }
                 catch ($e2) {
                  $e2 = wrap($e2);
                  if (instanceOf($e2, 81)) {
                    $fireSetStatusMessage(this$static, new WarningStatusEvent_0(14, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [item_0.m_product.conversionProduct.m_description, prCondition.getConditionTypeName(), grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0()]), 'Material ' + item_0.m_product.conversionProduct.m_description + ' condition ' + prCondition.getConditionTypeName() + ': unit of measure ' + (grCondition._conditionScales == null?null:!grCondition._conditionScales[0]?null:grCondition._conditionScales[0].getUnitName_0()) + ' is not allowed.', 'PricingDocument.pricingComplete'));
                  }
                   else 
                    throw unwrap($e2);
                }
              }
            }
            if (prCondition.m_scaleBaseFormulaNo != 0) {
              try {
                $getCustomizingEngine(factory_0, this$static._usage).getUserExitFormulas(this$static._application, 'SCL');
                null.nullMethod();
                null.nullMethod();
                try {
                  null.nullMethod();
                }
                 catch ($e3) {
                  $e3 = wrap($e3);
                  if (instanceOf($e3, 9)) {
                    null.nullMethod($clinit_Configuration_0());
                  }
                   else 
                    throw unwrap($e3);
                }
              }
               catch ($e4) {
                $e4 = wrap($e4);
                if (!instanceOf($e4, 52))
                  throw unwrap($e4);
              }
            }
          }
          scaleBaseValue = $multiply(scaleBaseValue, $getMultiplicity(prCondition.m_pricingItem._item));
          $accumulateGroupConditionsI(this$static, item_0, prCondition, grCondition, scaleBaseValue, scaleBaseUnit);
          (grCondition.m_roundingDifferenceCalculation || grCondition.m_calculationType == 66 && !$equals_7(grCondition.m_varKey, '')) && $accumulateGroupConditionsII(this$static, item_0, prCondition, grCondition, scaleBaseValue, scaleBaseUnit);
          $setRoundingDifference(prCondition, ($clinit_PricingConstants() , ZERO_5));
          isFixedAmountOrPercentageOrFormula(prCondition.m_calculationType) || $equals_7('B', prCondition._scaleBaseIndicators[0])?$collectValueDependPrcCondnForGroupProcess(this$static.valueDependGrpHndlr, prCondition):$add_5(this$static.m_pricingConditionPointersI, prCondition);
        }
      }
    }
  }
  for (iteratorGroupConditionI0 = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_groupConditionsI.map_0)); $hasNext_0(iteratorGroupConditionI0.val$entryIterator2.iter);) {
    groupConditionI = dynamicCast($next_3(iteratorGroupConditionI0), 111);
    groupConditionII = groupConditionI.m_correspondingGroupCondition;
    groupConditionI.m_calculationType == 66 && this$static.valueDependGrpHndlr.isSecondPricingCompleteRequired(this$static, groupConditionI) && (this$static._doSecondPricingComplete = true);
    !!groupConditionII && $setScaleBaseValue(groupConditionI, groupConditionII._conditionScales == null?null:!groupConditionII._conditionScales[0]?null:groupConditionII._conditionScales[0].getValue_0());
  }
  for (iteratorGroupConditionI = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_groupConditionsI.map_0)); $hasNext_0(iteratorGroupConditionI.val$entryIterator2.iter);) {
    groupCondition = dynamicCast($next_3(iteratorGroupConditionI), 111);
    !!(groupCondition._conditionScales == null?null:groupCondition._conditionScales[0]) && $setScaleBaseValue(groupCondition, $abs(groupCondition._conditionScales == null?null:!groupCondition._conditionScales[0]?null:groupCondition._conditionScales[0].getValue_0()));
    if (groupCondition.m_scaleBaseFormulaNo != 0) {
      try {
        $getCustomizingEngine(factory_0, this$static._usage).getUserExitFormulas(this$static._application, 'SCL');
        null.nullMethod();
        null.nullMethod();
        try {
          null.nullMethod();
        }
         catch ($e5) {
          $e5 = wrap($e5);
          if (instanceOf($e5, 9)) {
            null.nullMethod($clinit_Configuration_0());
          }
           else 
            throw unwrap($e5);
        }
      }
       catch ($e6) {
        $e6 = wrap($e6);
        if (!instanceOf($e6, 52))
          throw unwrap($e6);
      }
    }
    isFixedAmountOrPercentageOrFormula(groupCondition.m_calculationType) || $equals_7('B', groupCondition._scaleBaseIndicators[0]) || $calculate(groupCondition);
  }
  fromStepGrpCondContainer = new HashMap;
  for (iter0 = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_pricingConditionPointersI.map_0)); $hasNext_0(iter0.val$entryIterator2.iter);) {
    prCond = dynamicCast($next_3(iter0), 15);
    prItem = prCond.m_pricingItem;
    if (prCond.m_control == 65 && !prItem.m_pricingItemIsUnchangeable && !prCond.m_manuallyChanged) {
      groupCond = prCond.m_groupCondition;
      if ($equals_7(groupCond.m_varKey, '')) {
        oldConditionRate = $getConditionRateValue(prCond);
        $setConditionRate(prCond, groupCond.m_conditionRate.m_value, dynamicCast(groupCond.m_conditionRate.m_unit, 26));
        $compareTo_7(oldConditionRate, $getConditionRateValue(prCond)) != 0 && (prItem._calculationDuringPricingCompleteRequired = true);
      }
       else {
        scaleBaseValue = groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getValue_0();
        if (!!(prCond._conditionScales == null?null:prCond._conditionScales[0]) && !$equals_7(prCond._conditionScales == null?null:!prCond._conditionScales[0]?null:prCond._conditionScales[0].getUnitName_0(), groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getUnitName_0())) {
          scaleBaseUnitName = null;
          $equals_7(groupCond._scaleBaseIndicators[0], 'C')?(scaleBaseUnitName = prItem.m_baseQuantity.m_unit.getUnitName_0()):$equals_7(groupCond._scaleBaseIndicators[0], 'D')?(scaleBaseUnitName = null.nullMethod()):$equals_7(groupCond._scaleBaseIndicators[0], 'E')?(scaleBaseUnitName = null.nullMethod()):$equals_7(groupCond._scaleBaseIndicators[0], 'F') && (scaleBaseUnitName = null.nullMethod());
          if (scaleBaseUnitName != null) {
            try {
              if ($equals_7(groupCond._scaleBaseIndicators[0], 'C')) {
                if ($equals_7(groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getUnitName_0(), prCond._conditionScales == null?null:!prCond._conditionScales[0]?null:prCond._conditionScales[0].getUnitName_0())) {
                  scaleBaseValue = groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getValue_0();
                }
                 else {
                  valueIn = $getQuantityValue_0(($getConversionEngine() , groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getValue_0()), groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getUnitName_0(), prItem.m_product);
                  res = $convertAlternativeToBaseQuantity(valueIn);
                  valueIn = $getQuantityValue_0(($getConversionEngine() , res.m_value.m_value), res.m_value.m_unit.getUnitName_0(), prItem.m_product);
                  unitOut = $getPhysicalUnit($getConversionEngine(), prCond._conditionScales == null?null:!prCond._conditionScales[0]?null:prCond._conditionScales[0].getUnitName_0());
                  res = $convertBaseToAlternativeQuantity(valueIn, unitOut);
                  scaleBaseValue = res.m_value.m_value;
                }
              }
               else {
                valueIn = $getPhysicalValue_0(($getConversionEngine() , groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getValue_0()), groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getUnitName_0());
                unitOut = $getPhysicalUnit($getConversionEngine(), scaleBaseUnitName);
                res = $convertTo(valueIn, unitOut);
                valueIn = $getPhysicalValue_0(($getConversionEngine() , res.m_value.m_value), res.m_value.m_unit.getUnitName_0());
                unitOut = $getPhysicalUnit($getConversionEngine(), prCond._conditionScales == null?null:!prCond._conditionScales[0]?null:prCond._conditionScales[0].getUnitName_0());
                res = $convertTo(valueIn, unitOut);
                scaleBaseValue = res.m_value.m_value;
              }
            }
             catch ($e7) {
              $e7 = wrap($e7);
              if (instanceOf($e7, 17)) {
                $clinit_Configuration_0();
              }
               else if (instanceOf($e7, 83)) {
                $clinit_Configuration_0();
              }
               else if (instanceOf($e7, 92)) {
                $clinit_Configuration_0();
              }
               else 
                throw unwrap($e7);
            }
          }
          $overwriteScaleBase_0(prCond, prCond);
        }
        !!scaleBaseValue && prCond._conditionScales != null && !!prCond._conditionScales[0]?$setScaleBase(prCond, scaleBaseValue, prCond._conditionScales[0].getUnit()):setCheck(prCond._conditionScales, 0, null);
        oldConditionRate = $getConditionRateValue(prCond);
        $determineConditionRateFromScale(prCond, false);
        $compareTo_7(oldConditionRate, $getConditionRateValue(prCond)) != 0 && (prItem._calculationDuringPricingCompleteRequired = true);
      }
      prCond.m_rateDeterminedFromGroupCondition = true;
      fromStepPrCond = dynamicCast($get_12(fromStepGrpCondContainer, prCond.m_pricingItem), 15);
      (!fromStepPrCond || prCond.stepNumber < fromStepPrCond.stepNumber) && $put_0(fromStepGrpCondContainer, prCond.m_pricingItem, prCond);
    }
  }
  for (iter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(fromStepGrpCondContainer)).this$01); $hasNext(iter);) {
    entry = (checkStructuralChange(iter.this$01, iter) , checkCriticalElement($hasNext(iter)) , iter.last = iter.current , dynamicCast(iter.current.next(), 25));
    prItem = dynamicCast(entry.getKey(), 48);
    prCondPtr = dynamicCast(entry.getValue_1(), 15);
    fromStepNo = prCondPtr.stepNumber;
    prStepNo = $calculateGroupConditionProcessing(prItem, fromStepNo, prCondPtr);
    stepNo = prStepNo < fromStepNo?prStepNo:fromStepNo;
    $exclusion(prItem, stepNo, 70, true, null);
    $checkMandatoryConditions(prItem);
  }
  $processGroup(this$static.valueDependGrpHndlr);
  sub_0(fromDouble(now_1()), diff);
  secondPricingComplete || this$static._doSecondPricingComplete && $pricingComplete_0(this$static, true);
}

function $removeItem(this$static, itemNumber){
  var itemRemoved;
  itemRemoved = $_removeItem(this$static, itemNumber);
  itemRemoved && this$static._alwaysPerformGroupConditionProcessing && (this$static._doSecondPricingComplete = false , this$static.creationModeForConditions = false , $pricingComplete_0(this$static, false) , this$static._secondPricingComplete = false , undefined);
  return itemRemoved;
}

function $removePricingItem(this$static, item_0){
  var headerCondition, headerConditionIterator, removed, prCond;
  removed = $removeStringValue(this$static.items, item_0._itemNumber) != null;
  if (removed) {
    for (headerConditionIterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.m_headerConditions.map_0)); $hasNext_0(headerConditionIterator.val$entryIterator2.iter);) {
      headerCondition = dynamicCast($next_3(headerConditionIterator), 74);
      null.nullMethod();
      prCond = $findPricingCondition_0(item_0, headerCondition.stepNumber, headerCondition.m_conditionType?headerCondition.m_conditionType.conditionTypeTO.name_0:null, $getConditionRateUnitName(headerCondition));
      !!prCond && null.nullMethod();
    }
    this$static.m_pricingCompleteRequired = true;
    $updateObserversItemRemoved(this$static);
  }
  return removed;
}

function $setAlwaysPerformingGroupConditionProcessing(this$static, alwaysPerformGroupConditionProcessing){
  this$static._alwaysPerformGroupConditionProcessing = alwaysPerformGroupConditionProcessing;
}

function $setAuthority(this$static, authorityForDisplay, authorityForEdit){
  this$static._authorityForDisplay = authorityForDisplay;
  this$static._authorityForEdit = authorityForEdit;
}

function $setDocumentCurrencyUnit(this$static, documentCurrencyUnit){
  var condBase, condValue, e, itemIterator, iterator, prCondition, prItem, res;
  $fireClearStatusMessage(this$static, new ClearAllStatusEvent('PricingDocument.setDocumentCurrencyUnit'));
  if (!documentCurrencyUnit.equals$(this$static._documentCurrencyUnit)) {
    for (itemIterator = $iterator_0(new AbstractMap$2(this$static.items)); itemIterator.val$outerIter2.hasNext();) {
      prItem = dynamicCast($next_2(itemIterator), 48);
      $initExchangeRate(prItem);
      for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(prItem.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
        prCondition = dynamicCast($next_3(iterator), 15);
        condValue = $getConditionValue(prCondition);
        try {
          res = convertTo_0(prCondition.getConditionTypeName(), this$static.m_tryDirectCurrencyConversion, condValue, prCondition.getConditionFindingTimestamp(), $setScale(prCondition.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static._localCurrencyUnit, prItem._exchangeRateDate, $setScale(prItem.m_exchangeRate.resultingRate, 11, valueOf_7(4)), documentCurrencyUnit, prItem.m_exchangeRateType);
          $setConditionValue(prCondition, res.m_value.m_value);
          if (isPercentage(prCondition.m_calculationType)) {
            condBase = dynamicCast(prCondition.m_conditionBase, 209);
            res = convertTo_0(prCondition.getConditionTypeName(), this$static.m_tryDirectCurrencyConversion, condBase, prCondition.getConditionFindingTimestamp(), $setScale(prCondition.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static._localCurrencyUnit, prItem._exchangeRateDate, $setScale(prItem.m_exchangeRate.resultingRate, 11, valueOf_7(4)), documentCurrencyUnit, prItem.m_exchangeRateType);
            $setConditionBase(prCondition, res.m_value.m_value, condBase.m_unit);
          }
        }
         catch ($e0) {
          $e0 = wrap($e0);
          if (instanceOf($e0, 9)) {
            e = $e0;
            $handleT100Error_0(prCondition, e.getMessage_0(), 'PricingDocument.setDocumentCurrencyUnit');
          }
           else 
            throw unwrap($e0);
        }
      }
    }
    this$static._documentCurrencyUnit = documentCurrencyUnit;
    this$static.m_maxDBConditionValue = $subtract($movePointRight(($clinit_PricingConstants() , ONE_1), 13 - this$static._documentCurrencyUnit.getNumberOfDecimals()), ONE_1);
    $pricing(this$static);
    $setRoundingDifferenceBound(this$static);
    this$static.m_ZeroRate = $getCurrencyValue(($getConversionEngine() , ZERO_5), this$static._documentCurrencyUnit);
  }
}

function $setLocalCurrencyUnit(this$static, localCurrencyUnit){
  var condBase, condValue, e, itemIterator, iterator, prCondition, prItem, res;
  $fireClearStatusMessage(this$static, new ClearAllStatusEvent('PricingDocument.setLocalCurrencyUnit'));
  if (!localCurrencyUnit.equals$(this$static._localCurrencyUnit)) {
    for (itemIterator = $iterator_0(new AbstractMap$2(this$static.items)); itemIterator.val$outerIter2.hasNext();) {
      prItem = dynamicCast($next_2(itemIterator), 48);
      $initExchangeRate(prItem);
      for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(prItem.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
        prCondition = dynamicCast($next_3(iterator), 15);
        condValue = $getConditionValue(prCondition);
        try {
          res = convertTo_0(prCondition.getConditionTypeName(), this$static.m_tryDirectCurrencyConversion, condValue, prCondition.getConditionFindingTimestamp(), $setScale(prCondition.m_exchangeRate.resultingRate, 11, valueOf_7(4)), localCurrencyUnit, prItem._exchangeRateDate, $setScale(prItem.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static._documentCurrencyUnit, prItem.m_exchangeRateType);
          $setConditionValue(prCondition, res.m_value.m_value);
          !!res.m_localExchangeRate && $setExchangeRate_2(prCondition, res.m_localExchangeRate);
          if (isPercentage(prCondition.m_calculationType)) {
            condBase = dynamicCast(prCondition.m_conditionBase, 209);
            res = convertTo_0(prCondition.getConditionTypeName(), this$static.m_tryDirectCurrencyConversion, condBase, prCondition.getConditionFindingTimestamp(), $setScale(prCondition.m_exchangeRate.resultingRate, 11, valueOf_7(4)), localCurrencyUnit, prItem._exchangeRateDate, $setScale(prItem.m_exchangeRate.resultingRate, 11, valueOf_7(4)), this$static._documentCurrencyUnit, prItem.m_exchangeRateType);
            $setConditionBase(prCondition, res.m_value.m_value, condBase.m_unit);
          }
        }
         catch ($e0) {
          $e0 = wrap($e0);
          if (instanceOf($e0, 9)) {
            e = $e0;
            $handleT100Error_0(prCondition, e.getMessage_0(), 'PricingDocument.setLocalCurrencyUnit');
            $fireSetStatusMessage(this$static, new WarningStatusEvent_2(e.getMessage_0(), 'PricingDocument.setLocalCurrencyUnit'));
          }
           else 
            throw unwrap($e0);
        }
      }
    }
    this$static._localCurrencyUnit = localCurrencyUnit;
    $pricing(this$static);
    $setRoundingDifferenceBound(this$static);
  }
}

function $setPerformTrace_0(this$static, performTrace){
  var item_0, itemIterator;
  if (performTrace != this$static._performTrace) {
    for (itemIterator = $iterator_0(new AbstractMap$2(this$static.items)); itemIterator.val$outerIter2.hasNext();) {
      item_0 = dynamicCast($next_2(itemIterator), 48);
      $setPerformTrace(item_0, performTrace);
    }
    this$static._performTrace = performTrace;
  }
}

function $setPricingOnDocumentLevelIsProcessed(this$static, pricingOnDocumentLevelIsProcessed){
  this$static._pricingOnDocumentLevelIsProcessed = pricingOnDocumentLevelIsProcessed;
}

function $setProcessMode(this$static, processMode){
  this$static.processMode = processMode;
}

function $setRoundingDifferenceBound(this$static){
  var fNoOfDecimals;
  fNoOfDecimals = this$static.document_0.documentCurrency.getNumberOfDecimals();
  this$static.roundingDifferenceBound = new BigDecimal(Math.pow(10, 5 - fNoOfDecimals));
}

function $sumUpConditionsFromItems(this$static){
  var calcType, conditionIterator, item_0, itemIterator, iter, prConditionRate, prPricingUnit, prevSumUpCounter, pricingConditions, relevantConditions, sumConditionRate, sumPricingUnit, sumUpCounter;
  this$static.sumCondition = null;
  this$static.prCondition = null;
  this$static.m_sumConditions.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
  $reset(this$static.m_pricingConditionsOfSumCounter);
  relevantConditions = new TreeSet_0(new PricingConditionComparator);
  for (itemIterator = $iterator_0(new AbstractMap$2(this$static.items)); itemIterator.val$outerIter2.hasNext();) {
    item_0 = dynamicCast($next_2(itemIterator), 48);
    if (item_0.m_isStatistical) {
      continue;
    }
    conditionIterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(item_0.conditions.map_0));
    while ($hasNext_0(conditionIterator.val$entryIterator2.iter)) {
      this$static.prCondition = dynamicCast($next_3(conditionIterator), 15);
      isNotInactiveOrInactiveDueToExclusionOrInactiveDueToSubsequentPrice(this$static.prCondition.m_inactive) && this$static.prCondition.m_indicatorStructureCondition != 66 && $add_5(relevantConditions, this$static.prCondition);
    }
  }
  this$static.sumConditionTypeName = '';
  this$static.prConditionTypeName = '';
  this$static.sumConditionKnumh = '';
  this$static.prConditionKnumh = '';
  sumUpCounter = 1;
  pricingConditions = null;
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(relevantConditions.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    this$static.prCondition = dynamicCast($next_3(iter), 15);
    this$static.prConditionTypeName = this$static.prCondition.getConditionTypeName();
    this$static.prConditionTypeName == null && (this$static.prConditionTypeName = '');
    this$static.prConditionKnumh = this$static.prCondition.m_conditionRecordId;
    this$static.prConditionKnumh == null && (this$static.prConditionKnumh = '');
    this$static.ratesAreEqual = false;
    this$static.pricingUnitsAreEqual = false;
    if (this$static.sumCondition) {
      sumConditionRate = this$static.sumCondition.m_conditionRate;
      if (sumConditionRate) {
        prConditionRate = this$static.prCondition.m_conditionRate;
        this$static.ratesAreEqual = $compareTo_7(sumConditionRate.m_value, prConditionRate.m_value) == 0 && $equals_7(sumConditionRate.m_unit.getUnitName_0(), prConditionRate.m_unit.getUnitName_0());
      }
      sumPricingUnit = this$static.sumCondition.m_pricingUnit;
      prPricingUnit = this$static.prCondition.m_pricingUnit;
      !!sumPricingUnit && !!prPricingUnit?(this$static.pricingUnitsAreEqual = $compareTo_7(sumPricingUnit.getValue_0(), prPricingUnit.getValue_0()) == 0 && $equals_7(sumPricingUnit.getUnitName_0(), prPricingUnit.getUnitName_0())):!sumPricingUnit && !prPricingUnit && (this$static.pricingUnitsAreEqual = true);
    }
    if (!!this$static.sumCondition && this$static.sumCondition.stepNumber == this$static.prCondition.stepNumber && $equals_7(this$static.sumConditionTypeName, this$static.prConditionTypeName) && this$static.sumCondition.m_statistical == this$static.prCondition.m_statistical && this$static.sumCondition.m_accruals == this$static.prCondition.m_accruals && this$static.sumCondition.m_headerCondition == this$static.prCondition.m_headerCondition && this$static.sumCondition.m_inactive == this$static.prCondition.m_inactive && ($equals_7(this$static.sumConditionKnumh, this$static.prConditionKnumh) || !this$static.prCondition.m_variant) && (this$static.ratesAreEqual && this$static.prCondition.m_origin == 74 || this$static.prCondition.m_origin != 74) && (this$static.ratesAreEqual && this$static.sumCondition.m_calculationType == this$static.prCondition.m_calculationType && this$static.prCondition.m_groupCondition == this$static.sumCondition.m_groupCondition || !this$static.prCondition.m_isGroupCondition || !!this$static.prCondition.m_headerCondition)) {
      if ((!this$static.ratesAreEqual || !this$static.pricingUnitsAreEqual) && !this$static.prCondition.m_headerCondition) {
        $initializeConditionBase(this$static.sumCondition);
        this$static.sumCondition.m_pricingUnit = null;
        this$static.sumCondition.m_conditionRate = null;
      }
       else {
        $setConditionBaseValue(this$static.sumCondition, $add_1(this$static.sumCondition.m_conditionBase.getValue_0(), $multiply(this$static.prCondition.m_conditionBase.getValue_0(), $getMultiplicity(this$static.prCondition.m_pricingItem._item))));
        sumPricingUnit = this$static.sumCondition.m_pricingUnit;
        prPricingUnit = this$static.prCondition.m_pricingUnit;
        if (!!sumPricingUnit && !!prPricingUnit) {
          if (!$equals_7(sumPricingUnit.getUnitName_0(), prPricingUnit.getUnitName_0())) {
            calcType = this$static.sumCondition.m_calculationType;
            $clinit_PricingCustomizingConstants$CalculationType();
            $clinit_SAPString();
            if ($indexOf('DEFL', fromCodePoint(calcType)) >= 0) {
              try {
                this$static.sumCondition.m_pricingUnit = $getPhysicalValue_0(($getConversionEngine() , this$static.sumCondition.m_pricingUnit.getValue_0()), '');
              }
               catch ($e0) {
                $e0 = wrap($e0);
                if (instanceOf($e0, 17)) {
                  $clinit_Configuration_0();
                }
                 else 
                  throw unwrap($e0);
              }
            }
             else if (calcType == 67) {
              try {
                this$static.sumCondition.m_pricingUnit = $getQuantityValue_0(($getConversionEngine() , this$static.sumCondition.m_pricingUnit.getValue_0()), '', this$static.prCondition.m_pricingItem.m_product);
              }
               catch ($e1) {
                $e1 = wrap($e1);
                if (instanceOf($e1, 17)) {
                  $clinit_Configuration_0();
                }
                 else if (instanceOf($e1, 92)) {
                  $clinit_Configuration_0();
                }
                 else 
                  throw unwrap($e1);
              }
            }
          }
        }
        !$equals_7(this$static.sumCondition._scaleBaseIndicators[0], '') && !!$getConditionScale(this$static.prCondition) && $setScaleBaseValue(this$static.sumCondition, $add_1($getConditionScale(this$static.sumCondition).getValue_0(), $multiply($getConditionScale(this$static.prCondition).getValue_0(), $getMultiplicity(this$static.prCondition.m_pricingItem._item))));
      }
      $setConditionValue(this$static.sumCondition, $add_1($getConditionValue(this$static.sumCondition).m_value, $multiply($getConditionValue(this$static.prCondition).m_value, $getMultiplicity(this$static.prCondition.m_pricingItem._item))));
      $isConditionDeletableViaSummedUpCondn(this$static, this$static.prCondition) && $addElement(pricingConditions, this$static.prCondition);
    }
     else {
      if (this$static.sumCondition) {
        prevSumUpCounter = sumUpCounter - 1;
        pricingConditions = dynamicCast($get_12(this$static.m_pricingConditionsOfSumCounter, new Integer(prevSumUpCounter)), 41);
        pricingConditions.arrayList.array.length > 0 && $setDeletionAllowed(this$static.sumCondition, true);
      }
      this$static.sumCondition = $copyObject(this$static.prCondition);
      $setDeletionAllowed(this$static.sumCondition, false);
      $setCounter(this$static.sumCondition, sumUpCounter);
      $setConditionBaseValue(this$static.sumCondition, $multiply(this$static.sumCondition.m_conditionBase.getValue_0(), $getMultiplicity(this$static.prCondition.m_pricingItem._item)));
      $setConditionValue(this$static.sumCondition, $multiply($getConditionValue(this$static.sumCondition).m_value, $getMultiplicity(this$static.prCondition.m_pricingItem._item)));
      $equals_7(this$static.sumCondition._scaleBaseIndicators[0], '') || $setScaleBaseValue(this$static.sumCondition, $multiply($getConditionScale(this$static.sumCondition).getValue_0(), $getMultiplicity(this$static.prCondition.m_pricingItem._item)));
      this$static.sumConditionTypeName = this$static.sumCondition.getConditionTypeName();
      this$static.sumConditionTypeName == null && (this$static.sumConditionTypeName = '');
      this$static.sumConditionKnumh = this$static.sumCondition.m_conditionRecordId;
      $setRoundingDifference(this$static.sumCondition, ($clinit_PricingConstants() , ZERO_5));
      this$static.sumConditionKnumh == null && (this$static.sumConditionKnumh = '');
      if (!this$static.sumCondition.m_headerCondition) {
        $setOrigin(this$static.sumCondition, 69);
        $setManualEntryFlag(this$static.sumCondition, 68);
        $setChangeOfRateAllowed(this$static.sumCondition, false);
        $setChangeOfUnitAllowed(this$static.sumCondition, false);
        $setChangeOfValueAllowed(this$static.sumCondition, false);
      }
       else {
        $setOrigin(this$static.sumCondition, this$static.sumCondition.m_headerCondition.m_origin);
        $setManualEntryFlag(this$static.sumCondition, this$static.sumCondition.m_headerCondition.m_manual);
        $setChangeOfRateAllowed(this$static.sumCondition, this$static.sumCondition.m_headerCondition.m_changeOfRateAllowed);
        $setChangeOfUnitAllowed(this$static.sumCondition, this$static.sumCondition.m_headerCondition.m_changeOfUnitAllowed);
        $setChangeOfValueAllowed(this$static.sumCondition, this$static.sumCondition.m_headerCondition.m_changeOfValueAllowed);
        $setChangeOfCalculationTypeAllowed(this$static.sumCondition, this$static.sumCondition.m_headerCondition.m_changeOfCalcTypeAllowed);
      }
      this$static.sumCondition.m_pricingItem = null;
      $add_3(this$static.m_sumConditions, this$static.sumCondition);
      pricingConditions = new Vector;
      $isConditionDeletableViaSummedUpCondn(this$static, this$static.prCondition) && $addElement(pricingConditions, this$static.prCondition);
      $put_0(this$static.m_pricingConditionsOfSumCounter, new Integer(sumUpCounter), pricingConditions);
      ++sumUpCounter;
    }
  }
}

function $updateObserversItemRemoved(this$static){
  var i_0, size_0;
  size_0 = this$static._observers.arrayList.array.length;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    throwClassCastExceptionUnlessNull($get_14(this$static._observers, i_0)).nullMethod();
  }
}

function $updatePricingItem_2(this$static, pricingItem, firstPricingConditionToCalculate){
  if (pricingItem) {
    $setFirstPricingConditionToCalculate(pricingItem, firstPricingConditionToCalculate);
    $add_5(this$static.pricingItemsToBeCalcuated, pricingItem);
    !!firstPricingConditionToCalculate && firstPricingConditionToCalculate.m_isGroupCondition && (this$static.m_pricingCompleteRequired = true , undefined);
  }
  this$static.alwaysPerformingCalculation && $calculate_0(this$static);
}

function PricingDocument(doc){
  $clinit_PricingDocument();
  this._statusListeners = new Vector;
  this._observers = new Vector;
  this._sourceDocumentIds = new ArrayList;
  this._sourceItemIds = new ArrayList;
  this.pricingItemsToBeCalcuated = new TreeSet_0(new PricingItemComparator);
  this.document_0 = doc;
  this._id = $getId(this.document_0);
  this._usage = this.document_0.usage;
  this._onlySpecifiedUsage = this.document_0.onlySpecifiedUsage;
  this._application = this.document_0.application;
  this._localCurrencyUnit = $getLocalCurrency(this.document_0);
  this._documentCurrencyUnit = this.document_0.documentCurrency;
  this._keepZeroPricesActive = this.document_0.keepZeroPricesActive;
  $setRoundingDifferenceBound(this);
  this._pricingProcedure = doc.pricingProcedure;
  this.exclusionProcessor = new ExclusionProcessor;
  this.exclusionProcessor.m_takeZeroValuesIntoAccountForExclusion = false;
  $setExclusionProcedure(this.exclusionProcessor, this._pricingProcedure.exlusionProcedure);
  this.items = new HashMap;
  this.m_sumConditions = new ArrayList;
  this.m_pricingConditionsOfSumCounter = new HashMap;
  this.m_headerConditions = new TreeSet_0(new HeaderConditionComparator);
  this.m_mandatoryConditions = $determineMandatoryConditions(this._pricingProcedure);
  this._performTrace = false;
  new HashMap;
  $clinit_PricingFormulas();
  this.m_maxDBConditionValue = $subtract($movePointRight(($clinit_PricingConstants() , ONE_1), 13 - this._documentCurrencyUnit.getNumberOfDecimals()), ONE_1);
  this.m_ZeroRate = $getCurrencyValue(($getConversionEngine() , ZERO_5), this._documentCurrencyUnit);
}

function addSubItemsRecursive(item_0, itemsTreeSorted){
  var iter, subItem;
  for (iter = new AbstractList$IteratorImpl($getSubPricingItems(item_0)); iter.i < iter.this$01.size_1();) {
    subItem = (checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 48));
    itemsTreeSorted.add_0(subItem);
    addSubItemsRecursive(subItem, itemsTreeSorted);
  }
}

function find_1(set_0, objectToSearchFor){
  var result;
  result = new TreeSet_1(set_0.map_0.tailMap(objectToSearchFor, true));
  if (result.map_0.size_1() > 0) {
    return getKeyOrNSE(result.map_0.getFirstEntry());
  }
  return null;
}

defineClass(582, 1, $intern_21, PricingDocument);
_.toString$ = function toString_20(){
  var itemIterator, str;
  str = new StringBuffer_1('Netvalue: ' + $getNetValue_1(this) + '\n\n');
  for (itemIterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet($getItemsSortedByExternalId(this).map_0)); $hasNext_0(itemIterator.val$entryIterator2.iter);) {
    $append_1(str, $toString_5(dynamicCast($next_3(itemIterator), 48)));
  }
  return (str.string += '\n' , str).string;
}
;
_._alwaysPerformGroupConditionProcessing = true;
_._authorityForDisplay = 0;
_._authorityForEdit = 0;
_._doSecondPricingComplete = false;
_._keepZeroPricesActive = false;
_._onlySpecifiedUsage = false;
_._performCalcTrace = false;
_._performTrace = false;
_._pricingOnDocumentLevelIsProcessed = false;
_._secondPricingComplete = false;
_._sourcePricingConditions = null;
_.alwaysPerformingCalculation = true;
_.creationModeForConditions = false;
_.loadFromDatabase = false;
_.m_ZeroRate = null;
_.m_pricingCompleteRequired = false;
_.m_takeCurrencyConversionFlagIntoAccount = true;
_.m_tryDirectCurrencyConversion = true;
_.pricingUnitsAreEqual = false;
_.processMode = 78;
_.ratesAreEqual = false;
_.valueDependGrpHndlr = null;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingDocument_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingDocument', 582, Ljava_lang_Object_2_classLit);
function $clinit_PricingEngine(){
  $clinit_PricingEngine = emptyMethod;
  $clinit_ConditionFindingEngine();
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingEngine_2_classLit);
}

function $createPricingCondition(this$static, pricingItem, step, access, ct, prConditionRecord, pricingTimestamp){
  var actualUsage, desiredUsage, prEng;
  desiredUsage = ct.conditionTypeTO.usage;
  actualUsage = this$static.usage;
  if ($equals_7(desiredUsage, actualUsage)) {
    return new PricingCondition_2(pricingItem, step, access, ct, prConditionRecord, pricingTimestamp);
  }
   else {
    prEng = this$static;
    try {
      prEng = dynamicCast($getConditionFindingEngine(factory_1, desiredUsage), 351);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
    return $createPricingCondition(prEng, pricingItem, step, access, ct, prConditionRecord, pricingTimestamp);
  }
}

function $createPricingCondition_0(this$static, pricingItem, step, conditionType){
  var actualUsage, desiredUsage, prEng;
  desiredUsage = conditionType.conditionTypeTO.usage;
  actualUsage = this$static.usage;
  if ($equals_7(desiredUsage, actualUsage)) {
    return new PricingCondition_3(pricingItem, step, conditionType);
  }
   else {
    prEng = this$static;
    try {
      prEng = dynamicCast($getConditionFindingEngine(factory_1, desiredUsage), 351);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        $clinit_Configuration_0();
      }
       else 
        throw unwrap($e0);
    }
    return $createPricingCondition_0(prEng, pricingItem, step, conditionType);
  }
}

function PricingEngine(){
  $clinit_PricingEngine();
  this.usage = 'A';
  this.customizingEngine = $getCustomizingEngine(factory_0, 'A');
  this.relevantAttributesObjMgr = new RelevantAttributesObjectManager;
  this.pricingConditionObjectManager = new PricingConditionObjectManager;
}

defineClass(447, 446, {159:1, 350:1, 351:1}, PricingEngine);
var Lcom_sap_spe_pricing_transactiondata_impl_PricingEngine_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingEngine', 447, Lcom_sap_spe_condmgnt_finding_impl_ConditionFindingEngine_2_classLit);
function $clinit_PricingFormulas(){
  $clinit_PricingFormulas = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingFormulas_2_classLit);
}

var Lcom_sap_spe_pricing_transactiondata_impl_PricingFormulas_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingFormulas', null, Ljava_lang_Object_2_classLit);
function $clinit_PricingItem(){
  $clinit_PricingItem = emptyMethod;
  $clinit_ConditionFindingManager();
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_PricingItem_2_classLit);
  ZERO_SCALE_BASE = initValues(getClassLiteralForArray(Ljava_math_BigDecimal_2_classLit, 1), $intern_7, 12, 0, [($clinit_PricingConstants() , ZERO_5)]);
}

function $adaptConditionDuringCopyProcess(prCondition){
  if (prCondition.m_calculationType == 66 || ($clinit_SAPString() , $indexOf('EFH', fromCodePoint(prCondition.m_control)) >= 0)) {
    if (prCondition.m_origin == 68 || prCondition.m_control == 68) {
      prCondition.m_isGroupCondition = false;
      prCondition.m_groupCondition = null;
      $clinit_SAPString();
      $indexOf('FH', fromCodePoint(prCondition.m_control)) >= 0 || (prCondition.m_control = 69);
    }
  }
  prCondition.m_calculationType == 66 || prCondition.m_control == 69 || prCondition.m_control == 70 || prCondition.m_control == 72 || ($clinit_SAPString() , $indexOf('CD', fromCodePoint(prCondition._scaleTypes == null?32:prCondition._scaleTypes[0])) >= 0 && prCondition.m_origin == 68 && (!$getFactor(prCondition.m_factor) || $signum($getFactor(prCondition.m_factor)) == 0));
  prCondition.m_origin == 68 && (prCondition.m_origin = 71);
}

function $add_0(){
  return null;
}

function $addCondition_0(this$static, condition){
  var i_0, pricingCondition, varKeyValues, varKeys;
  pricingCondition = dynamicCast(condition, 15);
  if (!!this$static._variantConditions && pricingCondition.m_variant) {
    if (this$static._pricingDocument.loadFromDatabase) {
      pricingCondition.m_varcondKey != null && throwClassCastExceptionUnlessNull($getStringValue(this$static._variantConditions.m_varconds, pricingCondition.m_varcondKey));
    }
     else {
      pricingCondition.m_determineConditionRecord == 0 && $determineConditionRecord(pricingCondition);
      if (pricingCondition.conditionRecord) {
        varKeys = (pricingCondition.m_determineConditionRecord == 0 && $determineConditionRecord(pricingCondition) , pricingCondition.conditionRecord).getVariableKeyNames();
        varKeyValues = (pricingCondition.m_determineConditionRecord == 0 && $determineConditionRecord(pricingCondition) , pricingCondition.conditionRecord).getVariableKeyValues();
        for (i_0 = 0; i_0 < varKeys.length; i_0++) {
          if ($equals_7(varKeys[i_0], this$static._pricingDocument.document_0.varcondFieldname)) {
            throwClassCastExceptionUnlessNull($getStringValue(this$static._variantConditions.m_varconds, varKeyValues[i_0]));
            break;
          }
        }
      }
    }
  }
  $addCondition(this$static, pricingCondition);
}

function $addCondition_1(this$static, condition){
  $addCondition_0(this$static, condition);
  if (instanceOf(condition, 61)) {
    $add_5(this$static._pricingConditionsToCopy, condition);
    condition.m_changeOfValueAllowed = false;
  }
  if (condition.m_indicatorStructureCondition == 66) {
    $add_5(this$static._pricingConditionsForCumulation, condition);
    condition.m_manual = 68;
  }
  return condition;
}

function $addHeaderCondition(this$static, headerCondition){
  var addedConditions, condType, condition, e, iter, pricingCondition, step;
  addedConditions = null;
  if (null.nullMethod()) {
    return null;
  }
  step = headerCondition.step;
  condType = headerCondition.m_conditionType;
  try {
    addedConditions = $addPricingCondition_0(this$static, step, condType);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 34)) {
      e = $e0;
      $printStackTrace(e);
    }
     else 
      throw unwrap($e0);
  }
  pricingCondition = null;
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(addedConditions.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    condition = dynamicCast($next_3(iter), 15);
    if ($equals_7(condType.conditionTypeTO.name_0, condition.getConditionTypeName())) {
      $setHeaderCondition(condition, headerCondition);
      $addPricingCondition(headerCondition, condition);
      $disableManualChanges(condition);
      pricingCondition = condition;
    }
  }
  if (pricingCondition) {
    return pricingCondition;
  }
  return null;
}

function $addPricingCondition_0(this$static, step, condType){
  var addedConditions, condRec, condTimestamp, difference, iterator, oldConditions, oldSize, prCond, timestamp, trStep, tracer, tracerStep;
  addedConditions = new TreeSet_0(($clinit_ConditionComparator() , $clinit_ConditionComparator() , INSTANCE_0));
  if (this$static.performTrace) {
    $addTracer(this$static.conditionFindingTracer, new Tracer(this$static.conditionFindingTracer.traces.map_0.size_1()));
    tracer = $getCurrentTracer(this$static.conditionFindingTracer);
    trStep = new TracerStep_0(step, tracer.steps.map_0.size_1(), condType);
    $add_5(tracer.steps, trStep);
  }
  oldSize = this$static.conditions.map_0.size_1();
  oldConditions = new TreeSet_2(this$static.conditions);
  timestamp = null;
  if (!this$static._pricingDocument._onlySpecifiedUsage || $equals_7(condType.conditionTypeTO.usage, this$static._pricingDocument._usage)) {
    if (!!step.conditionType && !$isVariantCondition(step.conditionType)) {
      if (this$static.timestamps) {
        condTimestamp = $getTimestamp(this$static.timestamps, step.conditionType);
        !!condTimestamp && (timestamp = condTimestamp.value_0);
      }
      !!timestamp && $determineConditionsForConditionType_0(this$static, step, step.conditionType, timestamp);
    }
  }
  if (oldSize == this$static.conditions.map_0.size_1()) {
    condType.conditionForDuplication?(prCond = new MainConditionToCopy_0(this$static, step, condType)):(prCond = $createPricingCondition_0($getPricingEngine(this$static._pricingDocument._usage), this$static, step, condType));
    $addCondition_1(this$static, prCond);
    addedConditions.map_0.put_0(prCond, ($clinit_Boolean() , FALSE)) == null;
    if (this$static.performTrace) {
      tracerStep = $getCurrentTracerStep(this$static.conditionFindingTracer);
      $getCurrentTracerAccess(tracerStep);
    }
  }
   else {
    if (this$static._pricingDocument.processMode == 78 && condType.pricingConditionTypeTO.manualEntryFlag == 66 && condType.pricingConditionTypeTO.deletionAllowed) {
      this$static.conditions = oldConditions;
      throw new ManualChangeNotAllowedException(204, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condType.conditionTypeTO.name_0]));
    }
    difference = new TreeSet_2(this$static.conditions);
    $removeAll(difference, oldConditions);
    for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(difference.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
      condRec = dynamicCast($next_3(iterator), 15);
      condRec.m_origin = 67;
      condRec.m_manuallyChanged = true;
      addedConditions.map_0.put_0(condRec, ($clinit_Boolean() , FALSE)) == null;
      if (this$static.performTrace) {
        tracer = $getCurrentTracer(this$static.conditionFindingTracer);
        $getTracerStep(tracer, condRec.stepNumber);
      }
    }
  }
  return addedConditions;
}

function $addPricingCondition_1(this$static, condTypeNameParam){
  var addedConditions, condArray, condType, condTypeName, iter, prCond, procedure, processMode, step;
  if (this$static.m_pricingItemIsUnchangeable) {
    throw new ManualChangeNotAllowedException(129, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, []));
  }
  procedure = this$static._pricingDocument._pricingProcedure;
  if (condTypeNameParam == null) {
    throw new ManualChangeNotAllowedException(206, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, ['    ', 'A', this$static.application, procedure.pricingProcedureTO.name_0]));
  }
  condTypeName = condTypeNameParam.toUpperCase();
  step = $determineStepOfConditionType(procedure, condTypeName);
  if (!step) {
    throw new ManualChangeNotAllowedException(206, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condTypeName, 'A', this$static.application, procedure.pricingProcedureTO.name_0]));
  }
  if (!$isAuthorizedForEdit(this$static._pricingDocument, step)) {
    throw new ManualChangeNotAllowedException(207, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condTypeName]));
  }
  condType = $determineStepOfConditionType(procedure, condTypeName).conditionType;
  processMode = this$static._pricingDocument.processMode;
  if (processMode == 78 && condType.pricingConditionTypeTO.manualEntryFlag == 68) {
    throw new ManualChangeNotAllowedException(205, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condTypeName]));
  }
  if (!condType.pricingConditionTypeTO.itemCondition) {
    throw new ManualChangeNotAllowedException(214, initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [condTypeName]));
  }
  addedConditions = $addPricingCondition_0(this$static, step, condType);
  if (addedConditions.map_0.size_1() == 0) {
    return initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, 0, 0, 1);
  }
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(addedConditions.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    prCond = dynamicCast($next_3(iter), 15);
    prCond.m_origin = 67;
  }
  this$static._pricingDocument.creationModeForConditions = true;
  $updatePricingItem_2(this$static._pricingDocument, this$static, dynamicCast(getKeyOrNSE(addedConditions.map_0.getFirstEntry()), 15));
  condArray = initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, addedConditions.map_0.size_1(), 0, 1);
  addedConditions.toArray_0(condArray);
  return condArray;
}

function $addPricingCondition_2(this$static, condTypeName, condRate, unitName, prUnitValue, prUnitName){
  var addedConditions, context, currUnit, i_0, pricingCondition, pricingUnit;
  addedConditions = $addPricingCondition_1(this$static, condTypeName);
  for (i_0 = 0; i_0 < addedConditions.length; i_0++) {
    if ($equals_7(addedConditions[i_0].getConditionTypeName(), condTypeName)) {
      pricingCondition = dynamicCast(addedConditions[i_0], 15);
      pricingCondition.m_determineConditionRecord == 0 && $determineConditionRecord(pricingCondition);
      !pricingCondition.conditionRecord && !condRate && (condRate = ($clinit_PricingTransactiondataConstants() , ZERO_4));
      if (!!condRate || unitName != null || !!prUnitValue || prUnitName != null) {
        pricingCondition.changeConditionRate(condRate, unitName, prUnitValue, prUnitName);
      }
       else {
        condRate = pricingCondition.m_conditionRate.m_value;
        currUnit = dynamicCast(pricingCondition.m_conditionRate.m_unit, 26);
        pricingUnit = pricingCondition.m_pricingUnit;
        context = $append_0($append_0(new StringBuffer_1('PricingCondition.changeConditionRate'), pricingCondition.stepNumber), pricingCondition.counter).string;
        $checkConditionRate(pricingCondition, condRate, currUnit, pricingUnit, context);
      }
    }
  }
  return addedConditions;
}

function $addPricingConditionDuringLoad(this$static, pricingCopy, conditionTypesToCopy, prCond, isSourceTargetItemIdentical){
  $addCondition_1(this$static, prCond);
  if (pricingCopy) {
    prCond.m_control == 70 && (prCond.m_control = 65);
    if (prCond.getConditionTypeName() != null && !$equals_7(prCond.getConditionTypeName(), '')) {
      isSourceTargetItemIdentical && (prCond.m_variant || prCond.m_conditionCategory == 79) || $putStringValue(conditionTypesToCopy, prCond.getConditionTypeName(), ($clinit_Boolean() , TRUE));
      prCond.m_inactive == 90 && $removePricingCondition_0(this$static, prCond);
    }
    $adaptConditionDuringCopyProcess(prCond);
  }
}

function $addPricingConditionsToCopy(this$static, conditionsToCopy){
  var condType, conditionToCopy, iterator, prCondition, step, stepNo;
  stepNo = $intern_32;
  if (this$static.m_pricingItemIsUnchangeable) {
    return $intern_32;
  }
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(conditionsToCopy.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    conditionToCopy = dynamicCast($next_3(iterator), 61);
    if (!$hasStringValue(conditionToCopy.duplicatedConditions, this$static._itemNumber)) {
      condType = conditionToCopy.m_conditionType;
      step = $determineStepOfConditionType(this$static._pricingDocument._pricingProcedure, condType.conditionTypeTO.name_0);
      step.stepTO.stepNumber < stepNo && (stepNo = step.stepTO.stepNumber);
      try {
        prCondition = $createPricingCondition_0($getPricingEngine(this$static._pricingDocument._usage), this$static, step, condType);
        $copyAttributesFromMainCondition(prCondition, conditionToCopy);
        $putStringValue(conditionToCopy.duplicatedConditions, prCondition.m_pricingItem._itemNumber, prCondition);
        $addCondition(this$static, prCondition);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          $clinit_Configuration_0();
          initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [$toString_5(this$static)]);
        }
         else 
          throw unwrap($e0);
      }
    }
  }
  return stepNo;
}

function $addStatusListener_0(this$static, l){
  $contains_2(this$static._statusListeners, l) || $add_6(this$static._statusListeners, l);
}

function $calculate_1(this$static){
  var prStepNo, smallestStepNo;
  smallestStepNo = $initializeConditions(this$static, 65, false);
  !!this$static.firstPricingConditionToCalculate && this$static.firstPricingConditionToCalculate.stepNumber < smallestStepNo?(smallestStepNo = this$static.firstPricingConditionToCalculate.stepNumber):(smallestStepNo = 0);
  !monitor && (monitor = new MonitorImpl);
  prStepNo = $calculate_2(this$static, smallestStepNo, 65, false, false, null);
  $exclusion(this$static, prStepNo, 65, false, null);
  this$static.firstPricingConditionToCalculate = null;
  $checkMandatoryConditions(this$static);
}

function $calculate_2(this$static, fromStepNo, calculationMode, onlyCalculateSubtotalLines, isGroupConditionProcessing, pricingConditionPointer){
  var condScaleValue, condition, conditionBase, conditionScale, conditionValue, conditionValueSum, conversionEngine, curRate, currUnit, currUnitName, diff2, dummyCondition, e, elem, groupCondition, i_0, iterator, lowerLimit, newConditionBase, newScaleBase, oldConditionBase, oldConditionValue, oldScaleBases, prCond, prDoc, prLimits, rate, roundingDiff, scaleBase, scaleDimension, smallestStepNo, unitName, upperLimit;
  this$static._isGroupConditionProcessing = isGroupConditionProcessing;
  if (!this$static.conditions) {
    return $intern_31;
  }
  $init_1(this$static);
  prDoc = this$static._pricingDocument;
  this$static.taxPricingConditionToBeAdded = null;
  if (!!this$static._allTaxPricingConditions && !this$static._pricingDocument.loadFromDatabase) {
    while (this$static._allTaxPricingConditions.arrayList.array.length > 0) {
      $removePricingCondition_0(this$static, dynamicCast($remove_9(this$static._allTaxPricingConditions, 0), 15));
    }
    this$static._allTaxPricingConditions.arrayList.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
  }
  smallestStepNo = $intern_31;
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter) || this$static._taxPricingConditions.array.length > 0;) {
    if (this$static._taxPricingConditions.array.length > 0) {
      condition = dynamicCast(this$static._taxPricingConditions.remove_2(0), 15);
      !this$static.taxPricingConditionToBeAdded && (this$static.taxPricingConditionToBeAdded = new Vector);
      this$static.taxPricingConditionToBeAdded.add_0(condition);
    }
     else {
      condition = dynamicCast($next_3(iterator), 15);
    }
    diff2 = fromDouble(now_1());
    $determineExchangeRate_0(condition, this$static);
    $clinit_SAPString();
    if ($indexOf('MX', fromCodePoint(condition.m_inactive)) >= 0) {
      continue;
    }
    oldConditionBase = !condition.m_conditionBase?($clinit_PricingConstants() , ZERO_5):condition.m_conditionBase.getValue_0();
    oldConditionValue = !condition.m_conditionValue?($clinit_PricingConstants() , ZERO_5):condition.m_conditionValue;
    scaleDimension = condition._numScaleDimensions;
    if (scaleDimension == 0) {
      oldScaleBases = ZERO_SCALE_BASE;
    }
     else {
      oldScaleBases = initDim(Ljava_math_BigDecimal_2_classLit, $intern_7, 12, scaleDimension, 0, 1);
      for (i_0 = 0; i_0 < scaleDimension; i_0++) {
        conditionScale = $getConditionScale_0(condition, i_0 + 1);
        oldScaleBases[i_0] = !conditionScale?($clinit_PricingConstants() , ZERO_5):conditionScale.getValue_0();
      }
    }
    if (condition.m_origin != 74) {
      if (condition.stepNumber >= fromStepNo) {
        calculationMode != 69 && (!onlyCalculateSubtotalLines || !condition.m_conditionType) && $indexOf('EG', fromCodePoint(condition.m_control)) < 0 && condition.m_inactive != 65 && (!this$static._isGroupConditionProcessing || this$static._isGroupConditionProcessing && (!!pricingConditionPointer && (condition.stepNumber > pricingConditionPointer.stepNumber || condition.stepNumber == pricingConditionPointer.stepNumber && condition.counter > pricingConditionPointer.counter) || !pricingConditionPointer))?(condition.m_conditionBase = $calcConditionBase(condition, condition.m_calculationType) , $overwriteConditionBase_0(condition, condition) , $calcAlternativeConditionBase(condition) , undefined):$overwriteConditionBase($getDummyCondition(condition));
        $indexOf('FH', fromCodePoint(condition.m_control)) >= 0 && !onlyCalculateSubtotalLines && $signum(oldConditionBase) != 0 && $compareTo_7(oldConditionBase, condition.m_conditionBase.getValue_0()) != 0 && $setConditionValue(condition, $divide($multiply(condition.m_conditionValue, condition.m_conditionBase.getValue_0()), oldConditionBase, this$static._pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), valueOf_7(4)));
        !$equals_7(condition._scaleBaseIndicators[0], '') && calculationMode != 69 && (!onlyCalculateSubtotalLines || !condition.m_conditionType) && condition.m_control != 69 && (condition.m_inactive != 65 || this$static.m_pricingItemIsUnchangeable)?$calculateScaleBase(condition):$overwriteScaleBase($getDummyCondition(condition));
        if (!!(condition._conditionScales == null?null:condition._conditionScales[0]) && !onlyCalculateSubtotalLines) {
          $calculateFactor(condition);
          $createIntervalScaleTrace(condition, condition._scaleBaseIndicators[0], condition.m_conditionRate);
        }
        isGroupConditionProcessing || (condition.m_rateDeterminedFromGroupCondition = false);
        calculationMode != 69 && (!onlyCalculateSubtotalLines || !condition.m_conditionType) && condition.m_inactive != 65 && $indexOf('EFH', fromCodePoint(condition.m_control)) < 0?!isGroupConditionProcessing || isGroupConditionProcessing && (!!pricingConditionPointer && (condition.stepNumber > pricingConditionPointer.stepNumber || condition.stepNumber == pricingConditionPointer.stepNumber && condition.counter >= pricingConditionPointer.counter) || !pricingConditionPointer)?$calculateConditionValue(condition, oldScaleBases, prDoc._secondPricingComplete):$processConditionValueFormula($getDummyCondition(condition)):$processConditionValueFormula($getDummyCondition(condition));
        condition.m_control == 69 && $calcAlternativeConditionValue(condition);
        newScaleBase = !(condition._conditionScales == null?null:condition._conditionScales[0])?($clinit_PricingConstants() , ZERO_5):(condition._conditionScales == null?null:condition._conditionScales[0]).getValue_0();
        newConditionBase = !condition.m_conditionBase?($clinit_PricingConstants() , ZERO_5):condition.m_conditionBase.getValue_0();
        !isGroupConditionProcessing && !onlyCalculateSubtotalLines && condition.m_isGroupCondition && (!$equals_8(oldScaleBases[0], newScaleBase) || !$equals_8(oldConditionValue, condition.m_conditionValue) || condition.m_indicatorStructureCondition == 66 || !$equals_8(oldConditionBase, newConditionBase) && ($clinit_PricingCustomizingConstants$CalculationType() , $indexOf('ABHIUW', fromCodePoint(condition.m_calculationType)) >= 0)) && (this$static._pricingDocument.m_pricingCompleteRequired = true);
      }
       else {
        dummyCondition = $getDummyCondition(condition);
        $overwriteConditionBase_0(dummyCondition.pricingCondition, dummyCondition);
        $overwriteScaleBase_0(dummyCondition.pricingCondition, dummyCondition);
        $overwriteConditionValue(dummyCondition.pricingCondition, dummyCondition);
      }
      groupCondition = condition.m_groupCondition;
      if (isGroupConditionProcessing && !onlyCalculateSubtotalLines && !!groupCondition && ($clinit_PricingCustomizingConstants$CalculationType() , $indexOf('ABHIUW', fromCodePoint(condition.m_calculationType)) >= 0 || condition._scaleBaseIndicators[0] != null && $equals_7(condition._scaleBaseIndicators[0], 'B')) && !this$static.m_pricingItemIsUnchangeable && $indexOf('EFH', fromCodePoint(condition.m_control)) < 0) {
        condScaleValue = ($clinit_PricingConstants() , ZERO_5);
        !!(condition._conditionScales == null?null:condition._conditionScales[0]) && (condScaleValue = (condition._conditionScales == null?null:condition._conditionScales[0]).getValue_0());
        if (condition != pricingConditionPointer) {
          if (condition.stepNumber >= fromStepNo) {
            if ($compareTo_7(oldConditionBase, condition.m_conditionBase.getValue_0()) != 0 || $compareTo_7(oldConditionValue, condition.m_conditionValue) != 0 || $compareTo_7(oldScaleBases[0], condScaleValue) != 0) {
              conditionBase = $subtract($getConditionBaseValue(condition), oldConditionBase);
              conditionValueSum = $subtract(condition.m_conditionValue, oldConditionValue);
              if (this$static.multiplicityOrNull) {
                conditionBase = $multiply(conditionBase, this$static.multiplicityOrNull);
                conditionValueSum = $multiply(conditionValueSum, this$static.multiplicityOrNull);
              }
              $setConditionBaseValue(groupCondition, $add_1($getConditionBaseValue(groupCondition), conditionBase));
              $setGroupConditionValueSum(groupCondition, $add_1(groupCondition.m_conditionValueSum, conditionValueSum));
              if (!$equals_7(groupCondition._scaleBaseIndicators[0], '')) {
                scaleBase = $subtract(condScaleValue, oldScaleBases[0]);
                !!this$static.multiplicityOrNull && (scaleBase = $multiply(scaleBase, this$static.multiplicityOrNull));
                scaleBase = $add_1(groupCondition._conditionScales == null?null:!groupCondition._conditionScales[0]?null:groupCondition._conditionScales[0].getValue_0(), scaleBase);
                !!scaleBase && groupCondition._conditionScales != null && !!groupCondition._conditionScales[0]?$setScaleBase(groupCondition, scaleBase, groupCondition._conditionScales[0].getUnit()):setCheck(groupCondition._conditionScales, 0, null);
              }
              if (groupCondition.m_varKey.length > 0 && !groupCondition.m_roundingDifferenceCalculation) {
                conditionValue = $subtract($getConditionValue(condition).m_value, oldConditionValue);
                !!this$static.multiplicityOrNull && (conditionValue = $multiply(conditionValue, this$static.multiplicityOrNull));
                conditionValue = $add_1(groupCondition.m_conditionValue, conditionValue);
                groupCondition.m_conditionValue = conditionValue;
              }
            }
          }
        }
         else {
          condition.m_calculationType == 66 && ($equals_7(groupCondition.m_varKey, '') || groupCondition.m_roundingDifferenceCalculation) && ($signum($getConditionBaseValue(groupCondition)) != 0?$setConditionValue(condition, $divide($multiply(groupCondition.m_conditionValue, condition.m_conditionBase.getValue_0()), $getConditionBaseValue(groupCondition), this$static._pricingDocument._documentCurrencyUnit.getNumberOfDecimals(), valueOf_7(4))):$setConditionValue(condition, ZERO_5));
          conditionValueSum = $subtract(condition.m_conditionValue, oldConditionValue);
          !!this$static.multiplicityOrNull && (conditionValueSum = $multiply(conditionValueSum, this$static.multiplicityOrNull));
          conditionValueSum = $add_1(groupCondition.m_conditionValueSum, conditionValueSum);
          groupCondition.m_conditionValueSum = conditionValueSum;
          if (!$equals_7(groupCondition.m_varKey, '') && !groupCondition.m_roundingDifferenceCalculation) {
            conditionValue = $subtract($getConditionValue(condition).m_value, oldConditionValue);
            !!this$static.multiplicityOrNull && (conditionValue = $multiply(conditionValue, this$static.multiplicityOrNull));
            conditionValue = $add_1(groupCondition.m_conditionValue, conditionValue);
            groupCondition.m_conditionValue = conditionValue;
          }
          if (condition == groupCondition.m_pricingConditionWithRoundingDiff && condition.m_indicatorStructureCondition != 66 && ($equals_7(groupCondition.m_varKey, '') || groupCondition.m_roundingDifferenceCalculation)) {
            roundingDiff = $subtract(groupCondition.m_conditionValue, groupCondition.m_conditionValueSum);
            $setConditionValue(condition, $add_1(condition.m_conditionValue, roundingDiff));
            $setGroupConditionValueSum(groupCondition, groupCondition.m_conditionValue);
            this$static._calculationDuringPricingCompleteRequired = true;
            $compareTo_7($signum(roundingDiff) < 0?$negate(roundingDiff):roundingDiff, this$static._pricingDocument.roundingDifferenceBound) < 0 && (condition.m_roundingDifference = roundingDiff);
          }
        }
      }
    }
    condition.m_conditionClass == 66 && !onlyCalculateSubtotalLines && !this$static._pricingDocument._keepZeroPricesActive && $signum(condition.m_conditionRate.m_value) == 0 && !condition.m_isGroupCondition && $indexOf(' Y', fromCodePoint(condition.m_inactive)) >= 0 && $signum(condition.m_conditionValue) == 0 && (condition.m_inactive = 88);
    unitName = $getConditionRateUnitName(condition);
    conversionEngine = dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14);
    try {
      currUnit = ($checkArg(unitName) , $getCurrencyUnit_0(conversionEngine.m_currencyUnitObjMgr, unitName));
      currUnitName = currUnit.getUnitName_0();
      if (condition.m_conditionType) {
        prLimits = $getPricingConditionLimits(condition.m_conditionType, condition.m_calculationType, currUnitName);
        if (prLimits) {
          upperLimit = prLimits.upperLimit;
          lowerLimit = prLimits.lowerLimit;
          rate = condition.m_conditionRate.m_value;
          curRate = $getCurrencyValue(rate, currUnit);
          if ($compareTo_7(rate, lowerLimit.m_value) < 0 || $compareTo_7(rate, upperLimit.m_value) > 0) {
            condition.m_inactive = 88;
            $compareTo_7(rate, lowerLimit.m_value) < 0 && $fireSetStatusMessage_0(this$static, new WarningStatusEvent_1(713, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$getValueAsString_0(curRate), $getValueAsString_0(lowerLimit), condition.getConditionTypeName()]), $getValueAsString_0(curRate) + ' falls below the l ' + $getValueAsString_0(lowerLimit) + ' for condition type ' + condition.getConditionTypeName(), '', false));
            $compareTo_7(rate, upperLimit.m_value) > 0 && $fireSetStatusMessage_0(this$static, new WarningStatusEvent_1(714, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [$getValueAsString_0(curRate), $getValueAsString_0(upperLimit), condition.getConditionTypeName()]), $getValueAsString_0(curRate) + ' exceeds the limit ' + $getValueAsString_0(upperLimit) + ' for condition type ' + condition.getConditionTypeName(), '', false));
          }
        }
      }
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 17)) {
        e = $e0;
        $printStackTrace(e);
      }
       else 
        throw unwrap($e0);
    }
    this$static.m_isStatistical && condition.m_inactive == 32 && (!onlyCalculateSubtotalLines && !this$static.m_pricingItemIsUnchangeable || !condition.m_conditionType) && (condition.m_inactive = 87);
    !this$static.m_exclusionRequired && !onlyCalculateSubtotalLines && calculationMode != 69 && (!isGroupConditionProcessing || $compareTo_7(oldConditionValue, condition.m_conditionValue) != 0) && !!condition.m_conditionType && !!this$static._pricingDocument.exclusionProcessor.m_exclusionCondTypeNames && $contains_1(this$static._pricingDocument.exclusionProcessor.m_exclusionCondTypeNames, condition.getConditionTypeName()) && (this$static.m_exclusionRequired = true);
    $accumulateValues(this$static.accumulator, condition);
    !!condition.m_conditionType && condition.m_inactive != 77 && condition.m_inactive != 88 && condition.m_inactive != 90 && $removeStringValue(this$static.m_mandatoryConditions, condition.getConditionTypeName());
    diff2 = sub_0(fromDouble(now_1()), diff2);
    logT_0(set_1(condition.stepNumber, condition.counter, !condition.m_conditionType?condition.m_description:condition.getConditionTypeName(), diff2));
  }
  if (this$static.taxPricingConditionToBeAdded) {
    !this$static._allTaxPricingConditions && (this$static._allTaxPricingConditions = new Vector);
    for (elem = this$static.taxPricingConditionToBeAdded.iterator(); elem.i < elem.this$01.size_1();) {
      prCond = (checkCriticalElement(elem.i < elem.this$01.size_1()) , dynamicCast(elem.this$01.get_5(elem.last = elem.i++), 15));
      $addCondition_1(this$static, prCond);
      $add_6(this$static._allTaxPricingConditions, prCond);
    }
  }
  this$static.accumulator.m_lastPrice.m_stepNo != 0 && (smallestStepNo = $deactivateConditions(this$static));
  return smallestStepNo;
}

function $calculateGroupConditionProcessing(this$static, fromStepNo, pricingConditionPointer){
  var smallestStepNo;
  smallestStepNo = $initializeConditions(this$static, 70, true);
  fromStepNo < smallestStepNo && (smallestStepNo = fromStepNo);
  return $calculate_2(this$static, smallestStepNo, 70, false, true, pricingConditionPointer);
}

function $checkMandatoryConditions(this$static){
  var condTypeName, defaultMessage, description, entry, iterator, mandatoryType, pricingStep;
  $fireClearStatusMessage_0(this$static, new ClearAllStatusEvent('PricingItem.CheckMandatoryConditions'));
  if (this$static.m_mandatoryConditions.size_0 > 0) {
    for (iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.m_mandatoryConditions)).this$01); $hasNext(iterator);) {
      entry = (checkStructuralChange(iterator.this$01, iterator) , checkCriticalElement($hasNext(iterator)) , iterator.last = iterator.current , dynamicCast(iterator.current.next(), 25));
      condTypeName = dynamicCastToString(entry.getKey());
      pricingStep = dynamicCast(entry.getValue_1(), 105);
      description = $getDescription_0(pricingStep.conditionType);
      defaultMessage = 'Pricing error: Mandatory condition ' + description + ' (' + condTypeName + ') is missing';
      mandatoryType = pricingStep.stepTO.mandatoryType;
      mandatoryType == 32 || mandatoryType == 69?$fireSetStatusMessage_0(this$static, new ErrorStatusEvent(initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [description, condTypeName]), 801, defaultMessage, 'PricingItem.CheckMandatoryConditions')):$fireSetStatusMessage_0(this$static, new WarningStatusEvent_0(801, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [description, condTypeName]), defaultMessage, 'PricingItem.CheckMandatoryConditions'));
    }
  }
}

function $conditionForCumulationExist(this$static){
  if (this$static._pricingConditionsForCumulation.map_0.size_1() == 0) {
    return false;
  }
  return true;
}

function $conditionsToCopyExist(this$static){
  if (this$static._pricingConditionsToCopy.map_0.size_1() == 0) {
    return false;
  }
  return true;
}

function $copyCondition_1(this$static, data_0, conditionTypesToCopy, isSourceTargetItemIdentical){
  var cond, copy;
  if (null.nullMethod() == 69 || null.nullMethod() == 70) {
    return true;
  }
  if (data_0.conditionType == null) {
    return false;
  }
  if (data_0.origin == 74) {
    cond = $findPricingCondition(this$static, data_0.stepNumber);
    if (cond) {
      !cond.m_externalTTEConditions && (cond.m_externalTTEConditions = new ArrayList);
      $add_3(cond.m_externalTTEConditions, data_0);
    }
    return false;
  }
  copy = dynamicCast($getStringValue(conditionTypesToCopy, data_0.conditionType), 67);
  if (!copy) {
    return false;
  }
  if (null.nullField) {
    if (data_0.conditionControl == 67) {
      isSourceTargetItemIdentical && (data_0.configuration || data_0.category == 79) && (data_0.origin = 67);
      return true;
    }
    if (data_0.origin == 67) {
      return true;
    }
    if (data_0.changedManually) {
      return true;
    }
  }
  return copy.value_0;
}

function $deactivateConditions(this$static){
  var condition, iterator, lastPrice, smallestStepNo;
  smallestStepNo = $intern_31;
  lastPrice = this$static.accumulator.m_lastPrice;
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet($getConditions(this$static, 0, lastPrice.m_stepNo).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    condition = dynamicCast($next_3(iterator), 15);
    if ((condition.stepNumber != lastPrice.m_stepNo || condition.stepNumber == lastPrice.m_stepNo && condition.counter < lastPrice.m_counter) && ($clinit_SAPString() , condition.m_inactive == 32)) {
      condition.m_inactive = 89;
      this$static.m_exclusionRequired = true;
      condition.stepNumber < smallestStepNo && (smallestStepNo = condition.stepNumber);
    }
  }
  return smallestStepNo;
}

function $determineConditionsForConditionRecord(this$static, step, access, conditionRecord, conditionFindingTimestamp){
  var condition, firstIntervalScale, i_0, incScaleEnd, pricingConditionArray, pricingConditionRecord, pricingConditionType, pricingConditions, scale, scaleLevels, scaleRate;
  pricingConditions = new Vector;
  pricingConditionRecord = dynamicCast(conditionRecord, 114);
  try {
    pricingConditionRecord.getCalculationType_0();
    instanceOf(conditionRecord, 133)?(pricingConditionType = dynamicCast(pricingConditionRecord.getConditionType_2(), 207)):(pricingConditionType = step.conditionType);
    if (!pricingConditionRecord.getScale() || !pricingConditionRecord.isUsingIntervalScales()) {
      pricingConditionType.conditionForDuplication?(condition = new MainConditionToCopy_1(this$static, step, pricingConditionType, pricingConditionRecord, conditionFindingTimestamp)):(condition = $createPricingCondition($getPricingEngine(this$static._pricingDocument._usage), this$static, step, access, pricingConditionType, pricingConditionRecord, conditionFindingTimestamp));
      $add_3(pricingConditions.arrayList, condition);
      if (instanceOf(condition, 61)) {
        $add_5(this$static._pricingConditionsToCopy, condition);
        condition.m_changeOfValueAllowed = false;
      }
    }
     else {
      scale = dynamicCast(pricingConditionRecord.getScale(), 160);
      firstIntervalScale = true;
      $clinit_PricingConstants();
      scaleLevels = throwClassCastExceptionUnlessNull(scale.scaleDimensions[0].scaleDefinition.scaleLevels);
      for (i_0 = 0; i_0 < scaleLevels.length; i_0++) {
        scaleRate = $getScaleRate(scale, scaleLevels[i_0]);
        !scaleRate?ZERO_5:scaleRate.conditionRate.m_value;
        incScaleEnd = scaleLevels[i_0].nullMethod().nullMethod();
        condition = $createPricingCondition($getPricingEngine(this$static._pricingDocument._usage), this$static, step, access, pricingConditionType, pricingConditionRecord, conditionFindingTimestamp);
        condition.m_incScaleEnd = incScaleEnd;
        firstIntervalScale?condition.m_conditionClass == 66 && (firstIntervalScale = false):(condition.m_conditionClass = 65);
        $add_3(pricingConditions.arrayList, condition);
      }
    }
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 274)) {
      $clinit_Configuration_0();
      return initDim(Lcom_sap_spe_condmgnt_finding_ICondition_2_classLit, $intern_15, 65, 0, 0, 1);
    }
     else 
      throw unwrap($e0);
  }
  pricingConditionArray = initDim(Lcom_sap_spe_condmgnt_finding_ICondition_2_classLit, $intern_15, 65, pricingConditions.arrayList.array.length, 0, 1);
  $copyInto(pricingConditions, pricingConditionArray);
  return pricingConditionArray;
}

function $determineConditionsForConditionType_1(this$static, step, condType, timestamp){
  var cond, condition, conditionIsAlreadyThere, conditionRecordFound, extDataSource, i_0, isExternalDataSource, iterator, sequence;
  conditionRecordFound = false;
  conditionIsAlreadyThere = false;
  if (step.stepTO.manually) {
    this$static.performTrace && step.stepTO.manually && $getCurrentTracerStep(this$static.conditionFindingTracer);
  }
   else {
    sequence = condType.accessSequence;
    if (!sequence) {
      isExternalDataSource = condType.pricingConditionTypeTO.dataSource != null && !$equals_7(condType.pricingConditionTypeTO.dataSource, '') && !$equals_7(condType.pricingConditionTypeTO.dataSource, 'A');
      if (!isExternalDataSource) {
        if (!this$static._itemIsTrulyNew) {
          for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet($getConditions(this$static, step.stepTO.stepNumber, step.stepTO.stepNumber).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
            cond = dynamicCast($next_3(iterator), 15);
            if (cond.getConditionTypeName() != null && $equals_7(cond.getConditionTypeName(), condType.conditionTypeTO.name_0)) {
              conditionIsAlreadyThere = true;
              break;
            }
          }
        }
      }
      if (!conditionIsAlreadyThere || isExternalDataSource) {
        extDataSource = null;
        isExternalDataSource && (extDataSource = $getExternalDataSource(this$static._item, condType));
        if (isExternalDataSource) {
          if (extDataSource != null && extDataSource.length != 0) {
            for (i_0 = 0; i_0 < extDataSource.length; i_0++) {
              condition = new PricingCondition_4(this$static, step, condType);
              $addCondition_1(this$static, condition);
              this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
            }
          }
           else 
            this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
        }
         else {
          condType.conditionForDuplication?(condition = new MainConditionToCopy_0(this$static, step, condType)):(condition = $createPricingCondition_0($getPricingEngine(this$static._pricingDocument._usage), this$static, step, condType));
          $addCondition_1(this$static, condition);
          this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
        }
      }
    }
     else {
      if (!this$static._itemIsTrulyNew && $indexOf_1(this$static.pureAutoCondns, condType.conditionTypeTO.name_0, 0) == -1) {
        for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet($getConditions(this$static, step.stepTO.stepNumber, step.stepTO.stepNumber).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
          cond = dynamicCast($next_3(iterator), 15);
          if (cond.getConditionTypeName() != null && condType.conditionTypeTO.name_0 != null && $equals_7(cond.getConditionTypeName(), condType.conditionTypeTO.name_0) && cond.m_manuallyChanged && !cond.m_variant) {
            conditionIsAlreadyThere = true;
            break;
          }
        }
      }
      conditionIsAlreadyThere?this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer):$determineConditionsForConditionType_0(this$static, step, condType, timestamp) && (conditionRecordFound = true);
    }
  }
  return conditionRecordFound;
}

function $determineConditionsForRequiredStep_0(this$static, step){
  var cond, condition, conditionIsAlreadyThere, conditionRecordFound, conditionType, iterator, performAccess;
  conditionRecordFound = false;
  conditionType = step.conditionType;
  if (!conditionType) {
    conditionIsAlreadyThere = false;
    if (!this$static._itemIsTrulyNew) {
      for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet($getConditions(this$static, step.stepTO.stepNumber, step.stepTO.stepNumber).map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
        cond = dynamicCast($next_3(iterator), 15);
        if (cond.getConditionTypeName() == null) {
          conditionIsAlreadyThere = true;
          continue;
        }
      }
    }
    if (conditionIsAlreadyThere) {
      this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
    }
     else {
      condition = new PricingCondition_0(($getPricingEngine(this$static._pricingDocument._usage) , this$static), step);
      $addCondition_1(this$static, condition);
    }
  }
   else {
    $equals_7(conditionType.conditionTypeTO.usage, this$static._pricingDocument._usage)?(performAccess = true):(performAccess = !this$static._pricingDocument._onlySpecifiedUsage);
    performAccess?(conditionRecordFound = $determineConditionsForRequiredStep(this$static, step)):this$static.performTrace && $getCurrentTracerStep(this$static.conditionFindingTracer);
  }
  return conditionRecordFound;
}

function $determineMandatoryConditions_0(this$static){
  var condTypeName, iterator;
  if (this$static.m_pricingItemIsUnchangeable) {
    this$static.m_mandatoryConditions = new HashMap_0(2);
  }
   else {
    this$static.m_mandatoryConditions?$reset(this$static.m_mandatoryConditions):(this$static.m_mandatoryConditions = new HashMap_0(8));
    $putAll(this$static.m_mandatoryConditions, this$static._pricingDocument.m_mandatoryConditions);
    for (iterator = $iterator(new AbstractMap$1(this$static.m_mandatoryConditions)); $hasNext(iterator.val$outerIter2);) {
      condTypeName = dynamicCastToString($next_1(iterator));
      dynamicCast($getStringValue(this$static.m_mandatoryConditions, condTypeName), 693);
    }
  }
}

function $enrichTraceByUsageData(applicationAndUsageData){
  return !applicationAndUsageData?null:applicationAndUsageData.map_0.get_4('KBETR') + ' ' + applicationAndUsageData.map_0.get_4('KONWA') + ' / ' + applicationAndUsageData.map_0.get_4('KPEIN') + ' ' + applicationAndUsageData.map_0.get_4('KMEIN');
}

function $exclusion(this$static, externalStepNo, calculationMode, isGroupConditionProcessing, pricingConditionPointer){
  var changedStepNo, exclStepNo, exclusionProcessor, smallestStepNo;
  smallestStepNo = $intern_31;
  changedStepNo = $intern_31;
  if (this$static.m_pricingItemIsUnchangeable) {
    return $intern_31;
  }
  exclusionProcessor = this$static._pricingDocument.exclusionProcessor;
  $setConditions(exclusionProcessor, this$static.conditions);
  $setItemReturn(exclusionProcessor, this$static.m_isReturn);
  exclusionProcessor.m_takeZeroValuesIntoAccountForExclusion = false;
  if (this$static._performCalcTrace) {
    $clear(this$static.exclusionTracer.sortedMap);
    this$static._pricingDocument._documentCurrencyUnit.getUnitName_0();
    $setExclusionTracer(exclusionProcessor, this$static.exclusionTracer);
    $setCalcTrace(exclusionProcessor, this$static._performCalcTrace);
  }
  $clinit_SAPString();
  if ($indexOf('EF', fromCodePoint(calculationMode)) < 0) {
    smallestStepNo = $exclusionManualEntry(exclusionProcessor);
    changedStepNo = smallestStepNo;
  }
  if (calculationMode == 69) {
    return smallestStepNo;
  }
  if (this$static.m_exclusionRequired) {
    if (this$static._pricingDocument._pricingProcedure.exlusionProcedure) {
      exclStepNo = $excludeConditionGroups(exclusionProcessor);
      exclStepNo < smallestStepNo && (smallestStepNo = exclStepNo);
      exclStepNo < changedStepNo && (changedStepNo = smallestStepNo);
    }
  }
  externalStepNo < smallestStepNo && (smallestStepNo = externalStepNo);
  if (smallestStepNo != $intern_31) {
    smallestStepNo = $resetExclusion(exclusionProcessor, calculationMode, smallestStepNo);
    (this$static.m_exclusionRequired || smallestStepNo != externalStepNo) && $calculate_2(this$static, smallestStepNo, 32, false, isGroupConditionProcessing, pricingConditionPointer);
  }
  return changedStepNo;
}

function $findPricingCondition(this$static, stepNo){
  var prCondition, searchCondn;
  searchCondn = ($clinit_PricingConditionSearchCritera() , $clinit_PricingConditionSearchCritera() , SINGELTON_5);
  searchCondn.stepNumber = stepNo;
  searchCondn.counter = 1;
  prCondition = dynamicCast(find_2(this$static.conditions, searchCondn), 15);
  searchCondn.stepNumber = 0;
  searchCondn.counter = 0;
  return !!prCondition && prCondition.stepNumber == stepNo && prCondition.counter == 1?prCondition:null;
}

function $findPricingCondition_0(this$static, stepNo, condTypeName, conditionRateUnitName){
  var iterator, prCondition, searchCondn;
  searchCondn = ($clinit_PricingConditionSearchCritera() , $clinit_PricingConditionSearchCritera() , SINGELTON_5);
  searchCondn.stepNumber = stepNo;
  searchCondn.counter = 1;
  iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet($tailSet(this$static.conditions, searchCondn).map_0));
  while ($hasNext_0(iterator.val$entryIterator2.iter)) {
    prCondition = dynamicCast($next_3(iterator), 15);
    if (prCondition.stepNumber == stepNo) {
      if ($equals_7(prCondition.getConditionTypeName(), condTypeName) && $equals_7($getConditionRateUnitName(prCondition), conditionRateUnitName)) {
        return prCondition;
      }
    }
     else {
      break;
    }
  }
  return null;
}

function $fireClearStatusMessage_0(this$static, event_0){
  var i_0, size_0;
  size_0 = this$static._statusListeners.arrayList.array.length;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    dynamicCast($get_14(this$static._statusListeners, i_0), 211).clearStatusMessage(event_0);
  }
}

function $fireSetStatusMessage_0(this$static, event_0){
  var i_0, size_0;
  size_0 = this$static._statusListeners.arrayList.array.length;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    dynamicCast($get_14(this$static._statusListeners, i_0), 211).setStatusMessage(event_0);
  }
}

function $getConditionRecords_1(condType, access, timestamp, masterDataEngine, tableAttributeBindings, releaseStatus, hierarchyAccess, trace){
  new ArrayList;
  return $createConditionRecords_1(masterDataEngine.conditionRecordObjectManager, condType, access, tableAttributeBindings, timestamp, releaseStatus, hierarchyAccess, trace);
}

function $getExternalDataSource_0(this$static, pricingConditionType){
  return $getExternalDataSource(this$static._item, pricingConditionType);
}

function $getPricingConditions_3(this$static, suppressInvisible, checkAuthority){
  var iterator, j, prCond, pricingConditions, validPricingConditions;
  if (!this$static.conditions) {
    return initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, 0, 0, 1);
  }
  pricingConditions = initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, this$static.conditions.map_0.size_1(), 0, 1);
  if (suppressInvisible || checkAuthority) {
    j = 0;
    for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
      prCond = dynamicCast($next_3(iterator), 15);
      (!suppressInvisible || prCond.m_inactive != 90) && (!checkAuthority || $isAuthorizedForDisplay(this$static._pricingDocument, prCond.step)) && setCheck(pricingConditions, j++, prCond);
    }
    if (this$static.conditions.map_0.size_1() == j) {
      return pricingConditions;
    }
    validPricingConditions = initDim(Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit, $intern_19, 76, j, 0, 1);
    arraycopy(pricingConditions, 0, validPricingConditions, 0, j);
    return validPricingConditions;
  }
  this$static.conditions.toArray_0(pricingConditions);
  return pricingConditions;
}

function $getSubPricingItems(this$static){
  var extItems, i_0, id_0, prItem, subPricingItems;
  subPricingItems = new ArrayList;
  $getSubItems(this$static._item);
  extItems = $getSubItems(this$static._item);
  for (i_0 = 0; i_0 < extItems.length; i_0++) {
    id_0 = $getId_0(extItems[i_0]);
    prItem = $findItem(this$static._pricingDocument, id_0);
    !!prItem && (setCheck(subPricingItems.array, subPricingItems.array.length, prItem) , true);
  }
  return subPricingItems;
}

function $getSubPricingItemsRecursive(this$static){
  var allSubPricingItems, i_0, size_0;
  allSubPricingItems = $getSubPricingItems(this$static);
  size_0 = allSubPricingItems.array.length;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    allSubPricingItems = $add_0($getSubPricingItemsRecursive((checkElementIndex(i_0, allSubPricingItems.array.length) , dynamicCast(allSubPricingItems.array[i_0], 48))));
  }
  return allSubPricingItems;
}

function $getZeroExchange(this$static, currencyUnitName){
  var zeroExchangeRate;
  zeroExchangeRate = dynamicCast($getStringValue(this$static.zeroExchangeRates, currencyUnitName), 696);
  if (!zeroExchangeRate) {
    $getConversionEngine();
    try {
      zeroExchangeRate = $getZeroExchangeRate(this$static.m_exchangeRateType, currencyUnitName);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (!instanceOf($e0, 17))
        throw unwrap($e0);
    }
    $putStringValue(this$static.zeroExchangeRates, currencyUnitName, zeroExchangeRate);
  }
  return zeroExchangeRate;
}

function $init_1(this$static){
  this$static.accumulator = new PricingAccumulator;
  $init_0(this$static.accumulator, this$static);
  $reset(this$static.m_containerForFormulas);
  $fireClearStatusMessage_0(this$static, new ClearAllStatusEvent('PricingItem.addTaxPricingCondition'));
}

function $initExchangeRate(this$static){
  this$static.m_exchangeRate = $getExchangeRate_2(this$static._item);
  this$static._exchangeRateDate = $getExchangeRateDate(this$static._item);
  this$static.m_exchangeRateType = $getExchangeRateType_2(this$static._item);
}

function $initItem(this$static){
  if (this$static._suppressItemCompletion) {
    return;
  }
  this$static.m_salesQuantity = $getProductQuantity(this$static._item);
  this$static.m_baseQuantity = $getBaseQuantity(this$static._item);
  this$static.multiplicityOrNull = $getMultiplicity(this$static._item);
  !!this$static.multiplicityOrNull && $compareTo_7(this$static.multiplicityOrNull, ($clinit_PricingConstants() , ONE_1)) == 0 && (this$static.multiplicityOrNull = null);
  this$static.m_pricingItemIsUnchangeable = this$static._item.pricingItemIsUnchangeable;
  this$static.m_product = this$static._item.product;
  this$static._salesFraction = $getProductToBaseQuantityRatio(this$static._item);
  !this$static._salesFraction && (this$static._salesFraction = ($clinit_PricingConstants() , NULL_FRACTION));
  $clinit_PricingConstants();
  $initExchangeRate(this$static);
  this$static.m_isReturn = this$static._item.isReturn;
  this$static.m_isStatistical = this$static._item.isStatistical_0;
  $reset(this$static.m_containerForFormulas);
  this$static.m_fixationGroupName = this$static._item.fixationGroupName;
  $setSimulation(this$static, this$static._pricingDocument.document_0.simulation);
  $setAttributeEnvironment(this$static, this$static._item);
  $setPricingTimestamps(this$static);
  $setVariantConditions(this$static, $getVariantConditions(this$static._item));
  $init_1(this$static);
}

function $initializeConditions(this$static, calculationMode, isGroupConditionProcessing){
  var condition, iterator, smallestStepNo;
  smallestStepNo = $intern_31;
  this$static.m_exclusionRequired = false;
  $determineMandatoryConditions_0(this$static);
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    condition = dynamicCast($next_3(iterator), 15);
    $clinit_SAPString();
    if ($indexOf(' ', fromCodePoint(condition.m_inactive)) < 0) {
      if (calculationMode != 69 && !isGroupConditionProcessing) {
        if (!this$static.m_pricingItemIsUnchangeable) {
          if (($indexOf('MX', fromCodePoint(condition.m_inactive)) < 0 || $indexOf('EFH', fromCodePoint(condition.m_control)) < 0) && $indexOf('-0m', fromCodePoint(condition.m_conditionCategory)) < 0 && $indexOf('FQ', fromCodePoint(condition.m_conditionClass)) < 0) {
            condition.m_inactive = 32;
            this$static.m_exclusionRequired = true;
            condition.stepNumber < smallestStepNo && (smallestStepNo = condition.stepNumber);
          }
        }
      }
       else if (isGroupConditionProcessing) {
        if (!this$static.m_pricingItemIsUnchangeable) {
          if ($indexOf('AY', fromCodePoint(condition.m_inactive)) >= 0) {
            condition.m_inactive = 32;
            this$static.m_exclusionRequired = true;
            condition.stepNumber < smallestStepNo && (smallestStepNo = condition.stepNumber);
          }
        }
      }
    }
  }
  return smallestStepNo;
}

function $isConditionFindingRequiredForStep(this$static, step){
  var dataSource, performNewConditionFinding;
  performNewConditionFinding = !$_isOldStepRequired(this$static, step);
  if (!performNewConditionFinding) {
    dataSource = step.conditionType.pricingConditionTypeTO.dataSource;
    dataSource != null && !$equals_7(dataSource, '') && !$equals_7(dataSource, 'A') && (performNewConditionFinding = true);
  }
  return performNewConditionFinding;
}

function $loadFromExternal(this$static, pricingTypeName){
  var pricingCustomizingEngine, pricingType;
  pricingCustomizingEngine = $getPricingCustomizingEngine(this$static._pricingDocument._usage);
  pricingType = $getPricingType(pricingCustomizingEngine.pricingTypeObjectManager, pricingTypeName);
  $loadFromExternal_0(this$static, null.nullMethod().nullMethod(), pricingType, true);
}

function $loadFromExternal_0(this$static, iter, pricingTypeParam, pricingCopy){
  var addPricingCondition, condType, condTypeArray, condTypeEnum, condTypes, conditionTypesToCopy, continueSearch, copyCondition, cr, data_0, determineSubtotals, getNextPricingCondition, i_0, incScaleEnd, isSourceTargetItemIdentical, levels, prCond, pricingCustomizingEngine, rate, scale, scaleRate, steps, subtotalCondition, toCopy, transactionDataFound;
  pricingCopy?(!monitor && (monitor = new MonitorImpl) , monitor):(!monitor && (monitor = new MonitorImpl) , monitor);
  pricingCustomizingEngine = $getPricingCustomizingEngine(this$static._pricingDocument._usage);
  this$static._pricingConditionsToCopy.map_0.clear_0();
  this$static._pricingConditionsForCumulation.map_0.clear_0();
  this$static.conditions = new TreeSet_0(($clinit_ConditionComparator() , $clinit_ConditionComparator() , INSTANCE_0));
  this$static._itemIsTrulyNew = false;
  conditionTypesToCopy = null;
  $clinit_PricingConstants();
  if (pricingCopy) {
    !pricingTypeParam && $getPricingType(pricingCustomizingEngine.pricingTypeObjectManager, 65);
    conditionTypesToCopy = new HashMap;
    steps = this$static._pricingDocument._pricingProcedure.pricingSteps;
    for (i_0 = 0; i_0 < steps.length; i_0++) {
      if (steps[i_0].conditionType) {
        toCopy = $copyCondition_0(steps[i_0].conditionType);
        $putStringValue(conditionTypesToCopy, steps[i_0].conditionType.conditionTypeTO.name_0, new Boolean_0(toCopy));
      }
    }
  }
  determineSubtotals = true;
  if (iter.hasNext()) {
    transactionDataFound = true;
    data_0 = dynamicCast(iter.next(), 98);
    isSourceTargetItemIdentical = $equals_7(data_0.itemId, this$static._itemNumber);
    while (transactionDataFound) {
      getNextPricingCondition = true;
      addPricingCondition = true;
      if (!pricingCopy || $copyCondition_1(this$static, data_0, conditionTypesToCopy, isSourceTargetItemIdentical)) {
        prCond = loadFromLocalDB(this$static._pricingDocument, this$static, data_0);
        if (prCond) {
          if (prCond.m_origin == 74) {
            !this$static._allTaxPricingConditions && (this$static._allTaxPricingConditions = new Vector);
            $add_6(this$static._allTaxPricingConditions, prCond);
          }
          determineSubtotals && !prCond.m_conditionType && (determineSubtotals = false);
          if (68 == (prCond._scaleTypes == null?32:prCond._scaleTypes[0])) {
            cr = (prCond.m_determineConditionRecord == 0 && $determineConditionRecord(prCond) , dynamicCast(prCond.conditionRecord, 114));
            if (!!cr && !!cr.getScale()) {
              scale = dynamicCast(cr.getScale(), 160);
              levels = throwClassCastExceptionUnlessNull(scale.scaleDimensions[0].scaleDefinition.scaleLevels);
              for (i_0 = 0; i_0 < levels.length; i_0++) {
                scaleRate = $getScaleRate(scale, levels[i_0]);
                !scaleRate?(rate = ZERO_5):(rate = scaleRate.conditionRate.m_value);
                incScaleEnd = levels[i_0].nullMethod().nullMethod();
                if ($equals_7(cr.getId_0(), data_0.conditionRecordId) && transactionDataFound) {
                  prCond = loadFromLocalDB(this$static._pricingDocument, this$static, data_0);
                  prCond.m_incScaleEnd = incScaleEnd;
                  if (iter.hasNext()) {
                    data_0 = dynamicCast(iter.next(), 98);
                    getNextPricingCondition = false;
                  }
                   else {
                    transactionDataFound = false;
                  }
                  if (prCond) {
                    $addPricingConditionDuringLoad(this$static, pricingCopy, conditionTypesToCopy, prCond, isSourceTargetItemIdentical);
                    addPricingCondition = false;
                  }
                }
                 else {
                  prCond = null;
                  $getCurrencyValue((dynamicCast($getEngine(($clinit_EngineManager() , $clinit_EngineManager() , SINGELTON_3), 'CNV', 'CNV'), 14) , rate), null.nullField);
                  null.nullMethod($clinit_PricingConstants());
                  $addCondition_1(this$static, null);
                  addPricingCondition = false;
                }
              }
            }
          }
           else {
            if (prCond.m_indicatorStructureCondition == 65 && prCond.m_origin == 66) {
              new MainConditionToCopy(prCond.stepNumber);
              continueSearch = true;
              while (continueSearch) {
                continueSearch = false;
              }
            }
          }
          addPricingCondition && !!prCond && $addPricingConditionDuringLoad(this$static, pricingCopy, conditionTypesToCopy, prCond, isSourceTargetItemIdentical);
        }
      }
      getNextPricingCondition && (iter.hasNext()?(data_0 = dynamicCast(iter.next(), 98)):(transactionDataFound = false));
    }
  }
  if (pricingCopy) {
    condTypes = new Vector;
    $addAll_1(condTypes, this$static.pureAutoCondns);
    for (condTypeEnum = enumeration(new AbstractMap$1(conditionTypesToCopy)); condTypeEnum.val$it1.hasNext();) {
      condType = dynamicCastToString(condTypeEnum.val$it1.next());
      if ($indexOf_1(condTypes.arrayList, condType, 0) != -1) {
        continue;
      }
      copyCondition = dynamicCast(condType == null?getEntryValueOrNull($getEntry(conditionTypesToCopy.hashCodeMap, null)):conditionTypesToCopy.stringMap.get_0(condType), 67);
      !!copyCondition && $equals_6(copyCondition, ($clinit_Boolean() , FALSE)) && $add_3(condTypes.arrayList, condType);
    }
    condTypeArray = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, condTypes.arrayList.array.length, 4, 1);
    $copyInto(condTypes, condTypeArray);
    $setConditionTypeNamesToSearchFor(this$static, condTypeArray);
    $pricing_0(this$static, false);
  }
   else if (determineSubtotals) {
    steps = this$static._pricingDocument._pricingProcedure.pricingSteps;
    for (i_0 = 0; i_0 < steps.length; i_0++) {
      if (!steps[i_0].conditionType) {
        subtotalCondition = new PricingCondition_0(this$static, steps[i_0]);
        $addCondition_1(this$static, subtotalCondition);
      }
    }
    $determineMandatoryConditions_0(this$static);
    $calculate_2(this$static, 0, 65, true, false, null);
    $newConditionFindingIsPerformed_0(this$static.timestamps);
    $newConditionFindingIsPerformed(this$static.attributeEnvironment);
    $conditionsAreUpToDate(this$static);
    $checkMandatoryConditions(this$static);
  }
   else {
    $determineMandatoryConditions_0(this$static);
    $calculate_2(this$static, 0, 69, false, false, null);
    $newConditionFindingIsPerformed_0(this$static.timestamps);
    $newConditionFindingIsPerformed(this$static.attributeEnvironment);
    $conditionsAreUpToDate(this$static);
    $checkMandatoryConditions(this$static);
  }
}

function $loadFromLocalDBWithReference(this$static, sourceDocumentId, sourceItemId, pricingTypeName){
  var conditionsToCopy, convertedConditions, i_0, prConditions, pricingCondition, pricingCustomizingEngine, pricingItem, pricingType, transactionDataVector;
  pricingCustomizingEngine = $getPricingCustomizingEngine(this$static._pricingDocument._usage);
  pricingType = $getPricingType(pricingCustomizingEngine.pricingTypeObjectManager, pricingTypeName);
  if ($isSourcePricingItemAvailable(this$static._pricingDocument, sourceItemId)) {
    conditionsToCopy = $getSourcePricingConditons(this$static._pricingDocument, sourceDocumentId, sourceItemId);
  }
   else if ($equals_7(this$static._pricingDocument._id, sourceDocumentId)) {
    pricingItem = $findItem(this$static._pricingDocument, sourceItemId);
    convertedConditions = new Vector;
    if (pricingItem) {
      prConditions = $getPricingConditions_3(pricingItem, true, false);
      for (i_0 = 0; i_0 < prConditions.length; i_0++) {
        pricingCondition = dynamicCast(prConditions[i_0], 15);
        $add_6(convertedConditions, $convertToPricingConditionTransactionData(pricingCondition));
      }
    }
    conditionsToCopy = new AbstractList$IteratorImpl(convertedConditions.arrayList);
  }
   else {
    transactionDataVector = $getPricingConditions_2($getPricingEngine(this$static._pricingDocument._usage).pricingConditionObjectManager, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [sourceDocumentId]), initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, [sourceItemId]), this$static._pricingDocument._documentCurrencyUnit.getUnitName_0()).conditions;
    conditionsToCopy = $iterator_1(new AbstractNavigableMap$NavigableKeySet(transactionDataVector.map_0));
  }
  $loadFromExternal_0(this$static, conditionsToCopy, pricingType, true);
}

function $modifyConditionsDueToUnchangeableItems(this$static, prCondition){
  if (this$static._pricingDocument.document_0.editMode == 66) {
    return;
  }
  $clinit_SAPString();
  $indexOf('DG', fromCodePoint(prCondition.m_origin)) < 0 && $indexOf('AF', fromCodePoint(prCondition.m_control)) >= 0 && (this$static.m_pricingItemIsUnchangeable && (prCondition.m_control == 65 || prCondition.m_manuallyChanged)?(prCondition.m_control = 70):!this$static.m_pricingItemIsUnchangeable && prCondition.m_control == 70 && (prCondition.m_control = 65));
}

function $pricing_0(this$static, redetermineAllConditions){
  var count, diff, diff2, iterator, oldUnchangeableFlag, pricingCondition, pricingConditions, smallestStepNo;
  $fireClearStatusMessage_0(this$static, new ClearAllStatusEvent('PricingItem.pricing'));
  $clinit_Location();
  diff = fromDouble(now_1());
  if (this$static._pricingDocument.document_0.editMode == 66) {
    return;
  }
  !monitor && (monitor = new MonitorImpl);
  redetermineAllConditions && (this$static._calculationDuringPricingCompleteRequired = false);
  oldUnchangeableFlag = this$static.m_pricingItemIsUnchangeable;
  $initItem(this$static);
  if (oldUnchangeableFlag != this$static.m_pricingItemIsUnchangeable) {
    if (this$static.conditions) {
      for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
        pricingCondition = dynamicCast($next_3(iterator), 15);
        $modifyConditionsDueToUnchangeableItems(this$static, pricingCondition);
      }
      $modifyHeaderConditionsDueToUnchangeableItems(this$static._pricingDocument);
    }
  }
  if (this$static.m_pricingItemIsUnchangeable) {
    !this$static.conditions && (this$static.conditions = new TreeSet_0(($clinit_ConditionComparator() , $clinit_ConditionComparator() , INSTANCE_0)));
  }
   else {
    pricingConditions = $getPricingConditions_3(this$static, true, false);
    for (count = 0; count < pricingConditions.length; count++) {
      dynamicCast(pricingConditions[count], 15).m_conditionRecordDetermined = false;
    }
    diff2 = fromDouble(now_1());
    smallestStepNo = $intern_31;
    !this$static.conditions && (smallestStepNo = 0);
    $determineConditions(this$static, redetermineAllConditions);
    diff2 = sub_0(fromDouble(now_1()), diff2);
    logT('pricing item ' + $getExternalId(this$static._item) + ' condition finding: ' + toString_3(diff2) + 'ms');
  }
  $calculate_1(this$static);
  this$static._pricingDocument._alwaysPerformGroupConditionProcessing && $pricingComplete(this$static._pricingDocument);
  diff = sub_0(fromDouble(now_1()), diff);
  logT('pricing item ' + $getExternalId(this$static._item) + ' without pricing complete: ' + toString_3(diff) + 'ms');
  this$static._itemIsTrulyNew = false;
}

function $pricing_1(this$static){
  var ex;
  this$static._suppressItemCompletion = true;
  try {
    $pricing_0(this$static, false);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 20)) {
      ex = $e0;
      throw unwrap(ex);
    }
     else 
      throw unwrap($e0);
  }
   finally {
    this$static._suppressItemCompletion = false;
  }
}

function $readFixationGroupItemFixRate(){
  return 32;
}

function $removeCondition_0(this$static, condition){
  var pricingCondition, removeCondition;
  removeCondition = $removeCondition(this$static, condition);
  if (removeCondition) {
    removeCondition = false;
    pricingCondition = dynamicCast(condition, 76);
    if ($readFixationGroupItemFixRate(pricingCondition.getConditionTypeName()) != 32) {
      return false;
    }
    pricingCondition.getConditionTypeName() != null?(pricingCondition.getOrigin() == 65 && (pricingCondition.getManualEntryFlag_0() != 32 && pricingCondition.getManualEntryFlag_0() != 67 || !pricingCondition.isManuallyChanged()) || pricingCondition.isVariantCondition_0() && (!pricingCondition.isManuallyChanged() || pricingCondition.getVariantConditionKey() != null && !$hasStringValue(this$static._variantConditions.m_varconds, pricingCondition.getVariantConditionKey()))) && (removeCondition = true):(removeCondition = !$_checkRequirement(condition.getStep()));
    removeCondition && pricingCondition.getStructureConditionFlag() == 66 && $remove_8(this$static._pricingConditionsForCumulation, condition);
  }
  return removeCondition;
}

function $removeOldConditions(this$static){
  var condition, enume, headerConditions, iterator, iterator0;
  if (!this$static.conditions) {
    return;
  }
  headerConditions = new Vector;
  for (iterator0 = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator0.val$entryIterator2.iter);) {
    condition = dynamicCast($next_3(iterator0), 15);
    !!condition.m_headerCondition && $add_3(headerConditions.arrayList, condition);
    condition.m_origin == 66?undefined:condition.m_fixationGroupFixRate == 32 && $remove_7(iterator0.val$entryIterator2);
  }
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static._pricingConditionsToCopy.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    $delete(dynamicCast($next_3(iterator), 61));
  }
  this$static._pricingConditionsToCopy.map_0.clear_0();
  this$static._pricingConditionsForCumulation.map_0.clear_0();
  for (enume = enumeration(headerConditions.arrayList); enume.val$it1.hasNext();) {
    $add_5(this$static.conditions, enume.val$it1.next());
  }
}

function $removePricingCondition_0(this$static, condition){
  $remove_8(this$static.conditions, condition);
  if (instanceOf(condition, 61)) {
    $delete(dynamicCast(condition, 61));
    $remove_8(this$static._pricingConditionsToCopy, condition);
  }
  condition.m_indicatorStructureCondition == 66 && $remove_8(this$static._pricingConditionsForCumulation, condition);
}

function $removeStatusListener(this$static, l){
  $contains_2(this$static._statusListeners, l) && this$static._statusListeners.remove(l);
}

function $setAttributeEnvironment(this$static, item_0){
  var AttrEnv, i_0, attrBindingArray;
  AttrEnv = (attrBindingArray = initDim(Lcom_sap_spe_condmgnt_finding_IAttributeBinding_2_classLit, $intern_29, 115, item_0.attributes.size_0, 0, 1) , dynamicCast($toArray(new AbstractMap$2(item_0.attributes), attrBindingArray), 287));
  if (AttrEnv != null) {
    for (i_0 = 0; i_0 < AttrEnv.length; i_0++) {
      $setAttributeBinding(this$static.attributeEnvironment, AttrEnv[i_0]);
    }
  }
}

function $setExchangeRate_3(this$static, rate){
  this$static.m_exchangeRate = rate;
}

function $setFirstPricingConditionToCalculate(this$static, firstPricingConditionToCalculate){
  var currentCondCounter, currentStepNumber, newCondCounter, newStepNumber;
  if (!this$static.firstPricingConditionToCalculate) {
    this$static.firstPricingConditionToCalculate = firstPricingConditionToCalculate;
  }
   else {
    currentStepNumber = this$static.firstPricingConditionToCalculate.stepNumber;
    newStepNumber = firstPricingConditionToCalculate.stepNumber;
    currentCondCounter = this$static.firstPricingConditionToCalculate.counter;
    newCondCounter = firstPricingConditionToCalculate.counter;
    (newStepNumber < currentStepNumber || newStepNumber == currentStepNumber && newCondCounter < currentCondCounter) && (this$static.firstPricingConditionToCalculate = firstPricingConditionToCalculate);
  }
}

function $setId_1(this$static, itemNumber){
  $removePricingItem(this$static._pricingDocument, this$static);
  this$static._itemNumber = itemNumber;
  $addItemWithoutPricing(this$static._pricingDocument, this$static);
}

function $setPerformCalcTrace(this$static, performCalcTrace){
  if (this$static._performCalcTrace != performCalcTrace) {
    if (performCalcTrace) {
      !this$static.formulaTracer && (this$static.formulaTracer = new FormulaTracer);
      !this$static.scaleTracer && (this$static.scaleTracer = new ScaleTracer);
      !this$static.exclusionTracer && (this$static.exclusionTracer = new ExclusionTracer);
      !this$static.m_prCurrConvTraceResult && (this$static.m_prCurrConvTraceResult = new HashMap);
    }
    this$static._performCalcTrace = performCalcTrace;
  }
}

function $setPricingTimestamps(this$static){
  var i_0, times;
  times = $getConditionAccessTimestampEnvironment(this$static._item);
  if (times != null) {
    for (i_0 = 0; i_0 < times.length; i_0++) {
      $setTimestamp(this$static.timestamps, times[i_0]);
    }
  }
}

function $setVariantConditions(this$static, varconds){
  var i_0, oldVarConds, size_0, variantAttributeBinding;
  if (varconds != null && varconds.length > 0) {
    if (this$static._variantConditions) {
      oldVarConds = this$static._variantConditions.m_varconds;
      for (i_0 = 0; i_0 < varconds.length; i_0++) {
        throwClassCastExceptionUnlessNull($get_12(oldVarConds, null.nullMethod()));
      }
    }
    this$static._variantConditions = new VariantConditionContainer(varconds);
    size_0 = this$static._variantConditions.m_varconds.size_0;
    if (size_0 > 0) {
      variantAttributeBinding = $createAttributeBinding($getPricingEngine(this$static._pricingDocument._usage), this$static._pricingDocument._application, this$static._pricingDocument.document_0.varcondFieldname, $getVarcondKeys(this$static._variantConditions));
      $setAttributeBinding(this$static.attributeEnvironment, variantAttributeBinding);
    }
  }
   else if (this$static._variantConditions) {
    variantAttributeBinding = $createAttributeBinding($getPricingEngine(this$static._pricingDocument._usage), this$static._pricingDocument._application, this$static._pricingDocument.document_0.varcondFieldname, null);
    $setAttributeBinding(this$static.attributeEnvironment, variantAttributeBinding);
  }
}

function $subItemsExist(this$static){
  $getSubItems(this$static._item);
  if ($getSubItems(this$static._item).length == 0) {
    return false;
  }
  return true;
}

function $toString_5(this$static){
  var iterator, str;
  str = new StringBuffer_1('Item: ' + $getExternalId(this$static._item) + '\n');
  $append_1(str, 'Netvalue: ' + this$static.accumulator.m_netValue + '\n');
  for (iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.conditions.map_0)); $hasNext_0(iterator.val$entryIterator2.iter);) {
    $append_1(str, $toString_4(dynamicCast($next_3(iterator), 15)));
  }
  return (str.string += '\n' , str).string;
}

function PricingItem(prDoc, item_0){
  $clinit_PricingItem();
  ConditionFindingManager.call(this, prDoc._pricingProcedure);
  this._statusListeners = new Vector;
  this.m_containerForFormulas = new HashMap;
  this._pricingConditionsToCopy = new TreeSet_0(new MainConditionToCopyComparator);
  this._pricingConditionsForCumulation = new TreeSet_0(new CumulationConditionComparator);
  this._taxPricingConditions = new ArrayList;
  this._calculationDuringPricingCompleteRequired = false;
  this._isGroupConditionProcessing = false;
  this._itemIsTrulyNew = true;
  this.taxPricingConditionToBeAdded = new ArrayList;
  this._suppressItemCompletion = false;
  this.zeroExchangeRates = new HashMap_0(4);
  this.pureAutoCondns = new ArrayList;
  this._performCalcTrace = false;
  this._item = item_0;
  this._pricingDocument = prDoc;
  this._itemNumber = $getId_0(this._item);
  $initItem(this);
}

function createTaxPricingConditionType(conditionTypeName, calculationType){
  $clinit_PricingItem();
  var conditionTypeTO, customizingEngine, pricingConditionTypeTO, purpose;
  conditionTypeTO = new ConditionTypeTO_0;
  conditionTypeTO.application = 'TTE';
  conditionTypeTO.usage = 'PR';
  conditionTypeTO.name_0 = conditionTypeName;
  pricingConditionTypeTO = new PricingConditionTypeTO_0;
  pricingConditionTypeTO.calculationType = calculationType;
  pricingConditionTypeTO.scaleBaseType = '';
  pricingConditionTypeTO.conditionCategory = 32;
  pricingConditionTypeTO.manualEntryFlag = 68;
  pricingConditionTypeTO.groupConditionKeyFormulaNumber = 0;
  pricingConditionTypeTO.scaleBaseUnit = null;
  pricingConditionTypeTO.currencyConversion = false;
  pricingConditionTypeTO.groupCondition = false;
  pricingConditionTypeTO.structureCondition = 32;
  pricingConditionTypeTO.accrual = false;
  pricingConditionTypeTO.scaleBaseFormulaNumber = 0;
  pricingConditionTypeTO.conditionClass = 68;
  pricingConditionTypeTO.headerCondition = false;
  pricingConditionTypeTO.itemCondition = false;
  pricingConditionTypeTO.plusMinus = 32;
  pricingConditionTypeTO.roundingRule = 32;
  pricingConditionTypeTO.changeOfRateAllowed = false;
  pricingConditionTypeTO.changeOfValueAllowed = false;
  pricingConditionTypeTO.changeOfCalculationTypeAllowed = false;
  pricingConditionTypeTO.changeOfConversionFactorAllowed = false;
  pricingConditionTypeTO.deletionAllowed = false;
  pricingConditionTypeTO.pricingDateFlag = 32;
  pricingConditionTypeTO.scaleType = 32;
  pricingConditionTypeTO.roundingDifferenceCalculationRequired = false;
  pricingConditionTypeTO.interCompanyBilling = false;
  pricingConditionTypeTO.variantCondition = false;
  pricingConditionTypeTO.quantityConversion = 32;
  pricingConditionTypeTO.dataSource = null;
  pricingConditionTypeTO.purposeName = null;
  pricingConditionTypeTO.conditionUpdate = false;
  purpose = null;
  if (pricingConditionTypeTO.purposeName != null) {
    customizingEngine = dynamicCast($getCustomizingEngine(factory_0, 'PR'), 132);
    purpose = $getConditionPurpose(customizingEngine.conditionPurposeObjectManager, pricingConditionTypeTO.application, pricingConditionTypeTO.purposeName);
  }
  return new PricingConditionType(conditionTypeTO, null, null, pricingConditionTypeTO, purpose, null, null);
}

function find_2(set_0, objectToSearchFor){
  var result;
  if (!set_0) {
    return null;
  }
  result = new TreeSet_1(set_0.map_0.tailMap(objectToSearchFor, true));
  if (result.map_0.size_1() > 0) {
    return getKeyOrNSE(result.map_0.getFirstEntry());
  }
  return null;
}

defineClass(48, 259, {694:1, 695:1, 259:1, 701:1, 210:1, 706:1, 48:1, 709:1, 710:1, 3:1}, PricingItem);
_.toString$ = function toString_21(){
  return $toString_5(this);
}
;
_._calculationDuringPricingCompleteRequired = false;
_._isGroupConditionProcessing = false;
_._itemIsTrulyNew = false;
_._performCalcTrace = false;
_._suppressItemCompletion = false;
_.m_exclusionRequired = false;
_.m_isReturn = false;
_.m_isStatistical = false;
_.m_pricingItemIsUnchangeable = false;
var ZERO_SCALE_BASE;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingItem_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingItem', 48, Lcom_sap_spe_condmgnt_finding_bo_ConditionFindingManager_2_classLit);
function PricingItemComparator(){
}

defineClass(339, 1, $intern_21, PricingItemComparator);
_.compare = function compare_29(pritem1, pritem2){
  var compare, item1, item2;
  item1 = dynamicCast(pritem1, 210);
  item2 = dynamicCast(pritem2, 210);
  compare = compareTo_7($getExternalId(item1._item), $getExternalId(item2._item));
  if (compare != 0) {
    return compare;
  }
  return compareTo_7(item1._itemNumber, item2._itemNumber);
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_PricingItemComparator_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'PricingItemComparator', 339, Ljava_lang_Object_2_classLit);
function $clinit_ValueDependGroupHandler(){
  $clinit_ValueDependGroupHandler = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_ValueDependGroupHandler_2_classLit);
}

function $collectValueDependPrcCondnForGroupProcess(this$static, prcCondn){
  $add_5(this$static.valueDependpricingConditionPointers, prcCondn);
}

function $processGroup(this$static){
  var fromStepNo, groupCond, groupConditionChange, itemsRecalculated, iter, nextGroupPtr, nextPrCond, oldConditionRate, prCond, prItem, prStepNo, predecessorGroupCondn, processingTime, stepNo;
  itemsRecalculated = 0;
  $clinit_Location();
  processingTime = fromDouble(now_1());
  nextGroupPtr = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.valueDependpricingConditionPointers.map_0));
  $hasNext_0(nextGroupPtr.val$entryIterator2.iter) && $next_3(nextGroupPtr);
  groupConditionChange = true;
  predecessorGroupCondn = null;
  for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.valueDependpricingConditionPointers.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
    prCond = dynamicCast($next_3(iter), 15);
    groupCond = prCond.m_groupCondition;
    if (groupConditionChange) {
      !!predecessorGroupCondn && $clinit_Location();
      itemsRecalculated = 0;
      this$static.postProcessPredecessorGroup(predecessorGroupCondn);
      this$static.preProcessingNewGroup(groupCond);
      $calculate(groupCond);
      groupConditionChange = false;
    }
    if ($hasNext_0(nextGroupPtr.val$entryIterator2.iter)) {
      nextPrCond = dynamicCast($next_3(nextGroupPtr), 15);
      if (groupCond != nextPrCond.m_groupCondition) {
        predecessorGroupCondn = groupCond;
        groupConditionChange = true;
      }
    }
    prItem = prCond.m_pricingItem;
    if (prCond.m_control == 65 && !prCond.m_pricingItem.m_pricingItemIsUnchangeable && !prCond.m_manuallyChanged) {
      if ($equals_7(groupCond.m_varKey, '')) {
        if (this$static.isRatePropogationRequired(groupCond, prCond)) {
          oldConditionRate = $getConditionRateValue(prCond);
          $setConditionRate(prCond, groupCond.m_conditionRate.m_value, dynamicCast(groupCond.m_conditionRate.m_unit, 26));
          $compareTo_7(oldConditionRate, $getConditionRateValue(prCond)) != 0 && (prItem._calculationDuringPricingCompleteRequired = true);
        }
      }
       else {
        $setScaleBaseValue(prCond, groupCond._conditionScales == null?null:!groupCond._conditionScales[0]?null:groupCond._conditionScales[0].getValue_0());
        oldConditionRate = $getConditionRateValue(prCond);
        $determineConditionRateFromScale(prCond, false);
        $compareTo_7(oldConditionRate, $getConditionRateValue(prCond)) != 0 && (prItem._calculationDuringPricingCompleteRequired = true);
      }
      prCond.m_rateDeterminedFromGroupCondition = true;
    }
    if (this$static.isGroupModeItemCalcRequired(groupCond, prItem, prCond)) {
      itemsRecalculated = itemsRecalculated + 1;
      debugT('Recalculated item -> ' + $getExternalId(prItem._item) + ' [' + prItem._itemNumber + ']');
      fromStepNo = prCond.stepNumber;
      prStepNo = $calculateGroupConditionProcessing(prItem, fromStepNo, prCond);
      stepNo = prStepNo < fromStepNo?prStepNo:fromStepNo;
      $exclusion(prItem, stepNo, 70, true, prCond);
      $checkMandatoryConditions(prItem);
      prCond.sourceForGrpModeItemCalc && (prCond.sourceForGrpModeItemCalc = false);
    }
  }
  this$static.valueDependpricingConditionPointers.map_0.clear_0();
  sub_0(fromDouble(now_1()), processingTime);
}

function ValueDependGroupHandler(){
  this.valueDependpricingConditionPointers = new TreeSet_0(new PricingConditionPointerComparator);
}

defineClass(343, 1, $intern_21);
var Lcom_sap_spe_pricing_transactiondata_impl_ValueDependGroupHandler_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ValueDependGroupHandler', 343, Ljava_lang_Object_2_classLit);
function ValueDependGroupClassicHandler(){
  $clinit_ValueDependGroupHandler();
  ValueDependGroupHandler.call(this);
}

defineClass(595, 343, $intern_21, ValueDependGroupClassicHandler);
_.isGroupModeItemCalcRequired = function isGroupModeItemCalcRequired(grpCondn, prItem, itemPrcCondn){
  return true;
}
;
_.isRatePropogationRequired = function isRatePropogationRequired(groupRepresentative, groupMemberPrCond){
  return true;
}
;
_.isSecondPricingCompleteRequired = function isSecondPricingCompleteRequired(prcDoc, grpCondn){
  if (grpCondn.m_calculationType == 66) {
    return true;
  }
  return false;
}
;
_.postProcessPredecessorGroup = function postProcessPredecessorGroup(predecessorGroupCondn){
}
;
_.preProcessingNewGroup = function preProcessingNewGroup(newGroupRepresentative){
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_ValueDependGroupClassicHandler_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ValueDependGroupClassicHandler', 595, Lcom_sap_spe_pricing_transactiondata_impl_ValueDependGroupHandler_2_classLit);
function getValueDependGroupHandler(groupHandlingMode){
  switch (groupHandlingMode) {
    case 67:
      !classicHandler && (classicHandler = new ValueDependGroupClassicHandler);
      return classicHandler;
    case 79:
      !optimizedHandler && (optimizedHandler = new ValueDependGroupOptimizedHandler);
      return optimizedHandler;
    default:return null;
  }
}

var classicHandler = null, optimizedHandler = null;
function $renewRoundingDiffCompensateItem(condition, groupCondition){
  var maxConditionValue;
  if (!condition.m_pricingItem.m_pricingItemIsUnchangeable && $compareTo_7($getMultiplicity(condition.m_pricingItem._item), ($clinit_PricingConstants() , ONE_1)) == 0) {
    condition.m_calculationType == 66?(maxConditionValue = condition.m_conditionBase.getValue_0()):(maxConditionValue = condition.m_conditionValue);
    $signum(maxConditionValue) < 0 && (maxConditionValue = $multiply(maxConditionValue, ($clinit_PricingConstants() , MINUS_ONE)));
    if ($compareTo_7(maxConditionValue, groupCondition.m_maxConditionValue) >= 0) {
      groupCondition.m_maxConditionValue = maxConditionValue;
      groupCondition.m_pricingConditionWithRoundingDiff = condition;
    }
  }
}

function ValueDependGroupOptimizedHandler(){
  $clinit_ValueDependGroupHandler();
  ValueDependGroupHandler.call(this);
}

defineClass(596, 343, $intern_21, ValueDependGroupOptimizedHandler);
_.isGroupModeItemCalcRequired = function isGroupModeItemCalcRequired_0(grpCondn, prItem, itemPrcCondn){
  if (!!grpCondn.m_pricingConditionWithRoundingDiff && grpCondn.m_pricingConditionWithRoundingDiff.m_pricingItem == prItem || grpCondn.m_calculationType == 66 || prItem._calculationDuringPricingCompleteRequired || grpCondn.sourceForGrpModeItemCalc || itemPrcCondn.sourceForGrpModeItemCalc || itemPrcCondn.m_indicatorStructureCondition == 66 && $subItemsExist(prItem)) {
    return true;
  }
  return false;
}
;
_.isRatePropogationRequired = function isRatePropogationRequired_0(groupRepresentative, groupMemberPrCond){
  return groupMemberPrCond.m_indicatorStructureCondition != 66;
}
;
_.isSecondPricingCompleteRequired = function isSecondPricingCompleteRequired_0(prcDoc, grpCondn){
  if (grpCondn.m_calculationType == 66 && !!prcDoc.exclusionProcessor.m_exclusionCondTypeNames && $contains_1(prcDoc.exclusionProcessor.m_exclusionCondTypeNames, grpCondn.m_conditionTypeName)) {
    return true;
  }
  return false;
}
;
_.postProcessPredecessorGroup = function postProcessPredecessorGroup_0(predecessorGroupCondn){
  var fromStepNo, it, iter, newRoundDiffCompensateCond, newRoundDiffCompensateItem, oldRoundDiffCompensateCond, oldRoundDiffCompensateItem, prCond, prStepNo, stepNo;
  if (!!predecessorGroupCondn && predecessorGroupCondn.m_calculationType == 66) {
    oldRoundDiffCompensateCond = predecessorGroupCondn.m_pricingConditionWithRoundingDiff;
    if (!oldRoundDiffCompensateCond) {
      return;
    }
    oldRoundDiffCompensateItem = oldRoundDiffCompensateCond.m_pricingItem;
    $setMaxConditionValue(predecessorGroupCondn, ($clinit_PricingTransactiondataConstants() , ZERO_4));
    for (iter = new AbstractList$IteratorImpl(predecessorGroupCondn.contributingItemCondns); iter.i < iter.this$01.size_1();) {
      $renewRoundingDiffCompensateItem((checkCriticalElement(iter.i < iter.this$01.size_1()) , dynamicCast(iter.this$01.get_5(iter.last = iter.i++), 15)), predecessorGroupCondn);
    }
    newRoundDiffCompensateCond = predecessorGroupCondn.m_pricingConditionWithRoundingDiff;
    newRoundDiffCompensateItem = newRoundDiffCompensateCond.m_pricingItem;
    if (oldRoundDiffCompensateItem != newRoundDiffCompensateItem) {
      fromStepNo = predecessorGroupCondn.stepNumber;
      $setRoundingDifference(oldRoundDiffCompensateCond, ZERO_4);
      prStepNo = $calculateGroupConditionProcessing(oldRoundDiffCompensateItem, fromStepNo, oldRoundDiffCompensateCond);
      stepNo = prStepNo < fromStepNo?prStepNo:fromStepNo;
      $exclusion(oldRoundDiffCompensateItem, stepNo, 70, true, oldRoundDiffCompensateCond);
      $checkMandatoryConditions(oldRoundDiffCompensateItem);
      prStepNo = $calculateGroupConditionProcessing(newRoundDiffCompensateItem, fromStepNo, newRoundDiffCompensateCond);
      stepNo = prStepNo < fromStepNo?prStepNo:fromStepNo;
      $exclusion(newRoundDiffCompensateItem, stepNo, 70, true, newRoundDiffCompensateCond);
      $checkMandatoryConditions(newRoundDiffCompensateItem);
    }
  }
  if (predecessorGroupCondn) {
    it = new AbstractList$IteratorImpl(predecessorGroupCondn.contributingItemCondns);
    while (it.i < it.this$01.size_1()) {
      prCond = (checkCriticalElement(it.i < it.this$01.size_1()) , dynamicCast(it.this$01.get_5(it.last = it.i++), 15));
      prCond.m_pricingItem._calculationDuringPricingCompleteRequired = false;
    }
  }
}
;
_.preProcessingNewGroup = function preProcessingNewGroup_0(newGroupRepresentative){
}
;
var Lcom_sap_spe_pricing_transactiondata_impl_ValueDependGroupOptimizedHandler_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'ValueDependGroupOptimizedHandler', 596, Lcom_sap_spe_pricing_transactiondata_impl_ValueDependGroupHandler_2_classLit);
function $clinit_VariantConditionContainer(){
  $clinit_VariantConditionContainer = emptyMethod;
  getLocation(Lcom_sap_spe_pricing_transactiondata_impl_VariantConditionContainer_2_classLit);
}

function $getVarcondKeys(this$static){
  var i_0, iter, varcondValues;
  varcondValues = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, this$static.m_varcondsSorted.array.length, 4, 1);
  i_0 = 0;
  for (iter = new AbstractList$IteratorImpl(this$static.m_varcondsSorted); iter.i < iter.this$01.size_1();) {
    varcondValues[i_0] = (checkCriticalElement(iter.i < iter.this$01.size_1()) , throwClassCastExceptionUnlessNull(iter.this$01.get_5(iter.last = iter.i++))).nullMethod();
    ++i_0;
  }
  return varcondValues;
}

function VariantConditionContainer(varconds){
  $clinit_VariantConditionContainer();
  var i_0, obj;
  this.m_varconds = new HashMap;
  this.m_varcondsSorted = new ArrayList_0(5);
  for (i_0 = 0; i_0 < varconds.length; i_0++) {
    obj = $put_0(this.m_varconds, null.nullMethod(), varconds[i_0]);
    obj == null && $add_3(this.m_varcondsSorted, varconds[i_0]);
  }
}

defineClass(271, 1, {271:1, 3:1, 4:1}, VariantConditionContainer);
_.equals$ = function equals_21(o){
  var newVarconds, oldVarconds, varcondCont, varkey, varkeys;
  if (this === o) {
    return true;
  }
  if (o == null || getClass__Ljava_lang_Class___devirtual$(o) != Lcom_sap_spe_pricing_transactiondata_impl_VariantConditionContainer_2_classLit) {
    return false;
  }
  varcondCont = dynamicCast(o, 271);
  oldVarconds = this.m_varconds;
  newVarconds = varcondCont.m_varconds;
  if (oldVarconds.size_0 != newVarconds.size_0) {
    return false;
  }
  varkeys = enumeration(new AbstractMap$1(oldVarconds));
  while (varkeys.val$it1.hasNext()) {
    varkey = dynamicCastToString(varkeys.val$it1.next());
    if (!(varkey == null?!!$getEntry(newVarconds.hashCodeMap, null):!(newVarconds.stringMap.get_0(varkey) === undefined))) {
      return false;
    }
  }
  return true;
}
;
_.hashCode$ = function hashCode_22(){
  var hash, oldVarconds, size_0, varkeys;
  oldVarconds = this.m_varconds;
  size_0 = oldVarconds.size_0;
  varkeys = enumeration(new AbstractMap$1(oldVarconds));
  hash = 217 + size_0;
  hash = 31 * hash + getHashCode(varkeys);
  return hash;
}
;
_.m_varconds = null;
_.m_varcondsSorted = null;
var Lcom_sap_spe_pricing_transactiondata_impl_VariantConditionContainer_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.impl', 'VariantConditionContainer', 271, Ljava_lang_Object_2_classLit);
function PricingConditionTO(){
}

defineClass(98, 1, {98:1, 3:1}, PricingConditionTO);
_.accruals = false;
_.calculationType = 0;
_.category = 0;
_.changedManually = false;
_.conditionClass = 0;
_.conditionControl = 0;
_.conditionUpdate = false;
_.configuration = false;
_.conversionDenominatorConditionUnit2BaseUnit = 0;
_.conversionExponentConditionUnit2BaseUnit = 0;
_.conversionNumeratorConditionUnit2BaseUnit = 0;
_.counter = 0;
_.groupCondition = false;
_.headerConditionCounter = 0;
_.inactive = 0;
_.interCompanyBilling = false;
_.invoiceList = false;
_.origin = 0;
_.scaleType = 0;
_.statistical = false;
_.stepNumber = 0;
_.structureCondition = 0;
var Lcom_sap_spe_pricing_transactiondata_to_PricingConditionTO_2_classLit = createForClass('com.sap.spe.pricing.transactiondata.to', 'PricingConditionTO', 98, Ljava_lang_Object_2_classLit);
function $clinit_TextEngineFactory(){
  $clinit_TextEngineFactory = emptyMethod;
  getLocation(Lcom_sap_spe_text_TextEngineFactory_2_classLit);
}

defineClass(666, 1, {});
var rFactory = null;
var Lcom_sap_spe_text_TextEngineFactory_2_classLit = createForClass('com.sap.spe.text', 'TextEngineFactory', 666, Ljava_lang_Object_2_classLit);
function TextRuntimeException(){
  RuntimeException.call(this);
}

defineClass(555, 127, $intern_2, TextRuntimeException);
var Lcom_sap_spe_text_TextRuntimeException_2_classLit = createForClass('com.sap.spe.text', 'TextRuntimeException', 555, Lcom_sap_vmc_exception_BaseRuntimeException_2_classLit);
function $getCacheManager_2(){
  var cacheManager;
  cacheManager = ($clinit_CacheManagerFactory() , new CacheManagerImpl);
  try {
    $applyConfiguration_0(cacheManager, 'AP_PRC_TXT');
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 80)) {
      getCategory('AP/PRC/Text');
      getLocation(Lcom_sap_spe_text_impl_TextObjectManager_2_classLit);
      throw new TextRuntimeException;
    }
     else 
      throw unwrap($e0);
  }
  return cacheManager;
}

function TextObjectManager(){
  var cacheManager, region;
  cacheManager = $getCacheManager_2();
  region = (cacheManager.cacheRegion = new CacheRegionImpl(cacheManager.appName, '/AP/PRC/Text') , cacheManager.cacheRegion);
  this.cacheFacade = $getCacheFacade(region);
}

defineClass(196, 1, {});
var Lcom_sap_spe_text_impl_TextObjectManager_2_classLit = createForClass('com.sap.spe.text.impl', 'TextObjectManager', 196, Ljava_lang_Object_2_classLit);
function $getDataElement_0(this$static, name_0){
  var de, key, newName;
  newName = $replace(name_0, 47, 35);
  key = create_5('DE', newName, getActiveLanguage());
  de = this$static.cacheFacade.get_1(key, null);
  return de;
}

function DataElementObjectManager(){
  TextObjectManager.call(this);
}

defineClass(503, 196, {}, DataElementObjectManager);
var Lcom_sap_spe_text_impl_DataElementObjectManager_2_classLit = createForClass('com.sap.spe.text.impl', 'DataElementObjectManager', 503, Lcom_sap_spe_text_impl_TextObjectManager_2_classLit);
function DomainObjectManager(){
  TextObjectManager.call(this);
}

defineClass(502, 196, {}, DomainObjectManager);
var Lcom_sap_spe_text_impl_DomainObjectManager_2_classLit = createForClass('com.sap.spe.text.impl', 'DomainObjectManager', 502, Lcom_sap_spe_text_impl_TextObjectManager_2_classLit);
function SAPLanguageObjectManager(){
  TextObjectManager.call(this);
}

defineClass(501, 196, {}, SAPLanguageObjectManager);
var Lcom_sap_spe_text_impl_SAPLanguageObjectManager_2_classLit = createForClass('com.sap.spe.text.impl', 'SAPLanguageObjectManager', 501, Lcom_sap_spe_text_impl_TextObjectManager_2_classLit);
function $getTableField(this$static, tableName, fieldName){
  var field, key, table, tableField;
  table = $replace(tableName, 47, 35);
  field = $replace(fieldName, 47, 35);
  key = create_5('TF', table, field);
  tableField = this$static.cacheFacade.get_1(key, null);
  return tableField;
}

function TableFieldObjectManager(){
  TextObjectManager.call(this);
}

defineClass(504, 196, {}, TableFieldObjectManager);
var Lcom_sap_spe_text_impl_TableFieldObjectManager_2_classLit = createForClass('com.sap.spe.text.impl', 'TableFieldObjectManager', 504, Lcom_sap_spe_text_impl_TextObjectManager_2_classLit);
function $getDataElement_1(this$static, name_0){
  return $getDataElement_0(this$static.dataElementObjMgr, name_0);
}

function $getTableField_0(this$static, tableName, fieldName){
  return $getTableField(this$static.tableFieldObjMgr, tableName, fieldName);
}

function TextEngine(){
  new SAPLanguageObjectManager;
  new DomainObjectManager;
  this.dataElementObjMgr = new DataElementObjectManager;
  this.tableFieldObjMgr = new TableFieldObjectManager;
}

defineClass(448, 1, {159:1, 352:1}, TextEngine);
var Lcom_sap_spe_text_impl_TextEngine_2_classLit = createForClass('com.sap.spe.text.impl', 'TextEngine', 448, Ljava_lang_Object_2_classLit);
function TextEngineFactoryImpl(){
  $clinit_TextEngineFactory();
}

defineClass(308, 666, {}, TextEngineFactoryImpl);
var Lcom_sap_spe_text_impl_TextEngineFactoryImpl_2_classLit = createForClass('com.sap.spe.text.impl', 'TextEngineFactoryImpl', 308, Lcom_sap_spe_text_TextEngineFactory_2_classLit);
function $set(this$static, year, month, day){
  $setYear(this$static.date, year);
  $setMonth_0(this$static.date, month);
  $setDate_0(this$static.date, day);
}

function $set_0(this$static, year, month, day, p4, p5, p6){
  $setYear(this$static.date, year);
  $setMonth_0(this$static.date, month);
  $setDate_0(this$static.date, day);
  $setHours_0(this$static.date, p4);
  $setMinutes_0(this$static.date, p5);
  $setSeconds_0(this$static.date, p6);
}

function Calendar(){
  this.date = new Date_0;
}

defineClass(146, 1, $intern_21, Calendar);
var Lcom_sap_sxe_sys_Calendar_2_classLit = createForClass('com.sap.sxe.sys', 'Calendar', 146, Ljava_lang_Object_2_classLit);
function $clinit_SAPDate(){
  $clinit_SAPDate = emptyMethod;
  new DateFormat_0;
  new Calendar;
}

function $after(this$static, sapDate){
  if (this$static.m_year != sapDate.m_year) {
    return this$static.m_year > sapDate.m_year;
  }
  if (this$static.m_month != sapDate.m_month) {
    return this$static.m_month > sapDate.m_month;
  }
  return this$static.m_day > sapDate.m_day;
}

function $before(this$static, sapDate){
  if (this$static.m_year != sapDate.m_year) {
    return this$static.m_year < sapDate.m_year;
  }
  if (this$static.m_month != sapDate.m_month) {
    return this$static.m_month < sapDate.m_month;
  }
  return this$static.m_day < sapDate.m_day;
}

function $beforeEquals(this$static, sapDate){
  return $before(this$static, sapDate) || this$static.m_day == sapDate.m_day && this$static.m_month == sapDate.m_month && this$static.m_year == sapDate.m_year;
}

function $compareTo_0(this$static, date){
  if (this$static.m_day == date.m_day && this$static.m_month == date.m_month && this$static.m_year == date.m_year) {
    return 0;
  }
  if ($before(this$static, date)) {
    return -1;
  }
  return 1;
}

function $equals_4(this$static, sapDate){
  return this$static.m_day == sapDate.m_day && this$static.m_month == sapDate.m_month && this$static.m_year == sapDate.m_year;
}

function $formatInvertedYYYYMMDD(this$static){
  var strBuf;
  strBuf = new StringBuffer_0;
  $append_0(strBuf, 9999 - this$static.m_year);
  $append_0(strBuf, 99 - this$static.m_month);
  $append_0(strBuf, 99 - this$static.m_day);
  return strBuf.string;
}

function $formatYYYYMMDD(this$static){
  var buf;
  buf = new StringBuffer_0;
  this$static.m_year < 1000 && (buf.string += '0' , buf);
  this$static.m_year < 100 && (buf.string += '0' , buf);
  this$static.m_year < 10 && (buf.string += '0' , buf);
  $append_0(buf, this$static.m_year);
  this$static.m_month < 10 && (buf.string += '0' , buf);
  $append_0(buf, this$static.m_month);
  this$static.m_day < 10 && (buf.string += '0' , buf);
  $append_0(buf, this$static.m_day);
  return buf.string;
}

function $hashCode_5(this$static){
  return this$static.m_year + this$static.m_month * 10 + this$static.m_day;
}

function SAPDate(year, month, dayOfMonth){
  $clinit_SAPDate();
  this.m_year = year;
  this.m_month = month;
  this.m_day = dayOfMonth;
}

function SAPDate_0(cal){
  SAPDate.call(this, cal.date.jsdate.getDay(), cal.date.jsdate.getDay() + 1, cal.date.jsdate.getDay());
}

function parseInvertedYYYYMMDD(invertedYYYYMMDD){
  $clinit_SAPDate();
  var invertedDayOfMonth, invertedMonth, invertedYear;
  if (invertedYYYYMMDD.length != 8) {
    throw new exc_internal_error('expected inverted yyyymmdd format, not ' + invertedYYYYMMDD);
  }
  invertedYear = __parseAndValidateInt(invertedYYYYMMDD.substr(0, 4));
  invertedMonth = __parseAndValidateInt(invertedYYYYMMDD.substr(4, 2));
  invertedDayOfMonth = __parseAndValidateInt(invertedYYYYMMDD.substr(6, 2));
  return new SAPDate(9999 - invertedYear, 99 - invertedMonth, 99 - invertedDayOfMonth);
}

function parseYYYYMMDD(yyyymmdd){
  $clinit_SAPDate();
  var dayOfMonth, month, year;
  if (yyyymmdd.length != 8) {
    throw new exc_internal_error('expected yyyymmdd format, not ' + yyyymmdd);
  }
  year = __parseAndValidateInt(yyyymmdd.substr(0, 4));
  month = __parseAndValidateInt(yyyymmdd.substr(4, 2));
  dayOfMonth = __parseAndValidateInt(yyyymmdd.substr(6, 2));
  return new SAPDate(year, month, dayOfMonth);
}

function today(){
  $clinit_SAPDate();
  var rightNow;
  rightNow = new Calendar;
  return new SAPDate_0(rightNow);
}

defineClass(51, 1, {51:1, 3:1, 50:1}, SAPDate, SAPDate_0);
_.compareTo = function compareTo_0(o){
  if (!instanceOf(o, 51)) {
    throw new ClassCastException_0(o + ' is not a SAPDate!');
  }
  return $compareTo_0(this, dynamicCast(o, 51));
}
;
_.equals$ = function equals_22(sapDate){
  if (instanceOf(sapDate, 51)) {
    return $equals_4(this, dynamicCast(sapDate, 51));
  }
  return false;
}
;
_.format = function format(dateFormat){
  var cal;
  cal = new Calendar;
  $set(cal, this.m_year, this.m_month - 1, this.m_day);
  return null.nullMethod();
}
;
_.hashCode$ = function hashCode_23(){
  return $hashCode_5(this);
}
;
_.toString$ = function toString_22(){
  var cal, dateFormat;
  return cal = new Calendar , $set(cal, this.m_year, this.m_month - 1, this.m_day) , dateFormat = new DateFormat , $format_1(dateFormat, cal.date);
}
;
_.m_day = 1000;
_.m_month = 1;
_.m_year = 1;
var Lcom_sap_sxe_sys_SAPDate_2_classLit = createForClass('com.sap.sxe.sys', 'SAPDate', 51, Ljava_lang_Object_2_classLit);
function $clinit_SAPString(){
  $clinit_SAPString = emptyMethod;
  new Character(32);
}

function $after_0(this$static, timestamp){
  if ($after(this$static, timestamp)) {
    return true;
  }
  if ($before(this$static, timestamp)) {
    return false;
  }
  if (this$static._hour != timestamp._hour) {
    return this$static._hour > timestamp._hour;
  }
  if (this$static._minute != timestamp._minute) {
    return this$static._minute > timestamp._minute;
  }
  return this$static._second > timestamp._second;
}

function $before_0(this$static, timestamp){
  if ($before(this$static, timestamp)) {
    return true;
  }
  if ($after(this$static, timestamp)) {
    return false;
  }
  if (this$static._hour != timestamp._hour) {
    return this$static._hour < timestamp._hour;
  }
  if (this$static._minute != timestamp._minute) {
    return this$static._minute < timestamp._minute;
  }
  return this$static._second < timestamp._second;
}

function $compareTo_1(this$static, timestamp){
  if (this$static.m_day == timestamp.m_day && this$static.m_month == timestamp.m_month && this$static.m_year == timestamp.m_year && this$static._hour == timestamp._hour && this$static._minute == timestamp._minute && this$static._second == timestamp._second) {
    return 0;
  }
  if ($before_0(this$static, timestamp)) {
    return -1;
  }
  return 1;
}

function $equals_5(this$static, timestamp){
  return this$static.m_day == timestamp.m_day && this$static.m_month == timestamp.m_month && this$static.m_year == timestamp.m_year && this$static._hour == timestamp._hour && this$static._minute == timestamp._minute && this$static._second == timestamp._second;
}

function $formatyyyyMMddHHmmss(this$static){
  var buf;
  buf = new StringBuffer_1($formatYYYYMMDD(this$static));
  this$static._hour < 10 && (buf.string += '0' , buf);
  $append_0(buf, this$static._hour);
  this$static._minute < 10 && (buf.string += '0' , buf);
  $append_0(buf, this$static._minute);
  this$static._second < 10 && (buf.string += '0' , buf);
  $append_0(buf, this$static._second);
  return buf.string;
}

function SAPTimestamp(year, month, date){
  $clinit_SAPDate();
  SAPTimestamp_0.call(this, year, month, date, 0, 0, 0);
}

function SAPTimestamp_0(year, month, date, hour, minute, second){
  SAPDate.call(this, year, month, date);
  this._hour = hour;
  this._minute = minute;
  this._second = second;
}

function SAPTimestamp_1(calendar){
  SAPTimestamp_0.call(this, calendar.date.jsdate.getDay(), calendar.date.jsdate.getDay() + 1, calendar.date.jsdate.getDay(), calendar.date.jsdate.getDay(), calendar.date.jsdate.getDay(), calendar.date.jsdate.getDay());
}

function SAPTimestamp_2(date){
  $clinit_SAPDate();
  SAPTimestamp.call(this, date.m_year, date.m_month, date.m_day);
}

function now_2(){
  $clinit_SAPDate();
  var rightNow;
  rightNow = new Calendar;
  return new SAPTimestamp_1(rightNow);
}

function parseyyyyMMddHHmmss(yyyyMMddHHmmss){
  $clinit_SAPDate();
  if (yyyyMMddHHmmss.length != 14) {
    throw new exc_internal_error('expected yyyyMMddHHmmss format, not ' + yyyyMMddHHmmss);
  }
  return new SAPTimestamp_0(__parseAndValidateInt(yyyyMMddHHmmss.substr(0, 4)), __parseAndValidateInt(yyyyMMddHHmmss.substr(4, 2)), __parseAndValidateInt(yyyyMMddHHmmss.substr(6, 2)), __parseAndValidateInt(yyyyMMddHHmmss.substr(8, 2)), __parseAndValidateInt(yyyyMMddHHmmss.substr(10, 2)), __parseAndValidateInt(yyyyMMddHHmmss.substr(12, 2)));
}

function today_0(){
  $clinit_SAPDate();
  var date;
  date = today();
  return new SAPTimestamp_2(date);
}

defineClass(63, 51, {51:1, 63:1, 3:1, 50:1}, SAPTimestamp, SAPTimestamp_0, SAPTimestamp_1, SAPTimestamp_2);
_.compareTo = function compareTo_1(o){
  if (!instanceOf(o, 63)) {
    throw new ClassCastException_0(o + ' is not a SAPTimestamp!');
  }
  return $compareTo_1(this, dynamicCast(o, 63));
}
;
_.format = function format_0(dateFormat){
  var cal;
  cal = new Calendar;
  $set_0(cal, this.m_year, this.m_month - 1, this.m_day, this._hour, this._minute, this._second);
  return null.nullMethod();
}
;
_.toString$ = function toString_23(){
  return $formatyyyyMMddHHmmss(this);
}
;
_._hour = 0;
_._minute = 0;
_._second = 0;
var Lcom_sap_sxe_sys_SAPTimestamp_2_classLit = createForClass('com.sap.sxe.sys', 'SAPTimestamp', 63, Lcom_sap_sxe_sys_SAPDate_2_classLit);
function exc_internal_error(message){
  RuntimeException_0.call(this, message);
}

defineClass(241, 20, $intern_2, exc_internal_error);
var Lcom_sap_sxe_sys_exc_exc_1internal_1error_2_classLit = createForClass('com.sap.sxe.sys.exc', 'exc_internal_error', 241, Ljava_lang_RuntimeException_2_classLit);
function $clinit_Cache(){
  $clinit_Cache = emptyMethod;
  getLocation(Lcom_sap_sxe_util_cache_Cache_2_classLit);
  getCategory('/AP/BASE/Core');
}

function Cache(){
  $clinit_Cache();
}

defineClass(255, 1, {255:1, 3:1}, Cache);
_.get_0 = function get_1(key){
  return null;
}
;
_.get_1 = function get_2(key, arguments_0){
  return null;
}
;
_.get_2 = function get_3(key, arguments_0, copy){
  return null;
}
;
_.get_3 = function get_4(key, copy){
  return null;
}
;
_.put = function put(key, object){
}
;
var activateCache = false;
var Lcom_sap_sxe_util_cache_Cache_2_classLit = createForClass('com.sap.sxe.util.cache', 'Cache', 255, Ljava_lang_Object_2_classLit);
function $clinit_Caches(){
  $clinit_Caches = emptyMethod;
  getCategory('/AP/BASE/Core');
  getLocation(Lcom_sap_sxe_util_cache_Cache_2_classLit);
}

function $get_9(this$static){
  var cache;
  cache = dynamicCast($getStringValue(this$static.caches, '/AP/PRC/Conditions/ConditionRecords'), 255);
  if (!cache) {
    cache = new Cache;
    $putStringValue(this$static.caches, '/AP/PRC/Conditions/ConditionRecords', cache);
  }
  return cache;
}

function Caches(){
  $clinit_Caches();
  this.caches = new HashMap;
}

defineClass(544, 1, {}, Caches);
var INSTANCE_10;
var Lcom_sap_sxe_util_cache_Caches_2_classLit = createForClass('com.sap.sxe.util.cache', 'Caches', 544, Ljava_lang_Object_2_classLit);
function $clinit_Configuration_1(){
  $clinit_Configuration_1 = emptyMethod;
  getLocation(Lcom_sap_sxe_util_config_Configuration_2_classLit);
  getCategory('/AP/BASE/Core');
}

function $applyConfiguration(this$static){
  try {
    this$static.implementationCache = false;
    this$static.currConvOverflowCheckActive = true;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}

function Configuration(){
  $clinit_Configuration_1();
  $applyConfiguration(this);
}

defineClass(323, 1, {}, Configuration);
_.currConvOverflowCheckActive = true;
_.implementationCache = false;
var INSTANCE_11;
var Lcom_sap_sxe_util_config_Configuration_2_classLit = createForClass('com.sap.sxe.util.config', 'Configuration', 323, Ljava_lang_Object_2_classLit);
var monitor = null;
function $clinit_Fraction(){
  $clinit_Fraction = emptyMethod;
  log_0(10);
}

function Fraction(num, den){
  $clinit_Fraction();
  this.m_numerator = num;
  this.m_denominator = den;
  this.m_exponent = 0;
}

function Fraction_0(num, den, exp_0){
  $clinit_Fraction();
  this.m_numerator = num;
  this.m_denominator = den;
  this.m_exponent = exp_0;
}

defineClass(38, 1, {38:1, 3:1}, Fraction, Fraction_0);
_.m_denominator = 0;
_.m_exponent = 0;
_.m_numerator = 0;
var Lcom_sap_sxe_util_math_Fraction_2_classLit = createForClass('com.sap.sxe.util.math', 'Fraction', 38, Ljava_lang_Object_2_classLit);
function $clinit_UUID(){
  $clinit_UUID = emptyMethod;
  CHARS = $toCharArray('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');
}

function uuid_0(){
  $clinit_UUID();
  var i_0, r, uuid;
  uuid = initDim(C_classLit, $intern_4, 0, 36, 7, 1);
  uuid[8] = uuid[13] = uuid[18] = uuid[23] = 45;
  uuid[14] = 52;
  for (i_0 = 0; i_0 < 36; i_0++) {
    if (uuid[i_0] == 0) {
      r = round_int(Math.random() * 16);
      uuid[i_0] = CHARS[i_0 == 19?r & 3 | 8:r & 15];
    }
  }
  return __valueOf(uuid, 0, uuid.length);
}

var CHARS;
function $clinit_CacheManagerFactory(){
  $clinit_CacheManagerFactory = emptyMethod;
  getLocation(Lcom_sap_vmc_cache_CacheManagerFactory_2_classLit);
  $clinit_Category();
  $getSubCategory($getSubCategory(rootCategory, '/System/Server'), 'Cache');
}

var Lcom_sap_vmc_cache_CacheManagerFactory_2_classLit = createForClass('com.sap.vmc.cache', 'CacheManagerFactory', null, Ljava_lang_Object_2_classLit);
defineClass(80, 46, {80:1, 46:1, 3:1, 9:1, 18:1});
var Lcom_sap_vmc_cache_exception_CacheException_2_classLit = createForClass('com.sap.vmc.cache.exception', 'CacheException', 80, Lcom_sap_vmc_exception_BaseException_2_classLit);
function PluginException(){
  Exception.call(this);
}

defineClass(237, 80, {80:1, 237:1, 46:1, 3:1, 9:1, 18:1}, PluginException);
var Lcom_sap_vmc_cache_exception_PluginException_2_classLit = createForClass('com.sap.vmc.cache.exception', 'PluginException', 237, Lcom_sap_vmc_cache_exception_CacheException_2_classLit);
function $applyConfiguration_0(this$static, appNam){
  try {
    this$static.appName = appNam;
    return true;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (!instanceOf($e0, 9))
      throw unwrap($e0);
  }
}

function CacheManagerImpl(){
}

defineClass(153, 1, {}, CacheManagerImpl);
var Lcom_sap_vmc_cache_impl_CacheManagerImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'CacheManagerImpl', 153, Ljava_lang_Object_2_classLit);
function $getCacheFacade(this$static){
  if ($equalsIgnoreCase(this$static.appName, 'AP_PRC_CON')) {
    if ($equalsIgnoreCase(this$static.regName, '/AP/PRC/Conditions/Customizing')) {
      return new ConditionCustomizingCacheFacadeImpl;
    }
     else if ($equalsIgnoreCase(this$static.regName, '/AP/PRC/Conditions/ConditionRecords')) {
      return new ConditionRecordsCacheFacadeImpl;
    }
  }
   else if ($equalsIgnoreCase(this$static.appName, 'AP_PRC_CNV')) {
    if ($equalsIgnoreCase(this$static.regName, '/AP/PRC/Conversion')) {
      return new ConversionCacheFacadeImpl;
    }
  }
   else if ($equalsIgnoreCase(this$static.appName, 'AP_PRC_PR')) {
    if ($equalsIgnoreCase(this$static.regName, '/AP/PRC/Pricing/Customizing')) {
      return new PricingCustomizingCacheFacadeImpl;
    }
     else if ($equalsIgnoreCase(this$static.regName, '/AP/PRC/Pricing/Transactiondata')) {
      return new PricingTransactionCacheFacadeImpl;
    }
  }
   else if ($equalsIgnoreCase(this$static.appName, 'AP_PRC_TXT')) {
    if ($equalsIgnoreCase(this$static.regName, '/AP/PRC/Text')) {
      return new TextCacheFacadeImpl;
    }
  }
   else if ($equalsIgnoreCase(this$static.appName, 'AP_SPC_PRD')) {
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/ConfigType')) {
      return new ConfigTypeCacheFacadeImpl;
    }
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/ProductBaseData')) {
      return new ProductBaseDataCacheFacadeImpl;
    }
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/ProductCategoryAssignment')) {
      return new ProductCategoryAssignmentCacheFacadeImpl;
    }
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/ProductCategoryHierarchy')) {
      return new ProductCategoryHierarchyCacheFacadeImpl;
    }
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/ProductConfigurationData')) {
      return new ProductConfigDataCacheFacadeImpl;
    }
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/ProductDescription')) {
      return new ProductDescriptionCacheFacadeImpl;
    }
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/ProductMaterialData')) {
      return new ProductMaterialDataCacheFacadeImpl;
    }
    if ($equalsIgnoreCase(this$static.regName, '/AP/SPC/Product/LogicalSystem')) {
      return new ProductLogicalSystemCacheFacadeImpl;
    }
  }
  return null;
}

function CacheRegionImpl(appNam, regNam){
  this.regName = regNam;
  this.appName = appNam;
}

defineClass(155, 1, {}, CacheRegionImpl);
var Lcom_sap_vmc_cache_impl_CacheRegionImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'CacheRegionImpl', 155, Ljava_lang_Object_2_classLit);
function $clinit_ConditionCustomizingCacheFacadeImpl(){
  $clinit_ConditionCustomizingCacheFacadeImpl = emptyMethod;
  condCustCache = new HashMap_0(100);
}

function ConditionCustomizingCacheFacadeImpl(){
  $clinit_ConditionCustomizingCacheFacadeImpl();
}

defineClass(423, 1, {}, ConditionCustomizingCacheFacadeImpl);
_.get_0 = function get_5(s){
  return null;
}
;
_.get_1 = function get_6(s, obj){
  return null;
}
;
_.get_2 = function get_7(s, obj, flag){
  return null;
}
;
_.get_3 = function get_8(s, flag){
  var cacheObj, e, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(condCustCache, s)) {
    cacheObj = dynamicCast($getStringValue(condCustCache, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'CON');
    try {
      try {
        $init(cr_0, m1);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          e = $e0;
          e.printStackTrace();
        }
         else 
          throw unwrap($e0);
      }
      cacheObj = $get_6(cr_0, s, $clinit_Boolean());
      activateCache && $putStringValue(condCustCache, s, cacheObj);
      return cacheObj.value_0;
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 9)) {
        return null;
      }
       else 
        throw unwrap($e1);
    }
  }
}
;
_.put = function put_0(s, obj){
}
;
var condCustCache, cr_0;
var Lcom_sap_vmc_cache_impl_ConditionCustomizingCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ConditionCustomizingCacheFacadeImpl', 423, Ljava_lang_Object_2_classLit);
function $clinit_ConditionRecordsCacheFacadeImpl(){
  $clinit_ConditionRecordsCacheFacadeImpl = emptyMethod;
  condRecCache = new HashMap_0(100);
}

function ConditionRecordsCacheFacadeImpl(){
  $clinit_ConditionRecordsCacheFacadeImpl();
}

defineClass(579, 1, {}, ConditionRecordsCacheFacadeImpl);
_.get_0 = function get_9(s){
  return $clinit_Cache() , activateCache?$getStringValue(condRecCache, s):null;
}
;
_.get_1 = function get_10(s, obj){
  return null;
}
;
_.get_2 = function get_11(s, obj, flag){
  return null;
}
;
_.get_3 = function get_12(s, flag){
  var cacheObj, e, map_0;
  map_0 = new HashMap;
  map_0.stringMap.put_1('functionality', 'CON');
  try {
    try {
      null.nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (!instanceOf($e0, 237))
        throw unwrap($e0);
    }
    cacheObj = null.nullMethod($clinit_Boolean());
    $clinit_Cache();
    activateCache && $putStringValue(condRecCache, s, cacheObj);
    return null.nullMethod();
  }
   catch ($e1) {
    $e1 = wrap($e1);
    if (instanceOf($e1, 9)) {
      e = $e1;
      e.printStackTrace();
    }
     else 
      throw unwrap($e1);
  }
  return null;
}
;
_.put = function put_1(s, obj){
  $clinit_Cache();
  activateCache && $putStringValue(condRecCache, s, obj);
}
;
var condRecCache;
var Lcom_sap_vmc_cache_impl_ConditionRecordsCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ConditionRecordsCacheFacadeImpl', 579, Ljava_lang_Object_2_classLit);
function ConfigTypeCacheFacadeImpl(){
}

defineClass(580, 1, {}, ConfigTypeCacheFacadeImpl);
_.get_0 = function get_13(s){
  return null;
}
;
_.get_1 = function get_14(s, obj){
  return null;
}
;
_.get_2 = function get_15(s, obj, flag){
  return null;
}
;
_.get_3 = function get_16(s, flag){
  return null;
}
;
_.put = function put_2(s, obj){
}
;
var Lcom_sap_vmc_cache_impl_ConfigTypeCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ConfigTypeCacheFacadeImpl', 580, Ljava_lang_Object_2_classLit);
function $clinit_ConversionCacheFacadeImpl(){
  $clinit_ConversionCacheFacadeImpl = emptyMethod;
  convCache = new HashMap_0(50);
}

function $get_10(s){
  var cacheObj, e, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(convCache, s)) {
    cacheObj = dynamicCast($getStringValue(convCache, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'CNV');
    try {
      try {
        $init(cr_1, m1);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          e = $e0;
          e.printStackTrace();
        }
         else 
          throw unwrap($e0);
      }
      cacheObj = $get_6(cr_1, s, $clinit_Boolean());
      activateCache && $putStringValue(convCache, s, cacheObj);
      return cacheObj.value_0;
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 9)) {
        return null;
      }
       else 
        throw unwrap($e1);
    }
  }
}

function ConversionCacheFacadeImpl(){
  $clinit_ConversionCacheFacadeImpl();
}

defineClass(424, 1, {}, ConversionCacheFacadeImpl);
_.get_0 = function get_17(s){
  return null;
}
;
_.get_1 = function get_18(s, obj){
  return null;
}
;
_.get_2 = function get_19(s, obj, flag){
  return $get_10(s);
}
;
_.get_3 = function get_20(s, flag){
  return $get_10(s);
}
;
_.put = function put_3(s, obj){
}
;
var convCache, cr_1;
var Lcom_sap_vmc_cache_impl_ConversionCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ConversionCacheFacadeImpl', 424, Ljava_lang_Object_2_classLit);
function $clinit_PricingCustomizingCacheFacadeImpl(){
  $clinit_PricingCustomizingCacheFacadeImpl = emptyMethod;
  prcCustCache = new HashMap_0(100);
}

function PricingCustomizingCacheFacadeImpl(){
  $clinit_PricingCustomizingCacheFacadeImpl();
}

defineClass(426, 1, {}, PricingCustomizingCacheFacadeImpl);
_.get_0 = function get_21(s){
  return null;
}
;
_.get_1 = function get_22(s, obj){
  return null;
}
;
_.get_2 = function get_23(s, obj, flag){
  return null;
}
;
_.get_3 = function get_24(s, flag){
  var cacheObj, e, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prcCustCache, s)) {
    cacheObj = dynamicCast($getStringValue(prcCustCache, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      try {
        $init(cr_2, m1);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          e = $e0;
          e.printStackTrace();
        }
         else 
          throw unwrap($e0);
      }
      cacheObj = $get_6(cr_2, s, $clinit_Boolean());
      activateCache && $putStringValue(prcCustCache, s, cacheObj);
      return cacheObj.value_0;
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 9)) {
        return null;
      }
       else 
        throw unwrap($e1);
    }
  }
}
;
_.put = function put_4(s, obj){
}
;
var cr_2, prcCustCache;
var Lcom_sap_vmc_cache_impl_PricingCustomizingCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'PricingCustomizingCacheFacadeImpl', 426, Ljava_lang_Object_2_classLit);
function PricingTransactionCacheFacadeImpl(){
}

defineClass(425, 1, {}, PricingTransactionCacheFacadeImpl);
_.get_0 = function get_25(s){
  return null;
}
;
_.get_1 = function get_26(s, obj){
  return null;
}
;
_.get_2 = function get_27(s, obj, flag){
  return null;
}
;
_.get_3 = function get_28(s, flag){
  try {
    return $get_6(cr_3, s, $clinit_Boolean()).value_0;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      return null;
    }
     else 
      throw unwrap($e0);
  }
}
;
_.put = function put_5(s, obj){
}
;
var cr_3;
var Lcom_sap_vmc_cache_impl_PricingTransactionCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'PricingTransactionCacheFacadeImpl', 425, Ljava_lang_Object_2_classLit);
function $clinit_ProductBaseDataCacheFacadeImpl(){
  $clinit_ProductBaseDataCacheFacadeImpl = emptyMethod;
  prodCache = new HashMap_0(10);
}

function ProductBaseDataCacheFacadeImpl(){
  $clinit_ProductBaseDataCacheFacadeImpl();
}

defineClass(428, 1, {}, ProductBaseDataCacheFacadeImpl);
_.get_0 = function get_29(s){
  return null;
}
;
_.get_1 = function get_30(s, obj){
  return null;
}
;
_.get_2 = function get_31(s, obj, flag){
  return null;
}
;
_.get_3 = function get_32(s, flag){
  var cacheObj, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prodCache, s)) {
    cacheObj = dynamicCast($getStringValue(prodCache, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      cacheObj = $get_0(s, $clinit_Boolean());
      activateCache && $putStringValue(prodCache, s, cacheObj);
      return cacheObj.value_0;
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
}
;
_.put = function put_6(s, obj){
}
;
var cr_4, prodCache;
var Lcom_sap_vmc_cache_impl_ProductBaseDataCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ProductBaseDataCacheFacadeImpl', 428, Ljava_lang_Object_2_classLit);
function $clinit_ProductCategoryAssignmentCacheFacadeImpl(){
  $clinit_ProductCategoryAssignmentCacheFacadeImpl = emptyMethod;
  prodCache_0 = new HashMap_0(10);
}

function ProductCategoryAssignmentCacheFacadeImpl(){
  $clinit_ProductCategoryAssignmentCacheFacadeImpl();
}

defineClass(429, 1, {}, ProductCategoryAssignmentCacheFacadeImpl);
_.get_0 = function get_33(s){
  return null;
}
;
_.get_1 = function get_34(s, obj){
  return null;
}
;
_.get_2 = function get_35(s, obj, flag){
  return null;
}
;
_.get_3 = function get_36(s, flag){
  var cacheObj, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prodCache_0, s)) {
    cacheObj = dynamicCast($getStringValue(prodCache_0, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      cacheObj = $get_1(s, $clinit_Boolean());
      activateCache && $putStringValue(prodCache_0, s, cacheObj);
      return cacheObj.value_0;
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
}
;
_.put = function put_7(s, obj){
}
;
var cr_5, prodCache_0;
var Lcom_sap_vmc_cache_impl_ProductCategoryAssignmentCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ProductCategoryAssignmentCacheFacadeImpl', 429, Ljava_lang_Object_2_classLit);
function $clinit_ProductCategoryHierarchyCacheFacadeImpl(){
  $clinit_ProductCategoryHierarchyCacheFacadeImpl = emptyMethod;
  prodCache_1 = new HashMap_0(10);
}

function ProductCategoryHierarchyCacheFacadeImpl(){
  $clinit_ProductCategoryHierarchyCacheFacadeImpl();
}

defineClass(430, 1, {}, ProductCategoryHierarchyCacheFacadeImpl);
_.get_0 = function get_37(s){
  return null;
}
;
_.get_1 = function get_38(s, obj){
  return null;
}
;
_.get_2 = function get_39(s, obj, flag){
  return null;
}
;
_.get_3 = function get_40(s, flag){
  var cacheObj, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prodCache_1, s)) {
    cacheObj = dynamicCast($getStringValue(prodCache_1, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      cacheObj = $get_2(s, $clinit_Boolean());
      activateCache && $putStringValue(prodCache_1, s, cacheObj);
      return null.nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
}
;
_.put = function put_8(s, obj){
}
;
var cr_6, prodCache_1;
var Lcom_sap_vmc_cache_impl_ProductCategoryHierarchyCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ProductCategoryHierarchyCacheFacadeImpl', 430, Ljava_lang_Object_2_classLit);
function $clinit_ProductConfigDataCacheFacadeImpl(){
  $clinit_ProductConfigDataCacheFacadeImpl = emptyMethod;
  prodCache_2 = new HashMap_0(10);
}

function ProductConfigDataCacheFacadeImpl(){
  $clinit_ProductConfigDataCacheFacadeImpl();
}

defineClass(431, 1, {}, ProductConfigDataCacheFacadeImpl);
_.get_0 = function get_41(s){
  return null;
}
;
_.get_1 = function get_42(s, obj){
  return null;
}
;
_.get_2 = function get_43(s, obj, flag){
  return null;
}
;
_.get_3 = function get_44(s, flag){
  var cacheObj, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prodCache_2, s)) {
    cacheObj = dynamicCast($getStringValue(prodCache_2, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      cacheObj = $get_3(s, $clinit_Boolean());
      activateCache && $putStringValue(prodCache_2, s, cacheObj);
      return null.nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
}
;
_.put = function put_9(s, obj){
}
;
var cr_7, prodCache_2;
var Lcom_sap_vmc_cache_impl_ProductConfigDataCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ProductConfigDataCacheFacadeImpl', 431, Ljava_lang_Object_2_classLit);
function $clinit_ProductDescriptionCacheFacadeImpl(){
  $clinit_ProductDescriptionCacheFacadeImpl = emptyMethod;
  prodCache_3 = new HashMap_0(10);
}

function ProductDescriptionCacheFacadeImpl(){
  $clinit_ProductDescriptionCacheFacadeImpl();
}

defineClass(432, 1, {}, ProductDescriptionCacheFacadeImpl);
_.get_0 = function get_45(s){
  return null;
}
;
_.get_1 = function get_46(s, obj){
  return null;
}
;
_.get_2 = function get_47(s, obj, flag){
  return null;
}
;
_.get_3 = function get_48(s, flag){
  var cacheObj, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prodCache_3, s)) {
    cacheObj = dynamicCast($getStringValue(prodCache_3, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      cacheObj = $get_4(s, $clinit_Boolean());
      activateCache && $putStringValue(prodCache_3, s, cacheObj);
      return null.nullField;
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
}
;
_.put = function put_10(s, obj){
}
;
var cr_8, prodCache_3;
var Lcom_sap_vmc_cache_impl_ProductDescriptionCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ProductDescriptionCacheFacadeImpl', 432, Ljava_lang_Object_2_classLit);
function $clinit_ProductLogicalSystemCacheFacadeImpl(){
  $clinit_ProductLogicalSystemCacheFacadeImpl = emptyMethod;
  prodCache_4 = new HashMap_0(10);
}

function ProductLogicalSystemCacheFacadeImpl(){
  $clinit_ProductLogicalSystemCacheFacadeImpl();
}

defineClass(434, 1, {}, ProductLogicalSystemCacheFacadeImpl);
_.get_0 = function get_49(s){
  return null;
}
;
_.get_1 = function get_50(s, obj){
  return null;
}
;
_.get_2 = function get_51(s, obj, flag){
  return null;
}
;
_.get_3 = function get_52(s, flag){
  var cacheObj, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prodCache_4, s)) {
    cacheObj = dynamicCast($getStringValue(prodCache_4, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      cacheObj = $get(s, $clinit_Boolean());
      activateCache && $putStringValue(prodCache_4, s, cacheObj);
      return null.nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
}
;
_.put = function put_11(s, obj){
}
;
var cr_9, prodCache_4;
var Lcom_sap_vmc_cache_impl_ProductLogicalSystemCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ProductLogicalSystemCacheFacadeImpl', 434, Ljava_lang_Object_2_classLit);
function $clinit_ProductMaterialDataCacheFacadeImpl(){
  $clinit_ProductMaterialDataCacheFacadeImpl = emptyMethod;
  prodCache_5 = new HashMap_0(10);
}

function ProductMaterialDataCacheFacadeImpl(){
  $clinit_ProductMaterialDataCacheFacadeImpl();
}

defineClass(433, 1, {}, ProductMaterialDataCacheFacadeImpl);
_.get_0 = function get_53(s){
  return null;
}
;
_.get_1 = function get_54(s, obj){
  return null;
}
;
_.get_2 = function get_55(s, obj, flag){
  return null;
}
;
_.get_3 = function get_56(s, flag){
  var cacheObj, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(prodCache_5, s)) {
    cacheObj = dynamicCast($getStringValue(prodCache_5, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'PR');
    try {
      cacheObj = $get_5(s, $clinit_Boolean());
      activateCache && $putStringValue(prodCache_5, s, cacheObj);
      return null.nullMethod();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, 9)) {
        return null;
      }
       else 
        throw unwrap($e0);
    }
  }
}
;
_.put = function put_12(s, obj){
}
;
var cr_10, prodCache_5;
var Lcom_sap_vmc_cache_impl_ProductMaterialDataCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'ProductMaterialDataCacheFacadeImpl', 433, Ljava_lang_Object_2_classLit);
function $clinit_TextCacheFacadeImpl(){
  $clinit_TextCacheFacadeImpl = emptyMethod;
  textCache = new HashMap_0(100);
}

function $get_11(s){
  var cacheObj, e, m1;
  $clinit_Cache();
  if (activateCache && $hasStringValue(textCache, s)) {
    cacheObj = dynamicCast($getStringValue(textCache, s), 95);
    return cacheObj.value_0;
  }
   else {
    m1 = new HashMap;
    m1.stringMap.put_1('functionality', 'TXT');
    try {
      try {
        $init(cr_11, m1);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, 9)) {
          e = $e0;
          e.printStackTrace();
        }
         else 
          throw unwrap($e0);
      }
      cacheObj = $get_6(cr_11, s, $clinit_Boolean());
      activateCache && $putStringValue(textCache, s, cacheObj);
      return cacheObj.value_0;
    }
     catch ($e1) {
      $e1 = wrap($e1);
      if (instanceOf($e1, 9)) {
        return null;
      }
       else 
        throw unwrap($e1);
    }
  }
}

function TextCacheFacadeImpl(){
  $clinit_TextCacheFacadeImpl();
}

defineClass(427, 1, {}, TextCacheFacadeImpl);
_.get_0 = function get_57(s){
  return null;
}
;
_.get_1 = function get_58(s, obj){
  return null;
}
;
_.get_2 = function get_59(s, obj, flag){
  return $get_11(s);
}
;
_.get_3 = function get_60(s, flag){
  return $get_11(s);
}
;
_.put = function put_13(s, obj){
}
;
var cr_11, textCache;
var Lcom_sap_vmc_cache_impl_TextCacheFacadeImpl_2_classLit = createForClass('com.sap.vmc.cache.impl', 'TextCacheFacadeImpl', 427, Ljava_lang_Object_2_classLit);
function $clinit_CacheObject(){
  $clinit_CacheObject = emptyMethod;
  new HashMap;
}

function CacheObjectImpl(value_0){
  this.value_0 = value_0;
}

defineClass(266, 1, {95:1}, CacheObjectImpl);
var Lcom_sap_vmc_cache_spi_resource_CacheObjectImpl_2_classLit = createForClass('com.sap.vmc.cache.spi.resource', 'CacheObjectImpl', 266, Ljava_lang_Object_2_classLit);
function BaseExceptionInfo(){
  this.detailMessage = null;
  this.cause = null;
  $fillInStackTrace(this);
}

defineClass(542, 18, $intern_1, BaseExceptionInfo);
var Lcom_sap_vmc_exception_BaseExceptionInfo_2_classLit = createForClass('com.sap.vmc.exception', 'BaseExceptionInfo', 542, Ljava_lang_Throwable_2_classLit);
function $$init_1(this$static){
  this$static.current_area_HM = new HashMap;
}

function $getMessage(this$static, number){
  var message;
  message = dynamicCastToString($get_12(this$static.current_area_HM, valueOf(number)));
  return message;
}

function $getMessage_0(this$static, number){
  var i_0, message;
  message = dynamicCastToString($get_12(this$static.current_area_HM, valueOf(number)));
  for (i_0 = 1; i_0 < 10; i_0++) {
    if (message.indexOf('&' + i_0) != -1)
    ;
    else {
      break;
    }
  }
  return message;
}

function Message_0(){
  $$init_1(this);
}

function Message_1(hm){
  $$init_1(this);
  this.current_area_HM = hm;
}

defineClass(326, 1, {}, Message_0, Message_1);
var Lcom_sap_vmc_internationalization_Message_2_classLit = createForClass('com.sap.vmc.internationalization', 'Message', 326, Ljava_lang_Object_2_classLit);
function $clinit_MessageHashMap(){
  $clinit_MessageHashMap = emptyMethod;
  IPC_DB_HM = new HashMap;
  IPC_BASE_HM = new HashMap;
  IPC_PRC_PRI_HM = new HashMap;
  IPC_SAPCND_DET_HM = new HashMap;
  IPC_PRC_FGD_HM = new HashMap;
}

function fill_IPC_BASE_HM(){
  $clinit_MessageHashMap();
  $put_0(IPC_BASE_HM, valueOf(1), '');
  $put_0(IPC_BASE_HM, valueOf(1), '');
  $put_0(IPC_BASE_HM, valueOf(2), '');
  $put_0(IPC_BASE_HM, valueOf(3), '');
  $put_0(IPC_BASE_HM, valueOf(4), '');
  $put_0(IPC_BASE_HM, valueOf(5), '');
  $put_0(IPC_BASE_HM, valueOf(6), '');
  $put_0(IPC_BASE_HM, valueOf(7), '');
  $put_0(IPC_BASE_HM, valueOf(8), '');
  $put_0(IPC_BASE_HM, valueOf(9), '');
  $put_0(IPC_BASE_HM, valueOf(10), '');
  $put_0(IPC_BASE_HM, valueOf(11), '');
  $put_0(IPC_BASE_HM, valueOf(12), '');
  $put_0(IPC_BASE_HM, valueOf(15), '');
  $put_0(IPC_BASE_HM, valueOf(20), '');
  $put_0(IPC_BASE_HM, valueOf(25), '');
  $put_0(IPC_BASE_HM, valueOf(40), '');
  $put_0(IPC_BASE_HM, valueOf(100), '');
  $put_0(IPC_BASE_HM, valueOf(101), '');
  $put_0(IPC_BASE_HM, valueOf(102), '');
  $put_0(IPC_BASE_HM, valueOf(200), '');
  $put_0(IPC_BASE_HM, valueOf(201), '');
  $put_0(IPC_BASE_HM, valueOf(210), '');
  $put_0(IPC_BASE_HM, valueOf(211), '');
  $put_0(IPC_BASE_HM, valueOf(212), '');
}

function fill_IPC_PRC_PRI_HM(){
  $clinit_MessageHashMap();
  $put_0(IPC_PRC_PRI_HM, valueOf(0), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(1), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(2), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(4), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(5), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(6), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(7), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(14), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(18), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(34), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(100), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(101), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(102), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(103), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(104), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(105), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(106), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(107), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(108), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(109), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(110), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(111), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(112), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(113), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(114), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(115), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(116), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(117), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(118), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(119), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(120), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(121), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(122), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(123), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(124), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(125), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(126), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(127), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(128), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(129), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(130), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(132), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(133), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(134), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(135), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(136), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(137), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(138), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(139), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(140), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(141), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(142), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(143), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(144), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(145), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(146), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(147), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(148), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(149), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(151), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(152), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(155), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(158), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(160), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(161), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(162), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(163), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(164), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(170), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(171), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(172), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(173), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(180), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(181), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(182), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(190), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(191), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(192), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(193), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(194), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(195), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(196), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(197), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(200), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(201), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(203), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(204), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(205), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(206), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(207), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(208), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(209), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(211), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(213), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(214), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(226), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(227), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(230), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(231), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(250), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(300), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(301), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(305), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(310), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(315), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(400), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(401), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(402), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(403), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(450), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(451), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(452), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(500), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(501), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(502), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(503), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(504), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(505), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(506), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(507), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(508), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(509), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(510), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(511), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(512), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(513), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(514), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(515), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(516), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(517), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(518), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(519), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(520), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(521), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(522), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(523), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(524), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(525), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(526), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(527), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(528), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(529), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(530), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(531), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(532), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(533), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(534), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(535), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(536), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(537), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(538), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(539), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(540), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(541), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(542), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(551), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(552), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(600), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(601), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(602), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(603), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(604), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(605), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(606), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(607), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(608), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(650), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(700), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(701), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(703), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(704), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(708), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(709), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(710), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(711), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(712), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(713), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(714), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(750), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(777), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(778), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(801), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(802), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(807), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(810), '');
  $put_0(IPC_PRC_PRI_HM, valueOf(815), '');
}

function fill_IPC_SAPCND_DET_HM(){
  $clinit_MessageHashMap();
  $put_0(IPC_SAPCND_DET_HM, valueOf(0), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(1), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(2), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(3), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(4), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(5), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(6), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(7), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(8), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(9), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(10), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(11), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(12), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(13), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(14), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(15), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(16), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(17), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(18), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(19), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(20), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(21), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(22), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(23), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(24), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(25), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(26), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(27), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(28), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(29), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(30), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(37), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(40), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(41), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(100), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(101), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(102), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(103), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(104), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(105), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(106), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(107), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(108), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(109), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(110), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(111), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(112), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(113), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(114), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(115), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(115), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(116), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(117), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(118), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(119), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(120), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(121), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(122), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(123), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(124), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(125), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(126), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(127), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(128), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(129), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(150), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(200), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(201), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(202), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(203), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(204), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(205), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(300), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(301), '');
  $put_0(IPC_SAPCND_DET_HM, valueOf(305), '');
}

var IPC_BASE_HM, IPC_DB_HM, IPC_PRC_FGD_HM, IPC_PRC_PRI_HM, IPC_SAPCND_DET_HM;
function $getMessage_1(this$static, msgNum, variables){
  var i_0, message, mm, regex, replacement;
  mm = new Message_0;
  message = dynamicCastToString($get_12(this$static.current_area_HM, valueOf(msgNum)));
  for (i_0 = 1; i_0 < 10; i_0++) {
    if (message.indexOf('&' + i_0) != -1) {
      regex = $replaceAll('&' + i_0, '([/\\\\\\.\\*\\+\\?\\|\\(\\)\\[\\]\\{\\}$^])', '\\\\$1');
      replacement = $replaceAll($replaceAll(variables[i_0 - 1], '\\\\', '\\\\\\\\'), '\\$', '\\\\$');
      $replaceAll(message, regex, replacement);
    }
     else {
      break;
    }
  }
  mm.final_message = message;
  return mm;
}

function $getMessageResource(this$static){
  var mm;
  mm = new Message_1(this$static.current_area_HM);
  return mm;
}

function MessageResourceManager(){
  this.current_area_HM = new HashMap;
}

defineClass(530, 1, {}, MessageResourceManager);
var Lcom_sap_vmc_internationalization_MessageResourceManager_2_classLit = createForClass('com.sap.vmc.internationalization', 'MessageResourceManager', 530, Ljava_lang_Object_2_classLit);
function $getMessageResourceManager(area){
  var mrm;
  mrm = new MessageResourceManager;
  if ($equals_7(area, 'IPC_DB')) {
    if (($clinit_MessageHashMap() , IPC_DB_HM).size_0 == 0) {
      $put_0(IPC_DB_HM, valueOf(0), '');
      $put_0(IPC_DB_HM, valueOf(1), '');
      $put_0(IPC_DB_HM, valueOf(2), '');
      mrm.current_area_HM = IPC_DB_HM;
    }
     else {
      mrm.current_area_HM = IPC_DB_HM;
    }
  }
  if ($equals_7(area, 'IPC_BASE')) {
    if (($clinit_MessageHashMap() , IPC_BASE_HM).size_0 == 0) {
      fill_IPC_BASE_HM();
      mrm.current_area_HM = IPC_BASE_HM;
    }
     else {
      mrm.current_area_HM = IPC_BASE_HM;
    }
  }
  if ($equals_7(area, 'PRC_PRI')) {
    if (($clinit_MessageHashMap() , IPC_PRC_PRI_HM).size_0 == 0) {
      fill_IPC_PRC_PRI_HM();
      mrm.current_area_HM = IPC_PRC_PRI_HM;
    }
     else {
      mrm.current_area_HM = IPC_PRC_PRI_HM;
    }
  }
  if ($equals_7(area, '/SAPCND/DET')) {
    if (($clinit_MessageHashMap() , IPC_SAPCND_DET_HM).size_0 == 0) {
      fill_IPC_SAPCND_DET_HM();
      mrm.current_area_HM = IPC_SAPCND_DET_HM;
    }
     else {
      mrm.current_area_HM = IPC_SAPCND_DET_HM;
    }
  }
  if ($equals_7(area, 'PRC_FGD')) {
    if (($clinit_MessageHashMap() , IPC_PRC_FGD_HM).size_0 == 0) {
      $put_0(IPC_PRC_FGD_HM, valueOf(0), '');
      $put_0(IPC_PRC_FGD_HM, valueOf(1), '');
      $put_0(IPC_PRC_FGD_HM, valueOf(2), '');
      $put_0(IPC_PRC_FGD_HM, valueOf(3), '');
      $put_0(IPC_PRC_FGD_HM, valueOf(4), '');
      $put_0(IPC_PRC_FGD_HM, valueOf(5), '');
      $put_0(IPC_PRC_FGD_HM, valueOf(6), '');
      $put_0(IPC_PRC_FGD_HM, valueOf(7), '');
      mrm.current_area_HM = IPC_PRC_FGD_HM;
    }
     else {
      mrm.current_area_HM = IPC_PRC_FGD_HM;
    }
  }
  return mrm;
}

function ResourceManagerFactory(){
}

defineClass(147, 1, {}, ResourceManagerFactory);
var instance_1 = null;
var Lcom_sap_vmc_internationalization_ResourceManagerFactory_2_classLit = createForClass('com.sap.vmc.internationalization', 'ResourceManagerFactory', 147, Ljava_lang_Object_2_classLit);
function set_1(a0, a1, a2, a3){
  return set_2(new Integer(a0), new Integer(a1), a2, new Long(a3));
}

function set_2(a1, a2, a3, a4){
  var args, oa, ai;
  args = (ai = new NullImplementation$ArgsImpl , ai.objectArray = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 10, 3, 1) , ai);
  oa = args.objectArray;
  setCheck(oa, 0, a1);
  setCheck(oa, 1, a2);
  setCheck(oa, 2, a3);
  setCheck(oa, 3, a4);
  return args;
}

defineClass(677, 1, {});
var Lcom_sap_vmc_logging_Args_2_classLit = createForClass('com.sap.vmc.logging', 'Args', 677, Ljava_lang_Object_2_classLit);
defineClass(673, 1, $intern_21);
var Lcom_sap_vmc_logging_LogController_2_classLit = createForClass('com.sap.vmc.logging', 'LogController', 673, Ljava_lang_Object_2_classLit);
function $clinit_Category(){
  $clinit_Category = emptyMethod;
  try {
    rootCategory = new NullImplementation$CategoryImpl;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      rootCategory = new NullImplementation$CategoryImpl;
    }
     else 
      throw unwrap($e0);
  }
}

function correctName(name_0){
  var c, i_0, length_0, sb, separatorAllowed;
  if (name_0 == null) {
    return null;
  }
  name_0 = $trim(name_0);
  if (!$equals_7(name_0.substr(0, 1), '/')) {
    return null;
  }
  if (name_0.indexOf('//') >= 0 || $endsWith(name_0, '/')) {
    sb = new StringBuffer_0(name_0.length);
    separatorAllowed = true;
    length_0 = name_0.length;
    for (i_0 = 0; i_0 < length_0; i_0++) {
      c = name_0.charCodeAt(i_0);
      if (c == 47) {
        if (separatorAllowed) {
          sb.string += '/';
          separatorAllowed = false;
        }
      }
       else {
        sb.string += charToString(c);
        separatorAllowed = true;
      }
    }
    !separatorAllowed && sb.string.length > 1 && $deleteCharAt(sb, sb.string.length - 1);
    name_0 = sb.string;
  }
  return name_0;
}

defineClass(676, 673, $intern_21);
var rootCategory;
var Lcom_sap_vmc_logging_Category_2_classLit = createForClass('com.sap.vmc.logging', 'Category', 676, Lcom_sap_vmc_logging_LogController_2_classLit);
function LocalizableCategory(){
  return;
}

function getCategory(subCategoryName){
  $clinit_Category();
  $getSubCategory($getSubCategory(rootCategory, '/Applications'), subCategoryName);
  return new LocalizableCategory;
}

defineClass(516, 1, {}, LocalizableCategory);
var Lcom_sap_vmc_logging_LocalizableCategory_2_classLit = createForClass('com.sap.vmc.logging', 'LocalizableCategory', 516, Ljava_lang_Object_2_classLit);
function $clinit_Location(){
  $clinit_Location = emptyMethod;
  try {
    rootLocation = new NullImplementation$LocationImpl;
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, 9)) {
      rootLocation = new NullImplementation$LocationImpl;
    }
     else 
      throw unwrap($e0);
  }
}

function correctName_0(name_0){
  var c, i_0, length_0, sb, separatorAllowed;
  if (name_0 == null) {
    return null;
  }
  name_0 = $trim(name_0);
  if ($equals_7(name_0.substr(0, 1), '/')) {
    return null;
  }
  if (name_0.indexOf('..') >= 0 || $endsWith(name_0, '.')) {
    sb = new StringBuffer_0(name_0.length);
    separatorAllowed = false;
    length_0 = name_0.length;
    for (i_0 = 0; i_0 < length_0; i_0++) {
      c = name_0.charCodeAt(i_0);
      if (c == 46) {
        if (separatorAllowed) {
          sb.string += '.';
          separatorAllowed = false;
        }
      }
       else {
        sb.string += charToString(c);
        separatorAllowed = true;
      }
    }
    !separatorAllowed && sb.string.length > 0 && $deleteCharAt(sb, sb.string.length - 1);
    name_0 = sb.string;
  }
  return name_0;
}

function debugT(){
  $clinit_Location();
}

function getLocation(clazz){
  $clinit_Location();
  if (clazz) {
    subLocation = $getSubLocation(rootLocation, ($ensureNamesAreInitialized(clazz) , clazz.typeName));
    return subLocation;
  }
   else {
    throw new NullPointerException_0('clazz');
  }
}

function logT(){
  $clinit_Location();
}

function logT_0(){
  $clinit_Location();
}

defineClass(674, 673, $intern_21);
var rootLocation, subLocation;
var Lcom_sap_vmc_logging_Location_2_classLit = createForClass('com.sap.vmc.logging', 'Location', 674, Lcom_sap_vmc_logging_LogController_2_classLit);
function NullImplementation$ArgsImpl(){
}

defineClass(477, 677, {}, NullImplementation$ArgsImpl);
var Lcom_sap_vmc_logging_NullImplementation$ArgsImpl_2_classLit = createForClass('com.sap.vmc.logging', 'NullImplementation/ArgsImpl', 477, Lcom_sap_vmc_logging_Args_2_classLit);
function $getSubCategory(this$static, name_0){
  var subCatName;
  if (this$static == rootCategory) {
    if ($equals_7(name_0.substr(0, 1), '/')) {
      subCatName = name_0;
    }
     else {
      throw new IllegalArgumentException_0('name');
    }
  }
   else {
    subCatName = this$static.name_0 + '/' + name_0;
  }
  subCatName = correctName(subCatName);
  if (subCatName == null) {
    throw new IllegalArgumentException_0('name');
  }
   else {
    return new NullImplementation$CategoryImpl_0(subCatName);
  }
}

function NullImplementation$CategoryImpl(){
  NullImplementation$CategoryImpl_0.call(this, '/');
}

function NullImplementation$CategoryImpl_0(name_0){
  this.name_0 = name_0 != null?name_0:'/';
}

defineClass(192, 676, $intern_21, NullImplementation$CategoryImpl, NullImplementation$CategoryImpl_0);
var Lcom_sap_vmc_logging_NullImplementation$CategoryImpl_2_classLit = createForClass('com.sap.vmc.logging', 'NullImplementation/CategoryImpl', 192, Lcom_sap_vmc_logging_Category_2_classLit);
function $getSubLocation(this$static, name_0){
  var subLocName;
  this$static == rootLocation?(subLocName = name_0):(subLocName = this$static.name_0 + '.' + name_0);
  subLocName = correctName_0(subLocName);
  if (subLocName == null) {
    throw new IllegalArgumentException_0('name');
  }
   else {
    return new NullImplementation$LocationImpl_0(subLocName);
  }
}

function NullImplementation$LocationImpl(){
  NullImplementation$LocationImpl_0.call(this, '');
}

function NullImplementation$LocationImpl_0(name_0){
  this.name_0 = name_0 != null?name_0:'';
}

defineClass(193, 674, $intern_21, NullImplementation$LocationImpl, NullImplementation$LocationImpl_0);
var Lcom_sap_vmc_logging_NullImplementation$LocationImpl_2_classLit = createForClass('com.sap.vmc.logging', 'NullImplementation/LocationImpl', 193, Lcom_sap_vmc_logging_Location_2_classLit);
function MonitorImpl(){
}

defineClass(109, 1, {}, MonitorImpl);
var Lcom_sap_vmc_monitor_jarm_MonitorImpl_2_classLit = createForClass('com.sap.vmc.monitor.jarm', 'MonitorImpl', 109, Ljava_lang_Object_2_classLit);
function HamaraLocalSettings(){
}

defineClass(569, 1, {}, HamaraLocalSettings);
var Lcom_sap_vmc_runtime_HamaraLocalSettings_2_classLit = createForClass('com.sap.vmc.runtime', 'HamaraLocalSettings', 569, Ljava_lang_Object_2_classLit);
function $getLocaleSettings(this$static){
  !this$static.localSettings && (this$static.localSettings = new HamaraLocalSettings);
  return this$static.localSettings;
}

function HamaraLogon(){
}

defineClass(560, 1, {}, HamaraLogon);
_.localSettings = null;
var Lcom_sap_vmc_runtime_HamaraLogon_2_classLit = createForClass('com.sap.vmc.runtime', 'HamaraLogon', 560, Ljava_lang_Object_2_classLit);
function $getUserInfo(this$static){
  !this$static.logon && (this$static.logon = new HamaraLogon);
  return this$static.logon;
}

function RuntimeInformation(){
}

defineClass(43, 1, {}, RuntimeInformation);
_.logon = null;
var instance_2 = null;
var Lcom_sap_vmc_runtime_RuntimeInformation_2_classLit = createForClass('com.sap.vmc.runtime', 'RuntimeInformation', 43, Ljava_lang_Object_2_classLit);
function $format_1(this$static, dt){
  return $format(this$static.dateTimeFormat, dt, null);
}

function DateFormat(){
  !this.dateTimeFormat && (this.dateTimeFormat = getFormat(($clinit_DateTimeFormat$PredefinedFormat() , DATE_TIME_MEDIUM)));
}

function DateFormat_0(){
  this.dateTimeFormat = getFormat(($clinit_DateTimeFormat$PredefinedFormat() , DATE_TIME_LONG));
}

defineClass(325, 1, {}, DateFormat, DateFormat_0);
var Lcom_sap_vmc_runtime_info_DateFormat_2_classLit = createForClass('com.sap.vmc.runtime.info', 'DateFormat', 325, Ljava_lang_Object_2_classLit);
function $append0(this$static, x_0, start_0, end){
  x_0 == null && (x_0 = 'null');
  this$static.string += x_0.substr(start_0, end - start_0);
}

function $charAt(this$static, index_0){
  return $charAt_0(this$static.string, index_0);
}

function $replace0(this$static, start_0, end, toInsert){
  this$static.string = $substring_0(this$static.string, 0, start_0) + toInsert + $substring(this$static.string, end);
}

function $setCharAt(this$static, index_0, x_0){
  $replace0(this$static, index_0, index_0 + 1, valueOf_0(x_0));
}

function AbstractStringBuilder(string){
  this.string = string;
}

defineClass(136, 1, {});
_.toString$ = function toString_24(){
  return this.string;
}
;
var Ljava_lang_AbstractStringBuilder_2_classLit = createForClass('java.lang', 'AbstractStringBuilder', 136, Ljava_lang_Object_2_classLit);
function ArithmeticException(explanation){
  RuntimeException_0.call(this, explanation);
}

defineClass(96, 20, $intern_2, ArithmeticException);
var Ljava_lang_ArithmeticException_2_classLit = createForClass('java.lang', 'ArithmeticException', 96, Ljava_lang_RuntimeException_2_classLit);
function IndexOutOfBoundsException(){
  RuntimeException.call(this);
}

function IndexOutOfBoundsException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(82, 20, $intern_33, IndexOutOfBoundsException, IndexOutOfBoundsException_0);
var Ljava_lang_IndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'IndexOutOfBoundsException', 82, Ljava_lang_RuntimeException_2_classLit);
function ArrayIndexOutOfBoundsException(){
  IndexOutOfBoundsException.call(this);
}

defineClass(201, 82, {3:1, 201:1, 9:1, 82:1, 20:1, 18:1}, ArrayIndexOutOfBoundsException);
var Ljava_lang_ArrayIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'ArrayIndexOutOfBoundsException', 201, Ljava_lang_IndexOutOfBoundsException_2_classLit);
function ArrayStoreException(){
  RuntimeException.call(this);
}

function ArrayStoreException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(161, 20, $intern_2, ArrayStoreException, ArrayStoreException_0);
var Ljava_lang_ArrayStoreException_2_classLit = createForClass('java.lang', 'ArrayStoreException', 161, Ljava_lang_RuntimeException_2_classLit);
function $clinit_Boolean(){
  $clinit_Boolean = emptyMethod;
  FALSE = new Boolean_0(false);
  TRUE = new Boolean_0(true);
}

function $compareTo_2(this$static, b){
  return compare_30(this$static.value_0, b.value_0);
}

function $equals_6(this$static, o){
  return instanceOf(o, 67) && dynamicCast(o, 67).value_0 == this$static.value_0;
}

function Boolean_0(value_0){
  $clinit_Boolean();
  this.value_0 = value_0;
}

function compare_30(x_0, y_0){
  return x_0 == y_0?0:x_0?1:-1;
}

defineClass(67, 1, {3:1, 67:1, 50:1}, Boolean_0);
_.compareTo = function compareTo_2(b){
  return $compareTo_2(this, dynamicCast(b, 67));
}
;
_.equals$ = function equals_23(o){
  return $equals_6(this, o);
}
;
_.hashCode$ = function hashCode_24(){
  return this.value_0?1231:1237;
}
;
_.toString$ = function toString_25(){
  return '' + this.value_0;
}
;
_.value_0 = false;
var FALSE, TRUE;
var Ljava_lang_Boolean_2_classLit = createForClass('java.lang', 'Boolean', 67, Ljava_lang_Object_2_classLit);
function $compareTo_3(this$static, c){
  return this$static.value_0 - c.value_0;
}

function Character(value_0){
  this.value_0 = value_0;
}

function digit_0(c){
  if (c >= 48 && c < 58) {
    return c - 48;
  }
  if (c >= 97 && c < 97) {
    return c - 97 + 10;
  }
  if (c >= 65 && c < 65) {
    return c - 65 + 10;
  }
  return -1;
}

function isSpace(c){
  switch (c) {
    case 10:
    case 9:
    case 12:
    case 13:
    case 32:
      return true;
    default:return false;
  }
}

function toUpperCase(c){
  return String.fromCharCode(c).toUpperCase().charCodeAt(0);
}

defineClass(135, 1, {3:1, 135:1, 50:1}, Character);
_.compareTo = function compareTo_3(c){
  return $compareTo_3(this, dynamicCast(c, 135));
}
;
_.equals$ = function equals_24(o){
  return instanceOf(o, 135) && dynamicCast(o, 135).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_25(){
  return this.value_0;
}
;
_.toString$ = function toString_26(){
  return valueOf_0(this.value_0);
}
;
_.value_0 = 0;
var Ljava_lang_Character_2_classLit = createForClass('java.lang', 'Character', 135, Ljava_lang_Object_2_classLit);
function ClassCastException(){
  RuntimeException.call(this);
}

function ClassCastException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(101, 20, $intern_2, ClassCastException, ClassCastException_0);
var Ljava_lang_ClassCastException_2_classLit = createForClass('java.lang', 'ClassCastException', 101, Ljava_lang_RuntimeException_2_classLit);
function __parseAndValidateDouble(s){
  var floatRegex;
  if (!(floatRegex = floatRegex_0 , !floatRegex && (floatRegex = floatRegex_0 = /^\s*[+-]?(NaN|Infinity|((\d+\.?\d*)|(\.\d+))([eE][+-]?\d+)?[dDfF]?)\s*$/) , floatRegex.test(s))) {
    throw new NumberFormatException('For input string: "' + s + '"');
  }
  return parseFloat(s);
}

function __parseAndValidateInt(s){
  var i_0, isTooLow, length_0, startIndex, toReturn;
  if (s == null) {
    throw new NumberFormatException('null');
  }
  length_0 = s.length;
  startIndex = length_0 > 0 && (s.charCodeAt(0) == 45 || s.charCodeAt(0) == 43)?1:0;
  for (i_0 = startIndex; i_0 < length_0; i_0++) {
    if (digit_0(s.charCodeAt(i_0)) == -1) {
      throw new NumberFormatException('For input string: "' + s + '"');
    }
  }
  toReturn = parseInt(s, 10);
  isTooLow = toReturn < $intern_34;
  if (isNaN(toReturn)) {
    throw new NumberFormatException('For input string: "' + s + '"');
  }
   else if (isTooLow || toReturn > $intern_0) {
    throw new NumberFormatException('For input string: "' + s + '"');
  }
  return toReturn;
}

defineClass(134, 1, {3:1, 134:1});
var floatRegex_0;
var Ljava_lang_Number_2_classLit = createForClass('java.lang', 'Number', 134, Ljava_lang_Object_2_classLit);
function $compareTo_4(this$static, b){
  return compare_31(this$static.value_0, b.value_0);
}

function Double(value_0){
  this.value_0 = value_0;
}

function compare_31(x_0, y_0){
  if (x_0 < y_0) {
    return -1;
  }
  if (x_0 > y_0) {
    return 1;
  }
  if (x_0 == y_0) {
    return 0;
  }
  return isNaN(x_0)?isNaN(y_0)?0:1:-1;
}

function isInfinite(x_0){
  return !isFinite(x_0) && !isNaN(x_0);
}

function isNaN_0(x_0){
  return isNaN(x_0);
}

defineClass(116, 134, {3:1, 50:1, 116:1, 134:1}, Double);
_.compareTo = function compareTo_4(b){
  return $compareTo_4(this, dynamicCast(b, 116));
}
;
_.equals$ = function equals_25(o){
  return instanceOf(o, 116) && dynamicCast(o, 116).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_26(){
  return round_int(this.value_0);
}
;
_.toString$ = function toString_28(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
var Ljava_lang_Double_2_classLit = createForClass('java.lang', 'Double', 116, Ljava_lang_Number_2_classLit);
function IllegalStateException(){
  RuntimeException.call(this);
}

function IllegalStateException_0(s){
  RuntimeException_0.call(this, s);
}

defineClass(311, 20, $intern_2, IllegalStateException, IllegalStateException_0);
var Ljava_lang_IllegalStateException_2_classLit = createForClass('java.lang', 'IllegalStateException', 311, Ljava_lang_RuntimeException_2_classLit);
function $compareTo_5(this$static, b){
  return compare_32(this$static.value_0, b.value_0);
}

function Integer(value_0){
  this.value_0 = value_0;
}

function Integer_0(s){
  this.value_0 = __parseAndValidateInt(s);
}

function compare_32(x_0, y_0){
  return x_0 < y_0?-1:x_0 > y_0?1:0;
}

function numberOfLeadingZeros_0(i_0){
  var m, n, y_0;
  if (i_0 < 0) {
    return 0;
  }
   else if (i_0 == 0) {
    return 32;
  }
   else {
    y_0 = -(i_0 >> 16);
    m = y_0 >> 16 & 16;
    n = 16 - m;
    i_0 = i_0 >> m;
    y_0 = i_0 - 256;
    m = y_0 >> 16 & 8;
    n += m;
    i_0 <<= m;
    y_0 = i_0 - 4096;
    m = y_0 >> 16 & 4;
    n += m;
    i_0 <<= m;
    y_0 = i_0 - 16384;
    m = y_0 >> 16 & 2;
    n += m;
    i_0 <<= m;
    y_0 = i_0 >> 14;
    m = y_0 & ~(y_0 >> 1);
    return n + 2 - m;
  }
}

function numberOfTrailingZeros(i_0){
  var r, rtn;
  if (i_0 == 0) {
    return 32;
  }
   else {
    rtn = 0;
    for (r = 1; (r & i_0) == 0; r <<= 1) {
      ++rtn;
    }
    return rtn;
  }
}

function toUnsignedRadixString(value_0, radix){
  return (value_0 >>> 0).toString(radix);
}

function valueOf(i_0){
  var rebase, result;
  if (i_0 > -129 && i_0 < 128) {
    rebase = i_0 + 128;
    result = ($clinit_Integer$BoxedValues() , boxedValues_0)[rebase];
    !result && (result = boxedValues_0[rebase] = new Integer(i_0));
    return result;
  }
  return new Integer(i_0);
}

defineClass(16, 134, {3:1, 50:1, 16:1, 134:1}, Integer, Integer_0);
_.compareTo = function compareTo_5(b){
  return $compareTo_5(this, dynamicCast(b, 16));
}
;
_.equals$ = function equals_26(o){
  return instanceOf(o, 16) && dynamicCast(o, 16).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_27(){
  return this.value_0;
}
;
_.toString$ = function toString_29(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
var Ljava_lang_Integer_2_classLit = createForClass('java.lang', 'Integer', 16, Ljava_lang_Number_2_classLit);
function $clinit_Integer$BoxedValues(){
  $clinit_Integer$BoxedValues = emptyMethod;
  boxedValues_0 = initDim(Ljava_lang_Integer_2_classLit, $intern_7, 16, 256, 0, 1);
}

var boxedValues_0;
function $compareTo_6(this$static, b){
  return compare_33(this$static.value_0, b.value_0);
}

function Long(value_0){
  this.value_0 = value_0;
}

function compare_33(x_0, y_0){
  return lt(x_0, y_0)?-1:gt(x_0, y_0)?1:0;
}

defineClass(72, 134, {3:1, 50:1, 72:1, 134:1}, Long);
_.compareTo = function compareTo_6(b){
  return $compareTo_6(this, dynamicCast(b, 72));
}
;
_.equals$ = function equals_27(o){
  return instanceOf(o, 72) && eq(dynamicCast(o, 72).value_0, this.value_0);
}
;
_.hashCode$ = function hashCode_28(){
  return toInt(this.value_0);
}
;
_.toString$ = function toString_30(){
  return '' + toString_3(this.value_0);
}
;
_.value_0 = {l:0, m:0, h:0};
var Ljava_lang_Long_2_classLit = createForClass('java.lang', 'Long', 72, Ljava_lang_Number_2_classLit);
function abs_0(x_0){
  return x_0 < 0?-x_0:x_0;
}

function ceil_0(x_0){
  return Math.ceil(x_0);
}

function exp_1(x_0){
  return Math.exp(x_0);
}

function floor_0(x_0){
  return Math.floor(x_0);
}

function log_0(x_0){
  return Math.log(x_0);
}

function max_0(x_0, y_0){
  return x_0 > y_0?x_0:y_0;
}

function min_0(x_0){
  return x_0 < 5?x_0:5;
}

function NullPointerException(){
  RuntimeException.call(this);
}

function NullPointerException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(214, 20, $intern_2, NullPointerException, NullPointerException_0);
var Ljava_lang_NullPointerException_2_classLit = createForClass('java.lang', 'NullPointerException', 214, Ljava_lang_RuntimeException_2_classLit);
function NumberFormatException(message){
  IllegalArgumentException_0.call(this, message);
}

defineClass(70, 39, {3:1, 9:1, 39:1, 70:1, 20:1, 18:1}, NumberFormatException);
var Ljava_lang_NumberFormatException_2_classLit = createForClass('java.lang', 'NumberFormatException', 70, Ljava_lang_IllegalArgumentException_2_classLit);
function StackTraceElement(methodName, fileName, lineNumber){
  this.className = 'Unknown';
  this.methodName = methodName;
  this.fileName = fileName;
  this.lineNumber = lineNumber;
}

defineClass(102, 1, {3:1, 102:1}, StackTraceElement);
_.equals$ = function equals_28(other){
  var st;
  if (instanceOf(other, 102)) {
    st = dynamicCast(other, 102);
    return this.lineNumber == st.lineNumber && equals_41(this.methodName, st.methodName) && equals_41(this.className, st.className) && equals_41(this.fileName, st.fileName);
  }
  return false;
}
;
_.hashCode$ = function hashCode_29(){
  return hashCode_37(initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_15, 1, 3, [valueOf(this.lineNumber), this.className, this.methodName, this.fileName]));
}
;
_.toString$ = function toString_31(){
  return this.className + '.' + this.methodName + '(' + (this.fileName != null?this.fileName:'Unknown Source') + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';
}
;
_.lineNumber = 0;
var Ljava_lang_StackTraceElement_2_classLit = createForClass('java.lang', 'StackTraceElement', 102, Ljava_lang_Object_2_classLit);
function $charAt_0(this$static, index_0){
  return this$static.charCodeAt(index_0);
}

function $endsWith(this$static, suffix){
  var suffixlength;
  suffixlength = suffix.length;
  return $equals_7(__substr(this$static, this$static.length - suffixlength, suffixlength), suffix);
}

function $equals_7(this$static, other){
  return this$static === other;
}

function $equalsIgnoreCase(this$static, other){
  if (other == null) {
    return false;
  }
  if (this$static == other) {
    return true;
  }
  return this$static.length == other.length && this$static.toLowerCase() == other.toLowerCase();
}

function $getChars(this$static, srcEnd, dst, dstBegin){
  var srcIdx;
  for (srcIdx = 0; srcIdx < srcEnd; ++srcIdx) {
    dst[dstBegin++] = this$static.charCodeAt(srcIdx);
  }
}

function $indexOf(this$static, str){
  return this$static.indexOf(str);
}

function $indexOf_0(this$static, str, startIndex){
  return this$static.indexOf(str, startIndex);
}

function $lastIndexOf(this$static, str){
  return this$static.lastIndexOf(str);
}

function $lastIndexOf_0(this$static, str, start_0){
  return this$static.lastIndexOf(str, start_0);
}

function $replace(this$static, from, to){
  var hex = toUnsignedRadixString(from, 16);
  var regex = '\\u' + '0000'.substring(hex.length) + hex;
  return this$static.replace(RegExp(regex, 'g'), String.fromCharCode(to));
}

function $replaceAll(this$static, regex, replace){
  replace = __translateReplaceString(replace);
  return this$static.replace(RegExp(regex, 'g'), replace);
}

function $split(this$static, regex, maxMatch){
  var compiled = new RegExp(regex, 'g');
  var out = [];
  var count = 0;
  var trail = this$static;
  var lastTrail = null;
  while (true) {
    var matchObj = compiled.exec(trail);
    if (matchObj == null || trail == '' || count == maxMatch - 1 && maxMatch > 0) {
      out[count] = trail;
      break;
    }
     else {
      out[count] = trail.substring(0, matchObj.index);
      trail = trail.substring(matchObj.index + matchObj[0].length, trail.length);
      compiled.lastIndex = 0;
      if (lastTrail == trail) {
        out[count] = trail.substring(0, 1);
        trail = trail.substring(1);
      }
      lastTrail = trail;
      count++;
    }
  }
  if (maxMatch == 0 && this$static.length > 0) {
    var lastNonEmpty = out.length;
    while (lastNonEmpty > 0 && out[lastNonEmpty - 1] == '') {
      --lastNonEmpty;
    }
    lastNonEmpty < out.length && out.splice(lastNonEmpty, out.length - lastNonEmpty);
  }
  var jr = __createArray(out.length);
  for (var i_0 = 0; i_0 < out.length; ++i_0) {
    jr[i_0] = out[i_0];
  }
  return jr;
}

function $substring(this$static, beginIndex){
  return __substr(this$static, beginIndex, this$static.length - beginIndex);
}

function $substring_0(this$static, beginIndex, endIndex){
  return this$static.substr(beginIndex, endIndex - beginIndex);
}

function $toCharArray(this$static){
  var charArr, n;
  n = this$static.length;
  charArr = initDim(C_classLit, $intern_4, 0, n, 7, 1);
  $getChars(this$static, n, charArr, 0);
  return charArr;
}

function $trim(this$static){
  if (this$static.length == 0 || this$static[0] > ' ' && this$static[this$static.length - 1] > ' ') {
    return this$static;
  }
  return this$static.replace(/^[\u0000-\u0020]*|[\u0000-\u0020]*$/g, '');
}

function _String(value_0){
  return __valueOf(value_0, 0, value_0.length);
}

function __checkBounds(legalCount, start_0, end){
  if (start_0 < 0) {
    throw new StringIndexOutOfBoundsException(start_0);
  }
  if (end < start_0) {
    throw new StringIndexOutOfBoundsException(end - start_0);
  }
  if (end > legalCount) {
    throw new StringIndexOutOfBoundsException(end);
  }
}

function __createArray(numElements){
  return initDim(Ljava_lang_String_2_classLit, $intern_6, 2, numElements, 4, 1);
}

function __substr(str, beginIndex, len){
  return str.substr(beginIndex, len);
}

function __translateReplaceString(replaceStr){
  var pos;
  pos = 0;
  while (0 <= (pos = replaceStr.indexOf('\\', pos))) {
    replaceStr.charCodeAt(pos + 1) == 36?(replaceStr = replaceStr.substr(0, pos) + '$' + $substring(replaceStr, ++pos)):(replaceStr = replaceStr.substr(0, pos) + $substring(replaceStr, ++pos));
  }
  return replaceStr;
}

function __valueOf(x_0, start_0, end){
  var s = '';
  for (var batchStart = start_0; batchStart < end;) {
    var batchEnd = Math.min(batchStart + $intern_8, end);
    s += String.fromCharCode.apply(null, x_0.slice(batchStart, batchEnd));
    batchStart = batchEnd;
  }
  return s;
}

function compareTo_7(thisStr, otherStr){
  if (thisStr == otherStr) {
    return 0;
  }
  return thisStr < otherStr?-1:1;
}

function compareTo_Ljava_lang_Object__I__devirtual$(this$static, other){
  return isJavaString(this$static)?compareTo_7(this$static, dynamicCastToString(other)):this$static.compareTo(other);
}

function fromCodePoint(codePoint){
  var hiSurrogate, loSurrogate;
  if (codePoint >= 65536) {
    hiSurrogate = 55296 + (codePoint - 65536 >> 10 & 1023) & $intern_5;
    loSurrogate = 56320 + (codePoint - 65536 & 1023) & $intern_5;
    return valueOf_0(hiSurrogate) + valueOf_0(loSurrogate);
  }
   else {
    return String.fromCharCode(codePoint & $intern_5);
  }
}

function valueOf_0(x_0){
  return String.fromCharCode(x_0);
}

function valueOf_1(x_0){
  return __valueOf(x_0, 0, x_0.length);
}

function valueOf_2(x_0, offset, count){
  var end;
  end = offset + count;
  __checkBounds(x_0.length, offset, end);
  return __valueOf(x_0, offset, end);
}

var Ljava_lang_String_2_classLit = createForClass('java.lang', 'String', 2, Ljava_lang_Object_2_classLit);
function $clinit_String$HashCache(){
  $clinit_String$HashCache = emptyMethod;
  back_0 = {};
  front = {};
}

function compute(str){
  var hashCode, i_0, n, nBatch;
  hashCode = 0;
  n = str.length;
  nBatch = n - 4;
  i_0 = 0;
  while (i_0 < nBatch) {
    hashCode = str.charCodeAt(i_0 + 3) + 31 * (str.charCodeAt(i_0 + 2) + 31 * (str.charCodeAt(i_0 + 1) + 31 * (str.charCodeAt(i_0) + 31 * hashCode)));
    hashCode = ~~hashCode;
    i_0 += 4;
  }
  while (i_0 < n) {
    hashCode = hashCode * 31 + $charAt_0(str, i_0++);
  }
  hashCode = ~~hashCode;
  return hashCode;
}

function getHashCode_0(str){
  $clinit_String$HashCache();
  var key = ':' + str;
  var result = front[key];
  if (result != null) {
    return result;
  }
  result = back_0[key];
  result == null && (result = compute(str));
  increment_0();
  return front[key] = result;
}

function increment_0(){
  if (count_0 == 256) {
    back_0 = front;
    front = {};
    count_0 = 0;
  }
  ++count_0;
}

var back_0, count_0 = 0, front;
function $append(this$static, x_0){
  this$static.string += charToString(x_0);
  return this$static;
}

function $append_0(this$static, x_0){
  this$static.string += x_0;
  return this$static;
}

function $append_1(this$static, x_0){
  this$static.string += x_0;
  return this$static;
}

function $append_2(this$static, x_0, len){
  this$static.string += valueOf_2(x_0, 0, len);
  return this$static;
}

function $deleteCharAt(this$static, start_0){
  this$static.string = $substring_0(this$static.string, 0, start_0) + '' + $substring(this$static.string, start_0 + 1);
  return this$static;
}

function StringBuffer(){
  AbstractStringBuilder.call(this, '');
}

function StringBuffer_0(){
  AbstractStringBuilder.call(this, '');
}

function StringBuffer_1(s){
  AbstractStringBuilder.call(this, s);
}

defineClass(23, 136, {614:1}, StringBuffer, StringBuffer_0, StringBuffer_1);
var Ljava_lang_StringBuffer_2_classLit = createForClass('java.lang', 'StringBuffer', 23, Ljava_lang_AbstractStringBuilder_2_classLit);
function $append_3(this$static, x_0){
  this$static.string += charToString(x_0);
  return this$static;
}

function $append_4(this$static, x_0){
  this$static.string += x_0;
  return this$static;
}

function $append_5(this$static, x_0){
  this$static.string += __valueOf(x_0, 0, x_0.length);
  return this$static;
}

function $append_6(this$static, x_0, len){
  this$static.string += valueOf_2(x_0, 0, len);
  return this$static;
}

function $delete_0(this$static, start_0, end){
  this$static.string = $substring_0(this$static.string, 0, start_0) + '' + $substring(this$static.string, end);
  return this$static;
}

function $insert(this$static, index_0, x_0){
  this$static.string = $substring_0(this$static.string, 0, index_0) + x_0 + $substring(this$static.string, index_0);
  return this$static;
}

function StringBuilder(){
  AbstractStringBuilder.call(this, '');
}

function StringBuilder_0(){
  AbstractStringBuilder.call(this, '');
}

function StringBuilder_1(s){
  AbstractStringBuilder.call(this, s);
}

defineClass(58, 136, {614:1}, StringBuilder, StringBuilder_0, StringBuilder_1);
var Ljava_lang_StringBuilder_2_classLit = createForClass('java.lang', 'StringBuilder', 58, Ljava_lang_AbstractStringBuilder_2_classLit);
function StringIndexOutOfBoundsException(index_0){
  IndexOutOfBoundsException_0.call(this, 'String index out of range: ' + index_0);
}

defineClass(262, 82, $intern_33, StringIndexOutOfBoundsException);
var Ljava_lang_StringIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'StringIndexOutOfBoundsException', 262, Ljava_lang_IndexOutOfBoundsException_2_classLit);
function arraycopy(src_0, srcOfs, dest, destOfs, len){
  var destArray, destComp, destEnd, destType, destlen, srcArray, srcComp, srcType, srclen;
  checkNotNull_0(src_0, 'src');
  checkNotNull_0(dest, 'dest');
  srcType = getClass__Ljava_lang_Class___devirtual$(src_0);
  destType = getClass__Ljava_lang_Class___devirtual$(dest);
  checkArrayType((srcType.modifiers & 4) != 0, 'srcType is not an array');
  checkArrayType((destType.modifiers & 4) != 0, 'destType is not an array');
  srcComp = srcType.componentType;
  destComp = destType.componentType;
  checkArrayType((srcComp.modifiers & 1) != 0?srcComp == destComp:(destComp.modifiers & 1) == 0, "Array types don't match");
  srclen = src_0.length;
  destlen = dest.length;
  if (srcOfs < 0 || destOfs < 0 || len < 0 || srcOfs + len > srclen || destOfs + len > destlen) {
    throw new IndexOutOfBoundsException;
  }
  if (((srcComp.modifiers & 1) == 0 || (srcComp.modifiers & 4) != 0) && srcType != destType) {
    srcArray = dynamicCast(src_0, 5);
    destArray = dynamicCast(dest, 5);
    if (maskUndefined(src_0) === maskUndefined(dest) && srcOfs < destOfs) {
      srcOfs += len;
      for (destEnd = destOfs + len; destEnd-- > destOfs;) {
        setCheck(destArray, destEnd, srcArray[--srcOfs]);
      }
    }
     else {
      for (destEnd = destOfs + len; destOfs < destEnd;) {
        setCheck(destArray, destOfs++, srcArray[srcOfs++]);
      }
    }
  }
   else 
    len > 0 && nativeArraySplice(src_0, srcOfs, dest, destOfs, len, true);
}

function UnsupportedOperationException(){
  RuntimeException.call(this);
}

function UnsupportedOperationException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(68, 20, $intern_2, UnsupportedOperationException, UnsupportedOperationException_0);
var Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('java.lang', 'UnsupportedOperationException', 68, Ljava_lang_RuntimeException_2_classLit);
function $clinit_BigDecimal(){
  $clinit_BigDecimal = emptyMethod;
  var i_0, j, j0;
  new BigDecimal_3({l:1, m:0, h:0}, 0);
  new BigDecimal_3({l:10, m:0, h:0}, 0);
  new BigDecimal_3({l:0, m:0, h:0}, 0);
  BI_SCALED_BY_ZERO = initDim(Ljava_math_BigDecimal_2_classLit, $intern_7, 12, 11, 0, 1);
  CH_ZEROS = initDim(C_classLit, $intern_4, 0, 100, 7, 1);
  DOUBLE_FIVE_POW = initValues(getClassLiteralForArray(D_classLit, 1), $intern_4, 0, 7, [1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125, 6103515625, 30517578125, 152587890625, 762939453125, 3814697265625, 19073486328125, 95367431640625, 476837158203125, 2384185791015625]);
  DOUBLE_FIVE_POW_BIT_LENGTH = initDim(I_classLit, $intern_4, 0, DOUBLE_FIVE_POW.length, 7, 1);
  DOUBLE_TEN_POW = initValues(getClassLiteralForArray(D_classLit, 1), $intern_4, 0, 7, [1, 10, 100, 1000, $intern_8, 100000, 1000000, 10000000, $intern_32, $intern_16, 10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000]);
  DOUBLE_TEN_POW_BIT_LENGTH = initDim(I_classLit, $intern_4, 0, DOUBLE_TEN_POW.length, 7, 1);
  ZERO_SCALED_BY = initDim(Ljava_math_BigDecimal_2_classLit, $intern_7, 12, 11, 0, 1);
  i_0 = 0;
  for (; i_0 < ZERO_SCALED_BY.length; i_0++) {
    BI_SCALED_BY_ZERO[i_0] = new BigDecimal_3(fromInt(i_0), 0);
    ZERO_SCALED_BY[i_0] = new BigDecimal_3({l:0, m:0, h:0}, i_0);
    CH_ZEROS[i_0] = 48;
  }
  for (; i_0 < CH_ZEROS.length; i_0++) {
    CH_ZEROS[i_0] = 48;
  }
  for (j0 = 0; j0 < DOUBLE_FIVE_POW_BIT_LENGTH.length; j0++) {
    DOUBLE_FIVE_POW_BIT_LENGTH[j0] = bitLength(DOUBLE_FIVE_POW[j0]);
  }
  for (j = 0; j < DOUBLE_TEN_POW_BIT_LENGTH.length; j++) {
    DOUBLE_TEN_POW_BIT_LENGTH[j] = bitLength(DOUBLE_TEN_POW[j]);
  }
  $clinit_Multiplication();
}

function $abs(this$static){
  return $signum(this$static) < 0?$negate(this$static):this$static;
}

function $add_1(this$static, augend){
  var diffScale;
  diffScale = this$static.scale - augend.scale;
  if (this$static.bitLength == 0 && this$static.smallValue != -1) {
    if (diffScale <= 0) {
      return augend;
    }
    if (augend.bitLength == 0 && augend.smallValue != -1) {
      return this$static;
    }
  }
   else if (augend.bitLength == 0 && augend.smallValue != -1) {
    if (diffScale >= 0) {
      return this$static;
    }
  }
  if (diffScale == 0) {
    if (max_0(this$static.bitLength, augend.bitLength) + 1 < 54) {
      return new BigDecimal_0(this$static.smallValue + augend.smallValue, this$static.scale);
    }
    return new BigDecimal_5(add_1((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), (!augend.intVal && (augend.intVal = valueOf_5(augend.smallValue)) , augend.intVal)), this$static.scale);
  }
   else 
    return diffScale > 0?addAndMult10(this$static, augend, diffScale):addAndMult10(augend, this$static, -diffScale);
}

function $compareTo_7(this$static, val){
  var diffPrecision, diffScale, thisSign, thisUnscaled, valUnscaled, valueSign;
  thisSign = $signum(this$static);
  valueSign = $signum(val);
  if (thisSign == valueSign) {
    if (this$static.scale == val.scale && this$static.bitLength < 54 && val.bitLength < 54) {
      return this$static.smallValue < val.smallValue?-1:this$static.smallValue > val.smallValue?1:0;
    }
    diffScale = this$static.scale - val.scale;
    diffPrecision = (this$static.precision > 0?this$static.precision:floor_0((this$static.bitLength - 1) * $intern_35) + 1) - (val.precision > 0?val.precision:floor_0((val.bitLength - 1) * $intern_35) + 1);
    if (diffPrecision > diffScale + 1) {
      return thisSign;
    }
     else if (diffPrecision < diffScale - 1) {
      return -thisSign;
    }
     else {
      thisUnscaled = (!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal);
      valUnscaled = (!val.intVal && (val.intVal = valueOf_5(val.smallValue)) , val.intVal);
      diffScale < 0?(thisUnscaled = $multiply_0(thisUnscaled, powerOf10(-diffScale))):diffScale > 0 && (valUnscaled = $multiply_0(valUnscaled, powerOf10(diffScale)));
      return $compareTo_8(thisUnscaled, valUnscaled);
    }
  }
   else 
    return thisSign < valueSign?-1:1;
}

function $divide(this$static, divisor, scale, roundingMode){
  var diffScale, scaledDividend, scaledDivisor;
  checkNotNull(roundingMode);
  if (divisor.bitLength == 0 && divisor.smallValue != -1) {
    throw new ArithmeticException('Division by zero');
  }
  diffScale = this$static.scale - divisor.scale - scale;
  if (this$static.bitLength < 54 && divisor.bitLength < 54) {
    if (diffScale == 0) {
      return dividePrimitiveDoubles(this$static.smallValue, divisor.smallValue, scale, roundingMode);
    }
     else if (diffScale > 0) {
      if (diffScale < DOUBLE_TEN_POW.length && divisor.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)] < 54) {
        return dividePrimitiveDoubles(this$static.smallValue, divisor.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], scale, roundingMode);
      }
    }
     else {
      if (-diffScale < DOUBLE_TEN_POW.length && this$static.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(-diffScale)] < 54) {
        return dividePrimitiveDoubles(this$static.smallValue * DOUBLE_TEN_POW[round_int(-diffScale)], divisor.smallValue, scale, roundingMode);
      }
    }
  }
  scaledDividend = (!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal);
  scaledDivisor = (!divisor.intVal && (divisor.intVal = valueOf_5(divisor.smallValue)) , divisor.intVal);
  diffScale > 0?(scaledDivisor = multiplyByTenPow(scaledDivisor, round_int(diffScale))):diffScale < 0 && (scaledDividend = multiplyByTenPow(scaledDividend, round_int(-diffScale)));
  return divideBigIntegers(scaledDividend, scaledDivisor, scale, roundingMode);
}

function $equals_8(this$static, x_0){
  var x1;
  if (this$static === x_0) {
    return true;
  }
  if (instanceOf(x_0, 12)) {
    x1 = dynamicCast(x_0, 12);
    return x1.scale == this$static.scale && (this$static.bitLength < 54?x1.smallValue == this$static.smallValue:$equals_9(this$static.intVal, x1.intVal));
  }
  return false;
}

function $hashCode_6(this$static){
  var longValue;
  if (this$static.hashCode != 0) {
    return this$static.hashCode;
  }
  if (this$static.bitLength < 54) {
    longValue = fromDouble(this$static.smallValue);
    this$static.hashCode = toInt(and(longValue, {l:$intern_9, m:$intern_9, h:$intern_10}));
    this$static.hashCode = 33 * this$static.hashCode + toInt(and(shr(longValue, 32), {l:$intern_9, m:$intern_9, h:$intern_10}));
    this$static.hashCode = 17 * this$static.hashCode + round_int(this$static.scale);
    return this$static.hashCode;
  }
  this$static.hashCode = 17 * $hashCode_7(this$static.intVal) + round_int(this$static.scale);
  return this$static.hashCode;
}

function $initFrom(this$static, val){
  var begin, ch_0, i_0, last, offset, scaleString, unscaled, unscaledBuffer;
  begin = 0;
  offset = 0;
  last = val.length;
  unscaledBuffer = new StringBuilder_0(val.length);
  if (0 < last && val.charCodeAt(0) == 43) {
    ++offset;
    ++begin;
    if (offset < last && (val.charCodeAt(offset) == 43 || val.charCodeAt(offset) == 45)) {
      throw new NumberFormatException('For input string: "' + val + '"');
    }
  }
  while (offset < last && val.charCodeAt(offset) != 46 && val.charCodeAt(offset) != 101 && val.charCodeAt(offset) != 69) {
    ++offset;
  }
  $append0(unscaledBuffer, val, begin, offset);
  if (offset < last && val.charCodeAt(offset) == 46) {
    ++offset;
    begin = offset;
    while (offset < last && val.charCodeAt(offset) != 101 && val.charCodeAt(offset) != 69) {
      ++offset;
    }
    this$static.scale = offset - begin;
    $append0(unscaledBuffer, val, begin, offset);
  }
   else {
    this$static.scale = 0;
  }
  if (offset < last && (val.charCodeAt(offset) == 101 || val.charCodeAt(offset) == 69)) {
    ++offset;
    begin = offset;
    if (offset < last && val.charCodeAt(offset) == 43) {
      ++offset;
      offset < last && val.charCodeAt(offset) != 45 && ++begin;
    }
    scaleString = val.substr(begin, last - begin);
    this$static.scale = this$static.scale - __parseAndValidateInt(scaleString);
    if (this$static.scale != round_int(this$static.scale)) {
      throw new NumberFormatException('Scale out of range.');
    }
  }
  unscaled = unscaledBuffer.string;
  if (unscaled.length < 16) {
    this$static.smallValue = parseUnscaled(unscaled);
    if (isNaN_0(this$static.smallValue)) {
      throw new NumberFormatException('For input string: "' + val + '"');
    }
    this$static.bitLength = bitLength(this$static.smallValue);
  }
   else {
    $setUnscaledValue(this$static, new BigInteger_4(unscaled));
  }
  this$static.precision = unscaledBuffer.string.length;
  for (i_0 = 0; i_0 < unscaledBuffer.string.length; ++i_0) {
    ch_0 = $charAt_0(unscaledBuffer.string, i_0);
    if (ch_0 != 45 && ch_0 != 48) {
      break;
    }
    --this$static.precision;
  }
  this$static.precision == 0 && (this$static.precision = 1);
}

function $movePoint(this$static, newScale){
  if (this$static.bitLength == 0 && this$static.smallValue != -1) {
    return zeroScaledBy(newScale > 0?newScale:0);
  }
  if (newScale >= 0) {
    if (this$static.bitLength < 54) {
      return new BigDecimal_0(this$static.smallValue, toIntScale(newScale));
    }
    return new BigDecimal_6((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), toIntScale(newScale));
  }
  if (-newScale < DOUBLE_TEN_POW.length && this$static.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(-newScale)] < 54) {
    return new BigDecimal_0(this$static.smallValue * DOUBLE_TEN_POW[round_int(-newScale)], 0);
  }
  return new BigDecimal_6(multiplyByTenPow((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), round_int(-newScale)), 0);
}

function $movePointRight(this$static, n){
  return $movePoint(this$static, this$static.scale - n);
}

function $multiply(this$static, multiplicand){
  var newScale;
  newScale = this$static.scale + multiplicand.scale;
  if (this$static.bitLength == 0 && this$static.smallValue != -1 || multiplicand.bitLength == 0 && multiplicand.smallValue != -1) {
    return zeroScaledBy(newScale);
  }
  if (this$static.bitLength + multiplicand.bitLength < 54) {
    return new BigDecimal_0(this$static.smallValue * multiplicand.smallValue, toIntScale(newScale));
  }
  return new BigDecimal_6($multiply_0((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), (!multiplicand.intVal && (multiplicand.intVal = valueOf_5(multiplicand.smallValue)) , multiplicand.intVal)), toIntScale(newScale));
}

function $negate(this$static){
  if (this$static.bitLength < 54) {
    return new BigDecimal_0(-this$static.smallValue, this$static.scale);
  }
  return new BigDecimal_5($negate_0((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal)), this$static.scale);
}

function $setScale(this$static, newScale, roundingMode){
  var diffScale;
  checkNotNull(roundingMode);
  diffScale = newScale - this$static.scale;
  if (diffScale == 0) {
    return this$static;
  }
  if (diffScale > 0) {
    if (diffScale < DOUBLE_TEN_POW.length && this$static.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)] < 54) {
      return new BigDecimal_0(this$static.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], newScale);
    }
    return new BigDecimal_6(multiplyByTenPow((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), round_int(diffScale)), newScale);
  }
  if (this$static.bitLength < 54 && -diffScale < DOUBLE_TEN_POW.length) {
    return dividePrimitiveDoubles(this$static.smallValue, DOUBLE_TEN_POW[round_int(-diffScale)], newScale, roundingMode);
  }
  return divideBigIntegers((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), powerOf10(-diffScale), newScale, roundingMode);
}

function $setUnscaledValue(this$static, unscaledValue){
  this$static.intVal = unscaledValue;
  this$static.bitLength = bitLength_1(unscaledValue);
  this$static.bitLength < 54 && (this$static.smallValue = toDouble($longValue(unscaledValue)));
}

function $signum(this$static){
  if (this$static.bitLength < 54) {
    return this$static.smallValue < 0?-1:this$static.smallValue > 0?1:0;
  }
  return (!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal).sign;
}

function $subtract(this$static, subtrahend){
  var diffScale;
  diffScale = this$static.scale - subtrahend.scale;
  if (this$static.bitLength == 0 && this$static.smallValue != -1) {
    if (diffScale <= 0) {
      return $negate(subtrahend);
    }
    if (subtrahend.bitLength == 0 && subtrahend.smallValue != -1) {
      return this$static;
    }
  }
   else if (subtrahend.bitLength == 0 && subtrahend.smallValue != -1) {
    if (diffScale >= 0) {
      return this$static;
    }
  }
  if (diffScale == 0) {
    if (max_0(this$static.bitLength, subtrahend.bitLength) + 1 < 54) {
      return new BigDecimal_0(this$static.smallValue - subtrahend.smallValue, this$static.scale);
    }
    return new BigDecimal_5(subtract((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), (!subtrahend.intVal && (subtrahend.intVal = valueOf_5(subtrahend.smallValue)) , subtrahend.intVal)), this$static.scale);
  }
   else if (diffScale > 0) {
    if (diffScale < DOUBLE_TEN_POW.length && max_0(this$static.bitLength, subtrahend.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)]) + 1 < 54) {
      return new BigDecimal_0(this$static.smallValue - subtrahend.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], this$static.scale);
    }
    return new BigDecimal_5(subtract((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), multiplyByTenPow((!subtrahend.intVal && (subtrahend.intVal = valueOf_5(subtrahend.smallValue)) , subtrahend.intVal), round_int(diffScale))), this$static.scale);
  }
   else {
    diffScale = -diffScale;
    if (diffScale < DOUBLE_TEN_POW.length && max_0(this$static.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)], subtrahend.bitLength) + 1 < 54) {
      return new BigDecimal_0(this$static.smallValue * DOUBLE_TEN_POW[round_int(diffScale)] - subtrahend.smallValue, subtrahend.scale);
    }
    return new BigDecimal_5(subtract(multiplyByTenPow((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), round_int(diffScale)), (!subtrahend.intVal && (subtrahend.intVal = valueOf_5(subtrahend.smallValue)) , subtrahend.intVal)), subtrahend.scale);
  }
}

function $toPlainString(this$static){
  var begin, delta, intStr, result;
  intStr = toDecimalScaledString_0((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), 0);
  if (this$static.scale == 0 || this$static.bitLength == 0 && this$static.smallValue != -1 && this$static.scale < 0) {
    return intStr;
  }
  begin = $signum(this$static) < 0?1:0;
  delta = this$static.scale;
  result = new StringBuilder_0(intStr.length + 1 + abs_0(round_int(this$static.scale)));
  begin == 1 && (result.string += '-' , result);
  if (this$static.scale > 0) {
    delta -= intStr.length - begin;
    if (delta >= 0) {
      result.string += '0.';
      for (; delta > CH_ZEROS.length; delta -= CH_ZEROS.length) {
        $append_5(result, CH_ZEROS);
      }
      $append_6(result, CH_ZEROS, round_int(delta));
      $append_4(result, __substr(intStr, begin, intStr.length - begin));
    }
     else {
      delta = begin - delta;
      $append_4(result, $substring_0(intStr, begin, round_int(delta)));
      result.string += '.';
      $append_4(result, $substring(intStr, round_int(delta)));
    }
  }
   else {
    $append_4(result, __substr(intStr, begin, intStr.length - begin));
    for (; delta < -CH_ZEROS.length; delta += CH_ZEROS.length) {
      $append_5(result, CH_ZEROS);
    }
    $append_6(result, CH_ZEROS, round_int(-delta));
  }
  return result.string;
}

function $toString_6(this$static){
  var begin, end, exponent, intString, result;
  if (this$static.toStringImage != null) {
    return this$static.toStringImage;
  }
  if (this$static.bitLength < 32) {
    this$static.toStringImage = toDecimalScaledString(fromDouble(this$static.smallValue), round_int(this$static.scale));
    return this$static.toStringImage;
  }
  intString = toDecimalScaledString_0((!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal), 0);
  if (this$static.scale == 0) {
    return intString;
  }
  begin = (!this$static.intVal && (this$static.intVal = valueOf_5(this$static.smallValue)) , this$static.intVal).sign < 0?2:1;
  end = intString.length;
  exponent = -this$static.scale + end - begin;
  result = new StringBuilder;
  result.string += intString;
  if (this$static.scale > 0 && exponent >= -6) {
    if (exponent >= 0) {
      $insert(result, end - round_int(this$static.scale), '.');
    }
     else {
      result.string = $substring_0(result.string, 0, begin - 1) + '0.' + $substring(result.string, begin - 1);
      $insert(result, begin + 1, valueOf_2(CH_ZEROS, 0, -round_int(exponent) - 1));
    }
  }
   else {
    if (end - begin >= 1) {
      result.string = $substring_0(result.string, 0, begin) + '.' + $substring(result.string, begin);
      ++end;
    }
    result.string = $substring_0(result.string, 0, end) + 'E' + $substring(result.string, end);
    exponent > 0 && $insert(result, ++end, '+');
    $insert(result, ++end, '' + toString_3(fromDouble(exponent)));
  }
  this$static.toStringImage = result.string;
  return this$static.toStringImage;
}

function BigDecimal(val){
  $clinit_BigDecimal();
  if (isInfinite(val) || isNaN(val)) {
    throw new NumberFormatException('Infinite or NaN');
  }
  $initFrom(this, val.toPrecision(20));
}

function BigDecimal_0(smallValue, scale){
  this.smallValue = smallValue;
  this.scale = scale;
  this.bitLength = bitLength(smallValue);
}

function BigDecimal_1(val){
  $clinit_BigDecimal();
  BigDecimal_3.call(this, fromInt(val), 0);
}

function BigDecimal_2(val){
  $clinit_BigDecimal();
  BigDecimal_3.call(this, val, 0);
}

function BigDecimal_3(smallValue, scale){
  this.scale = scale;
  this.bitLength = bitLength_0(smallValue);
  this.bitLength < 54?(this.smallValue = toDouble(smallValue)):(this.intVal = valueOf_6(smallValue));
}

function BigDecimal_4(val){
  $clinit_BigDecimal();
  $initFrom(this, val);
}

function BigDecimal_5(unscaledVal, scale){
  this.scale = scale;
  $setUnscaledValue(this, dynamicCast(checkNotNull(unscaledVal), 22));
}

function BigDecimal_6(unscaledVal, scale){
  BigDecimal_5.call(this, unscaledVal, scale);
}

function addAndMult10(thisValue, augend, diffScale){
  if (diffScale < DOUBLE_TEN_POW.length && max_0(thisValue.bitLength, augend.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)]) + 1 < 54) {
    return new BigDecimal_0(thisValue.smallValue + augend.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], thisValue.scale);
  }
  return new BigDecimal_5(add_1((!thisValue.intVal && (thisValue.intVal = valueOf_5(thisValue.smallValue)) , thisValue.intVal), multiplyByTenPow((!augend.intVal && (augend.intVal = valueOf_5(augend.smallValue)) , augend.intVal), round_int(diffScale))), thisValue.scale);
}

function bitLength(value_0){
  var negative, result;
  if (value_0 > -140737488355328 && value_0 < 140737488355328) {
    if (value_0 == 0) {
      return 0;
    }
    negative = value_0 < 0;
    negative && (value_0 = -value_0);
    result = round_int(floor_0(log_0(value_0) / 0.6931471805599453));
    (!negative || value_0 != Math.pow(2, result)) && ++result;
    return result;
  }
  return bitLength_0(fromDouble(value_0));
}

function bitLength_0(value_0){
  var high;
  lt(value_0, {l:0, m:0, h:0}) && (value_0 = {l:~value_0.l & $intern_9, m:~value_0.m & $intern_9, h:~value_0.h & $intern_10});
  return 64 - (high = toInt(shr(value_0, 32)) , high != 0?numberOfLeadingZeros_0(high):numberOfLeadingZeros_0(toInt(value_0)) + 32);
}

function divideBigIntegers(scaledDividend, scaledDivisor, scale, roundingMode){
  var compRem, divisor, quotAndRem, quotient, rem, remainder, sign;
  quotAndRem = $divideAndRemainder(scaledDividend, scaledDivisor);
  quotient = quotAndRem[0];
  remainder = quotAndRem[1];
  if (remainder.sign == 0) {
    return new BigDecimal_6(quotient, scale);
  }
  sign = scaledDividend.sign * scaledDivisor.sign;
  if (bitLength_1(scaledDivisor) < 54) {
    rem = $longValue(remainder);
    divisor = $longValue(scaledDivisor);
    compRem = lt(shl(lt(rem, {l:0, m:0, h:0})?neg(rem):rem, 1), lt(divisor, {l:0, m:0, h:0})?neg(divisor):divisor)?-1:gt(shl(lt(rem, {l:0, m:0, h:0})?neg(rem):rem, 1), lt(divisor, {l:0, m:0, h:0})?neg(divisor):divisor)?1:0;
    compRem = roundingBehavior($testBit(quotient, 0)?1:0, sign * (5 + compRem), roundingMode);
  }
   else {
    compRem = $compareTo_8($shiftLeftOneBit(remainder.sign < 0?new BigInteger_1(1, remainder.numberLength, remainder.digits):remainder), scaledDivisor.sign < 0?new BigInteger_1(1, scaledDivisor.numberLength, scaledDivisor.digits):scaledDivisor);
    compRem = roundingBehavior($testBit(quotient, 0)?1:0, sign * (5 + compRem), roundingMode);
  }
  if (compRem != 0) {
    if (bitLength_1(quotient) < 54) {
      return valueOf_4(add_0($longValue(quotient), fromInt(compRem)), scale);
    }
    quotient = add_1(quotient, valueOf_6(fromInt(compRem)));
    return new BigDecimal_6(quotient, scale);
  }
  return new BigDecimal_6(quotient, scale);
}

function dividePrimitiveDoubles(scaledDividend, scaledDivisor, scale, roundingMode){
  var compRem, quotient, remainder, sign, quotient_0;
  quotient = (quotient_0 = scaledDividend / scaledDivisor , quotient_0 > 0?floor_0(quotient_0):ceil_0(quotient_0));
  remainder = scaledDividend % scaledDivisor;
  sign = compare_31(scaledDividend * scaledDivisor, 0);
  if (remainder != 0) {
    compRem = compare_31((remainder <= 0?0 - remainder:remainder) * 2, scaledDivisor <= 0?0 - scaledDivisor:scaledDivisor);
    quotient += roundingBehavior(round_int(quotient) & 1, sign * (5 + compRem), roundingMode);
  }
  return new BigDecimal_0(quotient, scale);
}

function parseUnscaled(str){
  var unscaledRegex = unscaledRegex_0;
  !unscaledRegex && (unscaledRegex = unscaledRegex_0 = /^[+-]?\d*$/i);
  if (unscaledRegex.test(str)) {
    return parseInt(str, 10);
  }
   else {
    return Number.NaN;
  }
}

function roundingBehavior(parityBit, fraction, roundingMode){
  var increment;
  increment = 0;
  switch (roundingMode.ordinal) {
    case 7:
      if (fraction != 0) {
        throw new ArithmeticException('Rounding necessary');
      }

      break;
    case 0:
      increment = fraction == 0?0:fraction < 0?-1:1;
      break;
    case 2:
      increment = (fraction == 0?0:fraction < 0?-1:1) > 0?fraction == 0?0:fraction < 0?-1:1:0;
      break;
    case 3:
      increment = (fraction == 0?0:fraction < 0?-1:1) < 0?fraction == 0?0:fraction < 0?-1:1:0;
      break;
    case 4:
      (fraction < 0?-fraction:fraction) >= 5 && (increment = fraction == 0?0:fraction < 0?-1:1);
      break;
    case 5:
      (fraction < 0?-fraction:fraction) > 5 && (increment = fraction == 0?0:fraction < 0?-1:1);
      break;
    case 6:
      (fraction < 0?-fraction:fraction) + parityBit > 5 && (increment = fraction == 0?0:fraction < 0?-1:1);
  }
  return increment;
}

function toIntScale(doubleScale){
  if (doubleScale < $intern_34) {
    throw new ArithmeticException('Overflow');
  }
   else if (doubleScale > $intern_0) {
    throw new ArithmeticException('Underflow');
  }
   else {
    return round_int(doubleScale);
  }
}

function valueOf_3(unscaledVal){
  if (gte_0(unscaledVal, {l:0, m:0, h:0}) && lt(unscaledVal, {l:11, m:0, h:0})) {
    return BI_SCALED_BY_ZERO[toInt(unscaledVal)];
  }
  return new BigDecimal_3(unscaledVal, 0);
}

function valueOf_4(unscaledVal, scale){
  if (scale == 0) {
    return valueOf_3(unscaledVal);
  }
  if (eq(unscaledVal, {l:0, m:0, h:0}) && scale >= 0 && scale < ZERO_SCALED_BY.length) {
    return ZERO_SCALED_BY[scale];
  }
  return new BigDecimal_3(unscaledVal, scale);
}

function zeroScaledBy(doubleScale){
  if (doubleScale == round_int(doubleScale)) {
    return valueOf_4({l:0, m:0, h:0}, round_int(doubleScale));
  }
  if (doubleScale >= 0) {
    return new BigDecimal_3({l:0, m:0, h:0}, $intern_0);
  }
  return new BigDecimal_3({l:0, m:0, h:0}, $intern_34);
}

defineClass(12, 134, {3:1, 50:1, 134:1, 12:1}, BigDecimal, BigDecimal_0, BigDecimal_1, BigDecimal_2, BigDecimal_3, BigDecimal_4, BigDecimal_5, BigDecimal_6);
_.compareTo = function compareTo_8(val){
  return $compareTo_7(this, dynamicCast(val, 12));
}
;
_.equals$ = function equals_29(x_0){
  return $equals_8(this, x_0);
}
;
_.hashCode$ = function hashCode_30(){
  return $hashCode_6(this);
}
;
_.toString$ = function toString_32(){
  return $toString_6(this);
}
;
_.bitLength = 0;
_.hashCode = 0;
_.precision = 0;
_.scale = 0;
_.smallValue = 0;
var BI_SCALED_BY_ZERO, CH_ZEROS, DOUBLE_FIVE_POW, DOUBLE_FIVE_POW_BIT_LENGTH, DOUBLE_TEN_POW, DOUBLE_TEN_POW_BIT_LENGTH, ZERO_SCALED_BY, unscaledRegex_0;
var Ljava_math_BigDecimal_2_classLit = createForClass('java.math', 'BigDecimal', 12, Ljava_lang_Number_2_classLit);
function $clinit_BigInteger(){
  $clinit_BigInteger = emptyMethod;
  var i_0;
  ONE_2 = new BigInteger_0(1, 1);
  TEN = new BigInteger_0(1, 10);
  ZERO_6 = new BigInteger_0(0, 0);
  MINUS_ONE_0 = new BigInteger_0(-1, 1);
  SMALL_VALUES = initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_7, 22, 0, [ZERO_6, ONE_2, new BigInteger_0(1, 2), new BigInteger_0(1, 3), new BigInteger_0(1, 4), new BigInteger_0(1, 5), new BigInteger_0(1, 6), new BigInteger_0(1, 7), new BigInteger_0(1, 8), new BigInteger_0(1, 9), TEN]);
  TWO_POWS = initDim(Ljava_math_BigInteger_2_classLit, $intern_7, 22, 32, 0, 1);
  for (i_0 = 0; i_0 < TWO_POWS.length; i_0++) {
    TWO_POWS[i_0] = valueOf_6(shl({l:1, m:0, h:0}, i_0));
  }
}

function $$init_2(this$static){
}

function $compareTo_8(this$static, val){
  if (this$static.sign > val.sign) {
    return 1;
  }
  if (this$static.sign < val.sign) {
    return -1;
  }
  if (this$static.numberLength > val.numberLength) {
    return this$static.sign;
  }
  if (this$static.numberLength < val.numberLength) {
    return -val.sign;
  }
  return this$static.sign * compareArrays(this$static.digits, val.digits, this$static.numberLength);
}

function $cutOffLeadingZeroes(this$static){
  while (this$static.numberLength > 0 && this$static.digits[--this$static.numberLength] == 0)
  ;
  this$static.digits[this$static.numberLength++] == 0 && (this$static.sign = 0);
}

function $divideAndRemainder(this$static, divisor){
  var cmp, divisorDigits, divisorLen, divisorSign, quotientDigits, quotientLength, quotientSign, remainderDigits, result0, result1, thisDigits, thisLen, thisSign;
  divisorSign = divisor.sign;
  if (divisorSign == 0) {
    throw new ArithmeticException('BigInteger divide by zero');
  }
  divisorLen = divisor.numberLength;
  divisorDigits = divisor.digits;
  if (divisorLen == 1) {
    return divideAndRemainderByInteger(this$static, divisorDigits[0], divisorSign);
  }
  thisDigits = this$static.digits;
  thisLen = this$static.numberLength;
  cmp = thisLen != divisorLen?thisLen > divisorLen?1:-1:compareArrays(thisDigits, divisorDigits, thisLen);
  if (cmp < 0) {
    return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_7, 22, 0, [ZERO_6, this$static]);
  }
  thisSign = this$static.sign;
  quotientLength = thisLen - divisorLen + 1;
  quotientSign = thisSign == divisorSign?1:-1;
  quotientDigits = initDim(I_classLit, $intern_4, 0, quotientLength, 7, 1);
  remainderDigits = divide(quotientDigits, quotientLength, thisDigits, thisLen, divisorDigits, divisorLen);
  result0 = new BigInteger_1(quotientSign, quotientLength, quotientDigits);
  result1 = new BigInteger_1(thisSign, divisorLen, remainderDigits);
  $cutOffLeadingZeroes(result0);
  $cutOffLeadingZeroes(result1);
  return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_7, 22, 0, [result0, result1]);
}

function $equals_9(this$static, x_0){
  var x1;
  if (this$static === x_0) {
    return true;
  }
  if (instanceOf(x_0, 22)) {
    x1 = dynamicCast(x_0, 22);
    return this$static.sign == x1.sign && this$static.numberLength == x1.numberLength && $equalsArrays(this$static, x1.digits);
  }
  return false;
}

function $equalsArrays(this$static, b){
  var i_0;
  for (i_0 = this$static.numberLength - 1; i_0 >= 0 && this$static.digits[i_0] == b[i_0]; i_0--)
  ;
  return i_0 < 0;
}

function $getFirstNonzeroDigit(this$static){
  var i_0;
  if (this$static.firstNonzeroDigit == -2) {
    if (this$static.sign == 0) {
      i_0 = -1;
    }
     else {
      for (i_0 = 0; this$static.digits[i_0] == 0; i_0++)
      ;
    }
    this$static.firstNonzeroDigit = i_0;
  }
  return this$static.firstNonzeroDigit;
}

function $hashCode_7(this$static){
  var i_0;
  if (this$static.hashCode != 0) {
    return this$static.hashCode;
  }
  for (i_0 = 0; i_0 < this$static.digits.length; i_0++) {
    this$static.hashCode = this$static.hashCode * 33 + (this$static.digits[i_0] & -1);
  }
  this$static.hashCode = this$static.hashCode * this$static.sign;
  return this$static.hashCode;
}

function $longValue(this$static){
  var value_0;
  value_0 = this$static.numberLength > 1?or(shl(fromInt(this$static.digits[1]), 32), and(fromInt(this$static.digits[0]), {l:$intern_9, m:1023, h:0})):and(fromInt(this$static.digits[0]), {l:$intern_9, m:1023, h:0});
  return mul(fromInt(this$static.sign), value_0);
}

function $multiply_0(this$static, val){
  if (val.sign == 0) {
    return ZERO_6;
  }
  if (this$static.sign == 0) {
    return ZERO_6;
  }
  return $clinit_Multiplication() , karatsuba(this$static, val);
}

function $negate_0(this$static){
  return this$static.sign == 0?this$static:new BigInteger_1(-this$static.sign, this$static.numberLength, this$static.digits);
}

function $pow(this$static, exp_0){
  var x_0;
  if (exp_0 < 0) {
    throw new ArithmeticException('Negative exponent');
  }
  if (exp_0 == 0) {
    return ONE_2;
  }
   else if (exp_0 == 1 || $equals_9(this$static, ONE_2) || $equals_9(this$static, ZERO_6)) {
    return this$static;
  }
  if (!$testBit(this$static, 0)) {
    x_0 = 1;
    while (!$testBit(this$static, x_0)) {
      ++x_0;
    }
    return $multiply_0(getPowerOfTwo(x_0 * exp_0), $pow($shiftRight(this$static, x_0), exp_0));
  }
  return pow_0(this$static, exp_0);
}

function $shiftLeft(this$static, n){
  if (n == 0 || this$static.sign == 0) {
    return this$static;
  }
  return n > 0?shiftLeft(this$static, n):shiftRight(this$static, -n);
}

function $shiftLeftOneBit(this$static){
  var srcLen, resLen, resDigits, result;
  return this$static.sign == 0?this$static:(srcLen = this$static.numberLength , resLen = srcLen + 1 , resDigits = initDim(I_classLit, $intern_4, 0, resLen, 7, 1) , shiftLeftOneBit(resDigits, this$static.digits, srcLen) , result = new BigInteger_1(this$static.sign, resLen, resDigits) , $cutOffLeadingZeroes(result) , result);
}

function $shiftRight(this$static, n){
  if (n == 0 || this$static.sign == 0) {
    return this$static;
  }
  return n > 0?shiftRight(this$static, n):shiftLeft(this$static, -n);
}

function $testBit(this$static, n){
  var digit, firstNonZeroDigit, intCount;
  if (n == 0) {
    return (this$static.digits[0] & 1) != 0;
  }
  if (n < 0) {
    throw new ArithmeticException('Negative bit address');
  }
  intCount = n >> 5;
  if (intCount >= this$static.numberLength) {
    return this$static.sign < 0;
  }
  digit = this$static.digits[intCount];
  n = 1 << (n & 31);
  if (this$static.sign < 0) {
    firstNonZeroDigit = $getFirstNonzeroDigit(this$static);
    if (intCount < firstNonZeroDigit) {
      return false;
    }
     else 
      firstNonZeroDigit == intCount?(digit = -digit):(digit = ~digit);
  }
  return (digit & n) != 0;
}

function BigInteger(sign, val){
  this.sign = sign;
  if (val < $intern_36) {
    this.numberLength = 1;
    this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [~~val]);
  }
   else {
    this.numberLength = 2;
    this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [~~(val % $intern_36), ~~(val / $intern_36)]);
  }
}

function BigInteger_0(sign, value_0){
  $clinit_BigInteger();
  $$init_2(this);
  this.sign = sign;
  this.numberLength = 1;
  this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [value_0]);
}

function BigInteger_1(sign, numberLength, digits){
  $clinit_BigInteger();
  $$init_2(this);
  this.sign = sign;
  this.numberLength = numberLength;
  this.digits = digits;
}

function BigInteger_2(sign, val){
  $$init_2(this);
  this.sign = sign;
  if (eq(and(val, {l:0, m:4193280, h:$intern_10}), {l:0, m:0, h:0})) {
    this.numberLength = 1;
    this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [toInt(val)]);
  }
   else {
    this.numberLength = 2;
    this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [toInt(val), toInt(shr(val, 32))]);
  }
}

function BigInteger_3(digits){
  $clinit_BigInteger();
  $$init_2(this);
  if (digits.length == 0) {
    this.sign = 0;
    this.numberLength = 1;
    this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [0]);
  }
   else {
    this.sign = 1;
    this.numberLength = digits.length;
    this.digits = digits;
    $cutOffLeadingZeroes(this);
  }
}

function BigInteger_4(val){
  $clinit_BigInteger();
  BigInteger_5.call(this, val);
}

function BigInteger_5(val){
  checkNotNull(val);
  if (!val.length) {
    throw new NumberFormatException('Zero length BigInteger');
  }
  setFromString(this, val);
}

function getPowerOfTwo(exp_0){
  var bitN, intCount, resDigits;
  if (exp_0 < TWO_POWS.length) {
    return TWO_POWS[exp_0];
  }
  intCount = exp_0 >> 5;
  bitN = exp_0 & 31;
  resDigits = initDim(I_classLit, $intern_4, 0, intCount + 1, 7, 1);
  resDigits[intCount] = 1 << bitN;
  return new BigInteger_1(1, intCount + 1, resDigits);
}

function setFromString(bi, val){
  var bigRadix, bigRadixDigit, bigRadixDigitsLength, charsPerInt, digitIndex, digits, endChar, newDigit, sign, startChar, stringLength, substrEnd, substrStart, topChars;
  stringLength = val.length;
  endChar = stringLength;
  if (val.charCodeAt(0) == 45) {
    sign = -1;
    startChar = 1;
    --stringLength;
  }
   else {
    sign = 1;
    startChar = 0;
  }
  charsPerInt = ($clinit_Conversion() , digitFitInInt)[10];
  bigRadixDigitsLength = ~~(stringLength / charsPerInt);
  topChars = stringLength % charsPerInt;
  topChars != 0 && ++bigRadixDigitsLength;
  digits = initDim(I_classLit, $intern_4, 0, bigRadixDigitsLength, 7, 1);
  bigRadix = bigRadices[8];
  digitIndex = 0;
  substrEnd = startChar + (topChars == 0?charsPerInt:topChars);
  for (substrStart = startChar; substrStart < endChar; substrStart = substrEnd , substrEnd = substrEnd + charsPerInt) {
    bigRadixDigit = __parseAndValidateInt(val.substr(substrStart, substrEnd - substrStart));
    newDigit = ($clinit_Multiplication() , multiplyByInt(digits, digits, digitIndex, bigRadix));
    newDigit += inplaceAdd(digits, digitIndex, bigRadixDigit);
    digits[digitIndex++] = newDigit;
  }
  bi.sign = sign;
  bi.numberLength = digitIndex;
  bi.digits = digits;
  $cutOffLeadingZeroes(bi);
}

function valueOf_5(val){
  $clinit_BigInteger();
  if (val < 0) {
    if (val != -1) {
      return new BigInteger(-1, -val);
    }
    return MINUS_ONE_0;
  }
   else 
    return val <= 10?SMALL_VALUES[round_int(val)]:new BigInteger(1, val);
}

function valueOf_6(val){
  $clinit_BigInteger();
  if (lt(val, {l:0, m:0, h:0})) {
    if (neq(val, {l:$intern_9, m:$intern_9, h:$intern_10})) {
      return new BigInteger_2(-1, neg(val));
    }
    return MINUS_ONE_0;
  }
   else 
    return lte(val, {l:10, m:0, h:0})?SMALL_VALUES[toInt(val)]:new BigInteger_2(1, val);
}

defineClass(22, 134, {3:1, 50:1, 134:1, 22:1}, BigInteger, BigInteger_0, BigInteger_1, BigInteger_2, BigInteger_3, BigInteger_4);
_.compareTo = function compareTo_9(val){
  return $compareTo_8(this, dynamicCast(val, 22));
}
;
_.equals$ = function equals_30(x_0){
  return $equals_9(this, x_0);
}
;
_.hashCode$ = function hashCode_31(){
  return $hashCode_7(this);
}
;
_.toString$ = function toString_33(){
  return toDecimalScaledString_0(this, 0);
}
;
_.firstNonzeroDigit = -2;
_.hashCode = 0;
_.numberLength = 0;
_.sign = 0;
var MINUS_ONE_0, ONE_2, SMALL_VALUES, TEN, TWO_POWS, ZERO_6;
var Ljava_math_BigInteger_2_classLit = createForClass('java.math', 'BigInteger', 22, Ljava_lang_Number_2_classLit);
function bitLength_1(val){
  var bLength, highDigit, i_0;
  if (val.sign == 0) {
    return 0;
  }
  bLength = val.numberLength << 5;
  highDigit = val.digits[val.numberLength - 1];
  if (val.sign < 0) {
    i_0 = $getFirstNonzeroDigit(val);
    if (i_0 == val.numberLength - 1) {
      --highDigit;
      highDigit = ~~highDigit;
    }
  }
  bLength -= numberOfLeadingZeros_0(highDigit);
  return bLength;
}

function shiftLeft(source, count){
  var intCount, resDigits, resLength, result;
  intCount = count >> 5;
  count &= 31;
  resLength = source.numberLength + intCount + (count == 0?0:1);
  resDigits = initDim(I_classLit, $intern_4, 0, resLength, 7, 1);
  shiftLeft_0(resDigits, source.digits, intCount, count);
  result = new BigInteger_1(source.sign, resLength, resDigits);
  $cutOffLeadingZeroes(result);
  return result;
}

function shiftLeft_0(result, source, intCount, count){
  var i_0, i0, rightShiftCount;
  if (count == 0) {
    arraycopy(source, 0, result, intCount, result.length - intCount);
  }
   else {
    rightShiftCount = 32 - count;
    result[result.length - 1] = 0;
    for (i0 = result.length - 1; i0 > intCount; i0--) {
      result[i0] |= source[i0 - intCount - 1] >>> rightShiftCount;
      result[i0 - 1] = source[i0 - intCount - 1] << count;
    }
  }
  for (i_0 = 0; i_0 < intCount; i_0++) {
    result[i_0] = 0;
  }
}

function shiftLeftOneBit(result, source, srcLen){
  var carry, i_0, val;
  carry = 0;
  for (i_0 = 0; i_0 < srcLen; i_0++) {
    val = source[i_0];
    result[i_0] = val << 1 | carry;
    carry = val >>> 31;
  }
  carry != 0 && (result[srcLen] = carry);
}

function shiftRight(source, count){
  var i_0, intCount, resDigits, resLength, result;
  intCount = count >> 5;
  count &= 31;
  if (intCount >= source.numberLength) {
    return source.sign < 0?($clinit_BigInteger() , MINUS_ONE_0):($clinit_BigInteger() , ZERO_6);
  }
  resLength = source.numberLength - intCount;
  resDigits = initDim(I_classLit, $intern_4, 0, resLength + 1, 7, 1);
  shiftRight_0(resDigits, resLength, source.digits, intCount, count);
  if (source.sign < 0) {
    for (i_0 = 0; i_0 < intCount && source.digits[i_0] == 0; i_0++)
    ;
    if (i_0 < intCount || count > 0 && source.digits[i_0] << 32 - count != 0) {
      for (i_0 = 0; i_0 < resLength && resDigits[i_0] == -1; i_0++) {
        resDigits[i_0] = 0;
      }
      i_0 == resLength && ++resLength;
      ++resDigits[i_0];
    }
  }
  result = new BigInteger_1(source.sign, resLength, resDigits);
  $cutOffLeadingZeroes(result);
  return result;
}

function shiftRight_0(result, resultLen, source, intCount, count){
  var allZero, i_0, leftShiftCount;
  allZero = true;
  for (i_0 = 0; i_0 < intCount; i_0++) {
    allZero = allZero & source[i_0] == 0;
  }
  if (count == 0) {
    arraycopy(source, intCount, result, 0, resultLen);
  }
   else {
    leftShiftCount = 32 - count;
    allZero = allZero & source[i_0] << leftShiftCount == 0;
    for (i_0 = 0; i_0 < resultLen - 1; i_0++) {
      result[i_0] = source[i_0 + intCount] >>> count | source[i_0 + intCount + 1] << leftShiftCount;
    }
    result[i_0] = source[i_0 + intCount] >>> count;
    ++i_0;
  }
  return allZero;
}

function $clinit_Conversion(){
  $clinit_Conversion = emptyMethod;
  bigRadices = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [$intern_34, 1162261467, $intern_37, 1220703125, 362797056, 1977326743, $intern_37, 387420489, $intern_16, 214358881, 429981696, 815730721, 1475789056, 170859375, 268435456, 410338673, 612220032, 893871739, 1280000000, 1801088541, 113379904, 148035889, 191102976, 244140625, 308915776, 387420489, 481890304, 594823321, 729000000, 887503681, $intern_37, 1291467969, 1544804416, 1838265625, 60466176]);
  digitFitInInt = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [-1, -1, 31, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]);
}

function divideLongByBillion(a){
  var aPos, quot, rem;
  if (gte_0(a, {l:0, m:0, h:0})) {
    quot = div(a, {l:1755648, m:238, h:0});
    rem = mod(a, {l:1755648, m:238, h:0});
  }
   else {
    aPos = shru(a, 1);
    quot = div(aPos, {l:877824, m:119, h:0});
    rem = mod(aPos, {l:877824, m:119, h:0});
    rem = add_0(shl(rem, 1), and(a, {l:1, m:0, h:0}));
  }
  return or(shl(rem, 32), and(quot, {l:$intern_9, m:1023, h:0}));
}

function toDecimalScaledString(value_0, scale){
  $clinit_Conversion();
  var currentChar, exponent, insertPoint, j, j0, negNumber, prev, result, result1, result10, startPoint, v;
  negNumber = lt(value_0, {l:0, m:0, h:0});
  negNumber && (value_0 = neg(value_0));
  if (eq(value_0, {l:0, m:0, h:0})) {
    switch (scale) {
      case 0:
        return '0';
      case 1:
        return '0.0';
      case 2:
        return '0.00';
      case 3:
        return '0.000';
      case 4:
        return '0.0000';
      case 5:
        return '0.00000';
      case 6:
        return '0.000000';
      default:result10 = new StringBuilder;
        scale < 0?(result10.string += '0E+' , result10):(result10.string += '0E' , result10);
        result10.string += scale == $intern_34?'2147483648':'' + -scale;
        return result10.string;
    }
  }
  result = initDim(C_classLit, $intern_4, 0, 19, 7, 1);
  currentChar = 18;
  v = value_0;
  do {
    prev = v;
    v = div(v, {l:10, m:0, h:0});
    result[--currentChar] = toInt(add_0({l:48, m:0, h:0}, sub_0(prev, mul(v, {l:10, m:0, h:0})))) & $intern_5;
  }
   while (neq(v, {l:0, m:0, h:0}));
  exponent = sub_0(sub_0(sub_0({l:18, m:0, h:0}, fromInt(currentChar)), fromInt(scale)), {l:1, m:0, h:0});
  if (scale == 0) {
    negNumber && (result[--currentChar] = 45);
    return valueOf_2(result, currentChar, 18 - currentChar);
  }
  if (scale > 0 && gte_0(exponent, {l:4194298, m:$intern_9, h:$intern_10})) {
    if (gte_0(exponent, {l:0, m:0, h:0})) {
      insertPoint = currentChar + toInt(exponent);
      for (j0 = 17; j0 >= insertPoint; j0--) {
        result[j0 + 1] = result[j0];
      }
      result[++insertPoint] = 46;
      negNumber && (result[--currentChar] = 45);
      return valueOf_2(result, currentChar, 18 - currentChar + 1);
    }
    for (j = 2; lt(fromInt(j), add_0(neg(exponent), {l:1, m:0, h:0})); j++) {
      result[--currentChar] = 48;
    }
    result[--currentChar] = 46;
    result[--currentChar] = 48;
    negNumber && (result[--currentChar] = 45);
    return valueOf_2(result, currentChar, 18 - currentChar);
  }
  startPoint = currentChar + 1;
  result1 = new StringBuilder_0;
  negNumber && (result1.string += '-' , result1);
  if (18 - startPoint >= 1) {
    $append_3(result1, result[currentChar]);
    result1.string += '.';
    result1.string += valueOf_2(result, currentChar + 1, 18 - currentChar - 1);
  }
   else {
    result1.string += valueOf_2(result, currentChar, 18 - currentChar);
  }
  result1.string += 'E';
  gt(exponent, {l:0, m:0, h:0}) && (result1.string += '+' , result1);
  result1.string += '' + toString_3(exponent);
  return result1.string;
}

function toDecimalScaledString_0(val, scale){
  $clinit_Conversion();
  var currentChar, delta, digits, exponent, highDigit, i_0, i1, insertPoint, j, j0, negNumber, numberLength, prev, previous, res, resDigit, resLengthInChars, result, result1, result10, result11, sign, startPoint, temp, temp1, tempLen, v;
  sign = val.sign;
  numberLength = val.numberLength;
  digits = val.digits;
  if (sign == 0) {
    switch (scale) {
      case 0:
        return '0';
      case 1:
        return '0.0';
      case 2:
        return '0.00';
      case 3:
        return '0.000';
      case 4:
        return '0.0000';
      case 5:
        return '0.00000';
      case 6:
        return '0.000000';
      default:result10 = new StringBuilder;
        scale < 0?(result10.string += '0E+' , result10):(result10.string += '0E' , result10);
        result10.string += -scale;
        return result10.string;
    }
  }
  resLengthInChars = numberLength * 10 + 1 + 7;
  result = initDim(C_classLit, $intern_4, 0, resLengthInChars + 1, 7, 1);
  currentChar = resLengthInChars;
  if (numberLength == 1) {
    highDigit = digits[0];
    if (highDigit < 0) {
      v = and(fromInt(highDigit), {l:$intern_9, m:1023, h:0});
      do {
        prev = v;
        v = div(v, {l:10, m:0, h:0});
        result[--currentChar] = 48 + toInt(sub_0(prev, mul(v, {l:10, m:0, h:0}))) & $intern_5;
      }
       while (neq(v, {l:0, m:0, h:0}));
    }
     else {
      v = highDigit;
      do {
        prev = v;
        v = ~~(v / 10);
        result[--currentChar] = 48 + (prev - v * 10) & $intern_5;
      }
       while (v != 0);
    }
  }
   else {
    temp = initDim(I_classLit, $intern_4, 0, numberLength, 7, 1);
    tempLen = numberLength;
    arraycopy(digits, 0, temp, 0, numberLength);
    BIG_LOOP: while (true) {
      result11 = {l:0, m:0, h:0};
      for (i1 = tempLen - 1; i1 >= 0; i1--) {
        temp1 = add_0(shl(result11, 32), and(fromInt(temp[i1]), {l:$intern_9, m:1023, h:0}));
        res = divideLongByBillion(temp1);
        temp[i1] = toInt(res);
        result11 = fromInt(toInt(shr(res, 32)));
      }
      resDigit = toInt(result11);
      previous = currentChar;
      do {
        result[--currentChar] = 48 + resDigit % 10 & $intern_5;
      }
       while ((resDigit = ~~(resDigit / 10)) != 0 && currentChar != 0);
      delta = 9 - previous + currentChar;
      for (i_0 = 0; i_0 < delta && currentChar > 0; i_0++) {
        result[--currentChar] = 48;
      }
      j = tempLen - 1;
      for (; temp[j] == 0; j--) {
        if (j == 0) {
          break BIG_LOOP;
        }
      }
      tempLen = j + 1;
    }
    while (result[currentChar] == 48) {
      ++currentChar;
    }
  }
  negNumber = sign < 0;
  exponent = resLengthInChars - currentChar - scale - 1;
  if (scale == 0) {
    negNumber && (result[--currentChar] = 45);
    return valueOf_2(result, currentChar, resLengthInChars - currentChar);
  }
  if (scale > 0 && exponent >= -6) {
    if (exponent >= 0) {
      insertPoint = currentChar + exponent;
      for (j0 = resLengthInChars - 1; j0 >= insertPoint; j0--) {
        result[j0 + 1] = result[j0];
      }
      result[++insertPoint] = 46;
      negNumber && (result[--currentChar] = 45);
      return valueOf_2(result, currentChar, resLengthInChars - currentChar + 1);
    }
    for (j = 2; j < -exponent + 1; j++) {
      result[--currentChar] = 48;
    }
    result[--currentChar] = 46;
    result[--currentChar] = 48;
    negNumber && (result[--currentChar] = 45);
    return valueOf_2(result, currentChar, resLengthInChars - currentChar);
  }
  startPoint = currentChar + 1;
  result1 = new StringBuilder_0;
  negNumber && (result1.string += '-' , result1);
  if (resLengthInChars - startPoint >= 1) {
    $append_3(result1, result[currentChar]);
    result1.string += '.';
    result1.string += valueOf_2(result, currentChar + 1, resLengthInChars - currentChar - 1);
  }
   else {
    result1.string += valueOf_2(result, currentChar, resLengthInChars - currentChar);
  }
  result1.string += 'E';
  exponent > 0 && (result1.string += '+' , result1);
  result1.string += '' + exponent;
  return result1.string;
}

var bigRadices, digitFitInInt;
function divide(quot, quotLength, a, aLength, b, bLength){
  var borrow, carry, divisorShift, firstDivisorDigit, guessDigit, i_0, j, k_0, leftHand, longR, normA, normB, product, rOverflowed, rem, res, rightHand;
  normA = initDim(I_classLit, $intern_4, 0, aLength + 1, 7, 1);
  normB = initDim(I_classLit, $intern_4, 0, bLength + 1, 7, 1);
  divisorShift = numberOfLeadingZeros_0(b[bLength - 1]);
  if (divisorShift != 0) {
    shiftLeft_0(normB, b, 0, divisorShift);
    shiftLeft_0(normA, a, 0, divisorShift);
  }
   else {
    arraycopy(a, 0, normA, 0, aLength);
    arraycopy(b, 0, normB, 0, bLength);
  }
  firstDivisorDigit = normB[bLength - 1];
  i_0 = quotLength - 1;
  j = aLength;
  while (i_0 >= 0) {
    if (normA[j] == firstDivisorDigit) {
      guessDigit = -1;
    }
     else {
      product = add_0(shl(and(fromInt(normA[j]), {l:$intern_9, m:1023, h:0}), 32), and(fromInt(normA[j - 1]), {l:$intern_9, m:1023, h:0}));
      res = divideLongByInt(product, firstDivisorDigit);
      guessDigit = toInt(res);
      rem = toInt(shr(res, 32));
      if (guessDigit != 0) {
        rOverflowed = false;
        ++guessDigit;
        do {
          --guessDigit;
          if (rOverflowed) {
            break;
          }
          leftHand = mul(and(fromInt(guessDigit), {l:$intern_9, m:1023, h:0}), and(fromInt(normB[bLength - 2]), {l:$intern_9, m:1023, h:0}));
          rightHand = add_0(shl(fromInt(rem), 32), and(fromInt(normA[j - 2]), {l:$intern_9, m:1023, h:0}));
          longR = add_0(and(fromInt(rem), {l:$intern_9, m:1023, h:0}), and(fromInt(firstDivisorDigit), {l:$intern_9, m:1023, h:0}));
          numberOfLeadingZeros_0(toInt(shru(longR, 32))) < 32?(rOverflowed = true):(rem = toInt(longR));
        }
         while (gt(xor(leftHand, {l:0, m:0, h:$intern_11}), xor(rightHand, {l:0, m:0, h:$intern_11})));
      }
    }
    if (guessDigit != 0) {
      borrow = multiplyAndSubtract(normA, j - bLength, normB, bLength, guessDigit);
      if (borrow != 0) {
        --guessDigit;
        carry = {l:0, m:0, h:0};
        for (k_0 = 0; k_0 < bLength; k_0++) {
          carry = add_0(carry, add_0(and(fromInt(normA[j - bLength + k_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(normB[k_0]), {l:$intern_9, m:1023, h:0})));
          normA[j - bLength + k_0] = toInt(carry);
          carry = shru(carry, 32);
        }
      }
    }
    quot[i_0] = guessDigit;
    --j;
    --i_0;
  }
  if (divisorShift != 0) {
    shiftRight_0(normB, bLength, normA, 0, divisorShift);
    return normB;
  }
  arraycopy(normA, 0, normB, 0, bLength);
  return normA;
}

function divideAndRemainderByInteger(val, divisor, divisorSign){
  var a, b, quo, quotientDigits, quotientSign, rem, remainderDigits, result0, result1, valDigits, valLen, valSign;
  valDigits = val.digits;
  valLen = val.numberLength;
  valSign = val.sign;
  if (valLen == 1) {
    a = and(fromInt(valDigits[0]), {l:$intern_9, m:1023, h:0});
    b = and(fromInt(divisor), {l:$intern_9, m:1023, h:0});
    quo = div(a, b);
    rem = mod(a, b);
    valSign != divisorSign && (quo = neg(quo));
    valSign < 0 && (rem = neg(rem));
    return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_7, 22, 0, [valueOf_6(quo), valueOf_6(rem)]);
  }
  quotientSign = valSign == divisorSign?1:-1;
  quotientDigits = initDim(I_classLit, $intern_4, 0, valLen, 7, 1);
  remainderDigits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [divideArrayByInt(quotientDigits, valDigits, valLen, divisor)]);
  result0 = new BigInteger_1(quotientSign, valLen, quotientDigits);
  result1 = new BigInteger_1(valSign, 1, remainderDigits);
  $cutOffLeadingZeroes(result0);
  $cutOffLeadingZeroes(result1);
  return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_7, 22, 0, [result0, result1]);
}

function divideArrayByInt(dest, src_0, srcLength, divisor){
  var aPos, bLong, bPos, i_0, quot, rem, temp;
  rem = {l:0, m:0, h:0};
  bLong = and(fromInt(divisor), {l:$intern_9, m:1023, h:0});
  for (i_0 = srcLength - 1; i_0 >= 0; i_0--) {
    temp = or(shl(rem, 32), and(fromInt(src_0[i_0]), {l:$intern_9, m:1023, h:0}));
    if (gte_0(temp, {l:0, m:0, h:0})) {
      quot = div(temp, bLong);
      rem = mod(temp, bLong);
    }
     else {
      aPos = shru(temp, 1);
      bPos = fromInt(divisor >>> 1);
      quot = div(aPos, bPos);
      rem = mod(aPos, bPos);
      rem = add_0(shl(rem, 1), and(temp, {l:1, m:0, h:0}));
      if ((divisor & 1) != 0) {
        if (lte(quot, rem)) {
          rem = sub_0(rem, quot);
        }
         else {
          if (lte(sub_0(quot, rem), bLong)) {
            rem = add_0(rem, sub_0(bLong, quot));
            quot = sub_0(quot, {l:1, m:0, h:0});
          }
           else {
            rem = add_0(rem, sub_0(shl(bLong, 1), quot));
            quot = sub_0(quot, {l:2, m:0, h:0});
          }
        }
      }
    }
    dest[i_0] = toInt(and(quot, {l:$intern_9, m:1023, h:0}));
  }
  return toInt(rem);
}

function divideLongByInt(a, b){
  var aPos, bLong, bPos, quot, rem;
  bLong = and(fromInt(b), {l:$intern_9, m:1023, h:0});
  if (gte_0(a, {l:0, m:0, h:0})) {
    quot = div(a, bLong);
    rem = mod(a, bLong);
  }
   else {
    aPos = shru(a, 1);
    bPos = fromInt(b >>> 1);
    quot = div(aPos, bPos);
    rem = mod(aPos, bPos);
    rem = add_0(shl(rem, 1), and(a, {l:1, m:0, h:0}));
    if ((b & 1) != 0) {
      if (lte(quot, rem)) {
        rem = sub_0(rem, quot);
      }
       else {
        if (lte(sub_0(quot, rem), bLong)) {
          rem = add_0(rem, sub_0(bLong, quot));
          quot = sub_0(quot, {l:1, m:0, h:0});
        }
         else {
          rem = add_0(rem, sub_0(shl(bLong, 1), quot));
          quot = sub_0(quot, {l:2, m:0, h:0});
        }
      }
    }
  }
  return or(shl(rem, 32), and(quot, {l:$intern_9, m:1023, h:0}));
}

function multiplyAndSubtract(a, start_0, b, bLen, c){
  var carry0, carry1, i_0;
  carry0 = {l:0, m:0, h:0};
  carry1 = {l:0, m:0, h:0};
  for (i_0 = 0; i_0 < bLen; i_0++) {
    carry0 = ($clinit_Multiplication() , add_0(mul(and(fromInt(b[i_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(c), {l:$intern_9, m:1023, h:0})), and(fromInt(toInt(carry0)), {l:$intern_9, m:1023, h:0})));
    carry1 = add_0(sub_0(and(fromInt(a[start_0 + i_0]), {l:$intern_9, m:1023, h:0}), and(carry0, {l:$intern_9, m:1023, h:0})), carry1);
    a[start_0 + i_0] = toInt(carry1);
    carry1 = shr(carry1, 32);
    carry0 = shru(carry0, 32);
  }
  carry1 = add_0(sub_0(and(fromInt(a[start_0 + bLen]), {l:$intern_9, m:1023, h:0}), carry0), carry1);
  a[start_0 + bLen] = toInt(carry1);
  return toInt(shr(carry1, 32));
}

function add_1(op1, op2){
  var a, b, cmp, op1Len, op1Sign, op2Len, op2Sign, res, res0, resDigits, resSign, valueHi, valueLo;
  op1Sign = op1.sign;
  op2Sign = op2.sign;
  if (op1Sign == 0) {
    return op2;
  }
  if (op2Sign == 0) {
    return op1;
  }
  op1Len = op1.numberLength;
  op2Len = op2.numberLength;
  if (op1Len + op2Len == 2) {
    a = and(fromInt(op1.digits[0]), {l:$intern_9, m:1023, h:0});
    b = and(fromInt(op2.digits[0]), {l:$intern_9, m:1023, h:0});
    if (op1Sign == op2Sign) {
      res0 = add_0(a, b);
      valueLo = toInt(res0);
      valueHi = toInt(shru(res0, 32));
      return valueHi == 0?new BigInteger_0(op1Sign, valueLo):new BigInteger_1(op1Sign, 2, initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [valueLo, valueHi]));
    }
    return valueOf_6(op1Sign < 0?sub_0(b, a):sub_0(a, b));
  }
   else if (op1Sign == op2Sign) {
    resSign = op1Sign;
    resDigits = op1Len >= op2Len?add_2(op1.digits, op1Len, op2.digits, op2Len):add_2(op2.digits, op2Len, op1.digits, op1Len);
  }
   else {
    cmp = op1Len != op2Len?op1Len > op2Len?1:-1:compareArrays(op1.digits, op2.digits, op1Len);
    if (cmp == 0) {
      return $clinit_BigInteger() , ZERO_6;
    }
    if (cmp == 1) {
      resSign = op1Sign;
      resDigits = subtract_0(op1.digits, op1Len, op2.digits, op2Len);
    }
     else {
      resSign = op2Sign;
      resDigits = subtract_0(op2.digits, op2Len, op1.digits, op1Len);
    }
  }
  res = new BigInteger_1(resSign, resDigits.length, resDigits);
  $cutOffLeadingZeroes(res);
  return res;
}

function add_2(a, aSize, b, bSize){
  var res;
  res = initDim(I_classLit, $intern_4, 0, aSize + 1, 7, 1);
  add_3(res, a, aSize, b, bSize);
  return res;
}

function add_3(res, a, aSize, b, bSize){
  var carry, i_0;
  carry = add_0(and(fromInt(a[0]), {l:$intern_9, m:1023, h:0}), and(fromInt(b[0]), {l:$intern_9, m:1023, h:0}));
  res[0] = toInt(carry);
  carry = shr(carry, 32);
  if (aSize >= bSize) {
    for (i_0 = 1; i_0 < bSize; i_0++) {
      carry = add_0(carry, add_0(and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(b[i_0]), {l:$intern_9, m:1023, h:0})));
      res[i_0] = toInt(carry);
      carry = shr(carry, 32);
    }
    for (; i_0 < aSize; i_0++) {
      carry = add_0(carry, and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}));
      res[i_0] = toInt(carry);
      carry = shr(carry, 32);
    }
  }
   else {
    for (i_0 = 1; i_0 < aSize; i_0++) {
      carry = add_0(carry, add_0(and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(b[i_0]), {l:$intern_9, m:1023, h:0})));
      res[i_0] = toInt(carry);
      carry = shr(carry, 32);
    }
    for (; i_0 < bSize; i_0++) {
      carry = add_0(carry, and(fromInt(b[i_0]), {l:$intern_9, m:1023, h:0}));
      res[i_0] = toInt(carry);
      carry = shr(carry, 32);
    }
  }
  neq(carry, {l:0, m:0, h:0}) && (res[i_0] = toInt(carry));
}

function compareArrays(a, b, size_0){
  var i_0;
  for (i_0 = size_0 - 1; i_0 >= 0 && a[i_0] == b[i_0]; i_0--)
  ;
  return i_0 < 0?0:lt(and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(b[i_0]), {l:$intern_9, m:1023, h:0}))?-1:1;
}

function inplaceAdd(a, aSize, addend){
  var carry, i_0;
  carry = and(fromInt(addend), {l:$intern_9, m:1023, h:0});
  for (i_0 = 0; neq(carry, {l:0, m:0, h:0}) && i_0 < aSize; i_0++) {
    carry = add_0(carry, and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}));
    a[i_0] = toInt(carry);
    carry = shr(carry, 32);
  }
  return toInt(carry);
}

function subtract(op1, op2){
  var a, b, cmp, op1Len, op1Sign, op2Len, op2Sign, res, resDigits, resSign;
  op1Sign = op1.sign;
  op2Sign = op2.sign;
  if (op2Sign == 0) {
    return op1;
  }
  if (op1Sign == 0) {
    return op2.sign == 0?op2:new BigInteger_1(-op2.sign, op2.numberLength, op2.digits);
  }
  op1Len = op1.numberLength;
  op2Len = op2.numberLength;
  if (op1Len + op2Len == 2) {
    a = and(fromInt(op1.digits[0]), {l:$intern_9, m:1023, h:0});
    b = and(fromInt(op2.digits[0]), {l:$intern_9, m:1023, h:0});
    op1Sign < 0 && (a = neg(a));
    op2Sign < 0 && (b = neg(b));
    return valueOf_6(sub_0(a, b));
  }
  cmp = op1Len != op2Len?op1Len > op2Len?1:-1:compareArrays(op1.digits, op2.digits, op1Len);
  if (cmp == -1) {
    resSign = -op2Sign;
    resDigits = op1Sign == op2Sign?subtract_0(op2.digits, op2Len, op1.digits, op1Len):add_2(op2.digits, op2Len, op1.digits, op1Len);
  }
   else {
    resSign = op1Sign;
    if (op1Sign == op2Sign) {
      if (cmp == 0) {
        return $clinit_BigInteger() , ZERO_6;
      }
      resDigits = subtract_0(op1.digits, op1Len, op2.digits, op2Len);
    }
     else {
      resDigits = add_2(op1.digits, op1Len, op2.digits, op2Len);
    }
  }
  res = new BigInteger_1(resSign, resDigits.length, resDigits);
  $cutOffLeadingZeroes(res);
  return res;
}

function subtract_0(a, aSize, b, bSize){
  var res;
  res = initDim(I_classLit, $intern_4, 0, aSize, 7, 1);
  subtract_1(res, a, aSize, b, bSize);
  return res;
}

function subtract_1(res, a, aSize, b, bSize){
  var borrow, i_0;
  borrow = {l:0, m:0, h:0};
  for (i_0 = 0; i_0 < bSize; i_0++) {
    borrow = add_0(borrow, sub_0(and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(b[i_0]), {l:$intern_9, m:1023, h:0})));
    res[i_0] = toInt(borrow);
    borrow = shr(borrow, 32);
  }
  for (; i_0 < aSize; i_0++) {
    borrow = add_0(borrow, and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}));
    res[i_0] = toInt(borrow);
    borrow = shr(borrow, 32);
  }
}

function $clinit_Multiplication(){
  $clinit_Multiplication = emptyMethod;
  var fivePow, i_0;
  bigFivePows = initDim(Ljava_math_BigInteger_2_classLit, $intern_7, 22, 32, 0, 1);
  bigTenPows = initDim(Ljava_math_BigInteger_2_classLit, $intern_7, 22, 32, 0, 1);
  tenPows = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [1, 10, 100, 1000, $intern_8, 100000, 1000000, 10000000, $intern_32, $intern_16]);
  fivePow = {l:1, m:0, h:0};
  for (i_0 = 0; i_0 <= 18; i_0++) {
    bigFivePows[i_0] = valueOf_6(fivePow);
    bigTenPows[i_0] = valueOf_6(shl(fivePow, i_0));
    fivePow = mul(fivePow, {l:5, m:0, h:0});
  }
  for (; i_0 < bigTenPows.length; i_0++) {
    bigFivePows[i_0] = $multiply_0(bigFivePows[i_0 - 1], bigFivePows[1]);
    bigTenPows[i_0] = $multiply_0(bigTenPows[i_0 - 1], ($clinit_BigInteger() , TEN));
  }
}

function karatsuba(op1, op2){
  $clinit_Multiplication();
  var lower, lowerOp1, lowerOp2, middle, ndiv2, temp, upper, upperOp1, upperOp2;
  if (op2.numberLength > op1.numberLength) {
    temp = op1;
    op1 = op2;
    op2 = temp;
  }
  if (op2.numberLength < 63) {
    return multiplyPAP(op1, op2);
  }
  ndiv2 = (op1.numberLength & -2) << 4;
  upperOp1 = $shiftRight(op1, ndiv2);
  upperOp2 = $shiftRight(op2, ndiv2);
  lowerOp1 = subtract(op1, $shiftLeft(upperOp1, ndiv2));
  lowerOp2 = subtract(op2, $shiftLeft(upperOp2, ndiv2));
  upper = karatsuba(upperOp1, upperOp2);
  lower = karatsuba(lowerOp1, lowerOp2);
  middle = karatsuba(subtract(upperOp1, lowerOp1), subtract(lowerOp2, upperOp2));
  middle = add_1(add_1(middle, upper), lower);
  middle = $shiftLeft(middle, ndiv2);
  upper = $shiftLeft(upper, ndiv2 << 1);
  return add_1(add_1(upper, middle), lower);
}

function multArraysPAP(aDigits, aLen, bDigits, bLen, resDigits){
  if (aLen == 0 || bLen == 0) {
    return;
  }
  aLen == 1?(resDigits[bLen] = multiplyByInt(resDigits, bDigits, bLen, aDigits[0])):bLen == 1?(resDigits[aLen] = multiplyByInt(resDigits, aDigits, aLen, bDigits[0])):multPAP(aDigits, bDigits, resDigits, aLen, bLen);
}

function multPAP(a, b, t, aLen, bLen){
  var aI, carry, i_0, j;
  if (maskUndefined(a) === maskUndefined(b) && aLen == bLen) {
    square(a, aLen, t);
    return;
  }
  for (i_0 = 0; i_0 < aLen; i_0++) {
    carry = {l:0, m:0, h:0};
    aI = a[i_0];
    for (j = 0; j < bLen; j++) {
      carry = add_0(add_0(mul(and(fromInt(aI), {l:$intern_9, m:1023, h:0}), and(fromInt(b[j]), {l:$intern_9, m:1023, h:0})), and(fromInt(t[i_0 + j]), {l:$intern_9, m:1023, h:0})), and(fromInt(toInt(carry)), {l:$intern_9, m:1023, h:0}));
      t[i_0 + j] = toInt(carry);
      carry = shru(carry, 32);
    }
    t[i_0 + bLen] = toInt(carry);
  }
}

function multiplyByInt(res, a, aSize, factor){
  $clinit_Multiplication();
  var carry, i_0;
  carry = {l:0, m:0, h:0};
  for (i_0 = 0; i_0 < aSize; i_0++) {
    carry = add_0(mul(and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(factor), {l:$intern_9, m:1023, h:0})), and(fromInt(toInt(carry)), {l:$intern_9, m:1023, h:0}));
    res[i_0] = toInt(carry);
    carry = shru(carry, 32);
  }
  return toInt(carry);
}

function multiplyByPositiveInt(val, factor){
  var aDigits, aNumberLength, res, resDigits, resHi, resLength, resLo, resSign, result;
  resSign = val.sign;
  if (resSign == 0) {
    return $clinit_BigInteger() , ZERO_6;
  }
  aNumberLength = val.numberLength;
  aDigits = val.digits;
  if (aNumberLength == 1) {
    res = mul(and(fromInt(aDigits[0]), {l:$intern_9, m:1023, h:0}), and(fromInt(factor), {l:$intern_9, m:1023, h:0}));
    resLo = toInt(res);
    resHi = toInt(shru(res, 32));
    return resHi == 0?new BigInteger_0(resSign, resLo):new BigInteger_1(resSign, 2, initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [resLo, resHi]));
  }
  resLength = aNumberLength + 1;
  resDigits = initDim(I_classLit, $intern_4, 0, resLength, 7, 1);
  resDigits[aNumberLength] = multiplyByInt(resDigits, aDigits, aNumberLength, factor);
  result = new BigInteger_1(resSign, resLength, resDigits);
  $cutOffLeadingZeroes(result);
  return result;
}

function multiplyByTenPow(val, exp_0){
  $clinit_Multiplication();
  return exp_0 < tenPows.length?multiplyByPositiveInt(val, tenPows[exp_0]):$multiply_0(val, powerOf10(exp_0));
}

function multiplyPAP(a, b){
  var aDigits, aLen, bDigits, bLen, resDigits, resLength, resSign, result, val, valueHi, valueLo;
  aLen = a.numberLength;
  bLen = b.numberLength;
  resLength = aLen + bLen;
  resSign = a.sign != b.sign?-1:1;
  if (resLength == 2) {
    val = mul(and(fromInt(a.digits[0]), {l:$intern_9, m:1023, h:0}), and(fromInt(b.digits[0]), {l:$intern_9, m:1023, h:0}));
    valueLo = toInt(val);
    valueHi = toInt(shru(val, 32));
    return valueHi == 0?new BigInteger_0(resSign, valueLo):new BigInteger_1(resSign, 2, initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [valueLo, valueHi]));
  }
  aDigits = a.digits;
  bDigits = b.digits;
  resDigits = initDim(I_classLit, $intern_4, 0, resLength, 7, 1);
  multArraysPAP(aDigits, aLen, bDigits, bLen, resDigits);
  result = new BigInteger_1(resSign, resLength, resDigits);
  $cutOffLeadingZeroes(result);
  return result;
}

function pow_0(base, exponent){
  $clinit_Multiplication();
  var acc, res;
  res = ($clinit_BigInteger() , ONE_2);
  acc = base;
  for (; exponent > 1; exponent >>= 1) {
    (exponent & 1) != 0 && (res = $multiply_0(res, acc));
    acc.numberLength == 1?(acc = $multiply_0(acc, acc)):(acc = new BigInteger_3(square(acc.digits, acc.numberLength, initDim(I_classLit, $intern_4, 0, acc.numberLength << 1, 7, 1))));
  }
  res = $multiply_0(res, acc);
  return res;
}

function powerOf10(exp_0){
  $clinit_Multiplication();
  var intExp, longExp, powerOfFive, res;
  intExp = round_int(exp_0);
  if (exp_0 < bigTenPows.length) {
    return bigTenPows[intExp];
  }
   else if (exp_0 <= 50) {
    return $pow(($clinit_BigInteger() , TEN), intExp);
  }
   else if (exp_0 <= 1000) {
    return $shiftLeft($pow(bigFivePows[1], intExp), intExp);
  }
  if (exp_0 > 1000000) {
    throw new ArithmeticException('power of ten too big');
  }
  if (exp_0 <= $intern_0) {
    return $shiftLeft($pow(bigFivePows[1], intExp), intExp);
  }
  powerOfFive = $pow(bigFivePows[1], $intern_0);
  res = powerOfFive;
  longExp = fromDouble(exp_0 - $intern_0);
  intExp = round_int(exp_0 % $intern_0);
  while (gt(longExp, {l:$intern_9, m:511, h:0})) {
    res = $multiply_0(res, powerOfFive);
    longExp = sub_0(longExp, {l:$intern_9, m:511, h:0});
  }
  res = $multiply_0(res, $pow(bigFivePows[1], intExp));
  res = $shiftLeft(res, $intern_0);
  longExp = fromDouble(exp_0 - $intern_0);
  while (gt(longExp, {l:$intern_9, m:511, h:0})) {
    res = $shiftLeft(res, $intern_0);
    longExp = sub_0(longExp, {l:$intern_9, m:511, h:0});
  }
  res = $shiftLeft(res, intExp);
  return res;
}

function square(a, aLen, res){
  var carry, i_0, i0, index_0, j;
  for (i0 = 0; i0 < aLen; i0++) {
    carry = {l:0, m:0, h:0};
    for (j = i0 + 1; j < aLen; j++) {
      carry = add_0(add_0(mul(and(fromInt(a[i0]), {l:$intern_9, m:1023, h:0}), and(fromInt(a[j]), {l:$intern_9, m:1023, h:0})), and(fromInt(res[i0 + j]), {l:$intern_9, m:1023, h:0})), and(fromInt(toInt(carry)), {l:$intern_9, m:1023, h:0}));
      res[i0 + j] = toInt(carry);
      carry = shru(carry, 32);
    }
    res[i0 + aLen] = toInt(carry);
  }
  shiftLeftOneBit(res, res, aLen << 1);
  carry = {l:0, m:0, h:0};
  for (i_0 = 0 , index_0 = 0; i_0 < aLen; ++i_0 , index_0++) {
    carry = add_0(add_0(mul(and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0}), and(fromInt(a[i_0]), {l:$intern_9, m:1023, h:0})), and(fromInt(res[index_0]), {l:$intern_9, m:1023, h:0})), and(fromInt(toInt(carry)), {l:$intern_9, m:1023, h:0}));
    res[index_0] = toInt(carry);
    carry = shru(carry, 32);
    ++index_0;
    carry = add_0(carry, and(fromInt(res[index_0]), {l:$intern_9, m:1023, h:0}));
    res[index_0] = toInt(carry);
    carry = shru(carry, 32);
  }
  return res;
}

var bigFivePows, bigTenPows, tenPows;
function $clinit_RoundingMode(){
  $clinit_RoundingMode = emptyMethod;
  UP = new RoundingMode('UP', 0);
  DOWN = new RoundingMode('DOWN', 1);
  CEILING = new RoundingMode('CEILING', 2);
  FLOOR = new RoundingMode('FLOOR', 3);
  HALF_UP = new RoundingMode('HALF_UP', 4);
  HALF_DOWN = new RoundingMode('HALF_DOWN', 5);
  HALF_EVEN = new RoundingMode('HALF_EVEN', 6);
  UNNECESSARY = new RoundingMode('UNNECESSARY', 7);
}

function RoundingMode(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_7(mode){
  $clinit_RoundingMode();
  switch (mode) {
    case 2:
      return CEILING;
    case 1:
      return DOWN;
    case 3:
      return FLOOR;
    case 5:
      return HALF_DOWN;
    case 6:
      return HALF_EVEN;
    case 4:
      return HALF_UP;
    case 7:
      return UNNECESSARY;
    case 0:
      return UP;
    default:throw new IllegalArgumentException_0('Invalid rounding mode');
  }
}

function values_1(){
  $clinit_RoundingMode();
  return initValues(getClassLiteralForArray(Ljava_math_RoundingMode_2_classLit, 1), $intern_7, 91, 0, [UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY]);
}

defineClass(91, 77, {3:1, 50:1, 77:1, 91:1}, RoundingMode);
var CEILING, DOWN, FLOOR, HALF_DOWN, HALF_EVEN, HALF_UP, UNNECESSARY, UP;
var Ljava_math_RoundingMode_2_classLit = createForEnum('java.math', 'RoundingMode', 91, Ljava_lang_Enum_2_classLit, values_1);
function $addAll(this$static, c){
  var changed, e, e$iterator;
  checkNotNull(c);
  changed = false;
  for (e$iterator = c.iterator(); e$iterator.hasNext();) {
    e = e$iterator.next();
    changed = changed | this$static.add_0(e);
  }
  return changed;
}

function $advanceToFind(this$static, o, remove){
  var e, iter;
  for (iter = this$static.iterator(); iter.hasNext();) {
    e = iter.next();
    if (maskUndefined(o) === maskUndefined(e) || o != null && equals_Ljava_lang_Object__Z__devirtual$(o, e)) {
      remove && iter.remove_1();
      return true;
    }
  }
  return false;
}

function $containsAll(this$static, c){
  var e, e$iterator;
  checkNotNull(c);
  for (e$iterator = c.iterator(); e$iterator.hasNext();) {
    e = e$iterator.next();
    if (!this$static.contains(e)) {
      return false;
    }
  }
  return true;
}

function $toArray(this$static, a){
  var i_0, it, size_0;
  size_0 = this$static.size_1();
  a.length < size_0 && (a = createFrom(a, size_0));
  it = this$static.iterator();
  for (i_0 = 0; i_0 < size_0; ++i_0) {
    setCheck(a, i_0, it.next());
  }
  a.length > size_0 && setCheck(a, size_0, null);
  return a;
}

function $toString_7(this$static){
  var comma, e, e$iterator, sb;
  sb = new StringBuilder_1('[');
  comma = false;
  for (e$iterator = this$static.iterator(); e$iterator.hasNext();) {
    e = e$iterator.next();
    comma?(sb.string += ', ' , sb):(comma = true);
    sb.string += e === this$static?'(this Collection)':'' + e;
  }
  sb.string += ']';
  return sb.string;
}

defineClass(658, 1, {});
_.add_0 = function add_4(o){
  throw new UnsupportedOperationException_0('Add not supported on this collection');
}
;
_.addAll = function addAll(c){
  return $addAll(this, c);
}
;
_.clear_0 = function clear_1(){
  var iter;
  for (iter = this.iterator(); iter.hasNext();) {
    iter.next();
    iter.remove_1();
  }
}
;
_.contains = function contains(o){
  return $advanceToFind(this, o, false);
}
;
_.isEmpty = function isEmpty(){
  return this.size_1() == 0;
}
;
_.remove = function remove_0(o){
  return $advanceToFind(this, o, true);
}
;
_.toArray = function toArray(){
  return this.toArray_0(initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, this.size_1(), 3, 1));
}
;
_.toArray_0 = function toArray_0(a){
  return $toArray(this, a);
}
;
_.toString$ = function toString_34(){
  return $toString_7(this);
}
;
var Ljava_util_AbstractCollection_2_classLit = createForClass('java.util', 'AbstractCollection', 658, Ljava_lang_Object_2_classLit);
function $containsEntry(this$static, entry){
  var key, ourValue, value_0;
  key = entry.getKey();
  value_0 = entry.getValue_1();
  ourValue = this$static.get_4(key);
  if (!(maskUndefined(value_0) === maskUndefined(ourValue) || value_0 != null && equals_Ljava_lang_Object__Z__devirtual$(value_0, ourValue))) {
    return false;
  }
  if (ourValue == null && !this$static.containsKey(key)) {
    return false;
  }
  return true;
}

function $implFindEntry(this$static, key, remove){
  var entry, iter, k_0;
  for (iter = this$static.entrySet_0().iterator(); iter.hasNext();) {
    entry = dynamicCast(iter.next(), 25);
    k_0 = entry.getKey();
    if (maskUndefined(key) === maskUndefined(k_0) || key != null && equals_Ljava_lang_Object__Z__devirtual$(key, k_0)) {
      if (remove) {
        entry = new AbstractMap$SimpleEntry(entry.getKey(), entry.getValue_1());
        iter.remove_1();
      }
      return entry;
    }
  }
  return null;
}

function $putAll(this$static, map_0){
  var e, e$iterator;
  checkNotNull(map_0);
  for (e$iterator = map_0.entrySet_0().iterator(); e$iterator.hasNext();) {
    e = dynamicCast(e$iterator.next(), 25);
    $put_0(this$static, e.getKey(), e.getValue_1());
  }
}

function $toString_8(this$static, o){
  return o === this$static?'(this Map)':'' + o;
}

function getEntryValueOrNull(entry){
  return !entry?null:entry.getValue_1();
}

defineClass(657, 1, $intern_38);
_.clear_0 = function clear_2(){
  this.entrySet_0().clear_0();
}
;
_.containsEntry = function containsEntry(entry){
  return $containsEntry(this, entry);
}
;
_.containsKey = function containsKey(key){
  return !!$implFindEntry(this, key, false);
}
;
_.containsValue = function containsValue(value_0){
  var entry, entry$iterator, v;
  for (entry$iterator = this.entrySet_0().iterator(); entry$iterator.hasNext();) {
    entry = dynamicCast(entry$iterator.next(), 25);
    v = entry.getValue_1();
    if (maskUndefined(value_0) === maskUndefined(v) || value_0 != null && equals_Ljava_lang_Object__Z__devirtual$(value_0, v)) {
      return true;
    }
  }
  return false;
}
;
_.equals$ = function equals_31(obj){
  var entry, entry$iterator, otherMap;
  if (obj === this) {
    return true;
  }
  if (!instanceOf(obj, 24)) {
    return false;
  }
  otherMap = dynamicCast(obj, 24);
  if (this.size_1() != otherMap.size_1()) {
    return false;
  }
  for (entry$iterator = otherMap.entrySet_0().iterator(); entry$iterator.hasNext();) {
    entry = dynamicCast(entry$iterator.next(), 25);
    if (!this.containsEntry(entry)) {
      return false;
    }
  }
  return true;
}
;
_.get_4 = function get_61(key){
  return getEntryValueOrNull($implFindEntry(this, key, false));
}
;
_.hashCode$ = function hashCode_32(){
  return hashCode_38(this.entrySet_0());
}
;
_.isEmpty = function isEmpty_0(){
  return this.size_1() == 0;
}
;
_.put_0 = function put_14(key, value_0){
  throw new UnsupportedOperationException_0('Put not supported on this map');
}
;
_.remove_0 = function remove_1(key){
  return getEntryValueOrNull($implFindEntry(this, key, true));
}
;
_.size_1 = function size_1(){
  return this.entrySet_0().size_1();
}
;
_.toString$ = function toString_35(){
  var comma, entry, entry$iterator, sb;
  sb = new StringBuilder_1('{');
  comma = false;
  for (entry$iterator = this.entrySet_0().iterator(); entry$iterator.hasNext();) {
    entry = dynamicCast(entry$iterator.next(), 25);
    comma?(sb.string += ', ' , sb):(comma = true);
    $append_4(sb, $toString_8(this, entry.getKey()));
    sb.string += '=';
    $append_4(sb, $toString_8(this, entry.getValue_1()));
  }
  sb.string += '}';
  return sb.string;
}
;
_.values_0 = function values_2(){
  return new AbstractMap$2(this);
}
;
var Ljava_util_AbstractMap_2_classLit = createForClass('java.util', 'AbstractMap', 657, Ljava_lang_Object_2_classLit);
function $containsKey(this$static, key){
  return isJavaString(key)?$hasStringValue(this$static, key):!!$getEntry(this$static.hashCodeMap, key);
}

function $elementAdded(this$static){
  ++this$static.size_0;
  structureChanged(this$static);
}

function $elementRemoved(this$static){
  --this$static.size_0;
  structureChanged(this$static);
}

function $get_12(this$static, key){
  return isJavaString(key)?$getStringValue(this$static, key):getEntryValueOrNull($getEntry(this$static.hashCodeMap, key));
}

function $getStringValue(this$static, key){
  return key == null?getEntryValueOrNull($getEntry(this$static.hashCodeMap, null)):this$static.stringMap.get_0(key);
}

function $hasStringValue(this$static, key){
  return key == null?!!$getEntry(this$static.hashCodeMap, null):!(this$static.stringMap.get_0(key) === undefined);
}

function $put_0(this$static, key, value_0){
  return isJavaString(key)?$putStringValue(this$static, key, value_0):$put_1(this$static.hashCodeMap, key, value_0);
}

function $putStringValue(this$static, key, value_0){
  return key == null?$put_1(this$static.hashCodeMap, null, value_0):this$static.stringMap.put_1(key, value_0);
}

function $remove(this$static, key){
  return isJavaString(key)?$removeStringValue(this$static, key):$remove_4(this$static.hashCodeMap, key);
}

function $removeStringValue(this$static, key){
  return key == null?$remove_4(this$static.hashCodeMap, null):this$static.stringMap.remove_3(key);
}

function $reset(this$static){
  $clinit_InternalJsMapFactory$BackwardCompatibleJsMapFactory();
  this$static.hashCodeMap = delegate.createJsHashCodeMap();
  this$static.hashCodeMap.host = this$static;
  this$static.stringMap = delegate.createJsStringMap();
  this$static.stringMap.host = this$static;
  this$static.size_0 = 0;
  structureChanged(this$static);
}

function AbstractHashMap(ignored, alsoIgnored){
  checkCriticalArgument(ignored >= 0, 'Negative initial capacity');
  checkCriticalArgument(alsoIgnored >= 0, 'Non-positive load factor');
  $reset(this);
}

defineClass(182, 657, $intern_38);
_.clear_0 = function clear_3(){
  $reset(this);
}
;
_.containsKey = function containsKey_0(key){
  return $containsKey(this, key);
}
;
_.containsValue = function containsValue_0(value_0){
  return this.stringMap.containsValue(value_0) || this.hashCodeMap.containsValue(value_0);
}
;
_.entrySet_0 = function entrySet(){
  return new AbstractHashMap$EntrySet(this);
}
;
_.get_4 = function get_62(key){
  return $get_12(this, key);
}
;
_.put_0 = function put_15(key, value_0){
  return $put_0(this, key, value_0);
}
;
_.remove_0 = function remove_2(key){
  return $remove(this, key);
}
;
_.size_1 = function size_2(){
  return this.size_0;
}
;
_.size_0 = 0;
var Ljava_util_AbstractHashMap_2_classLit = createForClass('java.util', 'AbstractHashMap', 182, Ljava_util_AbstractMap_2_classLit);
function $removeAll(this$static, c){
  var iter, o, o$iterator, size_0;
  checkNotNull(c);
  size_0 = this$static.map_0.size_1();
  if (size_0 < c.map_0.size_1()) {
    for (iter = $iterator_1(new AbstractNavigableMap$NavigableKeySet(this$static.map_0)); $hasNext_0(iter.val$entryIterator2.iter);) {
      o = $next_3(iter);
      !!c.map_0.getEntry(o) && $remove_7(iter.val$entryIterator2);
    }
  }
   else {
    for (o$iterator = $iterator_1(new AbstractNavigableMap$NavigableKeySet(c.map_0)); $hasNext_0(o$iterator.val$entryIterator2.iter);) {
      o = $next_3(o$iterator);
      this$static.map_0.remove_0(o) != null;
    }
  }
  return size_0 != this$static.map_0.size_1();
}

defineClass(659, 658, $intern_39);
_.equals$ = function equals_32(o){
  var other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 84)) {
    return false;
  }
  other = dynamicCast(o, 84);
  if (other.size_1() != this.size_1()) {
    return false;
  }
  return $containsAll(this, other);
}
;
_.hashCode$ = function hashCode_33(){
  return hashCode_38(this);
}
;
var Ljava_util_AbstractSet_2_classLit = createForClass('java.util', 'AbstractSet', 659, Ljava_util_AbstractCollection_2_classLit);
function $contains(this$static, o){
  if (instanceOf(o, 25)) {
    return $containsEntry(this$static.this$01, dynamicCast(o, 25));
  }
  return false;
}

function AbstractHashMap$EntrySet(this$0){
  this.this$01 = this$0;
}

defineClass(85, 659, $intern_39, AbstractHashMap$EntrySet);
_.clear_0 = function clear_4(){
  $reset(this.this$01);
}
;
_.contains = function contains_0(o){
  return $contains(this, o);
}
;
_.iterator = function iterator_0(){
  return new AbstractHashMap$EntrySetIterator(this.this$01);
}
;
_.remove = function remove_3(entry){
  var key;
  if ($contains(this, entry)) {
    key = dynamicCast(entry, 25).getKey();
    $remove(this.this$01, key);
    return true;
  }
  return false;
}
;
_.size_1 = function size_3(){
  return this.this$01.size_0;
}
;
var Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySet', 85, Ljava_util_AbstractSet_2_classLit);
function $hasNext(this$static){
  if (this$static.current.hasNext()) {
    return true;
  }
  if (this$static.current != this$static.stringMapEntries) {
    return false;
  }
  this$static.current = this$static.this$01.hashCodeMap.entries();
  return this$static.current.hasNext();
}

function $next(this$static){
  return checkStructuralChange(this$static.this$01, this$static) , checkCriticalElement($hasNext(this$static)) , this$static.last = this$static.current , dynamicCast(this$static.current.next(), 25);
}

function $remove_0(this$static){
  checkState(!!this$static.last);
  checkStructuralChange(this$static.this$01, this$static);
  this$static.last.remove_1();
  this$static.last = null;
  recordLastKnownStructure(this$static.this$01, this$static);
}

function AbstractHashMap$EntrySetIterator(this$0){
  this.this$01 = this$0;
  this.stringMapEntries = this.this$01.stringMap.entries();
  this.current = this.stringMapEntries;
  setModCount(this, this$0._gwt_modCount);
}

defineClass(86, 1, {}, AbstractHashMap$EntrySetIterator);
_.hasNext = function hasNext(){
  return $hasNext(this);
}
;
_.next = function next_0(){
  return $next(this);
}
;
_.remove_1 = function remove_4(){
  $remove_0(this);
}
;
var Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySetIterator', 86, Ljava_lang_Object_2_classLit);
function $equals_10(this$static, o){
  var elem, elem$iterator, elemOther, iterOther, other;
  if (o === this$static) {
    return true;
  }
  if (!instanceOf(o, 33)) {
    return false;
  }
  other = dynamicCast(o, 33);
  if (this$static.size_1() != other.size_1()) {
    return false;
  }
  iterOther = other.iterator();
  for (elem$iterator = this$static.iterator(); elem$iterator.i < elem$iterator.this$01.size_1();) {
    elem = (checkCriticalElement(elem$iterator.i < elem$iterator.this$01.size_1()) , elem$iterator.this$01.get_5(elem$iterator.last = elem$iterator.i++));
    elemOther = (checkCriticalElement(iterOther.i < iterOther.this$01.size_1()) , iterOther.this$01.get_5(iterOther.last = iterOther.i++));
    if (!(maskUndefined(elem) === maskUndefined(elemOther) || elem != null && equals_Ljava_lang_Object__Z__devirtual$(elem, elemOther))) {
      return false;
    }
  }
  return true;
}

defineClass(660, 658, {33:1});
_.add_1 = function add_5(index_0, element){
  throw new UnsupportedOperationException_0('Add not supported on this list');
}
;
_.add_0 = function add_6(obj){
  this.add_1(this.size_1(), obj);
  return true;
}
;
_.clear_0 = function clear_5(){
  this.removeRange(0, this.size_1());
}
;
_.equals$ = function equals_33(o){
  return $equals_10(this, o);
}
;
_.hashCode$ = function hashCode_34(){
  return hashCode_39(this);
}
;
_.iterator = function iterator_1(){
  return new AbstractList$IteratorImpl(this);
}
;
_.remove_2 = function remove_5(index_0){
  throw new UnsupportedOperationException_0('Remove not supported on this list');
}
;
_.removeRange = function removeRange(fromIndex, endIndex){
  var i_0, iter;
  iter = new AbstractList$ListIteratorImpl(this, fromIndex);
  for (i_0 = fromIndex; i_0 < endIndex; ++i_0) {
    checkCriticalElement(iter.i < iter.this$01.size_1());
    iter.this$01.get_5(iter.last = iter.i++);
    $remove_1(iter);
  }
}
;
_.set_0 = function set_3(index_0, o){
  throw new UnsupportedOperationException_0('Set not supported on this list');
}
;
var Ljava_util_AbstractList_2_classLit = createForClass('java.util', 'AbstractList', 660, Ljava_util_AbstractCollection_2_classLit);
function $hasNext_0(this$static){
  return this$static.i < this$static.this$01.size_1();
}

function $next_0(this$static){
  checkCriticalElement(this$static.i < this$static.this$01.size_1());
  return this$static.this$01.get_5(this$static.last = this$static.i++);
}

function $remove_1(this$static){
  checkState(this$static.last != -1);
  this$static.this$01.remove_2(this$static.last);
  this$static.i = this$static.last;
  this$static.last = -1;
}

function AbstractList$IteratorImpl(this$0){
  this.this$01 = this$0;
}

defineClass(28, 1, {}, AbstractList$IteratorImpl);
_.hasNext = function hasNext_0(){
  return $hasNext_0(this);
}
;
_.next = function next_1(){
  return $next_0(this);
}
;
_.remove_1 = function remove_6(){
  $remove_1(this);
}
;
_.i = 0;
_.last = -1;
var Ljava_util_AbstractList$IteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/IteratorImpl', 28, Ljava_lang_Object_2_classLit);
function AbstractList$ListIteratorImpl(this$0, start_0){
  AbstractList$IteratorImpl.call(this, this$0);
  checkPositionIndex(start_0, this$0.size_1());
  this.i = start_0;
}

defineClass(293, 28, {}, AbstractList$ListIteratorImpl);
var Ljava_util_AbstractList$ListIteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/ListIteratorImpl', 293, Ljava_util_AbstractList$IteratorImpl_2_classLit);
function AbstractList$SubList(wrapped, fromIndex, toIndex){
  checkCriticalPositionIndexes(fromIndex, toIndex, wrapped.array.length);
  this.wrapped = wrapped;
  this.fromIndex = fromIndex;
  this.size_0 = toIndex - fromIndex;
}

defineClass(375, 660, {33:1}, AbstractList$SubList);
_.add_1 = function add_7(index_0, element){
  checkPositionIndex(index_0, this.size_0);
  $add_2(this.wrapped, this.fromIndex + index_0, element);
  ++this.size_0;
}
;
_.get_5 = function get_63(index_0){
  checkElementIndex(index_0, this.size_0);
  return $get_13(this.wrapped, this.fromIndex + index_0);
}
;
_.remove_2 = function remove_7(index_0){
  var result;
  checkElementIndex(index_0, this.size_0);
  result = this.wrapped.remove_2(this.fromIndex + index_0);
  --this.size_0;
  return result;
}
;
_.set_0 = function set_4(index_0, element){
  checkElementIndex(index_0, this.size_0);
  return $set_1(this.wrapped, this.fromIndex + index_0, element);
}
;
_.size_1 = function size_4(){
  return this.size_0;
}
;
_.fromIndex = 0;
_.size_0 = 0;
var Ljava_util_AbstractList$SubList_2_classLit = createForClass('java.util', 'AbstractList/SubList', 375, Ljava_util_AbstractList_2_classLit);
function $iterator(this$static){
  var outerIter;
  outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.this$01)).this$01);
  return new AbstractMap$1$1(outerIter);
}

function AbstractMap$1(this$0){
  this.this$01 = this$0;
}

defineClass(59, 659, $intern_39, AbstractMap$1);
_.clear_0 = function clear_6(){
  $reset(this.this$01);
}
;
_.contains = function contains_1(key){
  return $containsKey(this.this$01, key);
}
;
_.iterator = function iterator_2(){
  return $iterator(this);
}
;
_.remove = function remove_8(key){
  if ($containsKey(this.this$01, key)) {
    $remove(this.this$01, key);
    return true;
  }
  return false;
}
;
_.size_1 = function size_5(){
  return this.this$01.size_0;
}
;
var Ljava_util_AbstractMap$1_2_classLit = createForClass('java.util', 'AbstractMap/1', 59, Ljava_util_AbstractSet_2_classLit);
function $next_1(this$static){
  var entry;
  entry = $next(this$static.val$outerIter2);
  return entry.getKey();
}

function AbstractMap$1$1(val$outerIter){
  this.val$outerIter2 = val$outerIter;
}

defineClass(367, 1, {}, AbstractMap$1$1);
_.hasNext = function hasNext_1(){
  return $hasNext(this.val$outerIter2);
}
;
_.next = function next_2(){
  return $next_1(this);
}
;
_.remove_1 = function remove_9(){
  $remove_0(this.val$outerIter2);
}
;
var Ljava_util_AbstractMap$1$1_2_classLit = createForClass('java.util', 'AbstractMap/1/1', 367, Ljava_lang_Object_2_classLit);
function $iterator_0(this$static){
  var outerIter;
  outerIter = this$static.this$01.entrySet_0().iterator();
  return new AbstractMap$2$1(outerIter);
}

function AbstractMap$2(this$0){
  this.this$01 = this$0;
}

defineClass(37, 658, {}, AbstractMap$2);
_.clear_0 = function clear_7(){
  this.this$01.clear_0();
}
;
_.contains = function contains_2(value_0){
  return this.this$01.containsValue(value_0);
}
;
_.iterator = function iterator_3(){
  return $iterator_0(this);
}
;
_.size_1 = function size_6(){
  return this.this$01.size_1();
}
;
var Ljava_util_AbstractMap$2_2_classLit = createForClass('java.util', 'AbstractMap/2', 37, Ljava_util_AbstractCollection_2_classLit);
function $next_2(this$static){
  var entry;
  entry = dynamicCast(this$static.val$outerIter2.next(), 25);
  return entry.getValue_1();
}

function AbstractMap$2$1(val$outerIter){
  this.val$outerIter2 = val$outerIter;
}

defineClass(368, 1, {}, AbstractMap$2$1);
_.hasNext = function hasNext_2(){
  return this.val$outerIter2.hasNext();
}
;
_.next = function next_3(){
  return $next_2(this);
}
;
_.remove_1 = function remove_10(){
  this.val$outerIter2.remove_1();
}
;
var Ljava_util_AbstractMap$2$1_2_classLit = createForClass('java.util', 'AbstractMap/2/1', 368, Ljava_lang_Object_2_classLit);
function $setValue_2(this$static, value_0){
  var oldValue;
  oldValue = this$static.value_0;
  this$static.value_0 = value_0;
  return oldValue;
}

defineClass(183, 1, {183:1, 25:1});
_.equals$ = function equals_34(other){
  var entry;
  if (!instanceOf(other, 25)) {
    return false;
  }
  entry = dynamicCast(other, 25);
  return equals_41(this.key, entry.getKey()) && equals_41(this.value_0, entry.getValue_1());
}
;
_.getKey = function getKey(){
  return this.key;
}
;
_.getValue_1 = function getValue_2(){
  return this.value_0;
}
;
_.hashCode$ = function hashCode_35(){
  return hashCode_44(this.key) ^ hashCode_44(this.value_0);
}
;
_.setValue = function setValue(value_0){
  return $setValue_2(this, value_0);
}
;
_.toString$ = function toString_36(){
  return this.key + '=' + this.value_0;
}
;
var Ljava_util_AbstractMap$AbstractEntry_2_classLit = createForClass('java.util', 'AbstractMap/AbstractEntry', 183, Ljava_lang_Object_2_classLit);
function AbstractMap$SimpleEntry(key, value_0){
  this.key = key;
  this.value_0 = value_0;
}

defineClass(163, 183, {183:1, 163:1, 25:1}, AbstractMap$SimpleEntry);
var Ljava_util_AbstractMap$SimpleEntry_2_classLit = createForClass('java.util', 'AbstractMap/SimpleEntry', 163, Ljava_util_AbstractMap$AbstractEntry_2_classLit);
defineClass(661, 1, {25:1});
_.equals$ = function equals_35(other){
  var entry;
  if (!instanceOf(other, 25)) {
    return false;
  }
  entry = dynamicCast(other, 25);
  return equals_41(this.getKey(), entry.getKey()) && equals_41(this.getValue_1(), entry.getValue_1());
}
;
_.hashCode$ = function hashCode_36(){
  return hashCode_44(this.getKey()) ^ hashCode_44(this.getValue_1());
}
;
_.toString$ = function toString_37(){
  return this.getKey() + '=' + this.getValue_1();
}
;
var Ljava_util_AbstractMapEntry_2_classLit = createForClass('java.util', 'AbstractMapEntry', 661, Ljava_lang_Object_2_classLit);
function $containsEntry_0(this$static, entry){
  var key, lookupEntry;
  key = entry.getKey();
  lookupEntry = this$static.getEntry(key);
  return !!lookupEntry && equals_41(lookupEntry.value_0, entry.getValue_1());
}

function getKeyOrNSE(entry){
  if (!entry) {
    throw new NoSuchElementException;
  }
  return entry.key;
}

defineClass(679, 657, $intern_38);
_.containsEntry = function containsEntry_0(entry){
  return $containsEntry_0(this, entry);
}
;
_.containsKey = function containsKey_1(k_0){
  return !!this.getEntry(k_0);
}
;
_.entrySet_0 = function entrySet_0(){
  return new AbstractNavigableMap$EntrySet(this);
}
;
_.get_4 = function get_64(k_0){
  return getEntryValueOrNull(this.getEntry(k_0));
}
;
var Ljava_util_AbstractNavigableMap_2_classLit = createForClass('java.util', 'AbstractNavigableMap', 679, Ljava_util_AbstractMap_2_classLit);
function AbstractNavigableMap$EntrySet(this$0){
  this.this$01_0 = this$0;
}

defineClass(250, 659, $intern_39, AbstractNavigableMap$EntrySet);
_.contains = function contains_3(o){
  return instanceOf(o, 25) && $containsEntry_0(this.this$01_0, dynamicCast(o, 25));
}
;
_.iterator = function iterator_4(){
  return this.this$01_0.entryIterator();
}
;
_.remove = function remove_11(o){
  var entry;
  if (instanceOf(o, 25)) {
    entry = dynamicCast(o, 25);
    return this.this$01_0.removeEntry(entry);
  }
  return false;
}
;
_.size_1 = function size_7(){
  return this.this$01_0.size_1();
}
;
var Ljava_util_AbstractNavigableMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/EntrySet', 250, Ljava_util_AbstractSet_2_classLit);
function $iterator_1(this$static){
  var entryIterator;
  entryIterator = this$static.map_0.entrySet_0().this$01_0.entryIterator();
  return new AbstractNavigableMap$NavigableKeySet$1(entryIterator);
}

function AbstractNavigableMap$NavigableKeySet(map_0){
  this.map_0 = map_0;
}

defineClass(19, 659, {84:1, 615:1}, AbstractNavigableMap$NavigableKeySet);
_.clear_0 = function clear_8(){
  this.map_0.clear_0();
}
;
_.comparator = function comparator_0(){
  return this.map_0.comparator();
}
;
_.contains = function contains_4(o){
  return !!this.map_0.getEntry(o);
}
;
_.iterator = function iterator_5(){
  return $iterator_1(this);
}
;
_.remove = function remove_12(o){
  if (this.map_0.getEntry(o)) {
    this.map_0.remove_0(o);
    return true;
  }
  return false;
}
;
_.size_1 = function size_8(){
  return this.map_0.size_1();
}
;
var Ljava_util_AbstractNavigableMap$NavigableKeySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet', 19, Ljava_util_AbstractSet_2_classLit);
function $next_3(this$static){
  var entry;
  entry = $next_4(this$static.val$entryIterator2);
  return entry.getKey();
}

function AbstractNavigableMap$NavigableKeySet$1(val$entryIterator){
  this.val$entryIterator2 = val$entryIterator;
}

defineClass(539, 1, {}, AbstractNavigableMap$NavigableKeySet$1);
_.hasNext = function hasNext_3(){
  return $hasNext_0(this.val$entryIterator2.iter);
}
;
_.next = function next_4(){
  return $next_3(this);
}
;
_.remove_1 = function remove_13(){
  $remove_7(this.val$entryIterator2);
}
;
var Ljava_util_AbstractNavigableMap$NavigableKeySet$1_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet/1', 539, Ljava_lang_Object_2_classLit);
function $$init_3(this$static){
  this$static.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
}

function $add_2(this$static, index_0, o){
  checkPositionIndex(index_0, this$static.array.length);
  splice_0(this$static.array, index_0, 0, o);
}

function $add_3(this$static, o){
  setCheck(this$static.array, this$static.array.length, o);
  return true;
}

function $addAll_0(this$static, c){
  var cArray, len;
  cArray = c.toArray();
  len = cArray.length;
  if (len == 0) {
    return false;
  }
  $insertAt(this$static, this$static.array.length, cArray);
  return true;
}

function $get_13(this$static, index_0){
  checkElementIndex(index_0, this$static.array.length);
  return this$static.array[index_0];
}

function $indexOf_1(this$static, o, index_0){
  for (; index_0 < this$static.array.length; ++index_0) {
    if (equals_41(o, this$static.array[index_0])) {
      return index_0;
    }
  }
  return -1;
}

function $insertAt(this$static, index_0, values){
  nativeArraySplice(values, 0, this$static.array, index_0, values.length, false);
}

function $remove_2(this$static, index_0){
  var previous;
  previous = (checkElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
  splice(this$static.array, index_0, 1);
  return previous;
}

function $remove_3(this$static, o){
  var i_0;
  i_0 = $indexOf_1(this$static, o, 0);
  if (i_0 == -1) {
    return false;
  }
  this$static.remove_2(i_0);
  return true;
}

function $removeRange(this$static, fromIndex, endIndex){
  var count;
  checkCriticalPositionIndexes(fromIndex, endIndex, this$static.array.length);
  count = endIndex - fromIndex;
  splice(this$static.array, fromIndex, count);
}

function $set_1(this$static, index_0, o){
  var previous;
  previous = (checkElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
  setCheck(this$static.array, index_0, o);
  return previous;
}

function $toArray_0(this$static){
  return cloneSubrange(this$static.array, this$static.array.length);
}

function $toArray_1(this$static, out){
  var i_0, size_0;
  size_0 = this$static.array.length;
  out.length < size_0 && (out = createFrom(out, size_0));
  for (i_0 = 0; i_0 < size_0; ++i_0) {
    setCheck(out, i_0, this$static.array[i_0]);
  }
  out.length > size_0 && setCheck(out, size_0, null);
  return out;
}

function ArrayList(){
  $$init_3(this);
}

function ArrayList_0(initialCapacity){
  $$init_3(this);
  checkCriticalArgument(initialCapacity >= 0, 'Initial capacity must not be negative');
}

function splice(array, index_0, deleteCount){
  array.splice(index_0, deleteCount);
}

function splice_0(array, index_0, deleteCount, value_0){
  array.splice(index_0, deleteCount, value_0);
}

defineClass(13, 660, $intern_40, ArrayList, ArrayList_0);
_.add_1 = function add_8(index_0, o){
  $add_2(this, index_0, o);
}
;
_.add_0 = function add_9(o){
  return $add_3(this, o);
}
;
_.addAll = function addAll_0(c){
  return $addAll_0(this, c);
}
;
_.clear_0 = function clear_9(){
  this.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
}
;
_.contains = function contains_5(o){
  return $indexOf_1(this, o, 0) != -1;
}
;
_.get_5 = function get_65(index_0){
  return $get_13(this, index_0);
}
;
_.isEmpty = function isEmpty_1(){
  return this.array.length == 0;
}
;
_.remove_2 = function remove_14(index_0){
  return $remove_2(this, index_0);
}
;
_.remove = function remove_15(o){
  return $remove_3(this, o);
}
;
_.removeRange = function removeRange_0(fromIndex, endIndex){
  $removeRange(this, fromIndex, endIndex);
}
;
_.set_0 = function set_5(index_0, o){
  return $set_1(this, index_0, o);
}
;
_.size_1 = function size_9(){
  return this.array.length;
}
;
_.toArray = function toArray_1(){
  return $toArray_0(this);
}
;
_.toArray_0 = function toArray_2(out){
  return $toArray_1(this, out);
}
;
var Ljava_util_ArrayList_2_classLit = createForClass('java.util', 'ArrayList', 13, Ljava_util_AbstractList_2_classLit);
function binarySearch(sortedArray, key, comparator){
  var compareResult, high, low, mid, midVal;
  !comparator && (comparator = ($clinit_Comparators() , $clinit_Comparators() , NATURAL));
  low = 0;
  high = sortedArray.length - 1;
  while (low <= high) {
    mid = low + (high - low >> 1);
    midVal = sortedArray[mid];
    compareResult = comparator.compare(midVal, key);
    if (compareResult < 0) {
      low = mid + 1;
    }
     else if (compareResult > 0) {
      high = mid - 1;
    }
     else {
      return mid;
    }
  }
  return -low - 1;
}

function equals_36(array1, array2){
  var i_0, val1, val2;
  if (maskUndefined(array1) === maskUndefined(array2)) {
    return true;
  }
  if (array1 == null || array2 == null) {
    return false;
  }
  if (array1.length != array2.length) {
    return false;
  }
  for (i_0 = 0; i_0 < array1.length; ++i_0) {
    val1 = array1[i_0];
    val2 = array2[i_0];
    if (!(val1 == val2 || val1 != null && $equals_7(val1, val2))) {
      return false;
    }
  }
  return true;
}

function hashCode_37(a){
  var e, e$index, e$max, hashCode;
  hashCode = 1;
  for (e$index = 0 , e$max = a.length; e$index < e$max; ++e$index) {
    e = a[e$index];
    hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = ~~hashCode;
  }
  return hashCode;
}

function enumeration(c){
  var it;
  it = c.iterator();
  return new Collections$1(it);
}

function hashCode_38(collection){
  var e, e$iterator, hashCode;
  hashCode = 0;
  for (e$iterator = collection.iterator(); e$iterator.hasNext();) {
    e = e$iterator.next();
    hashCode = hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = ~~hashCode;
  }
  return hashCode;
}

function hashCode_39(list){
  var e, e$iterator, hashCode;
  hashCode = 1;
  for (e$iterator = list.iterator(); e$iterator.i < e$iterator.this$01.size_1();) {
    e = (checkCriticalElement(e$iterator.i < e$iterator.this$01.size_1()) , e$iterator.this$01.get_5(e$iterator.last = e$iterator.i++));
    hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = ~~hashCode;
  }
  return hashCode;
}

function Collections$1(val$it){
  this.val$it1 = val$it;
}

defineClass(374, 1, {}, Collections$1);
var Ljava_util_Collections$1_2_classLit = createForClass('java.util', 'Collections/1', 374, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableCollection(coll){
  this.coll = coll;
}

defineClass(291, 1, {}, Collections$UnmodifiableCollection);
_.add_0 = function add_10(o){
  throw new UnsupportedOperationException;
}
;
_.addAll = function addAll_1(c){
  throw new UnsupportedOperationException;
}
;
_.clear_0 = function clear_10(){
  throw new UnsupportedOperationException;
}
;
_.isEmpty = function isEmpty_2(){
  return this.coll.isEmpty();
}
;
_.iterator = function iterator_6(){
  return new Collections$UnmodifiableCollectionIterator(this.coll.iterator());
}
;
_.size_1 = function size_10(){
  return this.coll.size_1();
}
;
_.toArray = function toArray_3(){
  return this.coll.toArray();
}
;
_.toArray_0 = function toArray_4(a){
  return this.coll.toArray_0(a);
}
;
_.toString$ = function toString_38(){
  return this.coll.toString$();
}
;
var Ljava_util_Collections$UnmodifiableCollection_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollection', 291, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableCollectionIterator(it){
  this.it = it;
}

defineClass(372, 1, {}, Collections$UnmodifiableCollectionIterator);
_.hasNext = function hasNext_4(){
  return this.it.hasNext();
}
;
_.next = function next_5(){
  return this.it.next();
}
;
_.remove_1 = function remove_16(){
  throw new UnsupportedOperationException;
}
;
var Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollectionIterator', 372, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableMap(map_0){
  this.map_0 = map_0;
}

defineClass(369, 1, $intern_38, Collections$UnmodifiableMap);
_.entrySet_0 = function entrySet_1(){
  !this.entrySet && (this.entrySet = new Collections$UnmodifiableMap$UnmodifiableEntrySet(this.map_0.entrySet_0()));
  return this.entrySet;
}
;
_.equals$ = function equals_37(o){
  return this.map_0.equals$(o);
}
;
_.get_4 = function get_66(key){
  return this.map_0.get_4(key);
}
;
_.hashCode$ = function hashCode_40(){
  return this.map_0.hashCode$();
}
;
_.isEmpty = function isEmpty_3(){
  return this.map_0.isEmpty();
}
;
_.put_0 = function put_16(key, value_0){
  throw new UnsupportedOperationException;
}
;
_.remove_0 = function remove_17(key){
  throw new UnsupportedOperationException;
}
;
_.size_1 = function size_11(){
  return this.map_0.size_1();
}
;
_.toString$ = function toString_39(){
  return this.map_0.toString$();
}
;
_.values_0 = function values_3(){
  !this.values && (this.values = new Collections$UnmodifiableCollection(this.map_0.values_0()));
  return this.values;
}
;
var Ljava_util_Collections$UnmodifiableMap_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap', 369, Ljava_lang_Object_2_classLit);
defineClass(370, 291, $intern_39);
_.equals$ = function equals_38(o){
  return this.coll.equals$(o);
}
;
_.hashCode$ = function hashCode_41(){
  return this.coll.hashCode$();
}
;
var Ljava_util_Collections$UnmodifiableSet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableSet', 370, Ljava_util_Collections$UnmodifiableCollection_2_classLit);
function $wrap(array, size_0){
  var i_0;
  for (i_0 = 0; i_0 < size_0; ++i_0) {
    setCheck(array, i_0, new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(dynamicCast(array[i_0], 25)));
  }
}

function Collections$UnmodifiableMap$UnmodifiableEntrySet(s){
  Collections$UnmodifiableCollection.call(this, s);
}

defineClass(371, 370, $intern_39, Collections$UnmodifiableMap$UnmodifiableEntrySet);
_.iterator = function iterator_7(){
  var it;
  it = this.coll.iterator();
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$1(it);
}
;
_.toArray = function toArray_5(){
  var array;
  array = this.coll.toArray();
  $wrap(array, array.length);
  return array;
}
;
_.toArray_0 = function toArray_6(a){
  var result;
  result = this.coll.toArray_0(a);
  $wrap(result, this.coll.size_1());
  return result;
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet', 371, Ljava_util_Collections$UnmodifiableSet_2_classLit);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$1(val$it){
  this.val$it2 = val$it;
}

defineClass(373, 1, {}, Collections$UnmodifiableMap$UnmodifiableEntrySet$1);
_.hasNext = function hasNext_5(){
  return this.val$it2.hasNext();
}
;
_.next = function next_6(){
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(dynamicCast(this.val$it2.next(), 25));
}
;
_.remove_1 = function remove_18(){
  throw new UnsupportedOperationException;
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$1_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/1', 373, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(entry){
  this.entry = entry;
}

defineClass(292, 1, {25:1}, Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry);
_.equals$ = function equals_39(o){
  return this.entry.equals$(o);
}
;
_.getKey = function getKey_0(){
  return this.entry.getKey();
}
;
_.getValue_1 = function getValue_3(){
  return this.entry.getValue_1();
}
;
_.hashCode$ = function hashCode_42(){
  return this.entry.hashCode$();
}
;
_.setValue = function setValue_0(value_0){
  throw new UnsupportedOperationException;
}
;
_.toString$ = function toString_40(){
  return this.entry.toString$();
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry', 292, Ljava_lang_Object_2_classLit);
function $clinit_Comparators(){
  $clinit_Comparators = emptyMethod;
  NATURAL = new Comparators$1;
}

var NATURAL;
function Comparators$1(){
}

defineClass(552, 1, {}, Comparators$1);
_.compare = function compare_34(o1, o2){
  checkNotNull(o1);
  checkNotNull(o2);
  return compareTo_Ljava_lang_Object__I__devirtual$(dynamicCast(o1, 50), o2);
}
;
var Ljava_util_Comparators$1_2_classLit = createForClass('java.util', 'Comparators/1', 552, Ljava_lang_Object_2_classLit);
function checkStructuralChange(host, iterator){
  if (iterator._gwt_modCount != host._gwt_modCount) {
    throw new ConcurrentModificationException;
  }
}

function recordLastKnownStructure(host, iterator){
  setModCount(iterator, host._gwt_modCount);
}

function setModCount(o, modCount){
  o._gwt_modCount = modCount;
}

function structureChanged(map_0){
  var modCount;
  modCount = map_0._gwt_modCount | 0;
  setModCount(map_0, modCount + 1);
}

function ConcurrentModificationException(){
  RuntimeException.call(this);
}

defineClass(476, 20, $intern_2, ConcurrentModificationException);
var Ljava_util_ConcurrentModificationException_2_classLit = createForClass('java.util', 'ConcurrentModificationException', 476, Ljava_lang_RuntimeException_2_classLit);
function $compareTo_9(this$static, other){
  return compare_33(fromDouble(this$static.jsdate.getTime()), fromDouble(other.jsdate.getTime()));
}

function $fixDaylightSavings(this$static, requestedHours){
  var badHours, copy, day, hours, newTime, originalTimeInMillis, timeDiff, timeDiffHours, timeDiffMinutes;
  hours = this$static.jsdate.getHours();
  if (hours % 24 != requestedHours % 24) {
    copy = create(this$static.jsdate.getTime());
    $setDate(copy, copy.getDate() + 1);
    timeDiff = this$static.jsdate.getTimezoneOffset() - copy.getTimezoneOffset();
    if (timeDiff > 0) {
      timeDiffHours = ~~(timeDiff / 60);
      timeDiffMinutes = timeDiff % 60;
      day = this$static.jsdate.getDate();
      badHours = this$static.jsdate.getHours();
      badHours + timeDiffHours >= 24 && ++day;
      newTime = create_0(this$static.jsdate.getFullYear(), this$static.jsdate.getMonth(), day, requestedHours + timeDiffHours, this$static.jsdate.getMinutes() + timeDiffMinutes, this$static.jsdate.getSeconds(), this$static.jsdate.getMilliseconds());
      $setTime(this$static.jsdate, newTime.getTime());
    }
    return;
  }
  originalTimeInMillis = this$static.jsdate.getTime();
  $setTime(this$static.jsdate, originalTimeInMillis + 3600000);
  hours != this$static.jsdate.getHours() && $setTime(this$static.jsdate, originalTimeInMillis);
}

function $setDate_0(this$static, date){
  var hours;
  hours = this$static.jsdate.getHours();
  $setDate(this$static.jsdate, date);
  $fixDaylightSavings(this$static, hours);
}

function $setHours_0(this$static, hours){
  $setHours(this$static.jsdate, hours);
  $fixDaylightSavings(this$static, hours);
}

function $setMinutes_0(this$static, minutes){
  var hours;
  hours = this$static.jsdate.getHours() + ~~(minutes / 60);
  $setMinutes(this$static.jsdate, minutes);
  $fixDaylightSavings(this$static, hours);
}

function $setMonth_0(this$static, month){
  var hours;
  hours = this$static.jsdate.getHours();
  $setMonth(this$static.jsdate, month);
  $fixDaylightSavings(this$static, hours);
}

function $setSeconds_0(this$static, seconds){
  var hours;
  hours = this$static.jsdate.getHours() + ~~(seconds / 3600);
  $setSeconds(this$static.jsdate, seconds);
  $fixDaylightSavings(this$static, hours);
}

function $setYear(this$static, year){
  var hours;
  hours = this$static.jsdate.getHours();
  $setFullYear(this$static.jsdate, year + 1900);
  $fixDaylightSavings(this$static, hours);
}

function Date_0(){
  this.jsdate = new Date;
}

function Date_1(date){
  this.jsdate = create(toDouble(date));
}

function padTwo(number){
  return number < 10?'0' + number:'' + number;
}

defineClass(108, 1, {3:1, 4:1, 50:1, 108:1}, Date_0, Date_1);
_.compareTo = function compareTo_10(other){
  return $compareTo_9(this, dynamicCast(other, 108));
}
;
_.equals$ = function equals_40(obj){
  return instanceOf(obj, 108) && eq(fromDouble(this.jsdate.getTime()), fromDouble(dynamicCast(obj, 108).jsdate.getTime()));
}
;
_.hashCode$ = function hashCode_43(){
  var time;
  time = fromDouble(this.jsdate.getTime());
  return toInt(xor(time, shru(time, 32)));
}
;
_.toString$ = function toString_41(){
  var hourOffset, minuteOffset, offset;
  offset = -this.jsdate.getTimezoneOffset();
  hourOffset = (offset >= 0?'+':'') + ~~(offset / 60);
  minuteOffset = (offset < 0?-offset:offset) % 60 < 10?'0' + (offset < 0?-offset:offset) % 60:'' + (offset < 0?-offset:offset) % 60;
  return ($clinit_Date$StringData() , DAYS)[this.jsdate.getDay()] + ' ' + MONTHS[this.jsdate.getMonth()] + ' ' + padTwo(this.jsdate.getDate()) + ' ' + padTwo(this.jsdate.getHours()) + ':' + padTwo(this.jsdate.getMinutes()) + ':' + padTwo(this.jsdate.getSeconds()) + ' GMT' + hourOffset + minuteOffset + ' ' + this.jsdate.getFullYear();
}
;
var Ljava_util_Date_2_classLit = createForClass('java.util', 'Date', 108, Ljava_lang_Object_2_classLit);
function $clinit_Date$StringData(){
  $clinit_Date$StringData = emptyMethod;
  DAYS = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);
  MONTHS = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_6, 2, 4, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);
}

var DAYS, MONTHS;
function $equals_11(value1, value2){
  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}

function $getHashCode(key){
  var hashCode;
  hashCode = hashCode__I__devirtual$(key);
  return ~~hashCode;
}

function HashMap(){
  $reset(this);
}

function HashMap_0(ignored){
  AbstractHashMap.call(this, ignored, 0);
}

function HashMap_1(ignored){
  AbstractHashMap.call(this, ignored, 1.100000023841858);
}

defineClass(7, 182, {3:1, 4:1, 7:1, 24:1}, HashMap, HashMap_0, HashMap_1);
var Ljava_util_HashMap_2_classLit = createForClass('java.util', 'HashMap', 7, Ljava_util_AbstractHashMap_2_classLit);
function $add_4(this$static, o){
  var old;
  old = $put_0(this$static.map_0, o, this$static);
  return old == null;
}

function $contains_0(this$static, o){
  return $containsKey(this$static.map_0, o);
}

function HashSet(){
  this.map_0 = new HashMap;
}

function HashSet_0(initialCapacity){
  this.map_0 = new HashMap_0(initialCapacity);
}

defineClass(152, 659, {3:1, 4:1, 84:1}, HashSet, HashSet_0);
_.add_0 = function add_11(o){
  return $add_4(this, o);
}
;
_.clear_0 = function clear_11(){
  $reset(this.map_0);
}
;
_.contains = function contains_6(o){
  return $contains_0(this, o);
}
;
_.isEmpty = function isEmpty_4(){
  return this.map_0.size_0 == 0;
}
;
_.iterator = function iterator_8(){
  return $iterator(new AbstractMap$1(this.map_0));
}
;
_.remove = function remove_19(o){
  return $remove(this.map_0, o) != null;
}
;
_.size_1 = function size_12(){
  return this.map_0.size_0;
}
;
_.toString$ = function toString_42(){
  return $toString_7(new AbstractMap$1(this.map_0));
}
;
var Ljava_util_HashSet_2_classLit = createForClass('java.util', 'HashSet', 152, Ljava_util_AbstractSet_2_classLit);
function $ensureChain(this$static, hashCode){
  var map_0 = this$static.backingMap;
  return map_0[hashCode] || (map_0[hashCode] = []);
}

function $getChain(this$static, hashCode){
  return this$static.backingMap[hashCode];
}

function $getChainOrEmpty(this$static, hashCode){
  return this$static.backingMap[hashCode] || [];
}

function $getEntry(this$static, key){
  var entry, entry$array, entry$index, entry$max;
  for (entry$array = $getChainOrEmpty(this$static, key == null?'0':'' + $getHashCode(key)) , entry$index = 0 , entry$max = entry$array.length; entry$index < entry$max; ++entry$index) {
    entry = entry$array[entry$index];
    if ($equals_11(key, entry.getKey())) {
      return entry;
    }
  }
  return null;
}

function $keys(this$static){
  return Object.getOwnPropertyNames(this$static.backingMap);
}

function $put_1(this$static, key, value_0){
  var chain, entry, entry$index, entry$max;
  chain = $ensureChain(this$static, key == null?'0':'' + $getHashCode(key));
  for (entry$index = 0 , entry$max = chain.length; entry$index < entry$max; ++entry$index) {
    entry = chain[entry$index];
    if ($equals_11(key, entry.getKey())) {
      return entry.setValue(value_0);
    }
  }
  setCheck(chain, chain.length, new AbstractMap$SimpleEntry(key, value_0));
  $elementAdded(this$static.host);
  return null;
}

function $remove_4(this$static, key){
  var chain, entry, hashCode, i_0;
  hashCode = key == null?'0':'' + $getHashCode(key);
  chain = $getChainOrEmpty(this$static, hashCode);
  for (i_0 = 0; i_0 < chain.length; i_0++) {
    entry = chain[i_0];
    if ($equals_11(key, entry.getKey())) {
      chain.length == 1?(delete this$static.backingMap[hashCode] , undefined):(chain.splice(i_0, 1) , undefined);
      $elementRemoved(this$static.host);
      return entry.getValue_1();
    }
  }
  return null;
}

function InternalJsHashCodeMap(){
  this.backingMap = this.createMap();
}

defineClass(295, 1, {}, InternalJsHashCodeMap);
_.containsValue = function containsValue_1(value_0){
  var entry, entry$array, entry$index, entry$max, hashCode, hashCode$array, hashCode$index, hashCode$max;
  for (hashCode$array = $keys(this) , hashCode$index = 0 , hashCode$max = hashCode$array.length; hashCode$index < hashCode$max; ++hashCode$index) {
    hashCode = hashCode$array[hashCode$index];
    for (entry$array = this.backingMap[hashCode] , entry$index = 0 , entry$max = entry$array.length; entry$index < entry$max; ++entry$index) {
      entry = entry$array[entry$index];
      if ($equals_11(value_0, entry.getValue_1())) {
        return true;
      }
    }
  }
  return false;
}
;
_.createMap = function createMap(){
  return Object.create(null);
}
;
_.entries = function entries(){
  return new InternalJsHashCodeMap$1(this);
}
;
var Ljava_util_InternalJsHashCodeMap_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap', 295, Ljava_lang_Object_2_classLit);
function $hasNext_1(this$static){
  if (this$static.itemIndex < this$static.chain.length) {
    return true;
  }
  if (this$static.chainIndex < this$static.keys_0.length - 1) {
    this$static.chain = $getChain(this$static.this$01, this$static.keys_0[++this$static.chainIndex]);
    this$static.itemIndex = 0;
    return true;
  }
  return false;
}

function InternalJsHashCodeMap$1(this$0){
  this.this$01 = this$0;
  this.keys_0 = $keys(this.this$01);
  this.chain = initDim(Ljava_util_Map$Entry_2_classLit, $intern_15, 25, 0, 0, 1);
}

defineClass(386, 1, {}, InternalJsHashCodeMap$1);
_.hasNext = function hasNext_6(){
  return $hasNext_1(this);
}
;
_.next = function next_7(){
  return checkCriticalElement($hasNext_1(this)) , this.lastChain = this.chain , this.lastEntry = this.chain[this.itemIndex++] , this.lastEntry;
}
;
_.remove_1 = function remove_20(){
  checkState(!!this.lastEntry);
  $remove_4(this.this$01, this.lastEntry.getKey());
  maskUndefined(this.chain) === maskUndefined(this.lastChain) && this.chain.length != 1 && --this.itemIndex;
  this.lastEntry = null;
}
;
_.chainIndex = -1;
_.itemIndex = 0;
_.lastChain = null;
_.lastEntry = null;
var Ljava_util_InternalJsHashCodeMap$1_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap/1', 386, Ljava_lang_Object_2_classLit);
function InternalJsHashCodeMap$InternalJsHashCodeMapLegacy(){
  InternalJsHashCodeMap.call(this);
}

defineClass(384, 295, {}, InternalJsHashCodeMap$InternalJsHashCodeMapLegacy);
_.containsValue = function containsValue_2(value_0){
  var map_0 = this.backingMap;
  for (var hashCode in map_0) {
    if (hashCode == parseInt(hashCode, 10)) {
      var array = map_0[hashCode];
      for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
        var entry = array[i_0];
        var entryValue = entry.getValue_1();
        if (this.equalsBridge(value_0, entryValue)) {
          return true;
        }
      }
    }
  }
  return false;
}
;
_.createMap = function createMap_0(){
  return {};
}
;
_.entries = function entries_0(){
  var list = this.newEntryList();
  var map_0 = this.backingMap;
  for (var hashCode in map_0) {
    if (hashCode == parseInt(hashCode, 10)) {
      var array = map_0[hashCode];
      for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
        list.add_0(array[i_0]);
      }
    }
  }
  return list.iterator();
}
;
_.equalsBridge = function equalsBridge(value1, value2){
  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}
;
_.newEntryList = function newEntryList(){
  return new InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1(this);
}
;
var Ljava_util_InternalJsHashCodeMap$InternalJsHashCodeMapLegacy_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap/InternalJsHashCodeMapLegacy', 384, Ljava_util_InternalJsHashCodeMap_2_classLit);
function InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1(this$1){
  this.this$11 = this$1;
  ArrayList.call(this);
}

defineClass(385, 13, $intern_40, InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1);
_.remove_2 = function remove_21(index_0){
  var removed;
  return removed = dynamicCast($remove_2(this, index_0), 25) , $remove_4(this.this$11, removed.getKey()) , removed;
}
;
var Ljava_util_InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap/InternalJsHashCodeMapLegacy/1', 385, Ljava_util_ArrayList_2_classLit);
function InternalJsMapFactory(){
}

defineClass(381, 1, {}, InternalJsMapFactory);
_.createJsHashCodeMap = function createJsHashCodeMap(){
  return new InternalJsHashCodeMap;
}
;
_.createJsStringMap = function createJsStringMap(){
  return new InternalJsStringMap;
}
;
var Ljava_util_InternalJsMapFactory_2_classLit = createForClass('java.util', 'InternalJsMapFactory', 381, Ljava_lang_Object_2_classLit);
function $clinit_InternalJsMapFactory$BackwardCompatibleJsMapFactory(){
  $clinit_InternalJsMapFactory$BackwardCompatibleJsMapFactory = emptyMethod;
  delegate = createFactory();
}

function canHandleProto(){
  var protoField = '__proto__';
  var map_0 = Object.create(null);
  if (map_0[protoField] !== undefined) {
    return false;
  }
  var keys_0 = Object.getOwnPropertyNames(map_0);
  if (keys_0.length != 0) {
    return false;
  }
  map_0[protoField] = 42;
  if (map_0[protoField] !== 42) {
    return false;
  }
  return true;
}

function createFactory(){
  var map_0;
  if (Object.create && Object.getOwnPropertyNames && canHandleProto()) {
    return (map_0 = Object.create(null) , map_0['__proto__'] = 42 , Object.getOwnPropertyNames(map_0).length == 0)?new InternalJsMapFactory$KeysWorkaroundJsMapFactory:new InternalJsMapFactory;
  }
  return new InternalJsMapFactory$LegacyInternalJsMapFactory;
}

var delegate;
function InternalJsMapFactory$KeysWorkaroundJsMapFactory(){
}

defineClass(383, 381, {}, InternalJsMapFactory$KeysWorkaroundJsMapFactory);
_.createJsStringMap = function createJsStringMap_0(){
  return new InternalJsStringMap$InternalJsStringMapWithKeysWorkaround;
}
;
var Ljava_util_InternalJsMapFactory$KeysWorkaroundJsMapFactory_2_classLit = createForClass('java.util', 'InternalJsMapFactory/KeysWorkaroundJsMapFactory', 383, Ljava_util_InternalJsMapFactory_2_classLit);
function InternalJsMapFactory$LegacyInternalJsMapFactory(){
}

defineClass(382, 381, {}, InternalJsMapFactory$LegacyInternalJsMapFactory);
_.createJsHashCodeMap = function createJsHashCodeMap_0(){
  return new InternalJsHashCodeMap$InternalJsHashCodeMapLegacy;
}
;
_.createJsStringMap = function createJsStringMap_1(){
  return new InternalJsStringMap$InternalJsStringMapLegacy;
}
;
var Ljava_util_InternalJsMapFactory$LegacyInternalJsMapFactory_2_classLit = createForClass('java.util', 'InternalJsMapFactory/LegacyInternalJsMapFactory', 382, Ljava_util_InternalJsMapFactory_2_classLit);
function $containsValue(this$static, value_0){
  var map_0 = this$static.backingMap;
  for (var key in map_0) {
    if (this$static.equalsBridge_0(value_0, map_0[key])) {
      return true;
    }
  }
  return false;
}

function $keys_0(this$static){
  return Object.getOwnPropertyNames(this$static.backingMap);
}

function $put_2(this$static, key, value_0){
  var oldValue;
  oldValue = this$static.backingMap[key];
  oldValue === undefined && $elementAdded(this$static.host);
  $set_2(this$static, key, value_0 === undefined?null:value_0);
  return oldValue;
}

function $remove_5(this$static, key){
  var value_0;
  value_0 = this$static.backingMap[key];
  if (!(value_0 === undefined)) {
    delete this$static.backingMap[key];
    $elementRemoved(this$static.host);
  }
  return value_0;
}

function $set_2(this$static, key, value_0){
  this$static.backingMap[key] = value_0;
}

function InternalJsStringMap(){
  this.backingMap = this.createMap_0();
}

defineClass(215, 1, {}, InternalJsStringMap);
_.containsValue = function containsValue_3(value_0){
  return $containsValue(this, value_0);
}
;
_.createMap_0 = function createMap_1(){
  return Object.create(null);
}
;
_.entries = function entries_1(){
  var keys_0;
  keys_0 = this.keys_1();
  return new InternalJsStringMap$1(this, keys_0);
}
;
_.equalsBridge_0 = function equalsBridge_0(value1, value2){
  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}
;
_.get_0 = function get_67(key){
  return this.backingMap[key];
}
;
_.keys_1 = function keys_1(){
  return $keys_0(this);
}
;
_.newMapEntry = function newMapEntry(key){
  return new InternalJsStringMap$2(this, key);
}
;
_.put_1 = function put_17(key, value_0){
  return $put_2(this, key, value_0);
}
;
_.remove_3 = function remove_22(key){
  return $remove_5(this, key);
}
;
var Ljava_util_InternalJsStringMap_2_classLit = createForClass('java.util', 'InternalJsStringMap', 215, Ljava_lang_Object_2_classLit);
function InternalJsStringMap$1(this$0, val$keys){
  this.this$01 = this$0;
  this.val$keys2 = val$keys;
}

defineClass(379, 1, {}, InternalJsStringMap$1);
_.hasNext = function hasNext_7(){
  return this.i < this.val$keys2.length;
}
;
_.next = function next_8(){
  return checkCriticalElement(this.i < this.val$keys2.length) , new InternalJsStringMap$2(this.this$01, this.val$keys2[this.last = this.i++]);
}
;
_.remove_1 = function remove_23(){
  checkState(this.last != -1);
  this.this$01.remove_3(this.val$keys2[this.last]);
  this.last = -1;
}
;
_.i = 0;
_.last = -1;
var Ljava_util_InternalJsStringMap$1_2_classLit = createForClass('java.util', 'InternalJsStringMap/1', 379, Ljava_lang_Object_2_classLit);
function InternalJsStringMap$2(this$0, val$key){
  this.this$01 = this$0;
  this.val$key2 = val$key;
}

defineClass(294, 661, {25:1}, InternalJsStringMap$2);
_.getKey = function getKey_1(){
  return this.val$key2;
}
;
_.getValue_1 = function getValue_4(){
  return this.this$01.get_0(this.val$key2);
}
;
_.setValue = function setValue_1(object){
  return this.this$01.put_1(this.val$key2, object);
}
;
var Ljava_util_InternalJsStringMap$2_2_classLit = createForClass('java.util', 'InternalJsStringMap/2', 294, Ljava_util_AbstractMapEntry_2_classLit);
function InternalJsStringMap$InternalJsStringMapLegacy(){
  InternalJsStringMap.call(this);
}

defineClass(376, 215, {}, InternalJsStringMap$InternalJsStringMapLegacy);
_.containsValue = function containsValue_4(value_0){
  var map_0 = this.backingMap;
  for (var key in map_0) {
    if (key.charCodeAt(0) == 58) {
      var entryValue = map_0[key];
      if (this.equalsBridge_0(value_0, entryValue)) {
        return true;
      }
    }
  }
  return false;
}
;
_.createMap_0 = function createMap_2(){
  return {};
}
;
_.entries = function entries_2(){
  var list = this.newEntryList_0();
  for (var key in this.backingMap) {
    if (key.charCodeAt(0) == 58) {
      var entry = this.newMapEntry(key.substring(1));
      list.add_0(entry);
    }
  }
  return list.iterator();
}
;
_.get_0 = function get_68(key){
  return this.backingMap[':' + key];
}
;
_.newEntryList_0 = function newEntryList_0(){
  return new InternalJsStringMap$InternalJsStringMapLegacy$1(this);
}
;
_.put_1 = function put_18(key, value_0){
  return $put_2(this, ':' + key, value_0);
}
;
_.remove_3 = function remove_24(key){
  return $remove_5(this, ':' + key);
}
;
var Ljava_util_InternalJsStringMap$InternalJsStringMapLegacy_2_classLit = createForClass('java.util', 'InternalJsStringMap/InternalJsStringMapLegacy', 376, Ljava_util_InternalJsStringMap_2_classLit);
function InternalJsStringMap$InternalJsStringMapLegacy$1(this$1){
  this.this$11 = this$1;
  ArrayList.call(this);
}

defineClass(378, 13, $intern_40, InternalJsStringMap$InternalJsStringMapLegacy$1);
_.remove_2 = function remove_25(index_0){
  var removed;
  return removed = dynamicCast($remove_2(this, index_0), 25) , $remove_5(this.this$11, ':' + dynamicCastToString(removed.getKey())) , removed;
}
;
var Ljava_util_InternalJsStringMap$InternalJsStringMapLegacy$1_2_classLit = createForClass('java.util', 'InternalJsStringMap/InternalJsStringMapLegacy/1', 378, Ljava_util_ArrayList_2_classLit);
function InternalJsStringMap$InternalJsStringMapWithKeysWorkaround(){
  InternalJsStringMap.call(this);
}

defineClass(377, 215, {}, InternalJsStringMap$InternalJsStringMapWithKeysWorkaround);
_.containsValue = function containsValue_5(value_0){
  var protoValue;
  protoValue = this.backingMap['__proto__'];
  if (!(protoValue === undefined) && (maskUndefined(value_0) === maskUndefined(protoValue) || value_0 != null && equals_Ljava_lang_Object__Z__devirtual$(value_0, protoValue))) {
    return true;
  }
  return $containsValue(this, value_0);
}
;
_.keys_1 = function keys_2(){
  var keys_0;
  keys_0 = $keys_0(this);
  !(this.backingMap['__proto__'] === undefined) && (keys_0[keys_0.length] = '__proto__');
  return keys_0;
}
;
var Ljava_util_InternalJsStringMap$InternalJsStringMapWithKeysWorkaround_2_classLit = createForClass('java.util', 'InternalJsStringMap/InternalJsStringMapWithKeysWorkaround', 377, Ljava_util_InternalJsStringMap_2_classLit);
var Ljava_util_Map_2_classLit = createForInterface('java.util', 'Map');
var Ljava_util_Map$Entry_2_classLit = createForInterface('java.util', 'Map/Entry');
function NoSuchElementException(){
  RuntimeException.call(this);
}

defineClass(324, 20, $intern_2, NoSuchElementException);
var Ljava_util_NoSuchElementException_2_classLit = createForClass('java.util', 'NoSuchElementException', 324, Ljava_lang_RuntimeException_2_classLit);
function equals_41(a, b){
  return maskUndefined(a) === maskUndefined(b) || a != null && equals_Ljava_lang_Object__Z__devirtual$(a, b);
}

function hashCode_44(o){
  return o != null?hashCode__I__devirtual$(o):0;
}

function $clear(this$static){
  this$static.root = null;
  this$static.size_0 = 0;
}

function $comparator(this$static){
  if (this$static.cmp == ($clinit_Comparators() , $clinit_Comparators() , NATURAL)) {
    return null;
  }
  return this$static.cmp;
}

function $getEntry_0(this$static, key){
  var c, childNum, tree;
  tree = this$static.root;
  while (tree) {
    c = this$static.cmp.compare(key, tree.key);
    if (c == 0) {
      return tree;
    }
    childNum = c < 0?0:1;
    tree = tree.child[childNum];
  }
  return null;
}

function $getFirstEntry(this$static){
  var nextNode, node;
  if (!this$static.root) {
    return null;
  }
  node = this$static.root;
  while (nextNode = node.child[0]) {
    node = nextNode;
  }
  return node;
}

function $getLastEntry(this$static){
  var nextNode, node;
  if (!this$static.root) {
    return null;
  }
  node = this$static.root;
  while (nextNode = node.child[1]) {
    node = nextNode;
  }
  return node;
}

function $getNodeAfter(this$static, key, inclusive){
  var c, foundNode, node;
  foundNode = null;
  node = this$static.root;
  while (node) {
    c = this$static.cmp.compare(key, node.key);
    if (inclusive && c == 0) {
      return node;
    }
    if (c >= 0) {
      node = node.child[1];
    }
     else {
      foundNode = node;
      node = node.child[0];
    }
  }
  return foundNode;
}

function $getNodeBefore(this$static, key, inclusive){
  var c, foundNode, node;
  foundNode = null;
  node = this$static.root;
  while (node) {
    c = this$static.cmp.compare(key, node.key);
    if (inclusive && c == 0) {
      return node;
    }
    if (c <= 0) {
      node = node.child[0];
    }
     else {
      foundNode = node;
      node = node.child[1];
    }
  }
  return foundNode;
}

function $headMap(this$static, toKey, inclusive){
  return new TreeMap$SubMap(this$static, ($clinit_TreeMap$SubMapType() , Head), null, false, toKey, inclusive);
}

function $inOrderAdd(this$static, list, type_0, current, fromKey, fromInclusive, toKey, toInclusive){
  var leftNode, rightNode;
  if (!current) {
    return;
  }
  leftNode = current.child[0];
  !!leftNode && $inOrderAdd(this$static, list, type_0, leftNode, fromKey, fromInclusive, toKey, toInclusive);
  $inRange(this$static, type_0, current.key, fromKey, fromInclusive, toKey, toInclusive) && list.add_0(current);
  rightNode = current.child[1];
  !!rightNode && $inOrderAdd(this$static, list, type_0, rightNode, fromKey, fromInclusive, toKey, toInclusive);
}

function $inRange(this$static, type_0, key, fromKey, fromInclusive, toKey, toInclusive){
  var compare, compare_0;
  if (type_0.fromKeyValid() && (compare = this$static.cmp.compare(key, fromKey) , compare < 0 || !fromInclusive && compare == 0)) {
    return false;
  }
  if (type_0.toKeyValid() && (compare_0 = this$static.cmp.compare(key, toKey) , compare_0 > 0 || !toInclusive && compare_0 == 0)) {
    return false;
  }
  return true;
}

function $insert_0(this$static, tree, newNode, state){
  var c, childNum;
  if (!tree) {
    return newNode;
  }
   else {
    c = this$static.cmp.compare(newNode.key, tree.key);
    if (c == 0) {
      state.value_0 = $setValue_2(tree, newNode.value_0);
      state.found = true;
      return tree;
    }
    childNum = c < 0?0:1;
    tree.child[childNum] = $insert_0(this$static, tree.child[childNum], newNode, state);
    if ($isRed(tree.child[childNum])) {
      if ($isRed(tree.child[1 - childNum])) {
        tree.isRed = true;
        tree.child[0].isRed = false;
        tree.child[1].isRed = false;
      }
       else {
        $isRed(tree.child[childNum].child[childNum])?(tree = $rotateSingle(tree, 1 - childNum)):$isRed(tree.child[childNum].child[1 - childNum]) && (tree = $rotateDouble(tree, 1 - childNum));
      }
    }
  }
  return tree;
}

function $isRed(node){
  return !!node && node.isRed;
}

function $put_3(this$static, key, value_0){
  var node, state;
  node = new TreeMap$Node(key, value_0);
  state = new TreeMap$State;
  this$static.root = $insert_0(this$static, this$static.root, node, state);
  state.found || ++this$static.size_0;
  this$static.root.isRed = false;
  return state.value_0;
}

function $remove_6(this$static, k_0){
  var state;
  state = new TreeMap$State;
  $removeWithState(this$static, k_0, state);
  return state.value_0;
}

function $removeEntry(this$static, entry){
  var state;
  state = new TreeMap$State;
  state.matchValue = true;
  state.value_0 = entry.getValue_1();
  return $removeWithState(this$static, entry.getKey(), state);
}

function $removeWithState(this$static, key, state){
  var c, dir_0, dir2, found, grandparent, head, last, newNode, node, parent_0, sibling;
  if (!this$static.root) {
    return false;
  }
  found = null;
  parent_0 = null;
  head = new TreeMap$Node(null, null);
  dir_0 = 1;
  head.child[1] = this$static.root;
  node = head;
  while (node.child[dir_0]) {
    last = dir_0;
    grandparent = parent_0;
    parent_0 = node;
    node = node.child[dir_0];
    c = this$static.cmp.compare(key, node.key);
    dir_0 = c < 0?0:1;
    c == 0 && (!state.matchValue || equals_41(node.value_0, state.value_0)) && (found = node);
    if (!(!!node && node.isRed) && !$isRed(node.child[dir_0])) {
      if ($isRed(node.child[1 - dir_0])) {
        parent_0 = parent_0.child[last] = $rotateSingle(node, dir_0);
      }
       else if (!$isRed(node.child[1 - dir_0])) {
        sibling = parent_0.child[1 - last];
        if (sibling) {
          if (!$isRed(sibling.child[1 - last]) && !$isRed(sibling.child[last])) {
            parent_0.isRed = false;
            sibling.isRed = true;
            node.isRed = true;
          }
           else {
            dir2 = grandparent.child[1] == parent_0?1:0;
            $isRed(sibling.child[last])?(grandparent.child[dir2] = $rotateDouble(parent_0, last)):$isRed(sibling.child[1 - last]) && (grandparent.child[dir2] = $rotateSingle(parent_0, last));
            node.isRed = grandparent.child[dir2].isRed = true;
            grandparent.child[dir2].child[0].isRed = false;
            grandparent.child[dir2].child[1].isRed = false;
          }
        }
      }
    }
  }
  if (found) {
    state.found = true;
    state.value_0 = found.value_0;
    if (node != found) {
      newNode = new TreeMap$Node(node.key, node.value_0);
      $replaceNode(this$static, head, found, newNode);
      parent_0 == found && (parent_0 = newNode);
    }
    parent_0.child[parent_0.child[1] == node?1:0] = node.child[!node.child[0]?1:0];
    --this$static.size_0;
  }
  this$static.root = head.child[1];
  !!this$static.root && (this$static.root.isRed = false);
  return state.found;
}

function $replaceNode(this$static, head, node, newNode){
  var direction, parent_0;
  parent_0 = head;
  direction = parent_0.key == null || this$static.cmp.compare(node.key, parent_0.key) > 0?1:0;
  while (parent_0.child[direction] != node) {
    parent_0 = parent_0.child[direction];
    direction = this$static.cmp.compare(node.key, parent_0.key) > 0?1:0;
  }
  parent_0.child[direction] = newNode;
  newNode.isRed = node.isRed;
  newNode.child[0] = node.child[0];
  newNode.child[1] = node.child[1];
  node.child[0] = null;
  node.child[1] = null;
}

function $rotateDouble(tree, rotateDirection){
  var otherChildDir;
  otherChildDir = 1 - rotateDirection;
  tree.child[otherChildDir] = $rotateSingle(tree.child[otherChildDir], otherChildDir);
  return $rotateSingle(tree, rotateDirection);
}

function $rotateSingle(tree, rotateDirection){
  var otherChildDir, save;
  otherChildDir = 1 - rotateDirection;
  save = tree.child[otherChildDir];
  tree.child[otherChildDir] = save.child[rotateDirection];
  save.child[rotateDirection] = tree;
  tree.isRed = true;
  save.isRed = false;
  return save;
}

function $subMap(this$static, fromKey, fromInclusive, toKey, toInclusive){
  return new TreeMap$SubMap(this$static, ($clinit_TreeMap$SubMapType() , Range_0), fromKey, fromInclusive, toKey, toInclusive);
}

function $tailMap(this$static, fromKey, inclusive){
  return new TreeMap$SubMap(this$static, ($clinit_TreeMap$SubMapType() , Tail), fromKey, inclusive, null, false);
}

function TreeMap(){
  TreeMap_0.call(this, null);
}

function TreeMap_0(c){
  this.root = null;
  !c && (c = ($clinit_Comparators() , $clinit_Comparators() , NATURAL));
  this.cmp = c;
}

defineClass(107, 679, {3:1, 24:1}, TreeMap, TreeMap_0);
_.clear_0 = function clear_12(){
  $clear(this);
}
;
_.comparator = function comparator_1(){
  return $comparator(this);
}
;
_.entryIterator = function entryIterator_0(){
  return new TreeMap$EntryIterator(this);
}
;
_.entrySet_0 = function entrySet_2(){
  return new TreeMap$EntrySet(this);
}
;
_.getEntry = function getEntry(key){
  return $getEntry_0(this, key);
}
;
_.getFirstEntry = function getFirstEntry(){
  return $getFirstEntry(this);
}
;
_.getLastEntry = function getLastEntry(){
  return $getLastEntry(this);
}
;
_.headMap = function headMap(toKey, inclusive){
  return $headMap(this, toKey, inclusive);
}
;
_.put_0 = function put_19(key, value_0){
  return $put_3(this, key, value_0);
}
;
_.remove_0 = function remove_26(k_0){
  return $remove_6(this, k_0);
}
;
_.removeEntry = function removeEntry(entry){
  return $removeEntry(this, entry);
}
;
_.size_1 = function size_13(){
  return this.size_0;
}
;
_.subMap = function subMap(fromKey, fromInclusive, toKey, toInclusive){
  return $subMap(this, fromKey, fromInclusive, toKey, toInclusive);
}
;
_.tailMap = function tailMap(fromKey, inclusive){
  return $tailMap(this, fromKey, inclusive);
}
;
_.size_0 = 0;
var Ljava_util_TreeMap_2_classLit = createForClass('java.util', 'TreeMap', 107, Ljava_util_AbstractNavigableMap_2_classLit);
function $next_4(this$static){
  return this$static.last = dynamicCast($next_0(this$static.iter), 25);
}

function $remove_7(this$static){
  $remove_1(this$static.iter);
  $removeEntry(this$static.this$01, this$static.last);
  this$static.last = null;
}

function TreeMap$EntryIterator(this$0){
  TreeMap$EntryIterator_0.call(this, this$0, ($clinit_TreeMap$SubMapType() , All), null, false, null, false);
}

function TreeMap$EntryIterator_0(this$0, type_0, fromKey, fromInclusive, toKey, toInclusive){
  var list;
  this.this$01 = this$0;
  list = new ArrayList;
  $inOrderAdd(this$0, list, type_0, this$0.root, fromKey, fromInclusive, toKey, toInclusive);
  this.iter = new AbstractList$ListIteratorImpl(list, 0);
}

defineClass(198, 1, {}, TreeMap$EntryIterator, TreeMap$EntryIterator_0);
_.hasNext = function hasNext_8(){
  return $hasNext_0(this.iter);
}
;
_.next = function next_9(){
  return $next_4(this);
}
;
_.remove_1 = function remove_27(){
  $remove_7(this);
}
;
var Ljava_util_TreeMap$EntryIterator_2_classLit = createForClass('java.util', 'TreeMap/EntryIterator', 198, Ljava_lang_Object_2_classLit);
function TreeMap$EntrySet(this$0){
  this.this$01 = this$0;
  AbstractNavigableMap$EntrySet.call(this, this$0);
}

defineClass(534, 250, $intern_39, TreeMap$EntrySet);
_.clear_0 = function clear_13(){
  $clear(this.this$01);
}
;
var Ljava_util_TreeMap$EntrySet_2_classLit = createForClass('java.util', 'TreeMap/EntrySet', 534, Ljava_util_AbstractNavigableMap$EntrySet_2_classLit);
function TreeMap$Node(key, value_0){
  AbstractMap$SimpleEntry.call(this, key, value_0);
  this.child = initDim(Ljava_util_TreeMap$Node_2_classLit, $intern_15, 149, 2, 0, 1);
  this.isRed = true;
}

defineClass(149, 163, {183:1, 163:1, 25:1, 149:1}, TreeMap$Node);
_.isRed = false;
var Ljava_util_TreeMap$Node_2_classLit = createForClass('java.util', 'TreeMap/Node', 149, Ljava_util_AbstractMap$SimpleEntry_2_classLit);
function TreeMap$State(){
}

defineClass(251, 1, {}, TreeMap$State);
_.toString$ = function toString_43(){
  return 'State: mv=' + this.matchValue + ' value=' + this.value_0 + ' done=' + this.done + ' found=' + this.found;
}
;
_.done = false;
_.found = false;
_.matchValue = false;
var Ljava_util_TreeMap$State_2_classLit = createForClass('java.util', 'TreeMap/State', 251, Ljava_lang_Object_2_classLit);
function $getFirstEntry_0(this$static){
  var entry;
  this$static.type_0.fromKeyValid()?this$static.fromInclusive?(entry = $getNodeAfter(this$static.this$01, this$static.fromKey, true)):(entry = $getNodeAfter(this$static.this$01, this$static.fromKey, false)):(entry = $getFirstEntry(this$static.this$01));
  return !!entry && $inRange_0(this$static, entry.key)?entry:null;
}

function $guardInRange(this$static, entry){
  return !!entry && $inRange_0(this$static, entry.key)?entry:null;
}

function $inRange_0(this$static, key){
  return $inRange(this$static.this$01, this$static.type_0, key, this$static.fromKey, this$static.fromInclusive, this$static.toKey, this$static.toInclusive);
}

function TreeMap$SubMap(this$0, type_0, fromKey, fromInclusive, toKey, toInclusive){
  this.this$01 = this$0;
  switch (type_0.ordinal) {
    case 2:
      if (this$0.cmp.compare(toKey, fromKey) < 0) {
        throw new IllegalArgumentException_0('subMap: ' + toKey + ' less than ' + fromKey);
      }

      break;
    case 1:
      this$0.cmp.compare(toKey, toKey);
      break;
    case 3:
      this$0.cmp.compare(fromKey, fromKey);
  }
  this.type_0 = type_0;
  this.fromKey = fromKey;
  this.fromInclusive = fromInclusive;
  this.toKey = toKey;
  this.toInclusive = toInclusive;
}

defineClass(252, 679, $intern_38, TreeMap$SubMap);
_.comparator = function comparator_2(){
  return $comparator(this.this$01);
}
;
_.entryIterator = function entryIterator_1(){
  return new TreeMap$EntryIterator_0(this.this$01, this.type_0, this.fromKey, this.fromInclusive, this.toKey, this.toInclusive);
}
;
_.entrySet_0 = function entrySet_3(){
  return new TreeMap$SubMap$1(this, this);
}
;
_.getEntry = function getEntry_0(key){
  return $guardInRange(this, $getEntry_0(this.this$01, key));
}
;
_.getFirstEntry = function getFirstEntry_0(){
  return $getFirstEntry_0(this);
}
;
_.getLastEntry = function getLastEntry_0(){
  var entry;
  this.type_0.toKeyValid()?this.toInclusive?(entry = $getNodeBefore(this.this$01, this.toKey, true)):(entry = $getNodeBefore(this.this$01, this.toKey, false)):(entry = $getLastEntry(this.this$01));
  return !!entry && $inRange_0(this, entry.key)?entry:null;
}
;
_.headMap = function headMap_0(toKey, toInclusive){
  if (this.type_0.toKeyValid() && this.this$01.cmp.compare(toKey, this.toKey) > 0) {
    throw new IllegalArgumentException_0('subMap: ' + toKey + ' greater than ' + this.toKey);
  }
  return this.type_0.fromKeyValid()?$subMap(this.this$01, this.fromKey, this.fromInclusive, toKey, toInclusive):$headMap(this.this$01, toKey, toInclusive);
}
;
_.isEmpty = function isEmpty_5(){
  return !$getFirstEntry_0(this);
}
;
_.put_0 = function put_20(key, value_0){
  if (!$inRange(this.this$01, this.type_0, key, this.fromKey, this.fromInclusive, this.toKey, this.toInclusive)) {
    throw new IllegalArgumentException_0(key + ' outside the range ' + this.fromKey + ' to ' + this.toKey);
  }
  return $put_3(this.this$01, key, value_0);
}
;
_.remove_0 = function remove_28(k_0){
  if (!$inRange(this.this$01, this.type_0, k_0, this.fromKey, this.fromInclusive, this.toKey, this.toInclusive)) {
    return null;
  }
  return $remove_6(this.this$01, k_0);
}
;
_.removeEntry = function removeEntry_0(entry){
  return $inRange_0(this, entry.getKey()) && $removeEntry(this.this$01, entry);
}
;
_.size_1 = function size_14(){
  var count, it;
  count = 0;
  for (it = new TreeMap$EntryIterator_0(this.this$01, this.type_0, this.fromKey, this.fromInclusive, this.toKey, this.toInclusive); $hasNext_0(it.iter); it.last = dynamicCast($next_0(it.iter), 25)) {
    ++count;
  }
  return count;
}
;
_.subMap = function subMap_0(newFromKey, newFromInclusive, newToKey, newToInclusive){
  if (this.type_0.fromKeyValid() && this.this$01.cmp.compare(newFromKey, this.fromKey) < 0) {
    throw new IllegalArgumentException_0('subMap: ' + newFromKey + ' less than ' + this.fromKey);
  }
  if (this.type_0.toKeyValid() && this.this$01.cmp.compare(newToKey, this.toKey) > 0) {
    throw new IllegalArgumentException_0('subMap: ' + newToKey + ' greater than ' + this.toKey);
  }
  return $subMap(this.this$01, newFromKey, newFromInclusive, newToKey, newToInclusive);
}
;
_.tailMap = function tailMap_0(fromKey, fromInclusive){
  if (this.type_0.fromKeyValid() && this.this$01.cmp.compare(fromKey, this.fromKey) < 0) {
    throw new IllegalArgumentException_0('subMap: ' + fromKey + ' less than ' + this.fromKey);
  }
  return this.type_0.toKeyValid()?$subMap(this.this$01, fromKey, fromInclusive, this.toKey, this.toInclusive):$tailMap(this.this$01, fromKey, fromInclusive);
}
;
_.fromInclusive = false;
_.toInclusive = false;
var Ljava_util_TreeMap$SubMap_2_classLit = createForClass('java.util', 'TreeMap/SubMap', 252, Ljava_util_AbstractNavigableMap_2_classLit);
function TreeMap$SubMap$1(this$1, this$0){
  this.this$11 = this$1;
  AbstractNavigableMap$EntrySet.call(this, this$0);
}

defineClass(535, 250, $intern_39, TreeMap$SubMap$1);
_.isEmpty = function isEmpty_6(){
  return !$getFirstEntry_0(this.this$11);
}
;
var Ljava_util_TreeMap$SubMap$1_2_classLit = createForClass('java.util', 'TreeMap/SubMap/1', 535, Ljava_util_AbstractNavigableMap$EntrySet_2_classLit);
function $clinit_TreeMap$SubMapType(){
  $clinit_TreeMap$SubMapType = emptyMethod;
  All = new TreeMap$SubMapType('All', 0);
  Head = new TreeMap$SubMapType$1;
  Range_0 = new TreeMap$SubMapType$2;
  Tail = new TreeMap$SubMapType$3;
}

function TreeMap$SubMapType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_4(){
  $clinit_TreeMap$SubMapType();
  return initValues(getClassLiteralForArray(Ljava_util_TreeMap$SubMapType_2_classLit, 1), $intern_7, 97, 0, [All, Head, Range_0, Tail]);
}

defineClass(97, 77, $intern_41, TreeMap$SubMapType);
_.fromKeyValid = function fromKeyValid(){
  return false;
}
;
_.toKeyValid = function toKeyValid(){
  return false;
}
;
var All, Head, Range_0, Tail;
var Ljava_util_TreeMap$SubMapType_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType', 97, Ljava_lang_Enum_2_classLit, values_4);
function TreeMap$SubMapType$1(){
  TreeMap$SubMapType.call(this, 'Head', 1);
}

defineClass(536, 97, $intern_41, TreeMap$SubMapType$1);
_.toKeyValid = function toKeyValid_0(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$1_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/1', 536, Ljava_util_TreeMap$SubMapType_2_classLit, null);
function TreeMap$SubMapType$2(){
  TreeMap$SubMapType.call(this, 'Range', 2);
}

defineClass(537, 97, $intern_41, TreeMap$SubMapType$2);
_.fromKeyValid = function fromKeyValid_0(){
  return true;
}
;
_.toKeyValid = function toKeyValid_1(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$2_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/2', 537, Ljava_util_TreeMap$SubMapType_2_classLit, null);
function TreeMap$SubMapType$3(){
  TreeMap$SubMapType.call(this, 'Tail', 3);
}

defineClass(538, 97, $intern_41, TreeMap$SubMapType$3);
_.fromKeyValid = function fromKeyValid_1(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$3_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/3', 538, Ljava_util_TreeMap$SubMapType_2_classLit, null);
function $add_5(this$static, o){
  return this$static.map_0.put_0(o, ($clinit_Boolean() , FALSE)) == null;
}

function $contains_1(this$static, o){
  return !!this$static.map_0.getEntry(o);
}

function $headSet(this$static, toElement){
  return new TreeSet_1(this$static.map_0.headMap(toElement, false));
}

function $remove_8(this$static, o){
  return this$static.map_0.remove_0(o) != null;
}

function $subSet(this$static, fromElement, toElement){
  return new TreeSet_1(this$static.map_0.subMap(fromElement, true, toElement, false));
}

function $tailSet(this$static, fromElement){
  return new TreeSet_1(this$static.map_0.tailMap(fromElement, true));
}

function $tailSet_0(this$static, fromElement){
  return new TreeSet_1(this$static.map_0.tailMap(fromElement, true));
}

function TreeSet(){
  this.map_0 = new TreeMap;
}

function TreeSet_0(c){
  this.map_0 = new TreeMap_0(c);
}

function TreeSet_1(map_0){
  this.map_0 = map_0;
}

function TreeSet_2(s){
  TreeSet_0.call(this, dynamicCast(checkNotNull(s), 615).comparator());
  $addAll(this, s);
}

defineClass(21, 659, {3:1, 84:1, 615:1}, TreeSet, TreeSet_0, TreeSet_1, TreeSet_2);
_.add_0 = function add_12(o){
  return $add_5(this, o);
}
;
_.clear_0 = function clear_14(){
  this.map_0.clear_0();
}
;
_.comparator = function comparator_3(){
  return this.map_0.comparator();
}
;
_.contains = function contains_7(o){
  return $contains_1(this, o);
}
;
_.iterator = function iterator_9(){
  return $iterator_1(new AbstractNavigableMap$NavigableKeySet(this.map_0));
}
;
_.remove = function remove_29(o){
  return $remove_8(this, o);
}
;
_.size_1 = function size_15(){
  return this.map_0.size_1();
}
;
var Ljava_util_TreeSet_2_classLit = createForClass('java.util', 'TreeSet', 21, Ljava_util_AbstractSet_2_classLit);
function $add_6(this$static, o){
  return $add_3(this$static.arrayList, o);
}

function $addAll_1(this$static, c){
  return $addAll_0(this$static.arrayList, c);
}

function $addElement(this$static, o){
  $add_3(this$static.arrayList, o);
}

function $contains_2(this$static, elem){
  return $indexOf_1(this$static.arrayList, elem, 0) != -1;
}

function $copyInto(this$static, objs){
  var i_0, n;
  i_0 = -1;
  n = this$static.arrayList.array.length;
  while (++i_0 < n) {
    setCheck(objs, i_0, (checkArrayElementIndex(i_0, this$static.arrayList.array.length) , $get_13(this$static.arrayList, i_0)));
  }
}

function $get_14(this$static, index_0){
  checkArrayElementIndex(index_0, this$static.arrayList.array.length);
  return $get_13(this$static.arrayList, index_0);
}

function $remove_9(this$static, index_0){
  checkArrayElementIndex(index_0, this$static.arrayList.array.length);
  return this$static.arrayList.remove_2(index_0);
}

function Vector(){
  this.arrayList = new ArrayList;
}

function Vector_0(){
  this.arrayList = new ArrayList_0(4);
}

function checkArrayElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw new ArrayIndexOutOfBoundsException;
  }
}

defineClass(41, 660, {3:1, 4:1, 33:1, 41:1}, Vector, Vector_0);
_.add_1 = function add_13(index_0, o){
  checkArrayElementIndex(index_0, this.arrayList.array.length + 1);
  $add_2(this.arrayList, index_0, o);
}
;
_.add_0 = function add_14(o){
  return $add_6(this, o);
}
;
_.addAll = function addAll_2(c){
  return $addAll_1(this, c);
}
;
_.clear_0 = function clear_15(){
  this.arrayList.array = initDim(Ljava_lang_Object_2_classLit, $intern_15, 1, 0, 3, 1);
}
;
_.contains = function contains_8(elem){
  return $contains_2(this, elem);
}
;
_.get_5 = function get_69(index_0){
  return $get_14(this, index_0);
}
;
_.isEmpty = function isEmpty_7(){
  return this.arrayList.array.length == 0;
}
;
_.iterator = function iterator_10(){
  return new AbstractList$IteratorImpl(this.arrayList);
}
;
_.remove_2 = function remove_30(index_0){
  return $remove_9(this, index_0);
}
;
_.removeRange = function removeRange_1(fromIndex, endIndex){
  $removeRange(this.arrayList, fromIndex, endIndex);
}
;
_.set_0 = function set_6(index_0, elem){
  checkArrayElementIndex(index_0, this.arrayList.array.length);
  return $set_1(this.arrayList, index_0, elem);
}
;
_.size_1 = function size_16(){
  return this.arrayList.array.length;
}
;
_.toArray = function toArray_7(){
  return $toArray_0(this.arrayList);
}
;
_.toArray_0 = function toArray_8(a){
  return $toArray_1(this.arrayList, a);
}
;
_.toString$ = function toString_44(){
  return $toString_7(this.arrayList);
}
;
var Ljava_util_Vector_2_classLit = createForClass('java.util', 'Vector', 41, Ljava_util_AbstractList_2_classLit);
var Lorg_timepedia_exporter_client_Exportable_2_classLit = createForInterface('org.timepedia.exporter.client', 'Exportable');
defineClass(662, 1, {});
var Lorg_timepedia_exporter_client_ExporterBaseImpl_2_classLit = createForClass('org.timepedia.exporter.client', 'ExporterBaseImpl', 662, Ljava_lang_Object_2_classLit);
function $addExporter(this$static, c, o){
  $put_0(this$static.exporterMap, c, o);
}

function $computeVarArguments(len, args){
  var ret = [];
  for (i = 0; i < len - 1; i++)
    ret.push(args[i]);
  var alen = args.length;
  var p_0 = len - 1;
  if (alen >= len && Object.prototype.toString.apply(args[p_0]) === '[object Array]') {
    ret.push(args[p_0]);
  }
   else {
    var a = [];
    for (i = p_0; i < alen; i++)
      a.push(args[i]);
    ret.push(a);
  }
  return ret;
}

function $declarePackage(qualifiedExportName){
  var i_0, l, o, prefix, superPackages;
  superPackages = $split(qualifiedExportName, '\\.', 0);
  prefix = $wnd;
  i_0 = 0;
  for (l = superPackages.length - 1; i_0 < l; i_0++) {
    if (!$equals_7(superPackages[i_0], 'client')) {
      prefix[superPackages[i_0]] || (prefix[superPackages[i_0]] = {});
      prefix = getProp(prefix, superPackages[i_0]);
    }
  }
  o = getProp(prefix, superPackages[i_0]);
  return o;
}

function $getMaxArity(jsoMap, meth){
  var o = jsoMap[meth];
  var r = 0;
  for (k in o)
    r = Math.max(r, k);
  return r;
}

function $registerDispatchMap(this$static, clazz, dispMap, isStatic){
  var jso, map_0;
  map_0 = isStatic?this$static.staticDispatchMap:this$static.dispatchMap;
  jso = dynamicCastJso(getEntryValueOrNull($getEntry(map_0.hashCodeMap, clazz)));
  !jso?(jso = dispMap):mergeJso(jso, dispMap);
  $put_1(map_0.hashCodeMap, clazz, jso);
}

function $runDispatch(this$static, instance, clazz, meth, arguments_0, isStatic, isVarArgs){
  var args, dmap, i_0, l, ret;
  dmap = isStatic?this$static.staticDispatchMap:this$static.dispatchMap;
  if (isVarArgs) {
    for (l = $getMaxArity(dynamicCastJso(getEntryValueOrNull($getEntry(dmap.hashCodeMap, clazz))), meth) , i_0 = l; i_0 >= 1; i_0--) {
      args = $computeVarArguments(i_0, arguments_0);
      ret = $runDispatch_0(instance, dmap, clazz, meth, args);
      if (!ret) {
        args = $unshift(instance, args);
        ret = $runDispatch_0(instance, dmap, clazz, meth, args);
      }
      if (ret) {
        return ret;
      }
    }
  }
   else {
    ret = $runDispatch_0(instance, dmap, clazz, meth, arguments_0);
    if (!ret) {
      arguments_0 = $unshift(instance, arguments_0);
      ret = $runDispatch_0(instance, dmap, clazz, meth, arguments_0);
    }
    if (ret) {
      return ret;
    }
  }
  throw new RuntimeException_0("Can't find exported method for given arguments: " + meth + ':' + arguments_0.length + '\n' + '');
}

function $runDispatch_0(instance, dmap, clazz, meth, arguments_0){
  var aFunc, i_0, jFunc, l, r, sig, sigs, wFunc, x_0;
  sigs = dynamicCastJso(getEntryValueOrNull($getEntry(dmap.hashCodeMap, clazz)))[meth][arguments_0.length];
  jFunc = null;
  wFunc = null;
  aFunc = null;
  for (i_0 = 0 , l = !sigs?0:sigs.length; i_0 < l; i_0++) {
    sig = sigs[i_0];
    if ($matches(sig, arguments_0)) {
      jFunc = sig[0];
      wFunc = sig[1];
      aFunc = sig[2];
      break;
    }
  }
  if (!jFunc) {
    return null;
  }
   else {
    arguments_0 = aFunc?aFunc(instance, arguments_0):arguments_0;
    r = (x_0 = jFunc.apply(instance, arguments_0) , [wFunc?wFunc(x_0):x_0]);
    return r;
  }
}

function $setWrapper(this$static, type_0){
  var a, cons, i_0, wrapper, wrapperArray;
  if ((getClass__Ljava_lang_Class___devirtual$(type_0).modifiers & 4) != 0) {
    a = dynamicCast(type_0, 5);
    wrapperArray = [];
    for (i_0 = 0; i_0 < a.length; i_0++) {
      wrapperArray[i_0] = $setWrapper(this$static, a[i_0]);
    }
    return wrapperArray;
  }
  cons = $typeConstructor_0(this$static, type_0);
  wrapper = cons && typeof cons == 'function'?new cons(type_0):type_0;
  $setWrapperJS(type_0, wrapper, '__gwtex_wrap');
  return wrapper;
}

function $setWrapperJS(instance, wrapper, wrapperProperty){
  instance[wrapperProperty] = wrapper;
}

function $toArrChar(s){
  var i_0, l, ret;
  l = s.length;
  ret = initDim(C_classLit, $intern_4, 0, l, 7, 1);
  for (i_0 = 0; i_0 < l; i_0++) {
    ret[i_0] = round_int(s[i_0]) & $intern_5;
  }
  return ret;
}

function $toArrDouble(s){
  var i_0, l, ret;
  l = s.length;
  ret = initDim(D_classLit, $intern_4, 0, l, 7, 1);
  for (i_0 = 0; i_0 < l; i_0++) {
    ret[i_0] = s[i_0];
  }
  return ret;
}

function $toArrInt(s){
  var i_0, l, ret;
  l = s.length;
  ret = initDim(I_classLit, $intern_4, 0, l, 7, 1);
  for (i_0 = 0; i_0 < l; i_0++) {
    ret[i_0] = round_int(s[i_0]);
  }
  return ret;
}

function $toArrObject(j, ret){
  var i_0, l, o, s;
  s = j;
  l = s.length;
  for (i_0 = 0; i_0 < l; i_0++) {
    o = s[i_0];
    instanceOfJso(o) && getGwtInstance(dynamicCastJso(o)) != null && (o = getGwtInstance(dynamicCastJso(o)));
    setCheck(ret, i_0, o);
  }
  return ret;
}

function $toArrString(s){
  var i_0, l, ret;
  l = s.length;
  ret = initDim(Ljava_lang_String_2_classLit, $intern_6, 2, l, 4, 1);
  for (i_0 = 0; i_0 < l; i_0++) {
    ret[i_0] = s[i_0];
  }
  return ret;
}

function $typeConstructor(this$static, clz){
  var e, sup_0;
  e = dynamicCast($get_12(this$static.exporterMap, clz), 30);
  sup_0 = clz.superclass;
  if (!e && !!sup_0 && sup_0 != Ljava_lang_Object_2_classLit) {
    return $typeConstructor(this$static, sup_0);
  }
  return e?e.getJsConstructor():null;
}

function $typeConstructor_0(this$static, type_0){
  var e, e$iterator, jso;
  jso = $typeConstructor(this$static, getClass__Ljava_lang_Class___devirtual$(type_0));
  if (!jso) {
    for (e$iterator = $iterator_0(new AbstractMap$2(this$static.exporterMap)); e$iterator.val$outerIter2.hasNext();) {
      e = dynamicCast($next_2(e$iterator), 30);
      if (e.isAssignable(type_0)) {
        jso = e.getJsConstructor();
        break;
      }
    }
  }
  return jso;
}

function $unshift(o, arr){
  var ret = [o];
  for (i = 0; i < arr.length; i++)
    ret.push(arr[i]);
  return ret;
}

function $wrap_0(this$static, type_0){
  var wrapper;
  if (type_0 == null) {
    return null;
  }
  return wrapper = type_0['__gwtex_wrap'] , !wrapper && (wrapper = $setWrapper(this$static, type_0)) , wrapper;
}

function $wrap_1(this$static, type_0){
  var i_0, wrapperArray;
  if (type_0 == null) {
    return null;
  }
  wrapperArray = [];
  for (i_0 = 0; i_0 < type_0.length; i_0++) {
    wrapperArray[i_0] = $wrap_0(this$static, type_0[i_0]);
  }
  return wrapperArray;
}

function ExporterBaseActual(){
  this.exporterMap = new HashMap;
  this.dispatchMap = new HashMap;
  this.staticDispatchMap = new HashMap;
}

function getGwtInstance(o){
  return o && o.g?o.g:null;
}

function getProp(jso, key){
  return jso != null?jso[key]:null;
}

function isAssignableToClass(o, clazz){
  var sup_0;
  if (Ljava_lang_Object_2_classLit == clazz) {
    return true;
  }
  if (Lorg_timepedia_exporter_client_Exportable_2_classLit == clazz && instanceOf(o, 32)) {
    return true;
  }
  if (o != null) {
    for (sup_0 = getClass__Ljava_lang_Class___devirtual$(o); !!sup_0 && sup_0 != Ljava_lang_Object_2_classLit; sup_0 = sup_0.superclass) {
      if (sup_0 == clazz) {
        return true;
      }
    }
  }
  return false;
}

function mergeJso(o1, o2){
  for (p in o2) {
    o1[p] = o2[p];
  }
}

function putObject(o, index_0, val){
  o[index_0] = val;
}

defineClass(380, 662, {}, ExporterBaseActual);
var Lorg_timepedia_exporter_client_ExporterBaseActual_2_classLit = createForClass('org.timepedia.exporter.client', 'ExporterBaseActual', 380, Lorg_timepedia_exporter_client_ExporterBaseImpl_2_classLit);
function $matches(this$static, arguments_0){
  var argJsType, gwt, i_0, isBoolean, isClass, isNumber, isPrimitive, jsType, l, o;
  for (i_0 = 0 , l = arguments_0.length; i_0 < l; i_0++) {
    jsType = this$static[i_0 + 3];
    argJsType = typeof_$(arguments_0, i_0);
    if ($equals_7(argJsType, jsType)) {
      continue;
    }
    if ($equals_7('string', jsType) && $equals_7('null', argJsType)) {
      continue;
    }
    isNumber = $equals_7('number', argJsType);
    isBoolean = $equals_7('boolean', argJsType);
    if (maskUndefined(Ljava_lang_Object_2_classLit) === maskUndefined(jsType)) {
      isNumber && putObject(arguments_0, i_0, new Double(arguments_0[i_0]));
      isBoolean && (arguments_0[i_0] = ($clinit_Boolean() , arguments_0[i_0]?TRUE:FALSE) , undefined);
      continue;
    }
    isPrimitive = isNumber || isBoolean;
    isClass = !isPrimitive && jsType != null && getClass__Ljava_lang_Class___devirtual$(jsType) == Ljava_lang_Class_2_classLit;
    if (isClass) {
      o = arguments_0[i_0];
      if (o == null || isAssignableToClass(o, dynamicCast(jsType, 162))) {
        continue;
      }
      if (instanceOfJso(o)) {
        gwt = getGwtInstance(dynamicCastJso(o));
        if (gwt != null) {
          if (isAssignableToClass(gwt, dynamicCast(jsType, 162))) {
            putObject(arguments_0, i_0, gwt);
            continue;
          }
        }
      }
    }
    if ($equals_7('object', jsType) && !isNumber && !isBoolean) {
      continue;
    }
    return false;
  }
  return true;
}

function typeof_$(args, i_0){
  var o = args[i_0];
  var t = o == null?'null':typeof o;
  if (t == 'object') {
    return Object.prototype.toString.call(o) == '[object Array]' || typeof o.length == 'number'?'array':t;
  }
  return t;
}

function $clinit_ExporterUtil(){
  $clinit_ExporterUtil = emptyMethod;
  impl = new ExporterBaseActual;
}

function declarePackage(qualifiedExportName){
  $clinit_ExporterUtil();
  return $declarePackage(qualifiedExportName);
}

function gwtInstance(o){
  var g;
  $clinit_ExporterUtil();
  return o != null && instanceOfJso(o) && (g = getGwtInstance(dynamicCastJso(o))) != null?g:o;
}

function registerDispatchMap(clazz, dispMap, isStatic){
  $clinit_ExporterUtil();
  $registerDispatchMap(impl, clazz, dispMap, isStatic);
}

function runDispatch(instance, clazz, meth, arguments_0, isStatic, isVarArgs){
  $clinit_ExporterUtil();
  return $runDispatch(impl, instance, clazz, meth, arguments_0, isStatic, isVarArgs);
}

function setWrapper(instance, wrapper){
  $clinit_ExporterUtil();
  $setWrapperJS(instance, wrapper, '__gwtex_wrap');
}

function wrap_0(type_0){
  $clinit_ExporterUtil();
  return $wrap_0(impl, type_0);
}

function wrap_1(type_0){
  $clinit_ExporterUtil();
  return type_0;
}

function wrap_2(type_0){
  $clinit_ExporterUtil();
  return $wrap_1(impl, type_0);
}

var impl;
function $export_36(){
  new CodPricingDataImportHandler_ExporterImpl;
  new CodPricingItemMessage_ExporterImpl;
  new Message_ExporterImpl;
  new ProtocolLine_ExporterImpl;
  new ConditionType_ExporterImpl;
  new ProcedureDAO_ExporterImpl;
  new IExclusionProcedure_ExporterImpl;
  new ExclusionProcedure_ExporterImpl;
  new PricingConditionType_ExporterImpl;
  new CodPriceCalculationManager_ExporterImpl;
  new CodPricingEngineStartHandler_ExporterImpl;
  new CodPricingConditionInput_ExporterImpl;
  new CodPricingDocumentInput_ExporterImpl;
  new CodPricingDocumentOutput_ExporterImpl;
  new CodPricingItemInput_ExporterImpl;
  new CodPricingItemOutput_ExporterImpl;
  new CodPricingProductUnit_ExporterImpl;
  new AccessSequenceTO_ExporterImpl;
  new AccessTO_ExporterImpl;
  new ApplicationFieldTO_ExporterImpl;
  new ApplicationTO_ExporterImpl;
  new AttributeMapTO_ExporterImpl;
  new ConditionGroupTO_ExporterImpl;
  new ConditionTableTO_ExporterImpl;
  new ConditionTechniqueFieldTO_ExporterImpl;
  new ConditionTypeTO_ExporterImpl;
  new FieldTO_ExporterImpl;
  new ProcedureTO_ExporterImpl;
  new StepTO_ExporterImpl;
  new UsageFieldTO_ExporterImpl;
  new DynamicConditionRecordBuffer_ExporterImpl;
  new ConditionRecordTO_ExporterImpl;
  new PricingConditionTypeBuilder_ExporterImpl;
  new PricingProcedureBuilder_ExporterImpl;
  new PricingConditionTypeTO_ExporterImpl;
  new PricingProcedureTO_ExporterImpl;
  new PricingStepTO_ExporterImpl;
}

var I_classLit = createForPrimitive('int', 'I'), Lcom_google_gwt_lang_CollapsedPropertyHolder_2_classLit = createForClass('com.google.gwt.lang', 'CollapsedPropertyHolder', 646, Ljava_lang_Object_2_classLit), Lcom_google_gwt_lang_JavaClassHierarchySetupUtil_2_classLit = createForClass('com.google.gwt.lang', 'JavaClassHierarchySetupUtil', 648, Ljava_lang_Object_2_classLit), Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForClass('com.google.gwt.lang', 'LongLibBase/LongEmul', null, Ljava_lang_Object_2_classLit), Lcom_google_gwt_lang_ModuleUtils_2_classLit = createForClass('com.google.gwt.lang', 'ModuleUtils', 651, Ljava_lang_Object_2_classLit), D_classLit = createForPrimitive('double', 'D'), C_classLit = createForPrimitive('char', 'C'), Lorg_timepedia_exporter_client_Exportable_2_classLit = createForInterface('org.timepedia.exporter.client', 'Exportable'), Ljava_util_Map$Entry_2_classLit = createForInterface('java.util', 'Map/Entry'), Lcom_sap_spe_condmgnt_customizing_dao_ProcedureDAO_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing.dao', 'ProcedureDAO'), Lcom_sap_spe_pricing_customizing_IExclusionProcedure_2_classLit = createForInterface('com.sap.spe.pricing.customizing', 'IExclusionProcedure'), Lcom_sap_spe_pricing_transactiondata_IPricingCondition_2_classLit = createForInterface('com.sap.spe.pricing.transactiondata', 'IPricingCondition'), Lcom_sap_spe_conversion_IConversionFactor_2_classLit = createForInterface('com.sap.spe.conversion', 'IConversionFactor'), Lcom_sap_spe_condmgnt_customizing_ITableField_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'ITableField'), Lcom_sap_spe_condmgnt_masterdata_IScaleDimension_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'IScaleDimension'), Lcom_sap_spe_pricing_customizing_IPricingConditionType_2_classLit = createForInterface('com.sap.spe.pricing.customizing', 'IPricingConditionType'), Lcom_sap_spe_conversion_to_ExpiringCurrencyTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'ExpiringCurrencyTO', null, Ljava_lang_Object_2_classLit), Lcom_sap_spe_conversion_to_ExpiringCurrenciesObjectTypeTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'ExpiringCurrenciesObjectTypeTO', null, Ljava_lang_Object_2_classLit), Lcom_sap_spe_conversion_to_ExpiringCurrenciesWarningDatesTO_2_classLit = createForClass('com.sap.spe.conversion.to', 'ExpiringCurrenciesWarningDatesTO', null, Ljava_lang_Object_2_classLit), Lcom_sap_spe_condmgnt_masterdata_IConditionRecord_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'IConditionRecord'), Lcom_sap_spe_conversion_IDimensionalValue_2_classLit = createForInterface('com.sap.spe.conversion', 'IDimensionalValue'), Lcom_sap_spe_condmgnt_masterdata_IScaleDimensionAmount_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'IScaleDimensionAmount'), Lcom_sap_spe_condmgnt_masterdata_ITableAttributeBinding_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'ITableAttributeBinding'), Lcom_sap_spe_condmgnt_customizing_IApplication_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'IApplication'), Lcom_sap_spe_condmgnt_customizing_IConditionGroupItem_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'IConditionGroupItem'), Lcom_sap_spe_condmgnt_customizing_IUsageField_2_classLit = createForInterface('com.sap.spe.condmgnt.customizing', 'IUsageField'), Lcom_sap_spe_condmgnt_finding_ICondition_2_classLit = createForInterface('com.sap.spe.condmgnt.finding', 'ICondition'), Lcom_sap_spe_condmgnt_masterdata_ISupplementaryConditionRecord_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'ISupplementaryConditionRecord'), Lcom_sap_spe_condmgnt_finding_IAttributeBinding_2_classLit = createForInterface('com.sap.spe.condmgnt.finding', 'IAttributeBinding'), Lcom_sap_spe_pricing_transactiondata_IVariantCondition_2_classLit = createForInterface('com.sap.spe.pricing.transactiondata', 'IVariantCondition'), Lcom_sap_spe_condmgnt_finding_IConditionAccessTimestamp_2_classLit = createForInterface('com.sap.spe.condmgnt.finding', 'IConditionAccessTimestamp'), Lcom_sap_spe_pricing_transactiondata_IExternalDataSource_2_classLit = createForInterface('com.sap.spe.pricing.transactiondata', 'IExternalDataSource'), Lcom_sap_spe_condmgnt_masterdata_ITracingInput_2_classLit = createForInterface('com.sap.spe.condmgnt.masterdata', 'ITracingInput'), Ljava_util_Map_2_classLit = createForInterface('java.util', 'Map');
var $entry = registerEntry();
var gwtOnLoad = gwtOnLoad = gwtOnLoad_0;
addInitFunctions(init);
setGwtProperty('permProps', [[['locale', 'default'], ['user.agent', 'safari']]]);
$sendStats('moduleStartup', 'moduleEvalEnd');
gwtOnLoad(__gwtModuleFunction.__errFn, __gwtModuleFunction.__moduleName, __gwtModuleFunction.__moduleBase, __gwtModuleFunction.__softPermutationId,__gwtModuleFunction.__computePropValue);
$sendStats('moduleStartup', 'end');
$gwt && $gwt.permProps && __gwtModuleFunction.__moduleStartupDone($gwt.permProps);



        // End GWT code

        var toReturn = $wnd["sapcodpricing"];

        toReturn.version = '';

        return toReturn;
    }

    var isBrowser, globalEnv, document;

    if (typeof window !== 'undefined') { // usual browser window
        isBrowser = true;
        globalEnv = window;
        document = window.document;
    } else if (typeof self !== 'undefined') { // Web Worker
        isBrowser = true;
        globalEnv = self;
        document = {};
    } else if (typeof global !== 'undefined') { // Node.js
        isBrowser = false;
        globalEnv = global;
        document = {};
    } else { // Other environment (example: CouchDB)
        isBrowser = false;
        globalEnv = root;
        document = {};
    }

    var fakeWindow;
    if (isBrowser && !true) {
        fakeWindow = globalEnv;
    } else {
        fakeWindow = {};
        fakeWindow.setTimeout = globalEnv.setTimeout ? globalEnv.setTimeout.bind(globalEnv) : noop;
        fakeWindow.clearTimeout = globalEnv.clearTimeout ? globalEnv.clearTimeout.bind(globalEnv) : noop;
        fakeWindow.setInterval = globalEnv.setInterval ? globalEnv.setInterval.bind(globalEnv) : noop;
        fakeWindow.clearInterval = globalEnv.clearInterval ? globalEnv.clearInterval.bind(globalEnv) : noop;
        // required since GWT 2.8.0
        fakeWindow.Error = globalEnv.Error;
        fakeWindow.Math = globalEnv.Math;
        fakeWindow.RegExp = globalEnv.RegExp;
        fakeWindow.TypeError = globalEnv.TypeError;
    }

    if (!fakeWindow.document) {
        fakeWindow.document = document;
    }

    var exportedApi = getExports(fakeWindow);

    if (typeof exports !== 'undefined') { // NodeJS
        fillExports(exportedApi, exports);
   /* } else if (typeof define === 'function' && define.amd) { // AMD
        define(function () {
            var exportsObj = {};
            fillExports(exportedApi, exportsObj);
            return exportsObj;
        });*/
    } else { // Global
        var path = ["sapcodpricing"];
        var l = path.length - 1;
        var obj = globalEnv;
        for (var i = 0; i < l; i++) {
            obj = obj[path[i]] || (obj[path[i]] = {});
        }
        obj[path[l]] = {};
        fillExports(exportedApi, obj[path[l]]);
    }

    function fillExports(obj, exports) {
        var keys = Object.keys(obj);
        for (var i = 0; i < keys.length; i++) {
            exports[keys[i]] = obj[keys[i]];
        }
    }

    function noop() {}

})(this);
